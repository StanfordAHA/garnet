# How to invoke
# python test.py --genesis-verilog genesis_verif/cb.v --magma-verilog connect_box_width_width_16_num_tracks_10_has_constant1_default_value7_feedthrough_outputs_1111101111.v

import random
import argparse
from bit_vector import BitVector

import magma as m

parser = argparse.ArgumentParser(description="Test the connection box")

parser.add_argument("--genesis-verilog", required=True,
                    help="Verilog file generated by genesis")
parser.add_argument("--magma-verilog", required=True,
                    help="Verilog file generated by magma")

from build_cb_top import cb as magma_cb

args = parser.parse_args()

genesis_cb = m.DefineFromVerilogFile(args.genesis_verilog)[-1]


def get_inputs_and_data_width(circuit):
    data_width = None

    inputs = []
    for port in circuit.interface:
        if port[:3] == "in_":
            inputs.append(port)
            port_width = len(circuit.interface.ports[port])
            if data_width is None:
                data_width = port_width
            else:
                assert data_width == port_width
    return inputs, data_width


inputs, data_width = get_inputs_and_data_width(genesis_cb)

assert (inputs, data_width) == get_inputs_and_data_width(magma_cb), \
    "Inputs should be the same"

testvectors = []

GND = BitVector(0, 1)
VCC = BitVector(0, 1)

# Generate the configuration sequence
# Config logic
ins = [GND for _ in range(len(inputs))]
reset = VCC
config_addr = GND
config_data = GND
config_en = GND
out = GND
read_data = GND
vector = [reset] + ins + [out, config_addr, config_data, config_en, read_data]
# Twiddle the clock 3 times
for i in range(3):
    testvectors.append([BitVector(i % 2, 1)] + vector)


ins = [BitVector(random.randint(0, (1 << data_width) - 1), data_width)
       for _ in range(len(inputs))]
reset = VCC
clk = GND
config_addr = BitVector(random.randint(0, 1 << 31), 32)
config_data = BitVector(random.randint(0, 1 << 31), 32)
config_en = GND
out = ins[0]
vector = [clk, reset] + ins + [out, config_addr, config_data, config_en, read_data]
testvectors.append(vector)

from magma.testing.verilator import compile, run_verilator_test
import shutil
for cb, file in [(genesis_cb, args.genesis_verilog), (magma_cb, args.magma_verilog)]:
    compile(f"build/test_{cb.name}.cpp", cb, testvectors)
    shutil.copy(file, "build")
    run_verilator_test(cb.name, f"test_{cb.name}", cb.name, ["-Wno-fatal"])
