/*=============================================================================
** Module: axi_driver.sv
** Description:
**              driver for the axi interface
** Author: Taeyoung Kong
** Change history:  05/07/2019 - Implement first version of axi driver
**                  05/23/2019 - Change axi_addr_width to 12
**===========================================================================*/

//; # get ifc object from the design
//; my $ifc_obj = $self->get_top_param('AXIL_IFC');

//; my $axi_data_width = $self->get_top_param('axi_data_width');
//; my $axi_addr_width = $self->get_top_param('axi_addr_width');

// AXI addrmap
typedef enum logic [5:0] {
    am_test,
    am_global_reset,
    am_soft_reset,
    am_stall,
    am_strm_start_pulse,
    am_pc_start_pulse,
    am_strm_f2g_ier,
    am_strm_g2f_ier,
    am_par_cfg_g2f_ier,
    am_global_ier,
    am_strm_f2g_isr,
    am_strm_g2f_isr,
    am_par_cfg_g2f_isr,
    am_global_isr,
    am_cgra_config_addr,
    am_cgra_config_wr_data,
    am_cgra_config_write,
    am_cgra_config_read,
    am_cgra_config_rd_data
} axi_addrmap_t;

typedef struct {
    logic [`$axi_data_width-1`:0] data_in;
    logic [`$axi_data_width-1`:0] data_out;
    logic [`$axi_addr_width-1`:0] addr;
} axi_trans_t;

//============================================================================//
// Class axi_driver
//============================================================================//
class `mname`;
    virtual `$ifc_obj->mname()`.test ifc; // interface for the axi signals

    int verbose;

    // current transaction 
    axi_trans_t cur_trans;
   
    function new(virtual `$ifc_obj->mname()`.test ifc);
        this.verbose = 1;
        this.ifc = ifc;
    endfunction 

    //============================================================================//
    // Extern tasks in axi driver
    //============================================================================//
    // write axi instruction
    extern task axi_write(input [`$axi_addr_width-1`:0] addr, 
                                 input [`$axi_data_width-1`:0] data);
    // read axi instruction
    extern task axi_read(input [`$axi_addr_width-1`:0] addr);

    extern task Write(input axi_trans_t new_trans);
    extern task Read(input axi_trans_t new_trans);

    // get the results of the latest transaction sent
    extern function axi_trans_t GetResult();

    // reset
    extern task Reset();

endclass: `mname`


//============================================================================//
// Axi driver function
// Get the results of the latest transaction sent
//============================================================================//
function axi_trans_t `mname`::GetResult();
    return cur_trans;
endfunction // axi_trans_t
   
//============================================================================//
// AXI transaction task
//============================================================================//
task `mname`::Reset();
  repeat (2) @(posedge this.ifc.clk);
  this.ifc.awaddr = 0;
  this.ifc.awvalid = 0;
  this.ifc.wdata = 0;
  this.ifc.wvalid = 0;
  this.ifc.araddr = 0;
  this.ifc.arvalid = 0;
  this.ifc.rready = 0;
  repeat (2) @(posedge this.ifc.clk);
endtask // Reset

task `mname`::Write(input axi_trans_t new_trans);
    cur_trans = new_trans;
    @(posedge this.ifc.clk);
    this.ifc.awaddr = cur_trans.addr;
    this.ifc.awvalid = 1;
    for (int i=0; i<100; i++) begin
        if (this.ifc.awready==1) break;
        @(posedge this.ifc.clk);
    end
    @(posedge this.ifc.clk);
    this.ifc.awvalid = 0;
    @(posedge this.ifc.clk);
    this.ifc.wdata = cur_trans.data_in;
    this.ifc.wvalid = 1;
    for (int i=0; i<100; i++) begin
        if (this.ifc.wready==1) break;
        @(posedge this.ifc.clk);
    end
    @(posedge this.ifc.clk);
    this.ifc.wvalid = 0;
    @(posedge this.ifc.clk);
    this.ifc.bready = 1;
    for (int i=0; i<100; i++) begin
        if (this.ifc.bvalid==1) break;
        @(posedge this.ifc.clk);
    end
    @(posedge this.ifc.clk);
    this.ifc.bready=0;
    @(posedge this.ifc.clk);
endtask // Write

task `mname`::Read(input axi_trans_t new_trans);
    cur_trans = new_trans;
    @(posedge this.ifc.clk);
    this.ifc.araddr = cur_trans.addr;
    this.ifc.arvalid = 1;
    this.ifc.rready = 1;
    for (int i=0; i<100; i++) begin
        if (this.ifc.arready==1) break;
        @(posedge this.ifc.clk);
    end
    @(posedge this.ifc.clk);
    this.ifc.arvalid = 0;
    @(posedge this.ifc.clk);
    for (int i=0; i<100; i++) begin
        if (this.ifc.rvalid==1) break;
        @(posedge this.ifc.clk);
    end
    cur_trans.data_out = this.ifc.rdata;
    @(posedge this.ifc.clk);
    this.ifc.rready = 0;
    @(posedge this.ifc.clk);
endtask // Read

task `mname`::axi_write(input [`$axi_addr_width-1`:0] addr,
                               input [`$axi_data_width-1`:0] data);
    axi_trans_t axi_trans;
    axi_trans.addr = addr;
    axi_trans.data_in = data;
    Write(axi_trans);
endtask // axi_write

task `mname`::axi_read(input [`$axi_addr_width-1`:0] addr);
    axi_trans_t axi_trans;
    axi_trans.addr = addr;
    Read(axi_trans);
endtask // axi_read
