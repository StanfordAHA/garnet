/* *****************************************************************************
 * File: test.v
 * Author: Ofer Shacham
 * 
 * Description:
 * simple test bench for template
 * 
 *
 * Change bar:
 * -----------
 * Date                  Author     Description
 * Apr 3, 2010  shacham  initial version
 *  
 * 
 * ****************************************************************************/

////////////////////////////// IMPORTANT MESSAGE: //////////////////////////////
// Note that programs are written using object oriented programming. They
// are closer to software than to hardware. There is therefore no real need
// in a genesis type parameterization.
////////////////////////////////////////////////////////////////////////////////

program automatic `mname`(interface dut_ifc);
    
typedef enum logic [1:0] {io_ctrl = 2'b01, cfg_ctrl = 2'b10} tile_id;

    // some variables to control the test
    int seed;
    int rnd0;
    int fd;
    int config_count=0;
    enum {reading, writing, other, glb_reading, glb_writing, glb_sram_reading, glb_sram_writing} state = other; 
    enum {axi4, jtag} gc_interface = jtag; 

    // Instantiate a jtag driver
    //; my $jtag_drvr_obj = generate_base('JTAGDriver', 'jdrv');
    //; my $axi_drvr_obj = generate_base('axi_driver', 'axi_driver');
    `$jtag_drvr_obj->instantiate`;
    `$axi_drvr_obj->instantiate`;

    //;my $config_addr_width = parameter(name => 'config_addr_width', val=>32);
    //;my $config_data_width = parameter(name => 'config_data_width', val=>32);

    jtag_regfile_trans_t jtag_trans;
    axi_trans_t axi_trans;

    // run_test task
    task run_test; begin
    logic [`$config_addr_width-1`:0] addr;
    logic [`$config_data_width-1`:0] data;

    jdrv.ReadID(jtag_trans);
    
    // initialization of structs:
    jtag_trans.domain = sc_domain;
    jtag_trans.addr = `$config_addr_width`'d1;
    jtag_trans.op = write;
    jtag_trans.data_out = '0;
    
    @(posedge dut_ifc.Clk);
    switch_clk(0); // Switch to slow clk

    @(posedge dut_ifc.Clk);
    switch_clk(1); // Switch to fast clk

    @(posedge dut_ifc.Clk);
    write_gc_reg(wr_rd_delay_reg, 32'd10);
    repeat(2) jdrv.Next_tck();
    check_register(top.dut.rd_delay_reg,jtag_trans.data_in); 

    @(posedge dut_ifc.Clk);
    write_config();

    @(posedge dut_ifc.Clk);
    read_config(); 
    
    @(posedge dut_ifc.Clk);
    write_gc_reg(wr_delay_sel_reg, 32'b1);
    repeat(2) jdrv.Next_tck();
    check_register(top.dut.delay_sel, jtag_trans.data_in);
    
    @(posedge dut_ifc.Clk);
    read_gc_reg(rd_delay_sel_reg);
    check_register(top.dut.delay_sel, jtag_trans.data_out);

    @(posedge dut_ifc.Clk);
    write_gc_reg(wr_rd_delay_reg, 32'd10);
    repeat(2) jdrv.Next_tck();
    check_register(top.dut.rd_delay_reg,jtag_trans.data_in); 

    @(posedge dut_ifc.Clk);
    read_config(); 
    
    @(posedge dut_ifc.Clk);
    read_gc_reg(rd_rd_delay_reg);
    check_register(top.dut.rd_delay_reg,jtag_trans.data_out);   

    @(posedge dut_ifc.Clk);
    read_config();
    
    @(posedge dut_ifc.Clk);
    switch_clk(1); // Switch to fast clk
 
    @(posedge dut_ifc.Clk);
    read_gc_reg(read_clk_domain);
    check_register(top.dut.sys_clk_activated,jtag_trans.data_out);

    @(posedge dut_ifc.Clk);
    switch_clk(0); // Switch to slow clock
 
    @(posedge dut_ifc.Clk);
    read_gc_reg(read_clk_domain);
    check_register(top.dut.sys_clk_activated,jtag_trans.data_out);
    
    @(posedge dut_ifc.Clk);
    write_gc_reg(wr_delay_sel_reg,32'b10);
    repeat(2) jdrv.Next_tck();
    check_register(top.dut.delay_sel,jtag_trans.data_in);

    @(posedge dut_ifc.Clk);
    switch_clk(1); //switch to fast clock 

    @(posedge dut_ifc.Clk);
    read_gc_reg(read_clk_domain);
    check_register(top.dut.sys_clk_activated,jtag_trans.data_out);
    
    @(posedge dut_ifc.Clk);
    write_gc_reg(write_stall,32'h1);
    repeat(2) jdrv.Next_tck();
    check_register(top.dut.cgra_stalled,jtag_trans.data_in);
    
    @(posedge dut_ifc.Clk);
    read_gc_reg(read_stall);
    check_register(top.dut.cgra_stalled,jtag_trans.data_out);
    
    @(posedge dut_ifc.Clk);
    jtag_trans.op = advance_clk;
    jtag_trans.data_in = 32'd6;
    jtag_trans.addr = 32'b1010;
    jtag_trans.done = 0;
    jdrv.Send(jtag_trans);
    $fdisplay(fd,"%t: %m: Trans 6 (advance_clk):  Address to GC=%d, Data to GC=%d",    
            $time, ifc.config_addr_gc2cgra, ifc.config_data_gc2cgra,1);
    //TODO: TEST CLOCK ADVANCE
 
    @(posedge dut_ifc.Clk);
    write_gc_reg(write_stall,32'd0);
    check_register(top.dut.cgra_stalled,jtag_trans.data_in);    
    
    @(posedge dut_ifc.Clk);
    read_config();
 
    @(posedge dut_ifc.Clk);
    read_gc_reg(wr_A050);
    check_register(32'hA050,jtag_trans.data_out);
    

    @(posedge dut_ifc.Clk);
    write_gc_reg(wr_TST, 32'd123);
    repeat(2) jdrv.Next_tck();
    check_register(top.dut.TST,jtag_trans.data_in);
 
    @(posedge dut_ifc.Clk);
    read_gc_reg(rd_TST);
    check_register(top.dut.TST,jtag_trans.data_out);   
    
    @(posedge dut_ifc.Clk);
    jtag_trans.op = global_reset;
    jtag_trans.data_in = 32'd50;
    jtag_trans.done = 0;
    jdrv.Send(jtag_trans);
    $fdisplay(fd,"%t: %m: Trans 14 (global_reset):  Address to GC=%d, Data to GC=%d",  
            $time, ifc.config_addr_gc2cgra, ifc.config_data_gc2cgra);
    check_register(top.dut.reset_out,1);
    //TODO: CHECK RESET ASSERTION LENGTH

    @(posedge dut_ifc.Clk);
    write_glb_config(32'd1234, 32'd5678);

    @(posedge dut_ifc.Clk);
    read_glb_config(32'd1234);

    @(posedge dut_ifc.Clk);
    write_glb_sram_config(32'd9876, 32'd5432);

    @(posedge dut_ifc.Clk);
    read_glb_sram_config(32'd9876);


    // Check whether cgra_start is cleared on cgra_done_pulse
    repeat(10) jdrv.Next_tck();
    ifc.cgra_done_pulse = 1;
    @(posedge dut_ifc.Clk);
    ifc.cgra_done_pulse = 0;
    repeat(10) jdrv.Next_tck();
    check_register(top.dut.int_cgra_start, 0);


    // Check whether cgra_start is cleared on cgra_done_pulse
    repeat(10) jdrv.Next_tck();
    ifc.cgra_done_pulse = 1;
    @(posedge dut_ifc.Clk);
    ifc.cgra_done_pulse = 0;
    repeat(10) jdrv.Next_tck();
    // it auto starts.
    check_register(top.dut.int_cgra_start, 0);

    repeat(10) jdrv.Next_tck();
    ifc.cgra_done_pulse = 1;
    @(posedge dut_ifc.Clk);
    ifc.cgra_done_pulse = 0;
    repeat(10) jdrv.Next_tck();
    check_register(top.dut.int_cgra_start, 0);

    repeat(10) jdrv.Next_tck();
    ifc.config_done_pulse = 1;
    @(posedge dut_ifc.Clk);
    ifc.config_done_pulse = 0;
    repeat(10) jdrv.Next_tck();
    check_register(top.dut.int_config_start, 0);

    // Check whether config_start is cleared on config_done_pulse
    repeat(20) jdrv.Next_tck();
    ifc.config_done_pulse = 1;
    @(posedge dut_ifc.Clk);
    ifc.config_done_pulse = 0;
    repeat(20) jdrv.Next_tck();
    check_register(top.dut.int_config_start, 0);
    check_register(top.dut.interrupt, 1);

    repeat(50) jdrv.Next_tck();
    end
    endtask // run_test


    /****************************************************************************
       * Control the simulation
       * *************************************************************************/
    initial begin
        $display("%t:\t********************Loading Arguments***********************",$time);
        init_test;
        fd = $fopen("test.log","w");
        
        $display("%t:\t*************************START*****************************",$time);
        @(negedge ifc.Reset);
        repeat (10) @(posedge dut_ifc.Clk);
        run_test;
        repeat (10) @(posedge dut_ifc.Clk);
        $display("%t:\t*************************FINISH****************************",$time);
        $fclose(fd);
        $finish(2);
    end
    
    task write_config();
    begin
        state = writing;
        gc_interface = jtag;
        jtag_trans.op = write;
        jtag_trans.addr = $urandom_range((2 ** `$config_addr_width`)-1);
        jtag_trans.data_in = $urandom_range((2 ** `$config_data_width`)-1);
        jtag_trans.done = 0;
        config_count++;
        jdrv.Send(jtag_trans);
        $fdisplay(fd,"%t: %m: Trans %d (Write):    Address to GC=%d, Data to GC=%d",  
            $time, config_count,ifc.config_addr_gc2cgra, ifc.config_data_gc2cgra);
        @(posedge dut_ifc.Clk);
        state = other;
    end
    endtask //write_config
       
    task read_config();
    begin
        state = reading;
        gc_interface = jtag;
        jtag_trans.op = read;
        jtag_trans.addr = $urandom_range((2 ** `$config_addr_width`)-1);
        jtag_trans.data_in = $urandom_range((2 ** `$config_data_width`)-1);
        jtag_trans.done = 0;
        ifc.config_data_cgra2gc = $urandom_range((2 ** `$config_data_width`)-1);
        jdrv.Send(jtag_trans);
        config_count++;
        jtag_trans = jdrv.GetResult();
        $fdisplay(fd,"%t: %m: Trans %d (Read):  Address to GC=%d, Data to GC=%d, Data from CGRA=%d, Data Read=%d",  
            $time, config_count, ifc.config_addr_gc2cgra, ifc.config_data_gc2cgra, top.dut.config_data_in, jtag_trans.data_out);
        state = other;
    end
    endtask //read_config
    
    task switch_clk(int data_in);
    begin
        gc_interface = jtag;
        jtag_trans.op = switch_clk;
        jtag_trans.data_in = data_in;
        jtag_trans.done = 0;
        jdrv.Send(jtag_trans);
        config_count++;
        $fdisplay(fd,"%t: %m: Trans %d (sys_clk_switch):    Address to GC=%d, Data to GC=%d",  
                  $time, config_count, ifc.config_addr_gc2cgra, ifc.config_data_gc2cgra);
        repeat(2) jdrv.Next_tck();
        check_register(top.dut.clk_switch_request,jtag_trans.data_in);
        repeat(100) jdrv.Next_tck();
        repeat(200) begin
            jdrv.Next_tck();
            // TODO: This assertion is not working correctly
            if(data_in==1)
                assert(top.dut.clk_out == top.dut.clk_in); //make sure we've actually switched to the fast clk;
            else if(data_in==0)
                assert(top.dut.clk_out == top.dut.tck); //make sure we've actually switched to the fast clk;
            end
    end
    endtask //switch clk
    
    task read_gc_reg(regfile_op_t op);
    begin
        gc_interface = jtag;
        jtag_trans.op = op;
        jtag_trans.data_out = 0;
        jtag_trans.done = 0;
        jdrv.Send(jtag_trans);
        jtag_trans = jdrv.GetResult();
        config_count++;
        $fdisplay(fd,"%t: %m: Trans %d (read_gc_reg):  Address to GC=%d, Data to GC=%d, Data out from GC=%d",  
                  $time, config_count, ifc.config_addr_gc2cgra, ifc.config_data_gc2cgra, jtag_trans.data_out);
    end
    endtask //read_gc_reg
    
    task write_gc_reg(regfile_op_t op,int data_in);
    begin
        gc_interface = jtag;
        jtag_trans.op = op;
        jtag_trans.data_out = 0;
        jtag_trans.data_in = data_in;
        jtag_trans.done = 0;
        jdrv.Send(jtag_trans);
        config_count++;
        $fdisplay(fd,"%t: %m: Trans %d (write_gc_reg):  Address to GC=%d, Data to GC=%d, Data out from GC=%d",  
                  $time, config_count, ifc.config_addr_gc2cgra, ifc.config_data_gc2cgra, jtag_trans.data_out);
    end
    endtask //write_gc_reg
 
    task write_glb_config(int addr, int data_in);
    begin
        gc_interface = jtag;
        state = glb_writing;
        jtag_trans.op = glb_write_config;
        jtag_trans.data_out = 0;
        jtag_trans.addr = addr;
        jtag_trans.data_in = data_in;
        jtag_trans.done = 0;
        jdrv.Send(jtag_trans);
        config_count++;
        $fdisplay(fd,"%t: %m: Trans %d (write_glb_config):  Address to GC=%d, Data to GC=%d, Data out from GC=%d",  
                  $time, config_count, ifc.glb_config_addr_gc2cgra, ifc.glb_config_data_gc2cgra, jtag_trans.data_out);
        state = other;
    end
    endtask //write_glb_config

    task read_glb_config(int addr);
    begin
        state = glb_reading;
        gc_interface = jtag;
        jtag_trans.op = glb_read_config;
        jtag_trans.addr = addr;
        jtag_trans.done = 0;
        ifc.glb_config_data_cgra2gc = $urandom_range((2 ** `$config_data_width`)-1);
        jdrv.Send(jtag_trans);
        config_count++;
        jtag_trans = jdrv.GetResult();
        $fdisplay(fd,"%t: %m: Trans %d (read_glb_config):  Address to GC=%d, Data to GC=%d, Data from CGRA=%d, Data Read=%d",  
                  $time, config_count, ifc.glb_config_addr_gc2cgra, ifc.glb_config_data_gc2cgra, top.dut.glb_config_data_in, jtag_trans.data_out);
        state = other;
    end
    endtask //read_glb_config
    
    task write_glb_sram_config(int addr, int data_in);
    begin
        gc_interface = jtag;
        state = glb_sram_writing;
        jtag_trans.op = glb_sram_write_config;
        jtag_trans.data_out = 0;
        jtag_trans.addr = addr;
        jtag_trans.data_in = data_in;
        jtag_trans.done = 0;
        jdrv.Send(jtag_trans);
        config_count++;
        $fdisplay(fd,"%t: %m: Trans %d (write_glb_sram_config):  Address to GC=%d, Data to GC=%d, Data out from GC=%d",  
                  $time, config_count, ifc.glb_sram_config_addr_gc2cgra, ifc.glb_sram_config_data_gc2cgra, jtag_trans.data_out);
        state = other;
    end
    endtask //write_glb_sram_config

    task read_glb_sram_config(int addr);
    begin
        state = glb_sram_reading;
        gc_interface = jtag;
        jtag_trans.op = glb_sram_read_config;
        jtag_trans.addr = addr;
        jtag_trans.done = 0;
        ifc.glb_sram_config_data_cgra2gc = $urandom_range((2 ** `$config_data_width`)-1);
        jdrv.Send(jtag_trans);
        config_count++;
        jtag_trans = jdrv.GetResult();
        $fdisplay(fd,"%t: %m: Trans %d (read_glb_sram_config):  Address to GC=%d, Data to GC=%d, Data from CGRA=%d, Data Read=%d",  
                  $time, config_count, ifc.glb_sram_config_addr_gc2cgra, ifc.glb_sram_config_data_gc2cgra, top.dut.glb_sram_config_data_in, jtag_trans.data_out);
        state = other;
    end
    endtask //read_glb_sram_config

    // task write_cgra_ctrl_reg(int addr, int data_in);
    // begin
    //     gc_interface = jtag;
    //     jtag_trans.op = cgra_ctrl_write;
    //     jtag_trans.data_out = 0;
    //     jtag_trans.addr = addr;
    //     jtag_trans.data_in = data_in;
    //     jtag_trans.done = 0;
    //     jdrv.Send(jtag_trans);
    //     config_count++;
    //     $fdisplay(fd,"%t: %m: Trans %d (write_cgra_ctrl_reg):  Address to GC=%d, Data to GC=%d, Data out from GC=%d",  
    //               $time, config_count, ifc.config_addr_gc2cgra, ifc.config_data_gc2cgra, jtag_trans.data_out);
    // end
    // endtask //write_cgra_ctrl_reg

    // task read_cgra_ctrl_reg(int addr);
    // begin
    //     gc_interface = jtag;
    //     jtag_trans.op = cgra_ctrl_read;
    //     jtag_trans.addr = addr;
    //     jtag_trans.done = 0;
    //     jdrv.Send(jtag_trans);
    //     config_count++;
    //     jtag_trans = jdrv.GetResult();
    //     $fdisplay(fd,"%t: %m: Trans %d (read_cgra_ctrl_reg):  Address to GC=%d, Data to GC=%d, Data from CGRA=%d, Data Read=%d",  
    //               $time, config_count, ifc.config_addr_gc2cgra, ifc.config_data_gc2cgra, top.dut.config_data_in, jtag_trans.data_out);
    //     state = other;
    // end
    // endtask //read_cgra_ctrl_reg

    // task axi_write_config(int addr, int data);
    // begin
    //     gc_interface = axi4;
    //     state = writing;
    //     config_count++;
    //     // first write to cgra_config_addr register
    //     axi_trans.addr = axi_cgra_config_addr;
    //     axi_trans.data_in = addr;
    //     axi_driver.axi_write(axi_trans.addr, axi_trans.data_in);

    //     axi_trans.addr = axi_cgra_config_data;
    //     axi_trans.data_in = data;
    //     axi_driver.axi_write(axi_trans.addr, axi_trans.data_in);
    //     axi_trans = axi_driver.GetResult();
    //     $fdisplay(fd,"%t: %m: Trans %d (AXI4 write):  Address to CGRA=%d, Data to CGRA=%d",  
    //         $time, config_count, ifc.AWADDR, ifc.WDATA);
    //     repeat (500) @(posedge dut_ifc.Clk); 
    //     state = other;
    // end
    // endtask

    // task axi_read_config(int addr, int data);
    // begin
    //     gc_interface = axi4;
    //     state = reading;
    //     config_count++;
    //     ifc.config_data_cgra2gc = data; //$urandom_range((2 ** `$config_data_width`)-1);

    //     axi_trans.addr = axi_cgra_config_addr;
    //     axi_trans.data_in = addr;
    //     axi_driver.axi_write(axi_trans.addr, axi_trans.data_in);

    //     axi_trans.addr = axi_cgra_config_data;
    //     axi_driver.axi_read(axi_trans.addr);
    //     axi_trans = axi_driver.GetResult();
    //     $fdisplay(fd,"%t: %m: Trans %d (AXI4 Read):  Address to CGRA=%d, Data from CGRA=%d, Data Read=%d",  
    //         $time, config_count, ifc.ARADDR, top.dut.config_data_in, axi_trans.data_out);
    //     repeat (500) @(posedge dut_ifc.Clk); 
    //     assert(top.dut.config_data_in == axi_trans.data_out);
    //     state = other;
    // end
    // endtask

    // task axi_write_glb_config(tile_id _tile, bit[3:0] _feature, bit[3:0] _reg, int data);
    // begin
    //     gc_interface = axi4;
    //     state = glb_writing;
    //     axi_trans.addr = {{_tile}, {_feature}, {_reg}, {2'b00}};
    //     axi_trans.data_in = data;
    //     config_count++;
    //     axi_driver.axi_write(axi_trans.addr, axi_trans.data_in);
    //     axi_trans = axi_driver.GetResult();
    //     $fdisplay(fd,"%t: %m: Trans %d (AXI4 glb write):  Address to CGRA=%d, Data to CGRA=%d",  
    //         $time, config_count, ifc.AWADDR, ifc.WDATA);
    //     repeat (500) @(posedge dut_ifc.Clk); 
    //     state = other;
    // end
    // endtask

    // task axi_read_glb_config(tile_id _tile, bit[3:0] _feature, bit[3:0] _reg, int data);
    // begin
    //     gc_interface = axi4;
    //     state = glb_reading;
    //     config_count++;
    //     ifc.glb_config_data_cgra2gc = data; //$urandom_range((2 ** `$config_data_width`)-1);
    //     axi_trans.addr = {{_tile}, {_feature}, {_reg}, {2'b00}};
    //     axi_driver.axi_read(axi_trans.addr);
    //     axi_trans = axi_driver.GetResult();
    //     $fdisplay(fd,"%t: %m: Trans %d (AXI4 glb Read):  Address to CGRA=%d, Data from CGRA=%d, Data Read=%d",  
    //         $time, config_count, ifc.ARADDR, top.dut.glb_config_data_in, axi_trans.data_out);
    //     repeat (500) @(posedge dut_ifc.Clk); 
    //     assert(top.dut.glb_config_data_in == axi_trans.data_out);
    //     state = other;
    // end
    // endtask

    // task axi_write_glb_sram_config(int addr, int data);
    // begin
    //     gc_interface = axi4;
    //     state = glb_sram_writing;
    //     config_count++;
    //     axi_trans.addr = axi_glb_sram_config_addr;
    //     axi_trans.data_in = addr;
    //     axi_driver.axi_write(axi_trans.addr, axi_trans.data_in);

    //     axi_trans.addr = axi_glb_sram_config_data;
    //     axi_trans.data_in = data;
    //     axi_driver.axi_write(axi_trans.addr, axi_trans.data_in);
    //     axi_trans = axi_driver.GetResult();
    //     $fdisplay(fd,"%t: %m: Trans %d (AXI4 glb SRAM write):  Address to CGRA=%d, Data to CGRA=%d",  
    //         $time, config_count, ifc.AWADDR, ifc.WDATA);
    //     repeat (500) @(posedge dut_ifc.Clk); 
    //     state = other;
    // end
    // endtask

    // task axi_read_glb_sram_config(int addr, int data);
    // begin
    //     gc_interface = axi4;
    //     state = glb_sram_reading;
    //     config_count++;
    //     ifc.glb_sram_config_data_cgra2gc = data; //$urandom_range((2 ** `$config_data_width`)-1);

    //     axi_trans.addr = axi_glb_sram_config_addr;
    //     axi_trans.data_in = addr;
    //     axi_driver.axi_write(axi_trans.addr, axi_trans.data_in);

    //     axi_trans.addr = axi_glb_sram_config_data;
    //     axi_driver.axi_read(axi_trans.addr);
    //     axi_trans = axi_driver.GetResult();
    //     $fdisplay(fd,"%t: %m: Trans %d (AXI4glb SRAM  Read):  Address to CGRA=%d, Data from CGRA=%d, Data Read=%d",  
    //         $time, config_count, ifc.ARADDR, top.dut.glb_sram_config_data_in, axi_trans.data_out);
    //     assert(top.dut.glb_sram_config_data_in == axi_trans.data_out);
    //     repeat (500) @(posedge dut_ifc.Clk); 
    //     state = other;
    // end
    // endtask

    // task axi_write(int addr, int data);
    // begin
    //     gc_interface = axi4;
    //     config_count++;
    //     axi_trans.addr = addr;
    //     axi_trans.data_in = data;
    //     axi_driver.axi_write(axi_trans.addr, axi_trans.data_in);
    //     axi_trans = axi_driver.GetResult();
    //     $fdisplay(fd,"%t: %m: Trans %d (write_gc_reg):  Address to CGRA=%d, Data to CGRA=%d",  
    //         $time, config_count, ifc.AWADDR, ifc.WDATA);
    //     repeat (500) @(posedge dut_ifc.Clk); 
    //     state = other;
    // end
    // endtask

    // task axi_read(int addr);
    // begin
    //     gc_interface = axi4;
    //     config_count++;
    //     axi_trans.addr = addr;
    //     axi_driver.axi_read(axi_trans.addr);
    //     axi_trans = axi_driver.GetResult();
    //     $fdisplay(fd,"%t: %m: Trans %d (write_gc_reg):  Address to CGRA=%d, Data to CGRA=%d",  
    //         $time, config_count, ifc.AWADDR, ifc.WDATA);
    //     repeat (500) @(posedge dut_ifc.Clk); 
    //     state = other;
    // end
    // endtask

    task init_test();
    begin
        // read user input
        //ProcessArgs();
        rnd0 = $random(seed); // initial the random number generator
        
        // init the environment
        jdrv = new(dut_ifc);
        jdrv.Zero();

        axi_driver = new(dut_ifc);
        axi_driver.Reset();
        
        //ZERO out any inputs to the DUT
        repeat (2) @(posedge dut_ifc.Clk); 
    end
    endtask // init_test

    task check_register(int register, int value);
        begin
            assert(top.dut.cgra_cfg_write == 0);
            assert(top.dut.cgra_cfg_read == 0);
            assert(register == value) else $display("reg: %d, val: %d",register,value);
        end
    endtask // check_register
 
endprogram : `mname`
    
