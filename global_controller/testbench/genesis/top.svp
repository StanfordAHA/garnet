/*************************************************************************
 ** From Perforce:
 **
 ** $Id: //Smart_design/ChipGen/moduleTest/Primitives/top.vp#5 $
 ** $DateTime: 2010/03/25 11:23:45 $
 ** $Change: 8474 $
 ** $Author: shacham $
 *************************************************************************/

/* *****************************************************************************
 * File: top.vp
 * Author: Ofer Shacham
 * 
 * Description:
 * simple top that instantiate the test and the dut
 * 
 *
 * Change bar:
 * -----------
 * Date          Author   Description
 * Mar 19, 2010  shacham  initial version
 * Apr 13, 2020  kongty   just added axi (This perl based testbench MUST be replaced in the future)
 *  
 * ****************************************************************************/

/*******************************************************************************
 * Generation Control Definitions
 ******************************************************************************/

/*******************************************************************************
 * Simulation Control Definitions
 ******************************************************************************/
//; my $max_cyc = parameter(Name=>'MaxCycles', Val=>10000000, Min=>1, Step=>1, 
//;                Doc=>'Max number of simulation cycles');
//; my $design_name = parameter(Name=>'DesignName', Val=>'global_controller', 
//;                Doc=>'This is a generic top, so what is the design name to use?');
//; my $IDCODE = $self->define_param(IDCODE => 1);
//; my $cfg_data_width = parameter(Name=>'cfg_data_width',val=>32);
//; my $cfg_addr_width = parameter(Name=>'cfg_addr_width',val=>32);
//; my $axi_addr_width = parameter(Name=>'axi_addr_width',val=>13);
//; my $axi_data_width = parameter(NAME => 'axi_data_width', VAL => 32, DOC => 'Width of axi_data');
//; my $cfg_op_width = parameter(Name=>'cfg_op_width',val=>5);
//; my $block_axi_addr_width = parameter(NAME => 'block_axi_addr_width', VAL => 12, DOC => 'Width of axi_addr for sub block');
//; my $num_glb_tiles = parameter(NAME => 'num_glb_tiles', VAL => 16, DOC => 'number of global buffer tiles');
//; my $glb_addr_width = parameter(NAME => 'glb_addr_width', VAL => 22, DOC => 'Width of glb_addr');
//;
//; # Set up IO list for JTAG interface to pass to JTAGDriver 
//; my $io_list = $self->force_param(IO_LIST => 
//;        [    
//;            {name => 'cgra_cfg_rd_data', width => $cfg_data_width,  direction => 'in', bsr => 'no',  pad => 'digital', orientation => 'right'},
//;            {name => 'cgra_cfg_wr_data', width => $cfg_data_width,  direction => 'out', bsr => 'no',  pad => 'digital', orientation => 'right'},
//;            {name => 'cgra_cfg_addr', width => $cfg_addr_width,  direction => 'out', bsr => 'no',  pad => 'digital', orientation => 'right'},
//;            {name => 'glb_cfg_rd_data', width => $axi_data_width,  direction => 'in', bsr => 'no',  pad => 'digital', orientation => 'right'},
//;            {name => 'glb_cfg_rd_data_valid', width => 1,  direction => 'in', bsr => 'no',  pad => 'digital', orientation => 'right'},
//;            {name => 'glb_cfg_rd_addr', width => $block_axi_addr_width,  direction => 'out', bsr => 'no',  pad => 'digital', orientation => 'right'},
//;            {name => 'glb_cfg_wr_data', width => $axi_data_width,  direction => 'out', bsr => 'no',  pad => 'digital', orientation => 'right'},
//;            {name => 'glb_cfg_wr_addr', width => $block_axi_addr_width,  direction => 'out', bsr => 'no',  pad => 'digital', orientation => 'right'},
//;            {name => 'sram_cfg_rd_data', width => $axi_data_width,  direction => 'in', bsr => 'no',  pad => 'digital', orientation => 'right'},
//;            {name => 'sram_cfg_rd_data_valid', width => 1,  direction => 'in', bsr => 'no',  pad => 'digital', orientation => 'right'},
//;            {name => 'sram_cfg_rd_addr', width => $glb_addr_width,  direction => 'out', bsr => 'no',  pad => 'digital', orientation => 'right'},
//;            {name => 'sram_cfg_wr_data', width => $axi_data_width,  direction => 'out', bsr => 'no',  pad => 'digital', orientation => 'right'},
//;            {name => 'sram_cfg_wr_addr', width => $glb_addr_width,  direction => 'out', bsr => 'no',  pad => 'digital', orientation => 'right'},
//;            {name => 'strm_start_pulse', width => $num_glb_tiles,  direction => 'out', bsr => 'no',  pad => 'digital', orientation => 'right'},
//;            {name => 'pc_start_pulse', width => $num_glb_tiles,  direction => 'out', bsr => 'no',  pad => 'digital', orientation => 'right'},
//;            {name => 'strm_f2g_interrupt_pulse', width => $num_glb_tiles,  direction => 'in', bsr => 'no',  pad => 'digital', orientation => 'right'},
//;            {name => 'strm_g2f_interrupt_pulse', width => $num_glb_tiles,  direction => 'in', bsr => 'no',  pad => 'digital', orientation => 'right'},
//;            {name => 'pcfg_g2f_interrupt_pulse', width => $num_glb_tiles,  direction => 'in', bsr => 'no',  pad => 'digital', orientation => 'right'}
//;        ]);
//; my $num_ios = scalar(@{$io_list});

//; my $sc_jtag2gc_ifc = $self->unique_inst('cfg_ifc', 'sc_jtag2gc_ifc',
//;                                          DataWidth => $cfg_data_width,
//;                                          AddrWidth => $cfg_addr_width,
//;                                          OpcodeWidth => $cfg_op_width);
//; my $sc_cfg_ifc_ref = parameter(name=>'SC_CFG_IFC_REF',val=>$sc_jtag2gc_ifc);
//; my $tc_cfg_ifc_ref = parameter(name=>'TC_CFG_IFC_REF',val=>$sc_jtag2gc_ifc);

/*******************************************************************************
 * Module top:
 ******************************************************************************/

module `mname`();
   logic Clk;
   logic Reset;

   /****************************************************************************
    * Instantiate clocks
    * *************************************************************************/
    //; my $clocker_obj = generate('clocker', 'clocker', CLK_PERIOD=>10, RST_PERIOD=>20);
    `$clocker_obj->instantiate` (.Clk(Clk), .Reset(Reset));

   // timer:
   initial begin
      repeat(`$max_cyc`) @(posedge Clk);
      $display("\n%0t\tERROR: The `$max_cyc` cycles marker has passed!",$time);
      $finish(2);
   end

   /****************************************************************************
    * Instantiate DUT interface and DUT
    * *************************************************************************/
   //; # We use generate_base when there is for sure just one of X

   //; my $jtag_ifc = $self->unique_inst('jtag_ifc', 'jtag_ifc');
   //; my $axil_ifc = $self->unique_inst('axil_ifc', 'axil_ifc');
   //; my $dut_ifc = $self->unique_inst('template_ifc', 'dut_ifc', IO_LIST=>$io_list);
   //; my $dut_obj = generate_base($design_name, 'dut', cfg_data_width=>$cfg_data_width,cfg_addr_width=>$cfg_addr_width,
   //;                              cfg_op_width=>$cfg_op_width, axi_addr_width=>$axi_addr_width, axi_data_width=>$axi_data_width,
   //;                              num_glb_tiles=>$num_glb_tiles, block_axi_addr_width=>$block_axi_addr_width, num_glb_tiles=>$num_glb_tiles);

   //; $self -> define_param(JTAG_IFC => $jtag_ifc);
   //; $self -> define_param(AXIL_IFC => $axil_ifc);
   //; $self -> define_param(DUT_IFC => $dut_ifc);

   `$jtag_ifc->instantiate` ();
   `$axil_ifc->instantiate` (.clk(Clk));
   `$dut_ifc->instantiate` (.Clk(Clk), .Reset(Reset));

   `$dut_obj->instantiate` (
        .clk_in                     ( dut_ifc.Clk                   ),
        .reset_in                   ( dut_ifc.Reset                 ),

        // JTAG
        .tck                        ( jtag_ifc.tck                  ),
        .trst_n                     ( jtag_ifc.trst_n               ),
        .tdi                        ( jtag_ifc.tdi                  ),
        .tms                        ( jtag_ifc.tms                  ),
        .tdo                        ( jtag_ifc.tdo                  ),

        // axi
        .axi_awaddr                 ( axil_ifc.awaddr               ), 
        .axi_awvalid                ( axil_ifc.awvalid              ),
        .axi_wdata                  ( axil_ifc.wdata                ),
        .axi_wvalid                 ( axil_ifc.wvalid               ),
        .axi_bready                 ( axil_ifc.bready               ),
        .axi_araddr                 ( axil_ifc.araddr               ),
        .axi_arvalid                ( axil_ifc.arvalid              ),
        .axi_rready                 ( axil_ifc.rready               ),
        .axi_awready                ( axil_ifc.awready              ),
        .axi_wready                 ( axil_ifc.wready               ),
        .axi_bvalid                 ( axil_ifc.bvalid               ),
        .axi_bresp                  ( axil_ifc.bresp                ),
        .axi_rdata                  ( axil_ifc.rdata                ),
        .axi_rvalid                 ( axil_ifc.rvalid               ),
        .axi_arready                ( axil_ifc.arready              ),
        .axi_rresp                  ( axil_ifc.rresp                ),

        // cgra config
        .cgra_cfg_addr              ( dut_ifc.cgra_cfg_addr         ),
        .cgra_cfg_wr_data           ( dut_ifc.cgra_cfg_wr_data      ),
        .cgra_cfg_rd_data           ( dut_ifc.cgra_cfg_rd_data      ),

        // glb config
        .glb_cfg_wr_addr            ( dut_ifc.glb_cfg_wr_addr       ),
        .glb_cfg_wr_data            ( dut_ifc.glb_cfg_wr_data       ),
        .glb_cfg_rd_addr            ( dut_ifc.glb_cfg_rd_addr       ),
        .glb_cfg_rd_data            ( dut_ifc.glb_cfg_rd_data       ),
        .glb_cfg_rd_data_valid      ( dut_ifc.glb_cfg_rd_data_valid ),

        // sram config
        .sram_cfg_wr_addr           ( dut_ifc.sram_cfg_wr_addr      ),
        .sram_cfg_wr_data           ( dut_ifc.sram_cfg_wr_data      ),
        .sram_cfg_rd_addr           ( dut_ifc.sram_cfg_rd_addr      ),
        .sram_cfg_rd_data           ( dut_ifc.sram_cfg_rd_data      ),
        .sram_cfg_rd_data_valid     ( dut_ifc.sram_cfg_rd_data_valid),

        // control signals
        .strm_start_pulse           ( dut_ifc.strm_start_pulse      ),
        .pc_start_pulse             ( dut_ifc.pc_start_pulse        ),
        .strm_f2g_interrupt_pulse   ( dut_ifc.strm_f2g_interrupt_pulse  ),
        .strm_g2f_interrupt_pulse   ( dut_ifc.strm_g2f_interrupt_pulse  ),
        .pcfg_g2f_interrupt_pulse   ( dut_ifc.pcfg_g2f_interrupt_pulse  )
    );

   /****************************************************************************
    * Instantiate Test
    * **************************************************************************/
    //; my $tst_obj = generate('glc_prog', 'glc_prog', config_addr_width=>$cfg_addr_width, config_data_width=>$cfg_data_width,
    //;                         axi_addr_width=>$axi_addr_width, axi_data_width=>$axi_data_width, block_axi_addr_width=>$block_axi_addr_width,
    //;                         num_glb_tiles=>$num_glb_tiles, block_axi_addr_width=>$block_axi_addr_width, num_glb_tiles=>$num_glb_tiles);
    `$tst_obj->instantiate` (.dut_ifc(`$dut_ifc->iname()`), .jtag_ifc(`$jtag_ifc->iname()`), .axi_ifc(`$axil_ifc->iname()`));
      
endmodule
 
