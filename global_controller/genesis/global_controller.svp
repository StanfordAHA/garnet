/*=============================================================================
** Module: global_controller.svp
** Description:
**              Global Controller
** Author: Taeyoung Kong, Alex Carsello
** Change history: 05/02/2019 - AXI4-Lite controller is added
**===========================================================================*/

//; use POSIX;
//; my $cfg_bus_width = parameter(NAME => 'cfg_bus_width', VAL => 32, DOC => 'Width of config_data');
//; my $cfg_addr_width = parameter(NAME => 'cfg_addr_width', VAL => 32, DOC => 'Width of config_addr');
//; my $cfg_op_width = parameter(NAME => 'cfg_op_width', VAL => 5, DOC => 'Width of config_op');
//; my $jtag_obj = generate("jtag", "jtag_controller", SYSCLK_CFG_BUS_WIDTH => $cfg_bus_width, SYSCLK_CFG_ADDR_WIDTH => $cfg_addr_width, SYSCLK_CFG_OPCODE_WIDTH =>$cfg_op_width);
//; my $axi_obj = generate("axi_ctrl", "axi_controller", 'cfg_bus_width' => $cfg_bus_width, 'cfg_addr_width' => $cfg_addr_width);

module `mname` (
    input  logic                            clk_in,
    input  logic                            reset_in,

    // cgra control signals
    output logic                            clk_out,
    output logic                            reset_out,
    output logic [3:0]                      cgra_stalled, 
    output logic                            glb_stall, 

    output logic                            cgra_start_pulse,
    input  logic                            cgra_done_pulse,
    output logic                            cgra_soft_reset,

    // fast reconfiguration signals
    output logic                            config_start_pulse,
    input  logic                            config_done_pulse,

    // global buffer configuration
    output logic                            glb_write,
    output logic                            glb_read,
    output logic [`$cfg_addr_width-1`:0]    glb_config_addr_out,
    output logic [`$cfg_bus_width-1`:0]     glb_config_data_out,
    input  logic [`$cfg_bus_width-1`:0]     glb_config_data_in,

    // global buffer sram configuration
    output logic                            glb_sram_write,
    output logic                            glb_sram_read,
    output logic [`$cfg_addr_width-1`:0]    glb_sram_config_addr_out,
    output logic [`$cfg_bus_width-1`:0]     glb_sram_config_data_out,
    input  logic [`$cfg_bus_width-1`:0]     glb_sram_config_data_in,

    // cgra configuration
    output logic                            read,
    output logic                            write,
    output logic [`$cfg_addr_width-1`:0]    config_addr_out,
    output logic [`$cfg_bus_width-1`:0]     config_data_out,
    input  logic [`$cfg_bus_width-1`:0]     config_data_in,

    // axi4-lite slave interface
    input  logic [`$cfg_addr_width-1`:0]    AWADDR,
    input  logic                            AWVALID,
    output logic                            AWREADY,
    input  logic [`$cfg_bus_width-1`:0]     WDATA,
    input  logic                            WVALID,
    output logic                            WREADY,
    input  logic [`$cfg_addr_width-1`:0]    ARADDR,
    input  logic                            ARVALID,
    output logic                            ARREADY,
    output logic [`$cfg_bus_width-1`:0]     RDATA,
    output logic [1:0]                      RRESP,
    output logic                            RVALID,
    input  logic                            RREADY,
    output logic                            interrupt,

    // jtag interface signals
    input  logic                            tck,
    input  logic                            tdi,
    input  logic                            tms,
    input  logic                            trst_n,
    output logic                            tdo
);
  
//============================================================================//
// logic declaration
//============================================================================//
// clk control signal
logic clk;
logic clk_domain;
logic sys_clk_activated;

// jtag control signal
logic [`$cfg_addr_width-1`:0] config_addr_jtag_out;
logic [`$cfg_bus_width-1`:0] config_data_jtag_out;
logic [`$cfg_bus_width-1`:0] config_data_jtag_in;

// intermediate control signal
logic [`$cfg_addr_width-1`:0] int_config_addr_out;
logic [`$cfg_bus_width-1`:0] int_config_data_out;

// opcode signal
logic [`$cfg_op_width-1`:0] op_jtag;
logic [`$cfg_op_width-1`:0] op_axi;
logic [`$cfg_op_width-1`:0] op;

//============================================================================//
// jtag controller instantiation
//============================================================================//
`$jtag_obj -> instantiate` (
    .ifc_trst_n(trst_n),
    .ifc_tck(tck),
    .ifc_tms(tms),
    .ifc_tdi(tdi),
    .ifc_tdo(tdo),
    .ifc_config_addr_to_gc(config_addr_jtag_out),
    .ifc_config_data_from_gc(config_data_jtag_in),
    .ifc_config_data_to_gc(config_data_jtag_out),
    .ifc_config_op_to_gc(op_jtag),
    .clk(clk),
    .reset(reset_in),
    .sys_clk_activated(sys_clk_activated),
    .bsr_tdi(),
    .bsr_sample(),
    .bsr_intest(),
    .bsr_extest(),
    .bsr_update_en(),
    .bsr_capture_en(),
    .bsr_shift_dr(),
    .bsr_tdo()
);

//============================================================================//
// JTAG op codes
//============================================================================//
parameter NOP = `$cfg_op_width`'d0;
parameter write_config =`$cfg_op_width`'d1;
parameter read_config = `$cfg_op_width`'d2;
parameter write_A050 = `$cfg_op_width`'d4;
parameter write_TST = `$cfg_op_width`'d5;
parameter read_TST = `$cfg_op_width`'d6;
parameter global_reset = `$cfg_op_width`'d7;
parameter write_stall = `$cfg_op_width`'d8;
parameter read_stall = `$cfg_op_width`'d9;
parameter advance_clk = `$cfg_op_width`'d10;
parameter read_clk_domain = `$cfg_op_width`'d11;
parameter switch_clk = `$cfg_op_width`'d12;
parameter wr_rd_delay_reg = `$cfg_op_width`'d13;
parameter rd_rd_delay_reg = `$cfg_op_width`'d14;
parameter wr_delay_sel_reg = `$cfg_op_width`'d15;
parameter rd_delay_sel_reg = `$cfg_op_width`'d16;
parameter glb_write_config = `$cfg_op_width`'d17;
parameter glb_read_config =`$cfg_op_width`'d18;
parameter glb_sram_write_config = `$cfg_op_width`'d19;
parameter glb_sram_read_config =`$cfg_op_width`'d20;
parameter cgra_ctrl_write = `$cfg_op_width`'d21;
parameter cgra_ctrl_read = `$cfg_op_width`'d22;

//============================================================================//
// axi4-lite <-> gc signal
//============================================================================//
logic                           gc_to_axi_ready;
logic [`$cfg_addr_width-1`:0]   axi_to_gc_wr_addr;
logic [`$cfg_bus_width-1`:0]    axi_to_gc_wr_data;
logic                           axi_to_gc_wr_en;
logic                           axi_to_gc_rd_en;
logic [`$cfg_bus_width-1`:0]    axi_to_gc_rd_addr;
logic [`$cfg_bus_width-1`:0]    gc_to_axi_rd_data;

//============================================================================//
// axi4-lite controller instantiation
//============================================================================//
`$axi_obj -> instantiate` (
    .clk                ( clk               ),
    .reset              ( reset_in          ),
    .AWADDR             ( AWADDR            ),
    .AWVALID            ( AWVALID           ),
    .AWREADY            ( AWREADY           ),
    .WDATA              ( WDATA             ),
    .WVALID             ( WVALID            ),
    .WREADY             ( WREADY            ),
    .ARADDR             ( ARADDR            ),
    .ARVALID            ( ARVALID           ),
    .ARREADY            ( ARREADY           ),
    .RDATA              ( RDATA             ),
    .RRESP              ( RRESP             ),
    .RVALID             ( RVALID            ),
    .RREADY             ( RREADY            ),
    
    .gc_to_axi_ready    ( gc_to_axi_ready   ),
    .axi_to_gc_wr_addr  ( axi_to_gc_wr_addr ),
    .axi_to_gc_wr_data  ( axi_to_gc_wr_data ),
    .axi_to_gc_wr_en    ( axi_to_gc_wr_en   ),
    .axi_to_gc_rd_en    ( axi_to_gc_rd_en   ),
    .axi_to_gc_rd_addr  ( axi_to_gc_rd_addr ),
    .gc_to_axi_rd_data  ( gc_to_axi_rd_data )
);

//============================================================================//
// AXI op code
// We use address[3:0] as opcode
// If address[7:4] == 4'b1111, we run opcode
// Otherwise, it is config_write / config_read
//============================================================================//
localparam
    AXI_TST         = 4'd1,
    AXI_RESET       = 4'd2,
    AXI_STALL       = 4'd3,
    AXI_RD_DELAY    = 4'd4,
    AXI_GLB_CONFIG  = 4'd5,
    AXI_GLB_SRAM    = 4'd6,
    AXI_CGRA_CTRL   = 4'd7;

logic       axi_wr_ctrl_reg_en;
logic [3:0] axi_wr_ctrl_reg_en_bits;
logic [3:0] axi_wr_opcode;
assign axi_wr_ctrl_reg_en_bits  = axi_to_gc_wr_addr[7:4];
assign axi_wr_ctrl_reg_en       = (axi_wr_ctrl_reg_en_bits == 4'b1111);
assign axi_wr_opcode            = axi_to_gc_wr_addr[3:0];

logic       axi_rd_ctrl_reg_en;
logic [3:0] axi_rd_ctrl_reg_en_bits;
logic [3:0] axi_rd_opcode;
assign axi_rd_ctrl_reg_en_bits  = axi_to_gc_rd_addr[7:4];
assign axi_rd_ctrl_reg_en       = (axi_rd_ctrl_reg_en_bits == 4'b1111);
assign axi_rd_opcode            = axi_to_gc_rd_addr[3:0];

logic       axi_activated;

always_comb begin
    op_axi = NOP;
    if (axi_to_gc_wr_en) begin
        if (axi_wr_ctrl_reg_en) begin
            case (axi_wr_opcode)
                AXI_TST:        op_axi = write_TST;
                AXI_RESET:      op_axi = global_reset;
                AXI_STALL:      op_axi = write_stall;
                AXI_RD_DELAY:   op_axi = wr_rd_delay_reg;
                AXI_GLB_CONFIG: op_axi = glb_write_config;
                AXI_GLB_SRAM:   op_axi = glb_sram_write_config;
                AXI_CGRA_CTRL:  op_axi = cgra_ctrl_write;
                default:        op_axi = NOP;
            endcase
        end
        else                    op_axi = write_config;
    end
    else if (axi_to_gc_rd_en) begin
        if (axi_rd_ctrl_reg_en) begin
            case (axi_rd_opcode)
                AXI_TST:        op_axi = read_TST;
                AXI_STALL:      op_axi = read_stall;
                AXI_RD_DELAY:   op_axi = rd_rd_delay_reg;
                AXI_GLB_CONFIG: op_axi = glb_read_config;
                AXI_GLB_SRAM:   op_axi = glb_sram_read_config;
                AXI_CGRA_CTRL:  op_axi = cgra_ctrl_read;
                default:        op_axi = NOP;
            endcase
        end
        else                    op_axi = read_config;
    end
    else                        op_axi = NOP;
end

// jtag opcode has priority over axi opcode if they overlap
always_comb begin
    axi_activated = 0;
    if (op_jtag != NOP) begin
        op = op_jtag;
        int_config_addr_out = config_addr_jtag_out;
        int_config_data_out = config_data_jtag_out;
    end
    else if (op_axi != NOP) begin
        op = op_axi;
        axi_activated = 1;
        if (axi_to_gc_wr_en & axi_wr_ctrl_reg_en) begin
            int_config_addr_out = {{8{1'b0}}, {axi_to_gc_wr_addr[`$cfg_addr_width-1`:8]}};
            int_config_data_out = axi_to_gc_wr_data;
        end
        else if (axi_to_gc_wr_en) begin
            int_config_addr_out = axi_to_gc_wr_addr;
            int_config_data_out = axi_to_gc_wr_data;
        end
        else if (axi_to_gc_rd_en & axi_rd_ctrl_reg_en) begin
            int_config_addr_out = {{8{1'b0}}, {axi_to_gc_rd_addr[`$cfg_addr_width-1`:8]}};
            int_config_data_out = 0;
        end
        else begin
            int_config_addr_out = axi_to_gc_rd_addr;
            int_config_data_out = 0;
        end
    end
    else begin
        op = NOP;
        int_config_addr_out = 0;
        int_config_data_out = 0;
    end
end

//============================================================================//
// states
// Incoming instructions are accepted only when global controller is in READY
//============================================================================//
logic [2:0] state;
logic       axi_reading;
parameter ready = 3'd0;
parameter reading = 3'd1;
parameter resetting = 3'd2;
parameter advancing_clk = 3'd3;
parameter switching_clk = 3'd4;
parameter glb_reading = 3'd5;
parameter glb_sram_reading = 3'd6;
parameter cgra_ctrl_reading = 3'd7;

assign gc_to_axi_ready = (state == ready);

//============================================================================//
// Clk switch control
//============================================================================//
//USED to remember old stall signal when advancing clk
logic [3:0] stall_restore;

logic all_stalled_tck;
logic all_stalled_tck_rise;
logic all_stalled_tck_fall;

logic all_stalled_sys;
logic all_stalled_sys_rise;
logic all_stalled_sys_fall;

//Extra flops to cross clock boundary
logic sys_clk_act_sync_1;
logic sys_clk_act_sync_2;

//delay_sel[1] specifies delay for all_stalled_tck
//delay_sel[0] specifices delay for all_stalled_sys
logic [1:0] delay_sel;

logic clk_switch_request;
//clk_switch_request has to cross clk domains. We'll need sync FFs
//for crossing from CLK -> TCK
logic clk_switch_request_sync_1_tck;
logic clk_switch_request_sync_2_tck;
//for crossing from CLK -> SYS_CLK
logic clk_switch_request_sync_1_sys;
logic clk_switch_request_sync_2_sys;

logic [`$cfg_bus_width-1`:0] TST;
logic [`$cfg_bus_width-1`:0] counter;
logic [`$cfg_bus_width-1`:0] rd_delay_reg;
logic [4:0] clk_switch_counter_tck;

always @ (*) begin
    clk_domain = (sys_clk_activated) ? clk_in : tck;//Are we running the GC/CGRA on sys clk or test clk?
    all_stalled_tck = delay_sel[1] ? all_stalled_tck_fall : all_stalled_tck_rise;
    all_stalled_sys = delay_sel[0] ? all_stalled_sys_fall : all_stalled_sys_rise;
    clk = ((all_stalled_tck & !sys_clk_activated) | (all_stalled_sys & sys_clk_activated )) ? 0 : clk_domain; //Are we stalling both GC and CGRA during clk domain switch?
    clk_out = clk;
    reset_out = (state==resetting) ? 1 : reset_in;
end

//Clock switch counter block (Always on test_clk)
always @ (posedge tck or posedge reset_in) begin
    if (reset_in==1) begin
        clk_switch_counter_tck <= 5'h1F;
        sys_clk_activated <= 0;
        all_stalled_tck_rise <= 0;
    end
    else if ((clk_switch_request_sync_2_tck != sys_clk_activated) & (clk_switch_counter_tck > 0)) begin
        all_stalled_tck_rise <= 1;//Deactivate clk to rest of GC
        clk_switch_counter_tck <= clk_switch_counter_tck - 1;   
    end
    else if ((clk_switch_request_sync_2_tck != sys_clk_activated) & clk_switch_counter_tck <= 0 ) begin
        sys_clk_activated <= clk_switch_request;
        clk_switch_counter_tck <= clk_switch_counter_tck-1;
    end
    else if ((clk_switch_request_sync_2_tck == 0) && (sys_clk_activated == 0)) begin
        all_stalled_tck_rise <= 0;
    end 
end

//FALLING EDGE TCK. In case we need to delay the clock gating signal by an extra half cycle
always @ (negedge tck or posedge reset_in) begin
    if (reset_in==1)
        all_stalled_tck_fall <= 0;
    else
        all_stalled_tck_fall <= all_stalled_tck_rise;
end

//IMPLEMENT 2 SYNC FLOPS TO CROSS CLK BOUNDARY (SLOW->FAST)
//SYNC FLOPS FOR SYS_CLK_ACT
always @ (posedge clk_in or posedge reset_in) begin
    if(reset_in==1) begin
        sys_clk_act_sync_1 <= 0;
        sys_clk_act_sync_2 <= 0;
    end
    else begin  
        sys_clk_act_sync_1 <= sys_clk_activated;
        sys_clk_act_sync_2 <= sys_clk_act_sync_1;
    end
end  

//2 SYNC FLOPS FOR CLK_SWITCH_REQUEST (CLK->SLOW)
always @ (posedge tck or posedge reset_in) begin
    if(reset_in==1) begin
        clk_switch_request_sync_1_tck <= 0;
        clk_switch_request_sync_2_tck <= 0;
    end
    else begin
        clk_switch_request_sync_1_tck <= clk_switch_request;
        clk_switch_request_sync_2_tck <= clk_switch_request_sync_1_tck;
    end 
end

//2 SYNC FLOPS FOR CLK_SWITCH_REQUEST (CLK->FAST)
always @ (posedge clk_in or posedge reset_in) begin
    if(reset_in==1) begin
        clk_switch_request_sync_1_sys <= 0;
        clk_switch_request_sync_2_sys <= 0;
    end
    else begin
        clk_switch_request_sync_1_sys <= clk_switch_request;
        clk_switch_request_sync_2_sys <= clk_switch_request_sync_1_sys;
    end 
end

always @ (posedge clk_in or posedge reset_in) begin 
    if (reset_in==1) begin
        all_stalled_sys_rise <= 1;
    end
    else if (sys_clk_act_sync_2 != clk_switch_request_sync_2_sys) begin
        all_stalled_sys_rise <= 1;
    end
    else if ((sys_clk_act_sync_2 == 1) && (clk_switch_request_sync_2_sys == 1)) begin
        all_stalled_sys_rise <= 0;
    end
end

//FALLING EDGE SYS CLK. In case we need to delay the clock gating signal by an extra half cycle
always @ (negedge clk_in or posedge reset_in) begin
    if (reset_in==1)
        all_stalled_sys_fall <= 0;
    else
        all_stalled_sys_fall <= all_stalled_sys_rise;
end

//============================================================================//
// stall signal
//============================================================================//
assign glb_stall = |cgra_stalled;

//============================================================================//
// CGRA control registers
// when opcode is cgra_control_write, it writes to these cgra control registers
//============================================================================//
logic                           cgra_ctrl_wr_en;
logic [`$cfg_addr_width-1`:0]   cgra_ctrl_wr_addr;
logic [`$cfg_bus_width-1`:0]    cgra_ctrl_wr_data;
logic                           cgra_ctrl_rd_en;
logic [`$cfg_addr_width-1`:0]   cgra_ctrl_rd_addr;
logic [`$cfg_bus_width-1`:0]    cgra_ctrl_rd_data;

localparam
    ADDR_CGRA_START         = `$cfg_addr_width`'h00,
    ADDR_CGRA_AUTO_RESTART  = `$cfg_addr_width`'h04,
    ADDR_CONFIG_START       = `$cfg_addr_width`'h08,
    ADDR_IER                = `$cfg_addr_width`'h0c,
    ADDR_ISR                = `$cfg_addr_width`'h10,
    ADDR_CGRA_SOFT_RESET_EN = `$cfg_addr_width`'h14;

// Internal control registers
logic       int_cgra_start;
logic       int_cgra_auto_restart;
logic       int_config_start;
logic [1:0] int_ier;
logic [1:0] int_isr;
logic       int_cgra_soft_reset_en;

// Shift register for cgra_done_pulse
// This is used in auto_restart
logic cgra_done_pulse_d1;
always @(posedge clk) begin
    cgra_done_pulse_d1 <= cgra_done_pulse;
end

//============================================================================//
// int_cgra_start, cgra_start_pulse control logic
//============================================================================//
always @(posedge clk or posedge reset_in) begin
    if (reset_in) begin
        int_cgra_start <= 1'b0;
    end
    else begin
        if (cgra_ctrl_wr_en && cgra_ctrl_wr_addr == ADDR_CGRA_START) begin
            int_cgra_start <= cgra_ctrl_wr_data[0];
        end
        else if (cgra_done_pulse) begin
            int_cgra_start <= 1'b0; // clear on cgra_done_pulse
        end
        else if (cgra_done_pulse_d1) begin
            // If int_cgra_auto_restart is set, set cgra_start again 1 cycle after cgra_done_pulse
            int_cgra_start <= int_cgra_auto_restart;
        end
    end
end

logic int_cgra_start_d1;
always @(posedge clk) begin
    int_cgra_start_d1 <= int_cgra_start;
end

assign cgra_start_pulse = int_cgra_start & (!int_cgra_start_d1);

//============================================================================//
// int_cgra_start_pulse_en
//============================================================================//
always @(posedge clk or posedge reset_in) begin
    if (reset_in) begin
        int_cgra_soft_reset_en <= 1'b0;
    end
    else begin
        if (cgra_ctrl_wr_en && cgra_ctrl_wr_addr == ADDR_CGRA_SOFT_RESET_EN) begin
            int_cgra_soft_reset_en <= cgra_ctrl_wr_data[0];
        end
    end
end

assign cgra_soft_reset = int_cgra_soft_reset_en & cgra_start_pulse;

//============================================================================//
// int_cgra_auto_restart
//============================================================================//
always @(posedge clk or posedge reset_in) begin
    if (reset_in) begin
        int_cgra_auto_restart <= 1'b0;
    end
    else begin
        if (cgra_ctrl_wr_en && cgra_ctrl_wr_addr == ADDR_CGRA_AUTO_RESTART) begin
            int_cgra_auto_restart <= cgra_ctrl_wr_data[0];
        end
        else if (cgra_done_pulse_d1) begin
            int_cgra_auto_restart <= 1'b0; // clear on cgra_done_pulse_d1
        end
    end
end

//============================================================================//
// int_config_start
//============================================================================//
always @(posedge clk or posedge reset_in) begin
    if (reset_in) begin
        int_config_start <= 1'b0;
    end
    else begin
        if (cgra_ctrl_wr_en && cgra_ctrl_wr_addr == ADDR_CONFIG_START) begin
            int_config_start <= cgra_ctrl_wr_data[0];
        end
        else if (config_done_pulse) begin
            int_config_start <= 1'b0; // clear on config_done_pulse
        end
    end
end

logic int_config_start_d1;
always @(posedge clk) begin
    int_config_start_d1 <= int_config_start;
end

assign config_start_pulse = int_config_start & (!int_config_start_d1);

//============================================================================//
// int_ier (interrupt enable register)
// bit[0]: cgra_done interrupt enable register
// bit[1]: config_done interrupt enable register
//============================================================================//
always @(posedge clk or posedge reset_in) begin
    if (reset_in) begin
        int_ier <= 2'b00;
    end
    else begin
        if (cgra_ctrl_wr_en && cgra_ctrl_wr_addr == ADDR_IER) begin
            int_ier <= cgra_ctrl_wr_data[1:0];
        end
    end
end

//============================================================================//
// int_isr (interrupt status register)
// bit[0]: cgra_done interrupt status register
// bit[1]: config_done interrupt status register
//============================================================================//
always @(posedge clk or posedge reset_in) begin
    if (reset_in) begin
        int_isr[0] <= 1'b0;
    end
    else begin
        if (int_ier[0] & cgra_done_pulse)
            int_isr[0] <= 1'b1;
        else if (cgra_ctrl_wr_en && cgra_ctrl_wr_addr == ADDR_ISR)
            int_isr[0] <= int_isr[0] ^ cgra_ctrl_wr_data[0]; // toggle on write
    end
end

always @(posedge clk or posedge reset_in) begin
    if (reset_in) begin
        int_isr[1] <= 1'b0;
    end
    else begin
        if (int_ier[1] & config_done_pulse)
            int_isr[1] <= 1'b1;
        else if (cgra_ctrl_wr_en && cgra_ctrl_wr_addr == ADDR_ISR)
            int_isr[1] <= int_isr[1] ^ cgra_ctrl_wr_data[1]; // toggle on write
    end
end

//============================================================================//
// interrupt signal
//============================================================================//
assign interrupt = |int_isr;

//============================================================================//
// During fast reconfiguration, config_addr_out and config_data_out goes to 0
//============================================================================//
logic [`$cfg_addr_width-1`:0]    config_addr_out_reg;
logic [`$cfg_bus_width-1`:0]     config_data_out_reg;
assign config_addr_out = (int_config_start)? 0 : config_addr_out_reg;
assign config_data_out = (int_config_start)? 0 : config_data_out_reg;

//============================================================================//
// Read CGRA control registers
//============================================================================//
always @(posedge clk or posedge reset_in) begin
    if (reset_in) begin
        cgra_ctrl_rd_data <= 0;
    end
    else begin
        if (cgra_ctrl_rd_en) begin
            case (cgra_ctrl_rd_addr)
                ADDR_CGRA_START: cgra_ctrl_rd_data <= int_cgra_start;
                ADDR_CGRA_AUTO_RESTART: cgra_ctrl_rd_data <= int_cgra_auto_restart;
                ADDR_CONFIG_START: cgra_ctrl_rd_data <= int_config_start;
                ADDR_IER: cgra_ctrl_rd_data <= int_ier[1:0];
                ADDR_ISR: cgra_ctrl_rd_data <= int_isr[1:0];
                ADDR_CGRA_SOFT_RESET_EN: cgra_ctrl_rd_data <= int_cgra_soft_reset_en;
                default: cgra_ctrl_rd_data <= 0;
            endcase
        end
    end
end

//============================================================================//
// FSM of global controller
//============================================================================//
always @ (posedge clk or posedge reset_in) begin
    if (reset_in==1) begin
        // cgra_ctrl
        cgra_ctrl_wr_en <= 0;
        cgra_ctrl_wr_addr <= 0;
        cgra_ctrl_wr_data <= 0;
        cgra_ctrl_rd_en <= 0;
        cgra_ctrl_rd_addr <= 0;

        // cgra config registers
        config_addr_out_reg <= 0;
        config_data_out_reg <= 0;
        read <= 0;
        write <= 0;

        // debug read register for jtag
        config_data_jtag_in <= 0;
        gc_to_axi_rd_data <= 0;

        // glb config registers
        glb_write <= 0;
        glb_read <= 0;
        glb_config_addr_out <= 0;
        glb_config_data_out <= 0;
        
        // glb sram config registers
        glb_sram_read <= 0;
        glb_sram_write <= 0;
        glb_sram_config_addr_out <= 0;
        glb_sram_config_data_out <= 0;

        // other control registers
        cgra_stalled <= 0;
        stall_restore <= 0;
        clk_switch_request <= 0;
        rd_delay_reg <= 2;
        TST <= 0;
        counter <= 0;
        delay_sel <= 2'b00;

        // state
        state <= ready;
        axi_reading <= 0;
    end
    else begin
        if (state==ready) begin
            case(op)
            NOP: begin
                // cgra_ctrl
                cgra_ctrl_wr_en <= 0;
                cgra_ctrl_wr_addr <= 0;
                cgra_ctrl_wr_data <= 0;
                cgra_ctrl_rd_en <= 0;
                cgra_ctrl_rd_addr <= 0;

                // cgra config
                config_addr_out_reg <= config_addr_out_reg;
                config_data_out_reg <= config_data_out_reg;
                read <= 0;
                write <= 0;

                // debug read register
                config_data_jtag_in <= config_data_jtag_in; 
                gc_to_axi_rd_data <= gc_to_axi_rd_data;

                // glb config
                glb_write <= 0;
                glb_read <= 0;
                glb_config_addr_out <= glb_config_addr_out;
                glb_config_data_out <= glb_config_data_out;

                // glb sram config registers
                glb_sram_read <= 0;
                glb_sram_write <= 0;
                glb_sram_config_addr_out <= glb_sram_config_addr_out;
                glb_sram_config_data_out <= glb_sram_config_data_out;

                // is it axi_reading?
                axi_reading <= 0;
            end
            write_config: begin
                config_addr_out_reg <= int_config_addr_out;
                config_data_out_reg <= int_config_data_out; 
                read <= 0;
                write <= 1;
                glb_write <= 0;
                glb_read <= 0;
                glb_sram_read <= 0;
                glb_sram_write <= 0;
                cgra_ctrl_wr_en <= 0;
                cgra_ctrl_rd_en <= 0;
            end
            glb_write_config: begin
                glb_config_addr_out <= int_config_addr_out;
                glb_config_data_out <= int_config_data_out; 
                read <= 0;
                write <= 0;
                glb_read <= 0;
                glb_write <= 1;
                glb_sram_read <= 0;
                glb_sram_write <= 0;
                cgra_ctrl_wr_en <= 0;
                cgra_ctrl_rd_en <= 0;
            end
            glb_sram_write_config: begin
                glb_sram_config_addr_out <= int_config_addr_out;
                glb_sram_config_data_out <= int_config_data_out; 
                read <= 0;
                write <= 0;
                glb_read <= 0;
                glb_write <= 0;
                glb_sram_read <= 0;
                glb_sram_write <= 1;
                cgra_ctrl_wr_en <= 0;
                cgra_ctrl_rd_en <= 0;
            end
            read_config: begin
                config_addr_out_reg <= int_config_addr_out;
                config_data_out_reg <= int_config_data_out; 
                counter <= rd_delay_reg-1;
                state <= reading;
                if (axi_activated) axi_reading <= 1;
                read <= 1;
                write <= 0;
                glb_write <= 0;
                glb_read <= 0;
                glb_sram_read <= 0;
                glb_sram_write <= 0;
                cgra_ctrl_wr_en <= 0;
                cgra_ctrl_rd_en <= 0;
            end
            glb_read_config: begin
                glb_config_addr_out <= int_config_addr_out;
                glb_config_data_out <= int_config_data_out; 
                counter <= rd_delay_reg-1;
                state <= glb_reading;
                if (axi_activated) axi_reading <= 1;
                read <= 0;
                write <= 0;
                glb_read <= 1;
                glb_write <= 0;
                glb_sram_read <= 0;
                glb_sram_write <= 0;
                cgra_ctrl_wr_en <= 0;
                cgra_ctrl_rd_en <= 0;
            end
            glb_sram_read_config: begin
                glb_sram_config_addr_out <= int_config_addr_out;
                glb_sram_config_data_out <= int_config_data_out; 
                counter <= rd_delay_reg-1;
                state <= glb_sram_reading;
                if (axi_activated) axi_reading <= 1;
                read <= 0;
                write <= 0;
                glb_read <= 0;
                glb_write <= 0;
                glb_sram_read <= 1;
                glb_sram_write <= 0;
                cgra_ctrl_wr_en <= 0;
                cgra_ctrl_rd_en <= 0;
            end
            write_A050: begin
                if (axi_activated)  gc_to_axi_rd_data <= `$cfg_bus_width`'hA050;
                else                config_data_jtag_in <= `$cfg_bus_width`'hA050;
                read <= 0;
                write <= 0;
                glb_write <= 0;
                glb_read <= 0;
                glb_sram_read <= 0;
                glb_sram_write <= 0;
                cgra_ctrl_wr_en <= 0;
                cgra_ctrl_rd_en <= 0;
            end
            write_TST: begin
                TST <= int_config_data_out;
                read <= 0;
                write <= 0;
                glb_write <= 0;
                glb_read <= 0;
                glb_sram_read <= 0;
                glb_sram_write <= 0;
                cgra_ctrl_wr_en <= 0;
                cgra_ctrl_rd_en <= 0;
            end
            read_TST: begin
                if (axi_activated)  gc_to_axi_rd_data <= TST;
                else                config_data_jtag_in <= TST;
                read <= 0;
                write <= 0;
                glb_write <= 0;
                glb_read <= 0;
                glb_sram_read <= 0;
                glb_sram_write <= 0;
                cgra_ctrl_wr_en <= 0;
                cgra_ctrl_rd_en <= 0;
            end
            global_reset: begin
                state <= resetting;
                counter <= (int_config_data_out > 0) ? int_config_data_out-1 : `$cfg_bus_width`'d19;
                read <= 0;
                write <= 0;
                glb_write <= 0;
                glb_read <= 0;
                glb_sram_read <= 0;
                glb_sram_write <= 0;
                cgra_ctrl_wr_en <= 0;
                cgra_ctrl_rd_en <= 0;
            end
            read_stall: begin
                if (axi_activated)  gc_to_axi_rd_data <= {`$cfg_bus_width-4`'b0, cgra_stalled};
                else                config_data_jtag_in <= {`$cfg_bus_width-4`'b0, cgra_stalled};
                read <= 0;
                write <= 0;
                glb_write <= 0;
                glb_read <= 0;
                glb_sram_read <= 0;
                glb_sram_write <= 0;
                cgra_ctrl_wr_en <= 0;
                cgra_ctrl_rd_en <= 0;
            end
            write_stall: begin
                cgra_stalled <= int_config_data_out[3:0];
                read <= 0;
                write <= 0;
                glb_write <= 0;
                glb_read <= 0;
                glb_sram_read <= 0;
                glb_sram_write <= 0;
                cgra_ctrl_wr_en <= 0;
                cgra_ctrl_rd_en <= 0;
            end         
            advance_clk: begin
                if (int_config_data_out > 0) begin
                    if (|(cgra_stalled & int_config_addr_out[3:0])) begin
                        counter <= int_config_data_out-1;
                        state <= advancing_clk; 
                        stall_restore <= cgra_stalled;
//;         for(my $i = 0; $i < 4; $i++){
                        cgra_stalled[`$i`] <= int_config_addr_out[`$i`] ? 1'b0 : cgra_stalled[`$i`];
//;         }
                    end
                end
                read <= 0;
                write <= 0;
                glb_write <= 0;
                glb_read <= 0;
                glb_sram_read <= 0;
                glb_sram_write <= 0;
                cgra_ctrl_wr_en <= 0;
                cgra_ctrl_rd_en <= 0;
            end
            read_clk_domain: begin
                if (axi_activated)  gc_to_axi_rd_data <= {31'b0, sys_clk_activated}; 
                else                config_data_jtag_in <= {31'b0, sys_clk_activated};
                read <= 0;
                write <= 0;
                glb_write <= 0;
                glb_read <= 0;
                glb_sram_read <= 0;
                glb_sram_write <= 0;
                cgra_ctrl_wr_en <= 0;
                cgra_ctrl_rd_en <= 0;
            end
            switch_clk: begin
                if(int_config_data_out[0] != clk_switch_request) begin
                    clk_switch_request <= int_config_data_out[0];
                    state <= switching_clk;
                    counter <= `$cfg_bus_width`'d20; 
                end
                read <= 0;
                write <= 0;
                glb_write <= 0;
                glb_read <= 0;
                glb_sram_read <= 0;
                glb_sram_write <= 0;
                cgra_ctrl_wr_en <= 0;
                cgra_ctrl_rd_en <= 0;
            end
            wr_rd_delay_reg: begin
                //Prevent underflow by setting this to 1 if the input data is 0.
                rd_delay_reg <= (int_config_data_out > 0) ? int_config_data_out : 1;
                read <= 0;
                write <= 0;
                glb_write <= 0;
                glb_read <= 0;
                glb_sram_read <= 0;
                glb_sram_write <= 0;
                cgra_ctrl_wr_en <= 0;
                cgra_ctrl_rd_en <= 0;
            end
            rd_rd_delay_reg: begin
                if (axi_activated)  gc_to_axi_rd_data <= rd_delay_reg;
                else                config_data_jtag_in <= rd_delay_reg;
                read <= 0;
                write <= 0;
                glb_write <= 0;
                glb_read <= 0;
                glb_sram_read <= 0;
                glb_sram_write <= 0;
                cgra_ctrl_wr_en <= 0;
                cgra_ctrl_rd_en <= 0;
            end
            wr_delay_sel_reg: begin
                delay_sel <= int_config_data_out[1:0];
                read <= 0;
                write <= 0;
                glb_write <= 0;
                glb_read <= 0;
                glb_sram_read <= 0;
                glb_sram_write <= 0;
                cgra_ctrl_wr_en <= 0;
                cgra_ctrl_rd_en <= 0;
            end
            rd_delay_sel_reg: begin
                if (axi_activated)  gc_to_axi_rd_data <= {`$cfg_bus_width-2`'b0,delay_sel};
                else                config_data_jtag_in <= {`$cfg_bus_width-2`'b0,delay_sel};
                read <= 0;
                write <= 0;
                glb_write <= 0;
                glb_read <= 0;
                glb_sram_read <= 0;
                glb_sram_write <= 0;
                cgra_ctrl_wr_en <= 0;
                cgra_ctrl_rd_en <= 0;
            end
            cgra_ctrl_write: begin
                cgra_ctrl_wr_en <= 1;
                cgra_ctrl_rd_en <= 0;
                cgra_ctrl_wr_addr <= int_config_addr_out;
                cgra_ctrl_wr_data <= int_config_data_out;
                read <= 0;
                write <= 0;
                glb_write <= 0;
                glb_read <= 0;
                glb_sram_read <= 0;
                glb_sram_write <= 0;
            end
            cgra_ctrl_read: begin
                cgra_ctrl_wr_en <= 0;
                cgra_ctrl_rd_en <= 1;
                cgra_ctrl_rd_addr <= int_config_addr_out;
                read <= 0;
                write <= 0;
                state <= cgra_ctrl_reading;
                if (axi_activated) axi_reading <= 1;
                counter <= 1;
                glb_write <= 0;
                glb_read <= 0;
                glb_sram_read <= 0;
                glb_sram_write <= 0;
            end
            default: begin
                // cgra control
                cgra_ctrl_wr_en <= 0;
                cgra_ctrl_rd_en <= 0;
                cgra_ctrl_wr_addr <= cgra_ctrl_wr_addr;
                cgra_ctrl_wr_data <= cgra_ctrl_wr_data;
                cgra_ctrl_rd_addr <= cgra_ctrl_rd_addr;

                // cgra config control
                config_addr_out_reg <= config_addr_out_reg;
                config_data_out_reg <= config_data_out_reg;
                config_data_jtag_in <= config_data_jtag_in; 
                gc_to_axi_rd_data <= gc_to_axi_rd_data;
                read <= 0;
                write <= 0;

                // glb conifg control
                glb_config_addr_out <= glb_config_addr_out;
                glb_config_data_out <= glb_config_data_out; 
                glb_sram_config_addr_out <= glb_sram_config_addr_out;
                glb_sram_config_data_out <= glb_sram_config_data_out;
                glb_write <= 0;
                glb_read <= 0;
                glb_sram_read <= 0;
                glb_sram_write <= 0;
            end
            endcase
        end
        //Counter for any state that needs to block incoming instructions
        else begin
            config_addr_out_reg <= config_addr_out_reg;
            glb_config_addr_out <= glb_config_addr_out;
            glb_sram_config_addr_out <= glb_sram_config_addr_out;
            cgra_ctrl_rd_addr <= cgra_ctrl_rd_addr;
            if (counter > 0) begin
                counter <= counter-1;
            end
            else begin
                state <= ready;
                axi_reading <= 0;
                if (state == reading) begin 
                    if (axi_reading)    gc_to_axi_rd_data <= config_data_in;
                    else                config_data_jtag_in <= config_data_in;
                    read <= 0;
                end
                else if (state == glb_reading) begin 
                    if (axi_reading)    gc_to_axi_rd_data <= glb_config_data_in;
                    else                config_data_jtag_in <= glb_config_data_in;
                    glb_read <= 0;
                end
                else if (state == glb_sram_reading) begin 
                    if (axi_reading)    gc_to_axi_rd_data <= glb_sram_config_data_in;
                    else                config_data_jtag_in <= glb_sram_config_data_in;
                    glb_sram_read <= 0;
                end
                else if (state == cgra_ctrl_reading) begin 
                    if (axi_reading)    gc_to_axi_rd_data <= cgra_ctrl_rd_data;
                    else                config_data_jtag_in <= cgra_ctrl_rd_data;
                    cgra_ctrl_rd_en <= 0;
                end
                else if (state == advancing_clk) begin
                    cgra_stalled <= stall_restore;
                end
            end
        end     
    end
end

endmodule
