//; use POSIX;
//; my $cfg_bus_width = parameter(NAME => 'cfg_bus_width', VAL => 32, DOC => 'Width of config_data');
//; my $cfg_addr_width = parameter(NAME => 'cfg_addr_width', VAL => 32, DOC => 'Width of config_addr');
//; my $cfg_op_width = parameter(NAME => 'cfg_op_width', VAL => 5, DOC => 'Width of config_op');
//; my $soc_addr = parameter(NAME => 'soc_addr', VAL => 12, DOC => 'Width of address bit for control by micro-controller');
//; my $jtag_obj = generate("jtag", "jtag_controller", SYSCLK_CFG_BUS_WIDTH => $cfg_bus_width, SYSCLK_CFG_ADDR_WIDTH => $cfg_addr_width, SYSCLK_CFG_OPCODE_WIDTH =>$cfg_op_width);

module `mname` (
    input  logic                             clk_in,
    input  logic                             reset_in,

    // cgra configuration
    output logic [`$cfg_addr_width-1`:0]     config_addr_out,
    input  logic [`$cfg_bus_width-1`:0]      config_data_in,
    output logic [`$cfg_bus_width-1`:0]      config_data_out,
    output logic                             read,
    output logic                             write,

    // cgra control signals
    output logic                             clk_out,
    output logic                             reset_out,
    output logic [3:0]                       cgra_stalled, 
    output logic                             glb_stall, 

    output logic                             cgra_start_pulse,
    input  logic                             cgra_done_pulse,

    // fast reconfiguration signals
    output logic                             config_start_pulse,
    input  logic                             config_done_pulse,

    // global buffer configuration
    output logic                             glb_write,
    output logic                             glb_read,
    output logic [`$cfg_addr_width-1`:0] 	glb_config_addr_out,
    output logic [`$cfg_bus_width-1`:0] 		glb_config_data_out,
    input  logic [`$cfg_bus_width-1`:0] 		glb_config_data_in,

    output logic                             top_write,
    output logic                             top_read,
    output logic [`$soc_addr-1`:0] 	        top_config_addr_out,
    output logic [`$cfg_bus_width-1`:0] 		top_config_data_out,
    input  logic [`$cfg_bus_width-1`:0] 		top_config_data_in,

    // micro-controller control interface
    input  logic                             soc_control_wr_en,
    input  logic [`$soc_addr-1`:0] 	        soc_control_wr_addr,
    input  logic [`$cfg_bus_width-1`:0] 		soc_control_wr_data,

    input  logic                             soc_control_rd_en,
    input  logic [`$soc_addr-1`:0] 	        soc_control_rd_addr,
    output logic [`$cfg_bus_width-1`:0] 		soc_control_rd_data,

    output logic                             soc_interrupt,

    // jtag interface signals
    input  logic                             tck,
    input  logic                             tdi,
    input  logic                             tms,
    input  logic                             trst_n,
    output logic                             tdo
);
  
logic [`$cfg_addr_width-1`:0] config_addr_jtag_out;
logic [`$cfg_bus_width-1`:0] config_data_jtag_out;
logic [`$cfg_bus_width-1`:0] config_data_jtag_in;
logic clk;
logic clk_domain;
logic sys_clk_activated;
//Extra flops to cross clock boundary
logic sys_clk_act_sync_1;
logic sys_clk_act_sync_2;

logic [`$cfg_op_width-1`:0] op_jtag;
logic [`$cfg_op_width-1`:0] op_axi;
logic [`$cfg_op_width-1`:0] op;

//separate op out from address field
`$jtag_obj -> instantiate` (.ifc_trst_n(trst_n),
            .ifc_tck(tck),
            .ifc_tms(tms),
            .ifc_tdi(tdi),
            .ifc_tdo(tdo),
            .ifc_config_addr_to_gc(config_addr_jtag_out),
            .ifc_config_data_from_gc(config_data_jtag_in),
            .ifc_config_data_to_gc(config_data_jtag_out),
            .ifc_config_op_to_gc(op_jtag),
            .clk(clk),
            .reset(reset_in),
            .sys_clk_activated(sys_clk_activated),
            .bsr_tdi(),
            .bsr_sample(),
            .bsr_intest(),
            .bsr_extest(),
            .bsr_update_en(),
            .bsr_capture_en(),
            .bsr_shift_dr(),
            .bsr_tdo()
            );

//------------------------op codes-------------------
parameter NOP = `$cfg_op_width`'d0;
parameter write_config =`$cfg_op_width`'d1;
parameter read_config = `$cfg_op_width`'d2;
parameter write_A050 = `$cfg_op_width`'d4;
parameter write_TST = `$cfg_op_width`'d5;
parameter read_TST = `$cfg_op_width`'d6;
parameter global_reset = `$cfg_op_width`'d7;
parameter write_stall = `$cfg_op_width`'d8;
parameter read_stall = `$cfg_op_width`'d9;
parameter advance_clk = `$cfg_op_width`'d10;
parameter read_clk_domain = `$cfg_op_width`'d11;
parameter switch_clk = `$cfg_op_width`'d12;
parameter wr_rd_delay_reg = `$cfg_op_width`'d13;
parameter rd_rd_delay_reg = `$cfg_op_width`'d14;
parameter wr_delay_sel_reg = `$cfg_op_width`'d15;
parameter rd_delay_sel_reg = `$cfg_op_width`'d16;
parameter host_control_enable = `$cfg_op_width`'d17;
parameter top_write_config =`$cfg_op_width`'d18;
parameter top_read_config = `$cfg_op_width`'d19;
parameter cgra_start = `$cfg_op_width`'d20;
parameter config_start = `$cfg_op_width`'d21;

// jtag opcode has priority over axi opcode if they overlap
assign op = (op_jtag != NOP) ? op_jtag : op_axi;

//STATES FOR IGNORING INCOMING INSTRUCTIONS
parameter ready = 3'd0;
parameter reading = 3'd1;
parameter resetting = 3'd2;
parameter advancing_clk = 3'd3;
parameter switching_clk = 3'd4;
parameter top_reading = 3'd5;
logic [2:0] state;
//USED to remember old stall signal when advancing clk
logic [3:0] stall_restore;

logic all_stalled_tck;
logic all_stalled_tck_rise;
logic all_stalled_tck_fall;

logic all_stalled_sys;
logic all_stalled_sys_rise;
logic all_stalled_sys_fall;

//delay_sel[1] specifies delay for all_stalled_tck
//delay_sel[0] specifices delay for all_stalled_sys
logic [1:0] delay_sel;

logic clk_switch_request;
//clk_switch_request has to cross clk domains. We'll need sync FFs
//for crossing from CLK -> TCK
logic clk_switch_request_sync_1_tck;
logic clk_switch_request_sync_2_tck;
//for crossing from CLK -> SYS_CLK
logic clk_switch_request_sync_1_sys;
logic clk_switch_request_sync_2_sys;

logic [`$cfg_bus_width-1`:0] TST;
logic [`$cfg_bus_width-1`:0] counter;
logic [`$cfg_bus_width-1`:0] rd_delay_reg;
logic [4:0] clk_switch_counter_tck;

assign glb_stall = |cgra_stalled;

always @ (*) begin
    clk_domain = (sys_clk_activated) ? clk_in : tck;//Are we running the GC/CGRA on sys clk or test clk?
    all_stalled_tck = delay_sel[1] ? all_stalled_tck_fall : all_stalled_tck_rise;
    all_stalled_sys = delay_sel[0] ? all_stalled_sys_fall : all_stalled_sys_rise;
    clk = ((all_stalled_tck & !sys_clk_activated) | (all_stalled_sys & sys_clk_activated )) ? 0 : clk_domain; //Are we stalling both GC and CGRA during clk domain switch?
    clk_out = clk;
    reset_out = (state==resetting) ? 1 : reset_in;
end
//Clock switch counter block (Always on test_clk)
always @ (posedge tck or posedge reset_in) begin
    if (reset_in==1) begin
        clk_switch_counter_tck <= 5'h1F;
        sys_clk_activated <= 0;
        all_stalled_tck_rise <= 0;
    end
    else if ((clk_switch_request_sync_2_tck != sys_clk_activated) & (clk_switch_counter_tck > 0)) begin
        all_stalled_tck_rise <= 1;//Deactivate clk to rest of GC
        clk_switch_counter_tck <= clk_switch_counter_tck - 1;   
    end
    else if ((clk_switch_request_sync_2_tck != sys_clk_activated) & clk_switch_counter_tck <= 0 ) begin
        sys_clk_activated <= clk_switch_request;
        clk_switch_counter_tck <= clk_switch_counter_tck-1;
    end
    else if ((clk_switch_request_sync_2_tck == 0) && (sys_clk_activated == 0)) begin
        all_stalled_tck_rise <= 0;
    end 
end

//FALLING EDGE TCK. In case we need to delay the clock gating signal by an extra half cycle
always @ (negedge tck or posedge reset_in) begin
    if (reset_in==1)
        all_stalled_tck_fall <= 0;
    else
        all_stalled_tck_fall <= all_stalled_tck_rise;
end

//IMPLEMENT 2 SYNC FLOPS TO CROSS CLK BOUNDARY (SLOW->FAST)
//SYNC FLOPS FOR SYS_CLK_ACT
always @ (posedge clk_in or posedge reset_in) begin
    if(reset_in==1) begin
        sys_clk_act_sync_1 <= 0;
        sys_clk_act_sync_2 <= 0;
    end
    else begin  
        sys_clk_act_sync_1 <= sys_clk_activated;
        sys_clk_act_sync_2 <= sys_clk_act_sync_1;
    end
end  
//2 SYNC FLOPS FOR CLK_SWITCH_REQUEST (CLK->SLOW)
always @ (posedge tck or posedge reset_in) begin
    if(reset_in==1) begin
        clk_switch_request_sync_1_tck <= 0;
        clk_switch_request_sync_2_tck <= 0;
    end
    else begin
        clk_switch_request_sync_1_tck <= clk_switch_request;
        clk_switch_request_sync_2_tck <= clk_switch_request_sync_1_tck;
    end 
end
//2 SYNC FLOPS FOR CLK_SWITCH_REQUEST (CLK->FAST)
always @ (posedge clk_in or posedge reset_in) begin
    if(reset_in==1) begin
        clk_switch_request_sync_1_sys <= 0;
        clk_switch_request_sync_2_sys <= 0;
    end
    else begin
        clk_switch_request_sync_1_sys <= clk_switch_request;
        clk_switch_request_sync_2_sys <= clk_switch_request_sync_1_sys;
    end 
end


always @ (posedge clk_in or posedge reset_in) begin 
    if (reset_in==1) begin
        all_stalled_sys_rise <= 1;
    end
    else if (sys_clk_act_sync_2 != clk_switch_request_sync_2_sys) begin
        all_stalled_sys_rise <= 1;
    end
    else if ((sys_clk_act_sync_2 == 1) && (clk_switch_request_sync_2_sys == 1)) begin
        all_stalled_sys_rise <= 0;
    end
end

//FALLING EDGE SYS CLK. In case we need to delay the clock gating signal by an extra half cycle
always @ (negedge clk_in or posedge reset_in) begin
    if (reset_in==1)
        all_stalled_sys_fall <= 0;
    else
        all_stalled_sys_fall <= all_stalled_sys_rise;
end

always @ (posedge clk or posedge reset_in) begin
    if (reset_in==1) begin
        cgra_stalled <= 0;
        stall_restore <= 0;
            clk_switch_request <= 0;
        rd_delay_reg <= 2;
        TST <= 0;
        counter <= 0;
        config_addr_out <= 0;
        config_data_out <= 0;
        config_data_jtag_in <= 0;
        delay_sel <= 2'b0;
        read <= 0;
        write <= 0;
        top_write <= 0;
        top_read <= 0;
        top_config_addr_out <= 0;
        top_config_data_out <= 0;
        state <= ready;
    end
    else begin
        if (state==ready) begin
            case(op)
            NOP: begin
                config_addr_out <= 0;
                config_data_out <= 0;
                config_data_jtag_in <= config_data_jtag_in; 
                read <= 0;
                write <= 0;
                top_write <= 0;
                top_read <= 0;
                top_config_addr_out <= 0;
                top_config_data_out <= 0;
            end
            write_config: begin
                config_addr_out <= config_addr_jtag_out;
                config_data_out <= config_data_jtag_out; 
                read <= 0;
                write <= 1;
                top_write <= 0;
                top_read <= 0;
            end
            top_write_config: begin
                top_config_addr_out <= config_addr_jtag_out;
                top_config_data_out <= config_data_jtag_out; 
                read <= 0;
                write <= 0;
                top_read <= 0;
                top_write <= 1;
            end
            read_config: begin
                config_addr_out <= config_addr_jtag_out;
                config_data_out <= config_data_jtag_out; 
                counter <= rd_delay_reg-1;
                state <= reading;
                read <= 1;
                write <= 0;
                top_write <= 0;
                top_read <= 0;
            end
            top_read_config: begin
                top_config_addr_out <= config_addr_jtag_out;
                top_config_data_out <= config_data_jtag_out; 
                counter <= rd_delay_reg-1;
                state <= top_reading;
                read <= 0;
                write <= 0;
                top_read <= 1;
                top_write <= 0;
            end
            write_A050: begin
                config_data_jtag_in <= `$cfg_bus_width`'hA050;
                read <= 0;
                write <= 0;
                top_write <= 0;
                top_read <= 0;
            end
            write_TST: begin
                TST <= config_data_jtag_out;
                read <= 0;
                write <= 0;
                top_write <= 0;
                top_read <= 0;
            end
            read_TST: begin
                config_data_jtag_in <= TST;
                read <= 0;
                write <= 0;
                top_write <= 0;
                top_read <= 0;
            end
            global_reset: begin
                state <= resetting;
                counter <= (config_data_jtag_out > 0) ? config_data_jtag_out-1 : `$cfg_bus_width`'d19;
                read <= 0;
                write <= 0;
                top_write <= 0;
                top_read <= 0;
            end
            read_stall: begin
                read <= 0;
                write <= 0;
                top_write <= 0;
                top_read <= 0;
                config_data_jtag_in <= {`$cfg_bus_width-4`'b0, cgra_stalled};
            end
            write_stall: begin
                cgra_stalled <= config_data_jtag_out[3:0];
                read <= 0;
                write <= 0;
                top_write <= 0;
                top_read <= 0;
            end         
            advance_clk: begin
                if (config_data_jtag_out > 0) begin
                    if (|(cgra_stalled & config_addr_jtag_out[3:0])) begin
                        counter <= config_data_jtag_out-1;
                        state <= advancing_clk; 
                        stall_restore <= cgra_stalled;
//;         for(my $i = 0; $i < 4; $i++){
                        cgra_stalled[`$i`] <= config_addr_jtag_out[`$i`] ? 1'b0 : cgra_stalled[`$i`];
//;         }
                    end
                end
                read <= 0;
                write <= 0;
                top_write <= 0;
                top_read <= 0;
            end
            read_clk_domain: begin
                read <= 0;
                write <= 0;
                top_write <= 0;
                top_read <= 0;
                config_data_jtag_in <= {31'b0, sys_clk_activated};
            end
            switch_clk: begin
                if(config_data_jtag_out[0] != clk_switch_request) begin
                    clk_switch_request <= config_data_jtag_out[0];
                    state <= switching_clk;
                    counter <= `$cfg_bus_width`'d20; 
                end
                read <= 0;
                write <= 0;
                top_write <= 0;
                top_read <= 0;
            end
            wr_rd_delay_reg: begin
                //Prevent underflow by setting this to 1 if the input data is 0.
                rd_delay_reg <= (config_data_jtag_out > 0) ? config_data_jtag_out : 1;
                read <= 0;
                write <= 0;
                top_write <= 0;
                top_read <= 0;
            end
            rd_rd_delay_reg: begin
                config_data_jtag_in <= rd_delay_reg;
                read <= 0;
                write <= 0;
                top_write <= 0;
                top_read <= 0;
            end
            wr_delay_sel_reg: begin
                delay_sel <= config_data_jtag_out[1:0];
                read <= 0;
                write <= 0;
                top_write <= 0;
                top_read <= 0;
            end
            rd_delay_sel_reg: begin
                config_data_jtag_in <= {`$cfg_bus_width-2`'b0,delay_sel};
                read <= 0;
                write <= 0;
                top_write <= 0;
                top_read <= 0;
            end
            default: begin
                config_addr_out <= config_addr_out;
                config_data_out <= config_data_out;
                config_data_jtag_in <= config_data_jtag_in; 
                read <= 0;
                write <= 0;
                top_write <= 0;
                top_read <= 0;
            end
            endcase
        end
        //Counter for any state that needs to block incoming instructions
        else begin
            config_addr_out <= config_addr_out;
            if (counter > 0) begin
                counter <= counter-1;
            end
            else begin
                state <= ready;
                if (state == reading) begin 
                    config_data_jtag_in <= config_data_in;
                    read <= 0;
                    top_read <= 0;
                end
                else if (state == top_reading) begin 
                    config_data_jtag_in <= top_config_data_in;
                    read <= 0;
                    top_read <= 0;
                end
                else if (state == advancing_clk)
                    cgra_stalled <= stall_restore;
            end
        end     
    end
end

endmodule

