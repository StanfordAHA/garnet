/*=============================================================================
** Module: axi_controller.svp
** Description:
**              AXI4-Lite controller
** Author: Taeyoung Kong
** Change history: 05/02/2019 - Initial implementation
**===========================================================================*/

//; use POSIX;
//; my $cfg_bus_width = parameter(NAME => 'cfg_bus_width', VAL => 32, DOC => 'Width of config_data');
//; my $cfg_addr_width = parameter(NAME => 'cfg_addr_width', VAL => 32, DOC => 'Width of config_addr');

module `mname` (

    // axi4 lite slave signals
    input  logic                            clk,
    input  logic                            reset,
    input  logic [`$cfg_addr_width-1`:0]    AWADDR,
    input  logic                            AWVALID,
    output logic                            AWREADY,
    input  logic [`$cfg_bus_width-1`:0]     WDATA,
    input  logic                            WVALID,
    output logic                            WREADY,

    input  logic [`$cfg_bus_width-1`:0]     ARADDR,
    input  logic                            ARVALID,
    output logic                            ARREADY,
    output logic [`$cfg_bus_width-1`:0]     RDATA,
    output logic [1:0]                      RRESP,
    output logic                            RVALID,
    input  logic                            RREADY,

    // interface with global controller
    input  logic                            gc_to_axi_ready,

    output logic [`$cfg_addr_width-1`:0]    axi_to_gc_wr_addr,
    output logic [`$cfg_bus_width-1`:0]     axi_to_gc_wr_data,
    output logic                            axi_to_gc_wr_en,

    output logic                            axi_to_gc_rd_en,
    output logic [`$cfg_data_width-1`:0]    axi_to_gc_rd_addr,
    input  logic [`$cfg_data_width-1`:0]    gc_to_axi_rd_data,
);

//============================================================================//
// AXI4-Lite write fsm
//============================================================================//
localparam
    WRIDLE  = 2'd0,
    WRDATA  = 2'd1,
    WRDELAY = 2'd2,
    WRWAIT  = 2'd3;

logic [1:0]                     wstate;
logic                           wen;
logic [`$cfg_bus_width-1`:0]    wdata;
logic [`$cfg_addr_width-1`:0]   waddr;
logic [`$cfg_bus_width-1`:0]    wmask;

assign AWREADY = (~ARESET) & (gc_to_axi_ready) & (wstate == WRIDLE);
assign WREADY  = (wstate == WRDATA);

always_ff @(posedge clk or posedge reset) begin
    if (reset) begin
        wstate <= WRIDLE;
        wen <= 0;
        wdata <= 0;
        waddr <= 0;
    end
    else begin
        case (wstate) 
            WRIDLE: begin
                if (AWVALID & AWREADY) begin
                    wstate <= WRDATA;
                    waddr <= AWADDR;
                end
            end
            WRDATA: begin
                if (WVALID & WREADY) begin
                    wstate <= WRDELAY;
                    wdata <= WDATA; 
                    wen <= 1;
                end
            end
            WRDELAY: begin
                wen <= 0;
                wstate <= WRWAIT;
            end
            WRWAIT: begin
                if (gc_to_axi_ready) begin
                    wstate <= WRIDLE;
                end
            end
        endcase
    end
end

//============================================================================//
// AXI4-Lite read fsm
//============================================================================//
localparam
    RDIDLE  = 2'd0,
    RDDELAY = 2'd1,
    RDWAIT  = 2'd2,
    RDDATA  = 2'd3;

logic [1:0]                     rstate;
logic                           ren;
logic [`$cfg_bus_width-1`:0]    rdata;
logic [`$cfg_addr_width-1`:0]   raddr;

assign ARREADY  = (~ARESET) & (gc_to_axi_ready) & (rstate == RDIDLE);
assign RDATA    = rdata;
assign RRESP    = 2'b00;  // OKAY
assign RVALID   = rvalid

always_ff @(posedge clk or posedge reset) begin
    if (reset) begin
        rstate <= RDIDLE;
        raddr <= 0;
        rdata <= 0;
        rvalid <= 0;
        ren <= 0;
    end
    else begin
        case (rstate)
            RDIDLE: begin
                if (ARREADY & ARVALID) begin
                    raddr <= ARADDR;
                    rstate <= RDDELAY;
                    ren <= 1;
                end
            end
            RDDELAY: begin
                ren <= 0;
                rstate <= RDWAIT;
            end
            RDWAIT: begin
                if (gc_to_axi_ready) begin
                    rvalid <= 1;
                    rdata <= gc_to_axi_rd_data;
                    rstate <= RDDATA; 
                end
            end
            RDDATA: begin
                if (RVALID & RREADY) begin
                    rvalid <= 0;
                    rstate <= RDIDLE;
                end
            end
        endcase
    end
end

//============================================================================//
// output assignment
//============================================================================//
assign axi_to_gc_wr_addr = waddr;
assign axi_to_gc_wr_data = wdata;
assign axi_to_gc_wr_en   = wen;
assign axi_to_gc_rd_addr = raddr;
assign axi_to_gc_rd_en   = ren;

endmodule
