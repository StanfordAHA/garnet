/* *****************************************************************************
 * File: flop.vp
 * 
 * Description:
 * Genesis2 flip-flop generator.
 * 
 * Required Genesis2 Controlable Parameters:
 * * Type		- Constant, Flop, RFlop, EFlop, or REFlop
 * * Width		- integer value specifying register width
 * * Default		- default value for the flop 
 *			 (only applies when flop_type=constant|rflop|reflop)
 * * SyncMode		- Sync or ASync flop * Change bar:
 * 
 * 
 * -----------
 * Date          Author   Description
 * Mar 30, 2010  shacham  init version  --  
 * May 20, 2014  jingpu   Add Async mode, change to active low reset
 * Feb 20, 2018  ajcars   Change back to active high reset 
 * ****************************************************************************/


/*******************************************************************************
 * REQUIRED PARAMETERIZATION
 ******************************************************************************/
//; my $type = parameter(Name=>'Type', Val=>"REFlop", 
//;			 List=>['Constant', 'Flop', 'RFlop', 'EFlop', 'REFlop'],
//;			 Doc=>'Type of flop: Constant, Flop, RFlop, EFlop, or REFlop');
//; my $default = parameter(Name=>'Default', Val=>0, Doc=>'Default value for the register');
//; my $width = parameter(Name=>'Width', Val=>1, Min=>1, Step=>1, Doc=>'Signal width');
//; $default = sprintf("%d'h%x",$width,$default);
//; my $sync = parameter(Name=>"SyncMode", Val=>"ASync",
//;		         List=>["Sync", "ASync"],
//;		         Doc=>"Sync or ASync flops?");
//; my $async_str = "";
//; $async_str = "or posedge Reset" if $sync eq 'ASync';

module `mname`(
	       //inputs
	       //; if ($type !~ m/constant/i) {
	       input 		   Clk,
	       input [`$width-1`:0]  din,
	       //; }
	       //; if ($type =~ m/rflop/i || $type =~ m/reflop/i) {
	       input 		   Reset,
	       //; }
	       //; if ($type =~ m/eflop/i || $type =~ m/reflop/i) {
	       input 		   en,
	       //; }

	       //outputs
	       output reg [`$width-1`:0] dout
	       );


   //; if ($type =~  m/^constant$/i) {
   assign dout = `$default`;
   //; } 

   //; if ($type =~ m/^Flop$/) {
   always_ff @(posedge Clk) begin
      dout <= din; 
   end
   //; }

   //; if ($type =~ m/^RFlop$/) {
   always_ff @(posedge Clk `$async_str`) begin
      if (Reset) 
	dout <= `$default`;
      else
	dout <= din; 
   end
   //; }
   
   //; if ($type =~ m/^REFlop$/) {
   always_ff @(posedge Clk `$async_str`) begin
      if (Reset) 
	dout <= `$default`;
      else if (en)
	dout <= din;
   end
   //; }

   //; if ($type =~ m/^EFlop$/) {
   always_ff @(posedge Clk) begin
      if (en)
	dout <= din;
   end
   //; }
endmodule
