/*=============================================================================
** Module: glc_axi_addrmap.svp
** Description:
**              Global Controller JTAG Address Map Controller
** Author: Taeyoung Kong
** Change history: 04/10/2020
**      - Initial version
**===========================================================================*/

//; use POSIX;
//; my $cfg_data_width = parameter(NAME => 'cfg_data_width', VAL => 32, DOC => 'Width of config_data');
//; my $cfg_addr_width = parameter(NAME => 'cfg_addr_width', VAL => 32, DOC => 'Width of config_addr');
//; my $axi_data_width = parameter(NAME => 'axi_data_width', VAL => 32, DOC => 'Width of axi_data');
//; my $block_axi_addr_width = parameter(NAME => 'block_axi_addr_width', VAL => 12, DOC => 'Width of axi_addr for sub block');
//; my $glb_addr_width = parameter(NAME => 'glb_addr_width', VAL => 22, DOC => 'Width of glb_addr');
//; my $num_glb_tiles = parameter(NAME => 'num_glb_tiles', VAL => 16, DOC => 'number of global buffer tiles');
//; my $cfg_double_buffer = parameter(NAME => 'cfg_double_buffer', VAL => 0, DOC => 'double buffer configuration space');

// local parameter
//; my $reg_addr_width = 5;

module `mname` (
    input  logic                                clk,
    input  logic                                reset,

    // cgra control signals
    output logic                                axi_global_reset,
    output logic                                axi_soft_reset,
    output logic [`$num_glb_tiles-1`:0]         axi_glb_stall, 
    output logic [`$num_glb_tiles-1`:0]         axi_cgra_stall, 

	// global buffer control signals
	output logic [`$num_glb_tiles-1`:0]         strm_start_pulse,
	output logic [`$num_glb_tiles-1`:0]         pc_start_pulse,
	input  logic [`$num_glb_tiles-1`:0]         strm_g2f_interrupt_pulse,
	input  logic [`$num_glb_tiles-1`:0]         strm_f2g_interrupt_pulse,
	input  logic [`$num_glb_tiles-1`:0]         pcfg_g2f_interrupt_pulse,

    // axi global controller configuration
    input  logic                                axi_glc_cfg_wr_en,
    input  logic                                axi_glc_cfg_wr_clk_en,
    input  logic [`$block_axi_addr_width-1`:0]  axi_glc_cfg_wr_addr,
    input  logic [`$axi_data_width-1`:0]        axi_glc_cfg_wr_data,
    input  logic                                axi_glc_cfg_rd_en,
    input  logic                                axi_glc_cfg_rd_clk_en,
    input  logic [`$block_axi_addr_width-1`:0]  axi_glc_cfg_rd_addr,
    output logic [`$axi_data_width-1`:0]        axi_glc_cfg_rd_data,
    output logic                                axi_glc_cfg_rd_data_valid,

    // jtag to axi addressmap
    input  logic                                jtag_axi_wr_en,
    input  logic [`$block_axi_addr_width-1`:0]  jtag_axi_wr_addr,
    input  logic [`$axi_data_width-1`:0]        jtag_axi_wr_data,
    input  logic                                jtag_axi_rd_en,
    input  logic [`$block_axi_addr_width-1`:0]  jtag_axi_rd_addr,
    output logic [`$axi_data_width-1`:0]        jtag_axi_rd_data,
    output logic                                jtag_axi_rd_data_valid,

    // cgra configuration
    output logic                                axi_cgra_cfg_read,
    output logic                                axi_cgra_cfg_write,
    output logic [`$cfg_addr_width-1`:0]        axi_cgra_cfg_addr,
    output logic [`$cfg_data_width-1`:0]        axi_cgra_cfg_wr_data,
    input  logic [`$cfg_data_width-1`:0]        axi_cgra_cfg_data_in,

//; if ($cfg_double_buffer > 0) {
    output     [`$num_glb_tiles*2-1`:0] config_db_en,
    output     [`$num_glb_tiles*2-1`:0] use_db_en,
//; }

    output logic                                interrupt
);

//============================================================================//
// Internal logic
//============================================================================//
    //------- inputs
    logic     [31:0] h2l_global_reset_cnt_w;
    logic    h2l_global_reset_cnt_we;
    logic     [31:0] h2l_soft_reset_cnt_w;
    logic    h2l_soft_reset_cnt_we;
    logic    h2l_strm_f2g_isr_tile_0_intr;
    logic    h2l_strm_f2g_isr_tile_1_intr;
    logic    h2l_strm_f2g_isr_tile_2_intr;
    logic    h2l_strm_f2g_isr_tile_3_intr;
    logic    h2l_strm_f2g_isr_tile_4_intr;
    logic    h2l_strm_f2g_isr_tile_5_intr;
    logic    h2l_strm_f2g_isr_tile_6_intr;
    logic    h2l_strm_f2g_isr_tile_7_intr;
    logic    h2l_strm_f2g_isr_tile_8_intr;
    logic    h2l_strm_f2g_isr_tile_9_intr;
    logic    h2l_strm_f2g_isr_tile_10_intr;
    logic    h2l_strm_f2g_isr_tile_11_intr;
    logic    h2l_strm_f2g_isr_tile_12_intr;
    logic    h2l_strm_f2g_isr_tile_13_intr;
    logic    h2l_strm_f2g_isr_tile_14_intr;
    logic    h2l_strm_f2g_isr_tile_15_intr;
    logic    h2l_strm_g2f_isr_tile_0_intr;
    logic    h2l_strm_g2f_isr_tile_1_intr;
    logic    h2l_strm_g2f_isr_tile_2_intr;
    logic    h2l_strm_g2f_isr_tile_3_intr;
    logic    h2l_strm_g2f_isr_tile_4_intr;
    logic    h2l_strm_g2f_isr_tile_5_intr;
    logic    h2l_strm_g2f_isr_tile_6_intr;
    logic    h2l_strm_g2f_isr_tile_7_intr;
    logic    h2l_strm_g2f_isr_tile_8_intr;
    logic    h2l_strm_g2f_isr_tile_9_intr;
    logic    h2l_strm_g2f_isr_tile_10_intr;
    logic    h2l_strm_g2f_isr_tile_11_intr;
    logic    h2l_strm_g2f_isr_tile_12_intr;
    logic    h2l_strm_g2f_isr_tile_13_intr;
    logic    h2l_strm_g2f_isr_tile_14_intr;
    logic    h2l_strm_g2f_isr_tile_15_intr;
    logic    h2l_par_cfg_g2f_isr_tile_0_intr;
    logic    h2l_par_cfg_g2f_isr_tile_1_intr;
    logic    h2l_par_cfg_g2f_isr_tile_2_intr;
    logic    h2l_par_cfg_g2f_isr_tile_3_intr;
    logic    h2l_par_cfg_g2f_isr_tile_4_intr;
    logic    h2l_par_cfg_g2f_isr_tile_5_intr;
    logic    h2l_par_cfg_g2f_isr_tile_6_intr;
    logic    h2l_par_cfg_g2f_isr_tile_7_intr;
    logic    h2l_par_cfg_g2f_isr_tile_8_intr;
    logic    h2l_par_cfg_g2f_isr_tile_9_intr;
    logic    h2l_par_cfg_g2f_isr_tile_10_intr;
    logic    h2l_par_cfg_g2f_isr_tile_11_intr;
    logic    h2l_par_cfg_g2f_isr_tile_12_intr;
    logic    h2l_par_cfg_g2f_isr_tile_13_intr;
    logic    h2l_par_cfg_g2f_isr_tile_14_intr;
    logic    h2l_par_cfg_g2f_isr_tile_15_intr;
    logic     [31:0] h2l_cgra_config_write_cnt_w;
    logic    h2l_cgra_config_write_cnt_we;
    logic     [31:0] h2l_cgra_config_read_cnt_w;
    logic    h2l_cgra_config_read_cnt_we;
    logic     [31:0] h2l_cgra_config_rd_data_data_w;
    logic    h2l_cgra_config_rd_data_data_we;
    logic     [6:2] h2d_pio_dec_address;
    logic     [31:0] h2d_pio_dec_write_data;
    logic    h2d_pio_dec_write;
    logic    h2d_pio_dec_read;

    //------- outputs
    logic     [31:0] l2h_global_reset_cnt_r;
    logic     [31:0] l2h_soft_reset_cnt_r;
    logic     [15:0] l2h_stall_cgra_stall_r;
    logic     [15:0] l2h_stall_glb_stall_r;
    logic    l2h_stream_start_pulse_glb_tile_0_r;
    logic    l2h_stream_start_pulse_glb_tile_1_r;
    logic    l2h_stream_start_pulse_glb_tile_2_r;
    logic    l2h_stream_start_pulse_glb_tile_3_r;
    logic    l2h_stream_start_pulse_glb_tile_4_r;
    logic    l2h_stream_start_pulse_glb_tile_5_r;
    logic    l2h_stream_start_pulse_glb_tile_6_r;
    logic    l2h_stream_start_pulse_glb_tile_7_r;
    logic    l2h_stream_start_pulse_glb_tile_8_r;
    logic    l2h_stream_start_pulse_glb_tile_9_r;
    logic    l2h_stream_start_pulse_glb_tile_10_r;
    logic    l2h_stream_start_pulse_glb_tile_11_r;
    logic    l2h_stream_start_pulse_glb_tile_12_r;
    logic    l2h_stream_start_pulse_glb_tile_13_r;
    logic    l2h_stream_start_pulse_glb_tile_14_r;
    logic    l2h_stream_start_pulse_glb_tile_15_r;
    logic    l2h_pc_start_pulse_glb_tile_0_r;
    logic    l2h_pc_start_pulse_glb_tile_1_r;
    logic    l2h_pc_start_pulse_glb_tile_2_r;
    logic    l2h_pc_start_pulse_glb_tile_3_r;
    logic    l2h_pc_start_pulse_glb_tile_4_r;
    logic    l2h_pc_start_pulse_glb_tile_5_r;
    logic    l2h_pc_start_pulse_glb_tile_6_r;
    logic    l2h_pc_start_pulse_glb_tile_7_r;
    logic    l2h_pc_start_pulse_glb_tile_8_r;
    logic    l2h_pc_start_pulse_glb_tile_9_r;
    logic    l2h_pc_start_pulse_glb_tile_10_r;
    logic    l2h_pc_start_pulse_glb_tile_11_r;
    logic    l2h_pc_start_pulse_glb_tile_12_r;
    logic    l2h_pc_start_pulse_glb_tile_13_r;
    logic    l2h_pc_start_pulse_glb_tile_14_r;
    logic    l2h_pc_start_pulse_glb_tile_15_r;
    logic    l2h_strm_f2g_isr_intr_o;
    logic    l2h_strm_g2f_isr_intr_o;
    logic    l2h_par_cfg_g2f_isr_intr_o;
    logic    l2h_global_isr_intr_o;
    logic     [31:0] l2h_cgra_config_addr_addr_r;
    logic     [31:0] l2h_cgra_config_wr_data_data_r;
    logic     [31:0] l2h_cgra_config_write_cnt_r;
    logic    l2h_cgra_config_write_cnt_ored_o;
    logic     [31:0] l2h_cgra_config_read_cnt_r;
    logic    l2h_cgra_config_read_cnt_ored_o;
    logic     [31:0] l2h_cgra_config_rd_data_data_r;
    logic     [31:0] d2h_dec_pio_read_data;
    logic    d2h_dec_pio_ack;
    logic    d2h_dec_pio_nack;

//; if ($cfg_double_buffer > 0) {
    logic [`$num_glb_tiles*2-1`:0] l2h_use_db_en_use_db_en_r;
    logic [`$num_glb_tiles*2-1`:0] l2h_config_db_en_config_db_en_r;
//; }

    // internal logic
    logic [`$axi_data_width-1`:0] wr_data_internal;
    logic [`$reg_addr_width-1`:0] addr_internal;
    logic read_internal;
    logic write_internal;
    logic rd_en_d1, rd_en_d2;
    logic is_jtag, is_jtag_d1, is_jtag_d2;
    logic [`$axi_data_width-1`:0] axi_rd_data_internal, axi_rd_data_next;
    logic [`$axi_data_width-1`:0] jtag_rd_data_internal, jtag_rd_data_next;
    logic axi_rd_data_valid_internal, axi_rd_data_valid_next;
    logic jtag_rd_data_valid_internal, jtag_rd_data_valid_next;
    logic axi_wr_id_match, axi_rd_id_match;
    logic jtag_wr_id_match, jtag_rd_id_match;
    logic interrupt_internal;

//============================================================================//
// assigns
//============================================================================//
//; if ($cfg_double_buffer > 0) {
// double buffer
    assign config_db_en = l2h_config_db_en_config_db_en_r;
    assign use_db_en = l2h_use_db_en_use_db_en_r;
//; }
// read/write control logic
assign h2d_pio_dec_write_data = wr_data_internal;
assign h2d_pio_dec_address = addr_internal;
assign h2d_pio_dec_read = read_internal;
assign h2d_pio_dec_write = write_internal;

// configuration registers
//; for (my $i = 0; $i < $num_glb_tiles; $i += 1) {
assign h2l_strm_f2g_isr_tile_`$i`_intr = strm_f2g_interrupt_pulse[`$i`];
//; }

//; for (my $i = 0; $i < $num_glb_tiles; $i += 1) {
assign h2l_strm_g2f_isr_tile_`$i`_intr = strm_g2f_interrupt_pulse[`$i`];
//; }

//; for (my $i = 0; $i < $num_glb_tiles; $i += 1) {
assign h2l_par_cfg_g2f_isr_tile_`$i`_intr = pcfg_g2f_interrupt_pulse[`$i`];
//; }

//; for (my $i = 0; $i < $num_glb_tiles; $i += 1) {
assign strm_start_pulse[`$i`] = l2h_stream_start_pulse_glb_tile_`$i`_r;
//; }

//; for (my $i = 0; $i < $num_glb_tiles; $i += 1) {
assign pc_start_pulse[`$i`] = l2h_pc_start_pulse_glb_tile_`$i`_r;
//; }

assign axi_glb_stall = l2h_stall_glb_stall_r;
assign axi_cgra_stall = l2h_stall_cgra_stall_r;

assign interrupt_internal = l2h_global_isr_intr_o;

// global reset and soft reset controller
assign axi_global_reset = (l2h_global_reset_cnt_r > 0);
assign axi_soft_reset = (l2h_soft_reset_cnt_r > 0);

assign h2l_global_reset_cnt_we = (l2h_global_reset_cnt_r > 0);
assign h2l_global_reset_cnt_w = l2h_global_reset_cnt_r - 1;
assign h2l_soft_reset_cnt_we = (l2h_soft_reset_cnt_r > 0);
assign h2l_soft_reset_cnt_w = l2h_soft_reset_cnt_r - 1;

//============================================================================//
// interrupt register
//============================================================================//
always_ff @(posedge clk or posedge reset) begin
    if (reset) begin
        interrupt <= 0;
    end
    else begin
        interrupt <= interrupt_internal;
    end
end

//============================================================================//
// cgra config control logic
//============================================================================//
always_comb begin
    h2l_cgra_config_write_cnt_w = l2h_cgra_config_write_cnt_r - 1;
    h2l_cgra_config_write_cnt_we = (l2h_cgra_config_write_cnt_r > 0);
    h2l_cgra_config_read_cnt_w = l2h_cgra_config_read_cnt_r - 1;
    h2l_cgra_config_read_cnt_we = (l2h_cgra_config_read_cnt_r > 0);
end

always_comb begin
    axi_cgra_cfg_read = l2h_cgra_config_read_cnt_ored_o;
    axi_cgra_cfg_write = l2h_cgra_config_write_cnt_ored_o;
    axi_cgra_cfg_addr = '0;
    axi_cgra_cfg_wr_data = '0;
    if (axi_cgra_cfg_read) begin
        axi_cgra_cfg_addr = l2h_cgra_config_addr_addr_r;
    end
    else if (axi_cgra_cfg_write) begin
        axi_cgra_cfg_addr = l2h_cgra_config_addr_addr_r;
        axi_cgra_cfg_wr_data = l2h_cgra_config_wr_data_data_r;
    end
end

always_comb begin
    h2l_cgra_config_rd_data_data_w = axi_cgra_cfg_data_in;
    h2l_cgra_config_rd_data_data_we = axi_cgra_cfg_read;
end

//============================================================================//
// axi control logic
//============================================================================//
always_comb begin
    axi_wr_id_match = (axi_glc_cfg_wr_addr[`$block_axi_addr_width-1`:`$reg_addr_width+2`] == 0);
    axi_rd_id_match = (axi_glc_cfg_rd_addr[`$block_axi_addr_width-1`:`$reg_addr_width+2`] == 0);
    jtag_wr_id_match = (jtag_axi_wr_addr[`$block_axi_addr_width-1`:`$reg_addr_width+2`] == 0);
    jtag_rd_id_match = (jtag_axi_rd_addr[`$block_axi_addr_width-1`:`$reg_addr_width+2`] == 0);
end

always_comb begin
    wr_data_internal = '0;
    addr_internal = '0;
    read_internal = 0;
    write_internal = 0;
    is_jtag = 0;
    // write address override read address when both are asserted
    if (axi_glc_cfg_wr_en & axi_wr_id_match) begin
        wr_data_internal = axi_glc_cfg_wr_data;
        addr_internal = axi_glc_cfg_wr_addr[`$reg_addr_width+1`:2];
        write_internal = 1;
        is_jtag = 0;
    end
    else if (axi_glc_cfg_rd_en & axi_rd_id_match) begin
        addr_internal = axi_glc_cfg_rd_addr[`$reg_addr_width+1`:2];
        read_internal = 1;
        is_jtag = 0;
    end
    else if (jtag_axi_wr_en & jtag_wr_id_match) begin
        wr_data_internal = jtag_axi_wr_data;
        addr_internal = jtag_axi_wr_addr[`$reg_addr_width+1`:2];
        write_internal = 1;
        is_jtag = 1;
    end
    else if (jtag_axi_rd_en & jtag_rd_id_match) begin
        addr_internal = jtag_axi_rd_addr[`$reg_addr_width+1`:2];
        read_internal = 1;
        is_jtag = 1;
    end
end

always_ff @(posedge clk or posedge reset) begin
    if (reset) begin
        rd_en_d1 <= 0;
        rd_en_d2 <= 0;
        is_jtag_d1 <= 0;
        is_jtag_d2 <= 0;
    end
    else begin
        rd_en_d1 <= read_internal;
        rd_en_d2 <= rd_en_d1;
        is_jtag_d1 <= is_jtag;
        is_jtag_d2 <= is_jtag_d1;
    end
end

always_comb begin
    axi_rd_data_valid_next = 0;
    axi_rd_data_next = '0;
    if (~is_jtag_d2 & rd_en_d2 & (d2h_dec_pio_ack | d2h_dec_pio_nack)) begin
        axi_rd_data_valid_next = 1;
        axi_rd_data_next = d2h_dec_pio_read_data;
    end
end

always_comb begin
    jtag_rd_data_valid_next = 0;
    jtag_rd_data_next = '0;
    if (is_jtag_d2 & rd_en_d2 & (d2h_dec_pio_ack | d2h_dec_pio_nack)) begin
        jtag_rd_data_valid_next = 1;
        jtag_rd_data_next = d2h_dec_pio_read_data;
    end
end


always_ff @(posedge clk or posedge reset) begin
    if (reset) begin
        axi_rd_data_valid_internal <= 0;
        axi_rd_data_internal <= '0;
        jtag_rd_data_valid_internal <= 0;
        jtag_rd_data_internal <= '0;
    end
    else begin
        axi_rd_data_valid_internal <= axi_rd_data_valid_next;
        axi_rd_data_internal <= axi_rd_data_next;
        jtag_rd_data_valid_internal <= jtag_rd_data_valid_next;
        jtag_rd_data_internal <= jtag_rd_data_next;
    end
end

always_comb begin
    axi_glc_cfg_rd_data = axi_rd_data_internal;
    axi_glc_cfg_rd_data_valid = axi_rd_data_valid_internal;
    jtag_axi_rd_data = jtag_rd_data_internal;
    jtag_axi_rd_data_valid = jtag_rd_data_valid_internal;
end

//============================================================================//
// glc_pio instantiation
//============================================================================//
glc_pio glc_pio(
    .*
);

endmodule
