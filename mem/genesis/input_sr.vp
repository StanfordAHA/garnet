//;    use POSIX;
//;    my $backtick = "`";
///////////////////////////////////////////////////////////////////
// CGRA memory generator
//////////////////////////////////////////////////////////////////


`$backtick`define xassert(condition, message) if(condition) begin $display(message); $finish(1); end


//; my $dwidth   = parameter(Name=>'dwidth', val=> 16, doc=>'word width');
module `mname`(
clk,
reset,
flush,
fsm_en,
data_in,
wen,
data_out,
avail_w1,
avail_w2,
ren_w1,
ren_w2,
count
);

  input clk;
  input reset;
  input flush;
  input fsm_en;
  input [`$dwidth - 1`:0] data_in;
  input ren_w1;
  input ren_w2;
  input wen;
  output reg avail_w1;
  output reg avail_w2;
  output reg [`($dwidth * 2) - 1`:0] data_out;
  
  reg [`($dwidth*3) - 1`:0] data_sr;
  output reg [1:0] count;
  
  wire ___genesis_wire_`${dwidth}`;

  always @(posedge clk) begin
   if (fsm_en==1'b1) begin
     if (wen==1'b1) begin
       data_sr <= {data_sr[`($dwidth*2) - 1`:0],data_in};
     end
   end
  end

  always @(posedge clk) begin
   // assert only ren_w2 or ren_w1 at a time.
   // asserting both is an error
   `$backtick`xassert((ren_w2&ren_w1)==1'b1 , "both ren_w2 and ren_w1 are asserted" )
  end
  always @(posedge clk or posedge reset) begin
    if (reset==1'b1) begin
      count <= 2'd0;
    end	
    else if (flush==1'b1) begin
      count <= 2'd0;
    end
    else if (fsm_en==1'b1) begin
      if (wen==1'b1 && (ren_w2==1'b0 && ren_w1==1'b0)) begin
        count <= count + 2'd1;
        `$backtick`xassert(count >= 2'd3, "pushing data into sr when count >= 3")
      end else if (wen==1'b1 && ren_w2==1'b1) begin
        count <= count - 2'd1;
        `$backtick`xassert(count == 2'd0, "popping pixel from sr when count == 0. Case A.")
      end else if (wen==1'b0 && ren_w2==1'b1) begin
        count <= count - 2'd2;
        `$backtick`xassert(count <= 2'd1, "popping two pixels from sr when count <= 1")
      end else if (wen==1'b0 && ren_w1==1'b1) begin
        count <= count - 2'd1;
        `$backtick`xassert(count == 2'd0, "popping pixel from sr when count ==0. Case B.")
      end else if (wen==1'b1 && ren_w1==1'b1) begin
        count <= count;
      end
    end
  end


  always @(*) begin
      avail_w2 <= 1'b0;
      if (wen==1'b0 && ren_w2==1'b0) begin
        avail_w2 <= (count >= 2'd2);        
      end else if (wen==1'b0 && ren_w2==1'b1) begin
        avail_w2 <= 1'b0;      
      end else if (wen==1'b1 && ren_w2==1'b0) begin
        avail_w2 <= (count >= 2'd1);      
      end else if (wen==1'b1 && ren_w2==1'b1) begin
        avail_w2 <= (count == 2'd3);      
      end
  end
  always @(*) begin
      avail_w1 <= 1'b0;
      if (wen==1'b0 && ren_w1==1'b0 && ren_w2==1'b0) begin
        avail_w1 <= (count >= 2'd1);      
      end else if (wen==1'b0 && ren_w1==1'b0 && ren_w2==1'b1) begin
        avail_w1 <= (count == 2'd3); 
      end else if (wen==1'b0 && ren_w1==1'b1) begin
        avail_w1 <= (count >= 2'd2);      
      end else if (wen==1'b1 && ren_w1==1'b0 && ren_w2==1'b0) begin
        avail_w1 <= 1'b1;      
      end else if (wen==1'b1 && ren_w1==1'b0 && ren_w2==1'b1) begin
        avail_w1 <= (count >= 2'd2);
      end else if (wen==1'b1 && ren_w1==1'b1) begin
        avail_w1 <= 1'b1;      
      end
  end

  always @(*) begin
    if (ren_w2==1'b1) begin
      if (count==2'd2) begin
        data_out <= data_sr[`($dwidth*2) - 1`:0];
      end else if (count==2'd3) begin
        data_out <= data_sr[`($dwidth*3) - 1`: `$dwidth`];
      end else begin
        data_out <= `($dwidth * 2)`'h0;
      end
      
    end else if (ren_w1==1'b1) begin
      if (count==2'd1) begin
        data_out <= {`($dwidth)`'d0, data_sr[`($dwidth) - 1`:0]};
      end else if (count==2'd2) begin
        data_out <= {`($dwidth)`'d0, data_sr[`($dwidth*2) - 1`:`($dwidth)`]};
      end else if (count==2'd3) begin
        data_out <= {`($dwidth)`'d0, data_sr[`($dwidth*3) - 1`: `($dwidth*2)`]};
      end else begin
        data_out <= `($dwidth * 2)`'h0;
      end
    end else begin
      data_out <= `$dwidth*2`'d0;
    end
  end

endmodule

