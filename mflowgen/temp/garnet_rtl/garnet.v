// Module `memory_core` defined externally
// Module `global_controller` defined externally
// Module `global_buffer` defined externally
module io_core (input [0:0] f2io_1, input [15:0] f2io_16, input [0:0] glb2io_1, input [15:0] glb2io_16, output [0:0] io2f_1, output [15:0] io2f_16, output [0:0] io2glb_1, output [15:0] io2glb_16);
assign io2f_1 = glb2io_1;
assign io2f_16 = glb2io_16;
assign io2glb_1 = f2io_1;
assign io2glb_16 = f2io_16;
endmodule

module fp_mul #(parameter exp_width = 1, parameter ieee_compliance = 1, parameter sig_width = 1) (input [exp_width+sig_width:0] a, input [exp_width+sig_width:0] b, input [2:0] rnd, output [exp_width+sig_width:0] z, output [7:0] status);
wire [7:0] status;
DW_fp_mult #(.sig_width(sig_width), .exp_width(exp_width), .ieee_compliance(ieee_compliance)) mul_inst (.a(a),.b(b),.rnd(rnd),.z(z),.status(status));
endmodule

module fp_add #(parameter exp_width = 1, parameter ieee_compliance = 1, parameter sig_width = 1) (input [exp_width+sig_width:0] a, input [exp_width+sig_width:0] b, input [2:0] rnd, output [exp_width+sig_width:0] z, output [7:0] status);
wire [7:0] status;
DW_fp_add #(.sig_width(sig_width), .exp_width(exp_width), .ieee_compliance(ieee_compliance)) add_inst (.a(a),.b(b),.rnd(rnd),.z(z),.status(status));
endmodule

module coreir_xor #(parameter width = 1) (input [width-1:0] in0, input [width-1:0] in1, output [width-1:0] out);
  assign out = in0 ^ in1;
endmodule

module coreir_ult #(parameter width = 1) (input [width-1:0] in0, input [width-1:0] in1, output out);
  assign out = in0 < in1;
endmodule

module coreir_ule #(parameter width = 1) (input [width-1:0] in0, input [width-1:0] in1, output out);
  assign out = in0 <= in1;
endmodule

module coreir_ugt #(parameter width = 1) (input [width-1:0] in0, input [width-1:0] in1, output out);
  assign out = in0 > in1;
endmodule

module coreir_uge #(parameter width = 1) (input [width-1:0] in0, input [width-1:0] in1, output out);
  assign out = in0 >= in1;
endmodule

module coreir_sub #(parameter width = 1) (input [width-1:0] in0, input [width-1:0] in1, output [width-1:0] out);
  assign out = in0 - in1;
endmodule

module coreir_slt #(parameter width = 1) (input [width-1:0] in0, input [width-1:0] in1, output out);
  assign out = $signed(in0) < $signed(in1);
endmodule

module coreir_slice #(parameter hi = 1, parameter lo = 0, parameter width = 1) (input [width-1:0] in, output [hi-lo-1:0] out);
  assign out = in[hi-1:lo];
endmodule

module coreir_sle #(parameter width = 1) (input [width-1:0] in0, input [width-1:0] in1, output out);
  assign out = $signed(in0) <= $signed(in1);
endmodule

module coreir_shl #(parameter width = 1) (input [width-1:0] in0, input [width-1:0] in1, output [width-1:0] out);
  assign out = in0 << in1;
endmodule

module coreir_sge #(parameter width = 1) (input [width-1:0] in0, input [width-1:0] in1, output out);
  assign out = $signed(in0) >= $signed(in1);
endmodule

module coreir_reg_arst #(parameter width = 1, parameter arst_posedge = 1, parameter clk_posedge = 1, parameter init = 1) (input clk, input arst, input [width-1:0] in, output [width-1:0] out);
  reg [width-1:0] outReg;
  wire real_rst;
  assign real_rst = arst_posedge ? arst : ~arst;
  wire real_clk;
  assign real_clk = clk_posedge ? clk : ~clk;
  always @(posedge real_clk, posedge real_rst) begin
    if (real_rst) outReg <= init;
    else outReg <= in;
  end
  assign out = outReg;
endmodule

module coreir_reg #(parameter width = 1, parameter clk_posedge = 1, parameter init = 1) (input clk, input [width-1:0] in, output [width-1:0] out);
  reg [width-1:0] outReg=init;
  wire real_clk;
  assign real_clk = clk_posedge ? clk : ~clk;
  always @(posedge real_clk) begin
    outReg <= in;
  end
  assign out = outReg;
endmodule

module coreir_orr #(parameter width = 1) (input [width-1:0] in, output out);
  assign out = |in;
endmodule

module coreir_or #(parameter width = 1) (input [width-1:0] in0, input [width-1:0] in1, output [width-1:0] out);
  assign out = in0 | in1;
endmodule

module coreir_not #(parameter width = 1) (input [width-1:0] in, output [width-1:0] out);
  assign out = ~in;
endmodule

module coreir_neg #(parameter width = 1) (input [width-1:0] in, output [width-1:0] out);
  assign out = -in;
endmodule

module coreir_mux #(parameter width = 1) (input [width-1:0] in0, input [width-1:0] in1, input sel, output [width-1:0] out);
  assign out = sel ? in1 : in0;
endmodule

module coreir_mul #(parameter width = 1) (input [width-1:0] in0, input [width-1:0] in1, output [width-1:0] out);
  assign out = in0 * in1;
endmodule

module coreir_lshr #(parameter width = 1) (input [width-1:0] in0, input [width-1:0] in1, output [width-1:0] out);
  assign out = in0 >> in1;
endmodule

module coreir_eq #(parameter width = 1) (input [width-1:0] in0, input [width-1:0] in1, output out);
  assign out = in0 == in1;
endmodule

module coreir_const #(parameter width = 1, parameter value = 1) (output [width-1:0] out);
  assign out = value;
endmodule

module float_mul__exp_bits8__frac_bits7 (input [15:0] in0, input [15:0] in1, output [15:0] out);
wire [2:0] _$0_out;
wire [7:0] mi_status;
wire [15:0] mi_z;
coreir_const #(.value(3'h0), .width(3)) _$0(.out(_$0_out));
fp_mul #(.exp_width(8), .ieee_compliance(1'b0), .sig_width(7)) mi(.a(in0), .b(in1), .rnd(_$0_out), .status(mi_status), .z(mi_z));
assign out = mi_z;
endmodule

module float_add__exp_bits8__frac_bits7 (input [15:0] in0, input [15:0] in1, output [15:0] out);
wire [2:0] _$0_out;
wire [7:0] ai_status;
wire [15:0] ai_z;
coreir_const #(.value(3'h0), .width(3)) _$0(.out(_$0_out));
fp_add #(.exp_width(8), .ieee_compliance(1'b0), .sig_width(7)) ai(.a(in0), .b(in1), .rnd(_$0_out), .status(ai_status), .z(ai_z));
assign out = ai_z;
endmodule

module coreir_ashr #(parameter width = 1) (input [width-1:0] in0, input [width-1:0] in1, output [width-1:0] out);
  assign out = $signed(in0) >>> in1;
endmodule

module coreir_and #(parameter width = 1) (input [width-1:0] in0, input [width-1:0] in1, output [width-1:0] out);
  assign out = in0 & in1;
endmodule

module coreir_add #(parameter width = 1) (input [width-1:0] in0, input [width-1:0] in1, output [width-1:0] out);
  assign out = in0 + in1;
endmodule

module corebit_xor (input in0, input in1, output out);
  assign out = in0 ^ in1;
endmodule

module corebit_term (input in);

endmodule

module corebit_or (input in0, input in1, output out);
  assign out = in0 | in1;
endmodule

module corebit_not (input in, output out);
  assign out = ~in;
endmodule

module corebit_const #(parameter value = 1) (output out);
  assign out = value;
endmodule

module corebit_and (input in0, input in1, output out);
  assign out = in0 & in1;
endmodule

module overflow (output O, input [15:0] a, input [15:0] b, input [15:0] res);
wire magma_Bit_and_inst0_out;
wire magma_Bit_and_inst1_out;
wire magma_Bit_and_inst2_out;
wire magma_Bit_and_inst3_out;
wire magma_Bit_not_inst0_out;
wire magma_Bit_not_inst1_out;
wire magma_Bit_not_inst2_out;
wire magma_Bit_or_inst0_out;
corebit_and magma_Bit_and_inst0(.in0(a[15]), .in1(b[15]), .out(magma_Bit_and_inst0_out));
corebit_and magma_Bit_and_inst1(.in0(magma_Bit_and_inst0_out), .in1(magma_Bit_not_inst0_out), .out(magma_Bit_and_inst1_out));
corebit_and magma_Bit_and_inst2(.in0(magma_Bit_not_inst1_out), .in1(magma_Bit_not_inst2_out), .out(magma_Bit_and_inst2_out));
corebit_and magma_Bit_and_inst3(.in0(magma_Bit_and_inst2_out), .in1(res[15]), .out(magma_Bit_and_inst3_out));
corebit_not magma_Bit_not_inst0(.in(res[15]), .out(magma_Bit_not_inst0_out));
corebit_not magma_Bit_not_inst1(.in(a[15]), .out(magma_Bit_not_inst1_out));
corebit_not magma_Bit_not_inst2(.in(b[15]), .out(magma_Bit_not_inst2_out));
corebit_or magma_Bit_or_inst0(.in0(magma_Bit_and_inst1_out), .in1(magma_Bit_and_inst3_out), .out(magma_Bit_or_inst0_out));
assign O = magma_Bit_or_inst0_out;
endmodule

module commonlib_muxn__N2__width9 (input [8:0] in_data_0, input [8:0] in_data_1, input [0:0] in_sel, output [8:0] out);
wire [8:0] _join_out;
coreir_mux #(.width(9)) _join(.in0(in_data_0), .in1(in_data_1), .out(_join_out), .sel(in_sel[0]));
assign out = _join_out;
endmodule

module commonlib_muxn__N2__width8 (input [7:0] in_data_0, input [7:0] in_data_1, input [0:0] in_sel, output [7:0] out);
wire [7:0] _join_out;
coreir_mux #(.width(8)) _join(.in0(in_data_0), .in1(in_data_1), .out(_join_out), .sel(in_sel[0]));
assign out = _join_out;
endmodule

module commonlib_muxn__N2__width5 (input [4:0] in_data_0, input [4:0] in_data_1, input [0:0] in_sel, output [4:0] out);
wire [4:0] _join_out;
coreir_mux #(.width(5)) _join(.in0(in_data_0), .in1(in_data_1), .out(_join_out), .sel(in_sel[0]));
assign out = _join_out;
endmodule

module commonlib_muxn__N2__width4 (input [3:0] in_data_0, input [3:0] in_data_1, input [0:0] in_sel, output [3:0] out);
wire [3:0] _join_out;
coreir_mux #(.width(4)) _join(.in0(in_data_0), .in1(in_data_1), .out(_join_out), .sel(in_sel[0]));
assign out = _join_out;
endmodule

module commonlib_muxn__N2__width32 (input [31:0] in_data_0, input [31:0] in_data_1, input [0:0] in_sel, output [31:0] out);
wire [31:0] _join_out;
coreir_mux #(.width(32)) _join(.in0(in_data_0), .in1(in_data_1), .out(_join_out), .sel(in_sel[0]));
assign out = _join_out;
endmodule

module commonlib_muxn__N4__width32 (input [31:0] in_data_0, input [31:0] in_data_1, input [31:0] in_data_2, input [31:0] in_data_3, input [1:0] in_sel, output [31:0] out);
wire [31:0] _join_out;
wire [31:0] muxN_0_out;
wire [31:0] muxN_1_out;
wire [0:0] sel_slice0_out;
wire [0:0] sel_slice1_out;
coreir_mux #(.width(32)) _join(.in0(muxN_0_out), .in1(muxN_1_out), .out(_join_out), .sel(in_sel[1]));
commonlib_muxn__N2__width32 muxN_0(.in_data_0(in_data_0), .in_data_1(in_data_1), .in_sel(sel_slice0_out), .out(muxN_0_out));
commonlib_muxn__N2__width32 muxN_1(.in_data_0(in_data_2), .in_data_1(in_data_3), .in_sel(sel_slice1_out), .out(muxN_1_out));
coreir_slice #(.hi(1), .lo(0), .width(2)) sel_slice0(.in(in_sel), .out(sel_slice0_out));
coreir_slice #(.hi(1), .lo(0), .width(2)) sel_slice1(.in(in_sel), .out(sel_slice1_out));
assign out = _join_out;
endmodule

module commonlib_muxn__N8__width32 (input [31:0] in_data_0, input [31:0] in_data_1, input [31:0] in_data_2, input [31:0] in_data_3, input [31:0] in_data_4, input [31:0] in_data_5, input [31:0] in_data_6, input [31:0] in_data_7, input [2:0] in_sel, output [31:0] out);
wire [31:0] _join_out;
wire [31:0] muxN_0_out;
wire [31:0] muxN_1_out;
wire [1:0] sel_slice0_out;
wire [1:0] sel_slice1_out;
coreir_mux #(.width(32)) _join(.in0(muxN_0_out), .in1(muxN_1_out), .out(_join_out), .sel(in_sel[2]));
commonlib_muxn__N4__width32 muxN_0(.in_data_0(in_data_0), .in_data_1(in_data_1), .in_data_2(in_data_2), .in_data_3(in_data_3), .in_sel(sel_slice0_out), .out(muxN_0_out));
commonlib_muxn__N4__width32 muxN_1(.in_data_0(in_data_4), .in_data_1(in_data_5), .in_data_2(in_data_6), .in_data_3(in_data_7), .in_sel(sel_slice1_out), .out(muxN_1_out));
coreir_slice #(.hi(2), .lo(0), .width(3)) sel_slice0(.in(in_sel), .out(sel_slice0_out));
coreir_slice #(.hi(2), .lo(0), .width(3)) sel_slice1(.in(in_sel), .out(sel_slice1_out));
assign out = _join_out;
endmodule

module commonlib_muxn__N2__width3 (input [2:0] in_data_0, input [2:0] in_data_1, input [0:0] in_sel, output [2:0] out);
wire [2:0] _join_out;
coreir_mux #(.width(3)) _join(.in0(in_data_0), .in1(in_data_1), .out(_join_out), .sel(in_sel[0]));
assign out = _join_out;
endmodule

module commonlib_muxn__N2__width23 (input [22:0] in_data_0, input [22:0] in_data_1, input [0:0] in_sel, output [22:0] out);
wire [22:0] _join_out;
coreir_mux #(.width(23)) _join(.in0(in_data_0), .in1(in_data_1), .out(_join_out), .sel(in_sel[0]));
assign out = _join_out;
endmodule

module commonlib_muxn__N2__width2 (input [1:0] in_data_0, input [1:0] in_data_1, input [0:0] in_sel, output [1:0] out);
wire [1:0] _join_out;
coreir_mux #(.width(2)) _join(.in0(in_data_0), .in1(in_data_1), .out(_join_out), .sel(in_sel[0]));
assign out = _join_out;
endmodule

module commonlib_muxn__N2__width16 (input [15:0] in_data_0, input [15:0] in_data_1, input [0:0] in_sel, output [15:0] out);
wire [15:0] _join_out;
coreir_mux #(.width(16)) _join(.in0(in_data_0), .in1(in_data_1), .out(_join_out), .sel(in_sel[0]));
assign out = _join_out;
endmodule

module commonlib_muxn__N4__width16 (input [15:0] in_data_0, input [15:0] in_data_1, input [15:0] in_data_2, input [15:0] in_data_3, input [1:0] in_sel, output [15:0] out);
wire [15:0] _join_out;
wire [15:0] muxN_0_out;
wire [15:0] muxN_1_out;
wire [0:0] sel_slice0_out;
wire [0:0] sel_slice1_out;
coreir_mux #(.width(16)) _join(.in0(muxN_0_out), .in1(muxN_1_out), .out(_join_out), .sel(in_sel[1]));
commonlib_muxn__N2__width16 muxN_0(.in_data_0(in_data_0), .in_data_1(in_data_1), .in_sel(sel_slice0_out), .out(muxN_0_out));
commonlib_muxn__N2__width16 muxN_1(.in_data_0(in_data_2), .in_data_1(in_data_3), .in_sel(sel_slice1_out), .out(muxN_1_out));
coreir_slice #(.hi(1), .lo(0), .width(2)) sel_slice0(.in(in_sel), .out(sel_slice0_out));
coreir_slice #(.hi(1), .lo(0), .width(2)) sel_slice1(.in(in_sel), .out(sel_slice1_out));
assign out = _join_out;
endmodule

module commonlib_muxn__N8__width16 (input [15:0] in_data_0, input [15:0] in_data_1, input [15:0] in_data_2, input [15:0] in_data_3, input [15:0] in_data_4, input [15:0] in_data_5, input [15:0] in_data_6, input [15:0] in_data_7, input [2:0] in_sel, output [15:0] out);
wire [15:0] _join_out;
wire [15:0] muxN_0_out;
wire [15:0] muxN_1_out;
wire [1:0] sel_slice0_out;
wire [1:0] sel_slice1_out;
coreir_mux #(.width(16)) _join(.in0(muxN_0_out), .in1(muxN_1_out), .out(_join_out), .sel(in_sel[2]));
commonlib_muxn__N4__width16 muxN_0(.in_data_0(in_data_0), .in_data_1(in_data_1), .in_data_2(in_data_2), .in_data_3(in_data_3), .in_sel(sel_slice0_out), .out(muxN_0_out));
commonlib_muxn__N4__width16 muxN_1(.in_data_0(in_data_4), .in_data_1(in_data_5), .in_data_2(in_data_6), .in_data_3(in_data_7), .in_sel(sel_slice1_out), .out(muxN_1_out));
coreir_slice #(.hi(2), .lo(0), .width(3)) sel_slice0(.in(in_sel), .out(sel_slice0_out));
coreir_slice #(.hi(2), .lo(0), .width(3)) sel_slice1(.in(in_sel), .out(sel_slice1_out));
assign out = _join_out;
endmodule

module commonlib_muxn__N2__width1 (input [0:0] in_data_0, input [0:0] in_data_1, input [0:0] in_sel, output [0:0] out);
wire [0:0] _join_out;
coreir_mux #(.width(1)) _join(.in0(in_data_0), .in1(in_data_1), .out(_join_out), .sel(in_sel[0]));
assign out = _join_out;
endmodule

module commonlib_muxn__N4__width1 (input [0:0] in_data_0, input [0:0] in_data_1, input [0:0] in_data_2, input [0:0] in_data_3, input [1:0] in_sel, output [0:0] out);
wire [0:0] _join_out;
wire [0:0] muxN_0_out;
wire [0:0] muxN_1_out;
wire [0:0] sel_slice0_out;
wire [0:0] sel_slice1_out;
coreir_mux #(.width(1)) _join(.in0(muxN_0_out), .in1(muxN_1_out), .out(_join_out), .sel(in_sel[1]));
commonlib_muxn__N2__width1 muxN_0(.in_data_0(in_data_0), .in_data_1(in_data_1), .in_sel(sel_slice0_out), .out(muxN_0_out));
commonlib_muxn__N2__width1 muxN_1(.in_data_0(in_data_2), .in_data_1(in_data_3), .in_sel(sel_slice1_out), .out(muxN_1_out));
coreir_slice #(.hi(1), .lo(0), .width(2)) sel_slice0(.in(in_sel), .out(sel_slice0_out));
coreir_slice #(.hi(1), .lo(0), .width(2)) sel_slice1(.in(in_sel), .out(sel_slice1_out));
assign out = _join_out;
endmodule

module commonlib_muxn__N8__width1 (input [0:0] in_data_0, input [0:0] in_data_1, input [0:0] in_data_2, input [0:0] in_data_3, input [0:0] in_data_4, input [0:0] in_data_5, input [0:0] in_data_6, input [0:0] in_data_7, input [2:0] in_sel, output [0:0] out);
wire [0:0] _join_out;
wire [0:0] muxN_0_out;
wire [0:0] muxN_1_out;
wire [1:0] sel_slice0_out;
wire [1:0] sel_slice1_out;
coreir_mux #(.width(1)) _join(.in0(muxN_0_out), .in1(muxN_1_out), .out(_join_out), .sel(in_sel[2]));
commonlib_muxn__N4__width1 muxN_0(.in_data_0(in_data_0), .in_data_1(in_data_1), .in_data_2(in_data_2), .in_data_3(in_data_3), .in_sel(sel_slice0_out), .out(muxN_0_out));
commonlib_muxn__N4__width1 muxN_1(.in_data_0(in_data_4), .in_data_1(in_data_5), .in_data_2(in_data_6), .in_data_3(in_data_7), .in_sel(sel_slice1_out), .out(muxN_1_out));
coreir_slice #(.hi(2), .lo(0), .width(3)) sel_slice0(.in(in_sel), .out(sel_slice0_out));
coreir_slice #(.hi(2), .lo(0), .width(3)) sel_slice1(.in(in_sel), .out(sel_slice1_out));
assign out = _join_out;
endmodule

module commonlib_muxn__N1__width32 (input [31:0] in_data_0, input [0:0] in_sel, output [31:0] out);
corebit_term term_sel(.in(in_sel[0]));
assign out = in_data_0;
endmodule

module commonlib_muxn__N5__width32 (input [31:0] in_data_0, input [31:0] in_data_1, input [31:0] in_data_2, input [31:0] in_data_3, input [31:0] in_data_4, input [2:0] in_sel, output [31:0] out);
wire [31:0] _join_out;
wire [31:0] muxN_0_out;
wire [31:0] muxN_1_out;
wire [1:0] sel_slice0_out;
wire [0:0] sel_slice1_out;
coreir_mux #(.width(32)) _join(.in0(muxN_0_out), .in1(muxN_1_out), .out(_join_out), .sel(in_sel[2]));
commonlib_muxn__N4__width32 muxN_0(.in_data_0(in_data_0), .in_data_1(in_data_1), .in_data_2(in_data_2), .in_data_3(in_data_3), .in_sel(sel_slice0_out), .out(muxN_0_out));
commonlib_muxn__N1__width32 muxN_1(.in_data_0(in_data_4), .in_sel(sel_slice1_out), .out(muxN_1_out));
coreir_slice #(.hi(2), .lo(0), .width(3)) sel_slice0(.in(in_sel), .out(sel_slice0_out));
coreir_slice #(.hi(1), .lo(0), .width(3)) sel_slice1(.in(in_sel), .out(sel_slice1_out));
assign out = _join_out;
endmodule

module commonlib_muxn__N3__width32 (input [31:0] in_data_0, input [31:0] in_data_1, input [31:0] in_data_2, input [1:0] in_sel, output [31:0] out);
wire [31:0] _join_out;
wire [31:0] muxN_0_out;
wire [31:0] muxN_1_out;
wire [0:0] sel_slice0_out;
wire [0:0] sel_slice1_out;
coreir_mux #(.width(32)) _join(.in0(muxN_0_out), .in1(muxN_1_out), .out(_join_out), .sel(in_sel[1]));
commonlib_muxn__N2__width32 muxN_0(.in_data_0(in_data_0), .in_data_1(in_data_1), .in_sel(sel_slice0_out), .out(muxN_0_out));
commonlib_muxn__N1__width32 muxN_1(.in_data_0(in_data_2), .in_sel(sel_slice1_out), .out(muxN_1_out));
coreir_slice #(.hi(1), .lo(0), .width(2)) sel_slice0(.in(in_sel), .out(sel_slice0_out));
coreir_slice #(.hi(1), .lo(0), .width(2)) sel_slice1(.in(in_sel), .out(sel_slice1_out));
assign out = _join_out;
endmodule

module commonlib_muxn__N7__width32 (input [31:0] in_data_0, input [31:0] in_data_1, input [31:0] in_data_2, input [31:0] in_data_3, input [31:0] in_data_4, input [31:0] in_data_5, input [31:0] in_data_6, input [2:0] in_sel, output [31:0] out);
wire [31:0] _join_out;
wire [31:0] muxN_0_out;
wire [31:0] muxN_1_out;
wire [1:0] sel_slice0_out;
wire [1:0] sel_slice1_out;
coreir_mux #(.width(32)) _join(.in0(muxN_0_out), .in1(muxN_1_out), .out(_join_out), .sel(in_sel[2]));
commonlib_muxn__N4__width32 muxN_0(.in_data_0(in_data_0), .in_data_1(in_data_1), .in_data_2(in_data_2), .in_data_3(in_data_3), .in_sel(sel_slice0_out), .out(muxN_0_out));
commonlib_muxn__N3__width32 muxN_1(.in_data_0(in_data_4), .in_data_1(in_data_5), .in_data_2(in_data_6), .in_sel(sel_slice1_out), .out(muxN_1_out));
coreir_slice #(.hi(2), .lo(0), .width(3)) sel_slice0(.in(in_sel), .out(sel_slice0_out));
coreir_slice #(.hi(2), .lo(0), .width(3)) sel_slice1(.in(in_sel), .out(sel_slice1_out));
assign out = _join_out;
endmodule

module commonlib_muxn__N1__width16 (input [15:0] in_data_0, input [0:0] in_sel, output [15:0] out);
corebit_term term_sel(.in(in_sel[0]));
assign out = in_data_0;
endmodule

module commonlib_muxn__N5__width16 (input [15:0] in_data_0, input [15:0] in_data_1, input [15:0] in_data_2, input [15:0] in_data_3, input [15:0] in_data_4, input [2:0] in_sel, output [15:0] out);
wire [15:0] _join_out;
wire [15:0] muxN_0_out;
wire [15:0] muxN_1_out;
wire [1:0] sel_slice0_out;
wire [0:0] sel_slice1_out;
coreir_mux #(.width(16)) _join(.in0(muxN_0_out), .in1(muxN_1_out), .out(_join_out), .sel(in_sel[2]));
commonlib_muxn__N4__width16 muxN_0(.in_data_0(in_data_0), .in_data_1(in_data_1), .in_data_2(in_data_2), .in_data_3(in_data_3), .in_sel(sel_slice0_out), .out(muxN_0_out));
commonlib_muxn__N1__width16 muxN_1(.in_data_0(in_data_4), .in_sel(sel_slice1_out), .out(muxN_1_out));
coreir_slice #(.hi(2), .lo(0), .width(3)) sel_slice0(.in(in_sel), .out(sel_slice0_out));
coreir_slice #(.hi(1), .lo(0), .width(3)) sel_slice1(.in(in_sel), .out(sel_slice1_out));
assign out = _join_out;
endmodule

module commonlib_muxn__N1__width1 (input [0:0] in_data_0, input [0:0] in_sel, output [0:0] out);
corebit_term term_sel(.in(in_sel[0]));
assign out = in_data_0;
endmodule

module commonlib_muxn__N9__width1 (input [0:0] in_data_0, input [0:0] in_data_1, input [0:0] in_data_2, input [0:0] in_data_3, input [0:0] in_data_4, input [0:0] in_data_5, input [0:0] in_data_6, input [0:0] in_data_7, input [0:0] in_data_8, input [3:0] in_sel, output [0:0] out);
wire [0:0] _join_out;
wire [0:0] muxN_0_out;
wire [0:0] muxN_1_out;
wire [2:0] sel_slice0_out;
wire [0:0] sel_slice1_out;
coreir_mux #(.width(1)) _join(.in0(muxN_0_out), .in1(muxN_1_out), .out(_join_out), .sel(in_sel[3]));
commonlib_muxn__N8__width1 muxN_0(.in_data_0(in_data_0), .in_data_1(in_data_1), .in_data_2(in_data_2), .in_data_3(in_data_3), .in_data_4(in_data_4), .in_data_5(in_data_5), .in_data_6(in_data_6), .in_data_7(in_data_7), .in_sel(sel_slice0_out), .out(muxN_0_out));
commonlib_muxn__N1__width1 muxN_1(.in_data_0(in_data_8), .in_sel(sel_slice1_out), .out(muxN_1_out));
coreir_slice #(.hi(3), .lo(0), .width(4)) sel_slice0(.in(in_sel), .out(sel_slice0_out));
coreir_slice #(.hi(1), .lo(0), .width(4)) sel_slice1(.in(in_sel), .out(sel_slice1_out));
assign out = _join_out;
endmodule

module commonlib_muxn__N16__width32 (input [31:0] in_data_0, input [31:0] in_data_1, input [31:0] in_data_10, input [31:0] in_data_11, input [31:0] in_data_12, input [31:0] in_data_13, input [31:0] in_data_14, input [31:0] in_data_15, input [31:0] in_data_2, input [31:0] in_data_3, input [31:0] in_data_4, input [31:0] in_data_5, input [31:0] in_data_6, input [31:0] in_data_7, input [31:0] in_data_8, input [31:0] in_data_9, input [3:0] in_sel, output [31:0] out);
wire [31:0] _join_out;
wire [31:0] muxN_0_out;
wire [31:0] muxN_1_out;
wire [2:0] sel_slice0_out;
wire [2:0] sel_slice1_out;
coreir_mux #(.width(32)) _join(.in0(muxN_0_out), .in1(muxN_1_out), .out(_join_out), .sel(in_sel[3]));
commonlib_muxn__N8__width32 muxN_0(.in_data_0(in_data_0), .in_data_1(in_data_1), .in_data_2(in_data_2), .in_data_3(in_data_3), .in_data_4(in_data_4), .in_data_5(in_data_5), .in_data_6(in_data_6), .in_data_7(in_data_7), .in_sel(sel_slice0_out), .out(muxN_0_out));
commonlib_muxn__N8__width32 muxN_1(.in_data_0(in_data_8), .in_data_1(in_data_9), .in_data_2(in_data_10), .in_data_3(in_data_11), .in_data_4(in_data_12), .in_data_5(in_data_13), .in_data_6(in_data_14), .in_data_7(in_data_15), .in_sel(sel_slice1_out), .out(muxN_1_out));
coreir_slice #(.hi(3), .lo(0), .width(4)) sel_slice0(.in(in_sel), .out(sel_slice0_out));
coreir_slice #(.hi(3), .lo(0), .width(4)) sel_slice1(.in(in_sel), .out(sel_slice1_out));
assign out = _join_out;
endmodule

module commonlib_muxn__N32__width32 (input [31:0] in_data_0, input [31:0] in_data_1, input [31:0] in_data_10, input [31:0] in_data_11, input [31:0] in_data_12, input [31:0] in_data_13, input [31:0] in_data_14, input [31:0] in_data_15, input [31:0] in_data_16, input [31:0] in_data_17, input [31:0] in_data_18, input [31:0] in_data_19, input [31:0] in_data_2, input [31:0] in_data_20, input [31:0] in_data_21, input [31:0] in_data_22, input [31:0] in_data_23, input [31:0] in_data_24, input [31:0] in_data_25, input [31:0] in_data_26, input [31:0] in_data_27, input [31:0] in_data_28, input [31:0] in_data_29, input [31:0] in_data_3, input [31:0] in_data_30, input [31:0] in_data_31, input [31:0] in_data_4, input [31:0] in_data_5, input [31:0] in_data_6, input [31:0] in_data_7, input [31:0] in_data_8, input [31:0] in_data_9, input [4:0] in_sel, output [31:0] out);
wire [31:0] _join_out;
wire [31:0] muxN_0_out;
wire [31:0] muxN_1_out;
wire [3:0] sel_slice0_out;
wire [3:0] sel_slice1_out;
coreir_mux #(.width(32)) _join(.in0(muxN_0_out), .in1(muxN_1_out), .out(_join_out), .sel(in_sel[4]));
commonlib_muxn__N16__width32 muxN_0(.in_data_0(in_data_0), .in_data_1(in_data_1), .in_data_10(in_data_10), .in_data_11(in_data_11), .in_data_12(in_data_12), .in_data_13(in_data_13), .in_data_14(in_data_14), .in_data_15(in_data_15), .in_data_2(in_data_2), .in_data_3(in_data_3), .in_data_4(in_data_4), .in_data_5(in_data_5), .in_data_6(in_data_6), .in_data_7(in_data_7), .in_data_8(in_data_8), .in_data_9(in_data_9), .in_sel(sel_slice0_out), .out(muxN_0_out));
commonlib_muxn__N16__width32 muxN_1(.in_data_0(in_data_16), .in_data_1(in_data_17), .in_data_10(in_data_26), .in_data_11(in_data_27), .in_data_12(in_data_28), .in_data_13(in_data_29), .in_data_14(in_data_30), .in_data_15(in_data_31), .in_data_2(in_data_18), .in_data_3(in_data_19), .in_data_4(in_data_20), .in_data_5(in_data_21), .in_data_6(in_data_22), .in_data_7(in_data_23), .in_data_8(in_data_24), .in_data_9(in_data_25), .in_sel(sel_slice1_out), .out(muxN_1_out));
coreir_slice #(.hi(4), .lo(0), .width(5)) sel_slice0(.in(in_sel), .out(sel_slice0_out));
coreir_slice #(.hi(4), .lo(0), .width(5)) sel_slice1(.in(in_sel), .out(sel_slice1_out));
assign out = _join_out;
endmodule

module commonlib_muxn__N40__width32 (input [31:0] in_data_0, input [31:0] in_data_1, input [31:0] in_data_10, input [31:0] in_data_11, input [31:0] in_data_12, input [31:0] in_data_13, input [31:0] in_data_14, input [31:0] in_data_15, input [31:0] in_data_16, input [31:0] in_data_17, input [31:0] in_data_18, input [31:0] in_data_19, input [31:0] in_data_2, input [31:0] in_data_20, input [31:0] in_data_21, input [31:0] in_data_22, input [31:0] in_data_23, input [31:0] in_data_24, input [31:0] in_data_25, input [31:0] in_data_26, input [31:0] in_data_27, input [31:0] in_data_28, input [31:0] in_data_29, input [31:0] in_data_3, input [31:0] in_data_30, input [31:0] in_data_31, input [31:0] in_data_32, input [31:0] in_data_33, input [31:0] in_data_34, input [31:0] in_data_35, input [31:0] in_data_36, input [31:0] in_data_37, input [31:0] in_data_38, input [31:0] in_data_39, input [31:0] in_data_4, input [31:0] in_data_5, input [31:0] in_data_6, input [31:0] in_data_7, input [31:0] in_data_8, input [31:0] in_data_9, input [5:0] in_sel, output [31:0] out);
wire [31:0] _join_out;
wire [31:0] muxN_0_out;
wire [31:0] muxN_1_out;
wire [4:0] sel_slice0_out;
wire [2:0] sel_slice1_out;
coreir_mux #(.width(32)) _join(.in0(muxN_0_out), .in1(muxN_1_out), .out(_join_out), .sel(in_sel[5]));
commonlib_muxn__N32__width32 muxN_0(.in_data_0(in_data_0), .in_data_1(in_data_1), .in_data_10(in_data_10), .in_data_11(in_data_11), .in_data_12(in_data_12), .in_data_13(in_data_13), .in_data_14(in_data_14), .in_data_15(in_data_15), .in_data_16(in_data_16), .in_data_17(in_data_17), .in_data_18(in_data_18), .in_data_19(in_data_19), .in_data_2(in_data_2), .in_data_20(in_data_20), .in_data_21(in_data_21), .in_data_22(in_data_22), .in_data_23(in_data_23), .in_data_24(in_data_24), .in_data_25(in_data_25), .in_data_26(in_data_26), .in_data_27(in_data_27), .in_data_28(in_data_28), .in_data_29(in_data_29), .in_data_3(in_data_3), .in_data_30(in_data_30), .in_data_31(in_data_31), .in_data_4(in_data_4), .in_data_5(in_data_5), .in_data_6(in_data_6), .in_data_7(in_data_7), .in_data_8(in_data_8), .in_data_9(in_data_9), .in_sel(sel_slice0_out), .out(muxN_0_out));
commonlib_muxn__N8__width32 muxN_1(.in_data_0(in_data_32), .in_data_1(in_data_33), .in_data_2(in_data_34), .in_data_3(in_data_35), .in_data_4(in_data_36), .in_data_5(in_data_37), .in_data_6(in_data_38), .in_data_7(in_data_39), .in_sel(sel_slice1_out), .out(muxN_1_out));
coreir_slice #(.hi(5), .lo(0), .width(6)) sel_slice0(.in(in_sel), .out(sel_slice0_out));
coreir_slice #(.hi(3), .lo(0), .width(6)) sel_slice1(.in(in_sel), .out(sel_slice1_out));
assign out = _join_out;
endmodule

module commonlib_muxn__N35__width32 (input [31:0] in_data_0, input [31:0] in_data_1, input [31:0] in_data_10, input [31:0] in_data_11, input [31:0] in_data_12, input [31:0] in_data_13, input [31:0] in_data_14, input [31:0] in_data_15, input [31:0] in_data_16, input [31:0] in_data_17, input [31:0] in_data_18, input [31:0] in_data_19, input [31:0] in_data_2, input [31:0] in_data_20, input [31:0] in_data_21, input [31:0] in_data_22, input [31:0] in_data_23, input [31:0] in_data_24, input [31:0] in_data_25, input [31:0] in_data_26, input [31:0] in_data_27, input [31:0] in_data_28, input [31:0] in_data_29, input [31:0] in_data_3, input [31:0] in_data_30, input [31:0] in_data_31, input [31:0] in_data_32, input [31:0] in_data_33, input [31:0] in_data_34, input [31:0] in_data_4, input [31:0] in_data_5, input [31:0] in_data_6, input [31:0] in_data_7, input [31:0] in_data_8, input [31:0] in_data_9, input [5:0] in_sel, output [31:0] out);
wire [31:0] _join_out;
wire [31:0] muxN_0_out;
wire [31:0] muxN_1_out;
wire [4:0] sel_slice0_out;
wire [1:0] sel_slice1_out;
coreir_mux #(.width(32)) _join(.in0(muxN_0_out), .in1(muxN_1_out), .out(_join_out), .sel(in_sel[5]));
commonlib_muxn__N32__width32 muxN_0(.in_data_0(in_data_0), .in_data_1(in_data_1), .in_data_10(in_data_10), .in_data_11(in_data_11), .in_data_12(in_data_12), .in_data_13(in_data_13), .in_data_14(in_data_14), .in_data_15(in_data_15), .in_data_16(in_data_16), .in_data_17(in_data_17), .in_data_18(in_data_18), .in_data_19(in_data_19), .in_data_2(in_data_2), .in_data_20(in_data_20), .in_data_21(in_data_21), .in_data_22(in_data_22), .in_data_23(in_data_23), .in_data_24(in_data_24), .in_data_25(in_data_25), .in_data_26(in_data_26), .in_data_27(in_data_27), .in_data_28(in_data_28), .in_data_29(in_data_29), .in_data_3(in_data_3), .in_data_30(in_data_30), .in_data_31(in_data_31), .in_data_4(in_data_4), .in_data_5(in_data_5), .in_data_6(in_data_6), .in_data_7(in_data_7), .in_data_8(in_data_8), .in_data_9(in_data_9), .in_sel(sel_slice0_out), .out(muxN_0_out));
commonlib_muxn__N3__width32 muxN_1(.in_data_0(in_data_32), .in_data_1(in_data_33), .in_data_2(in_data_34), .in_sel(sel_slice1_out), .out(muxN_1_out));
coreir_slice #(.hi(5), .lo(0), .width(6)) sel_slice0(.in(in_sel), .out(sel_slice0_out));
coreir_slice #(.hi(2), .lo(0), .width(6)) sel_slice1(.in(in_sel), .out(sel_slice1_out));
assign out = _join_out;
endmodule

module commonlib_muxn__N16__width16 (input [15:0] in_data_0, input [15:0] in_data_1, input [15:0] in_data_10, input [15:0] in_data_11, input [15:0] in_data_12, input [15:0] in_data_13, input [15:0] in_data_14, input [15:0] in_data_15, input [15:0] in_data_2, input [15:0] in_data_3, input [15:0] in_data_4, input [15:0] in_data_5, input [15:0] in_data_6, input [15:0] in_data_7, input [15:0] in_data_8, input [15:0] in_data_9, input [3:0] in_sel, output [15:0] out);
wire [15:0] _join_out;
wire [15:0] muxN_0_out;
wire [15:0] muxN_1_out;
wire [2:0] sel_slice0_out;
wire [2:0] sel_slice1_out;
coreir_mux #(.width(16)) _join(.in0(muxN_0_out), .in1(muxN_1_out), .out(_join_out), .sel(in_sel[3]));
commonlib_muxn__N8__width16 muxN_0(.in_data_0(in_data_0), .in_data_1(in_data_1), .in_data_2(in_data_2), .in_data_3(in_data_3), .in_data_4(in_data_4), .in_data_5(in_data_5), .in_data_6(in_data_6), .in_data_7(in_data_7), .in_sel(sel_slice0_out), .out(muxN_0_out));
commonlib_muxn__N8__width16 muxN_1(.in_data_0(in_data_8), .in_data_1(in_data_9), .in_data_2(in_data_10), .in_data_3(in_data_11), .in_data_4(in_data_12), .in_data_5(in_data_13), .in_data_6(in_data_14), .in_data_7(in_data_15), .in_sel(sel_slice1_out), .out(muxN_1_out));
coreir_slice #(.hi(3), .lo(0), .width(4)) sel_slice0(.in(in_sel), .out(sel_slice0_out));
coreir_slice #(.hi(3), .lo(0), .width(4)) sel_slice1(.in(in_sel), .out(sel_slice1_out));
assign out = _join_out;
endmodule

module commonlib_muxn__N20__width16 (input [15:0] in_data_0, input [15:0] in_data_1, input [15:0] in_data_10, input [15:0] in_data_11, input [15:0] in_data_12, input [15:0] in_data_13, input [15:0] in_data_14, input [15:0] in_data_15, input [15:0] in_data_16, input [15:0] in_data_17, input [15:0] in_data_18, input [15:0] in_data_19, input [15:0] in_data_2, input [15:0] in_data_3, input [15:0] in_data_4, input [15:0] in_data_5, input [15:0] in_data_6, input [15:0] in_data_7, input [15:0] in_data_8, input [15:0] in_data_9, input [4:0] in_sel, output [15:0] out);
wire [15:0] _join_out;
wire [15:0] muxN_0_out;
wire [15:0] muxN_1_out;
wire [3:0] sel_slice0_out;
wire [1:0] sel_slice1_out;
coreir_mux #(.width(16)) _join(.in0(muxN_0_out), .in1(muxN_1_out), .out(_join_out), .sel(in_sel[4]));
commonlib_muxn__N16__width16 muxN_0(.in_data_0(in_data_0), .in_data_1(in_data_1), .in_data_10(in_data_10), .in_data_11(in_data_11), .in_data_12(in_data_12), .in_data_13(in_data_13), .in_data_14(in_data_14), .in_data_15(in_data_15), .in_data_2(in_data_2), .in_data_3(in_data_3), .in_data_4(in_data_4), .in_data_5(in_data_5), .in_data_6(in_data_6), .in_data_7(in_data_7), .in_data_8(in_data_8), .in_data_9(in_data_9), .in_sel(sel_slice0_out), .out(muxN_0_out));
commonlib_muxn__N4__width16 muxN_1(.in_data_0(in_data_16), .in_data_1(in_data_17), .in_data_2(in_data_18), .in_data_3(in_data_19), .in_sel(sel_slice1_out), .out(muxN_1_out));
coreir_slice #(.hi(4), .lo(0), .width(5)) sel_slice0(.in(in_sel), .out(sel_slice0_out));
coreir_slice #(.hi(2), .lo(0), .width(5)) sel_slice1(.in(in_sel), .out(sel_slice1_out));
assign out = _join_out;
endmodule

module commonlib_muxn__N16__width1 (input [0:0] in_data_0, input [0:0] in_data_1, input [0:0] in_data_10, input [0:0] in_data_11, input [0:0] in_data_12, input [0:0] in_data_13, input [0:0] in_data_14, input [0:0] in_data_15, input [0:0] in_data_2, input [0:0] in_data_3, input [0:0] in_data_4, input [0:0] in_data_5, input [0:0] in_data_6, input [0:0] in_data_7, input [0:0] in_data_8, input [0:0] in_data_9, input [3:0] in_sel, output [0:0] out);
wire [0:0] _join_out;
wire [0:0] muxN_0_out;
wire [0:0] muxN_1_out;
wire [2:0] sel_slice0_out;
wire [2:0] sel_slice1_out;
coreir_mux #(.width(1)) _join(.in0(muxN_0_out), .in1(muxN_1_out), .out(_join_out), .sel(in_sel[3]));
commonlib_muxn__N8__width1 muxN_0(.in_data_0(in_data_0), .in_data_1(in_data_1), .in_data_2(in_data_2), .in_data_3(in_data_3), .in_data_4(in_data_4), .in_data_5(in_data_5), .in_data_6(in_data_6), .in_data_7(in_data_7), .in_sel(sel_slice0_out), .out(muxN_0_out));
commonlib_muxn__N8__width1 muxN_1(.in_data_0(in_data_8), .in_data_1(in_data_9), .in_data_2(in_data_10), .in_data_3(in_data_11), .in_data_4(in_data_12), .in_data_5(in_data_13), .in_data_6(in_data_14), .in_data_7(in_data_15), .in_sel(sel_slice1_out), .out(muxN_1_out));
coreir_slice #(.hi(3), .lo(0), .width(4)) sel_slice0(.in(in_sel), .out(sel_slice0_out));
coreir_slice #(.hi(3), .lo(0), .width(4)) sel_slice1(.in(in_sel), .out(sel_slice1_out));
assign out = _join_out;
endmodule

module commonlib_muxn__N20__width1 (input [0:0] in_data_0, input [0:0] in_data_1, input [0:0] in_data_10, input [0:0] in_data_11, input [0:0] in_data_12, input [0:0] in_data_13, input [0:0] in_data_14, input [0:0] in_data_15, input [0:0] in_data_16, input [0:0] in_data_17, input [0:0] in_data_18, input [0:0] in_data_19, input [0:0] in_data_2, input [0:0] in_data_3, input [0:0] in_data_4, input [0:0] in_data_5, input [0:0] in_data_6, input [0:0] in_data_7, input [0:0] in_data_8, input [0:0] in_data_9, input [4:0] in_sel, output [0:0] out);
wire [0:0] _join_out;
wire [0:0] muxN_0_out;
wire [0:0] muxN_1_out;
wire [3:0] sel_slice0_out;
wire [1:0] sel_slice1_out;
coreir_mux #(.width(1)) _join(.in0(muxN_0_out), .in1(muxN_1_out), .out(_join_out), .sel(in_sel[4]));
commonlib_muxn__N16__width1 muxN_0(.in_data_0(in_data_0), .in_data_1(in_data_1), .in_data_10(in_data_10), .in_data_11(in_data_11), .in_data_12(in_data_12), .in_data_13(in_data_13), .in_data_14(in_data_14), .in_data_15(in_data_15), .in_data_2(in_data_2), .in_data_3(in_data_3), .in_data_4(in_data_4), .in_data_5(in_data_5), .in_data_6(in_data_6), .in_data_7(in_data_7), .in_data_8(in_data_8), .in_data_9(in_data_9), .in_sel(sel_slice0_out), .out(muxN_0_out));
commonlib_muxn__N4__width1 muxN_1(.in_data_0(in_data_16), .in_data_1(in_data_17), .in_data_2(in_data_18), .in_data_3(in_data_19), .in_sel(sel_slice1_out), .out(muxN_1_out));
coreir_slice #(.hi(4), .lo(0), .width(5)) sel_slice0(.in(in_sel), .out(sel_slice0_out));
coreir_slice #(.hi(2), .lo(0), .width(5)) sel_slice1(.in(in_sel), .out(sel_slice1_out));
assign out = _join_out;
endmodule

module commonlib_muxn__N15__width32 (input [31:0] in_data_0, input [31:0] in_data_1, input [31:0] in_data_10, input [31:0] in_data_11, input [31:0] in_data_12, input [31:0] in_data_13, input [31:0] in_data_14, input [31:0] in_data_2, input [31:0] in_data_3, input [31:0] in_data_4, input [31:0] in_data_5, input [31:0] in_data_6, input [31:0] in_data_7, input [31:0] in_data_8, input [31:0] in_data_9, input [3:0] in_sel, output [31:0] out);
wire [31:0] _join_out;
wire [31:0] muxN_0_out;
wire [31:0] muxN_1_out;
wire [2:0] sel_slice0_out;
wire [2:0] sel_slice1_out;
coreir_mux #(.width(32)) _join(.in0(muxN_0_out), .in1(muxN_1_out), .out(_join_out), .sel(in_sel[3]));
commonlib_muxn__N8__width32 muxN_0(.in_data_0(in_data_0), .in_data_1(in_data_1), .in_data_2(in_data_2), .in_data_3(in_data_3), .in_data_4(in_data_4), .in_data_5(in_data_5), .in_data_6(in_data_6), .in_data_7(in_data_7), .in_sel(sel_slice0_out), .out(muxN_0_out));
commonlib_muxn__N7__width32 muxN_1(.in_data_0(in_data_8), .in_data_1(in_data_9), .in_data_2(in_data_10), .in_data_3(in_data_11), .in_data_4(in_data_12), .in_data_5(in_data_13), .in_data_6(in_data_14), .in_sel(sel_slice1_out), .out(muxN_1_out));
coreir_slice #(.hi(3), .lo(0), .width(4)) sel_slice0(.in(in_sel), .out(sel_slice0_out));
coreir_slice #(.hi(3), .lo(0), .width(4)) sel_slice1(.in(in_sel), .out(sel_slice1_out));
assign out = _join_out;
endmodule

module _lut (output O, input bit0, input bit1, input bit2, input [7:0] lut);
wire bit_const_0_None_out;
wire [7:0] const_1_8_out;
wire [7:0] magma_Bits_8_and_inst0_out;
wire [7:0] magma_Bits_8_lshr_inst0_out;
corebit_const #(.value(1'b0)) bit_const_0_None(.out(bit_const_0_None_out));
coreir_const #(.value(8'h01), .width(8)) const_1_8(.out(const_1_8_out));
coreir_and #(.width(8)) magma_Bits_8_and_inst0(.in0(magma_Bits_8_lshr_inst0_out), .in1(const_1_8_out), .out(magma_Bits_8_and_inst0_out));
coreir_lshr #(.width(8)) magma_Bits_8_lshr_inst0(.in0(lut), .in1({bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit2,bit1,bit0}), .out(magma_Bits_8_lshr_inst0_out));
assign O = magma_Bits_8_and_inst0_out[0];
endmodule

module ZextWrapper_5_32 (input [4:0] I, output [31:0] O);
wire bit_const_0_None_out;
corebit_const #(.value(1'b0)) bit_const_0_None(.out(bit_const_0_None_out));
assign O = {bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,I[4],I[3],I[2],I[1],I[0]};
endmodule

module ZextWrapper_4_32 (input [3:0] I, output [31:0] O);
wire bit_const_0_None_out;
corebit_const #(.value(1'b0)) bit_const_0_None(.out(bit_const_0_None_out));
assign O = {bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,I[3],I[2],I[1],I[0]};
endmodule

module ZextWrapper_3_32 (input [2:0] I, output [31:0] O);
wire bit_const_0_None_out;
corebit_const #(.value(1'b0)) bit_const_0_None(.out(bit_const_0_None_out));
assign O = {bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,I[2],I[1],I[0]};
endmodule

module ZextWrapper_2_32 (input [1:0] I, output [31:0] O);
wire bit_const_0_None_out;
corebit_const #(.value(1'b0)) bit_const_0_None(.out(bit_const_0_None_out));
assign O = {bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,I[1],I[0]};
endmodule

module ZextWrapper_1_32 (input [0:0] I, output [31:0] O);
wire bit_const_0_None_out;
corebit_const #(.value(1'b0)) bit_const_0_None(.out(bit_const_0_None_out));
assign O = {bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,I[0]};
endmodule

module ZextWrapper_16_32 (input [15:0] I, output [31:0] O);
wire bit_const_0_None_out;
corebit_const #(.value(1'b0)) bit_const_0_None(.out(bit_const_0_None_out));
assign O = {bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,I[15],I[14],I[13],I[12],I[11],I[10],I[9],I[8],I[7],I[6],I[5],I[4],I[3],I[2],I[1],I[0]};
endmodule

module PassThroughRegister (output [31:0] O, input [31:0] O_in, input [7:0] config_addr, output [7:0] config_addr_out, input [31:0] config_data, output [31:0] config_data_out, input config_en, output config_en_out, input reset, output reset_out);
assign O = O_in;
assign config_addr_out = config_addr;
assign config_data_out = config_data;
assign config_en_out = config_en;
assign reset_out = reset;
endmodule

module Or5x8 (input [7:0] I0, input [7:0] I1, input [7:0] I2, input [7:0] I3, input [7:0] I4, output [7:0] O);
wire orr_inst0_out;
wire orr_inst1_out;
wire orr_inst2_out;
wire orr_inst3_out;
wire orr_inst4_out;
wire orr_inst5_out;
wire orr_inst6_out;
wire orr_inst7_out;
coreir_orr #(.width(5)) orr_inst0(.in({I4[0],I3[0],I2[0],I1[0],I0[0]}), .out(orr_inst0_out));
coreir_orr #(.width(5)) orr_inst1(.in({I4[1],I3[1],I2[1],I1[1],I0[1]}), .out(orr_inst1_out));
coreir_orr #(.width(5)) orr_inst2(.in({I4[2],I3[2],I2[2],I1[2],I0[2]}), .out(orr_inst2_out));
coreir_orr #(.width(5)) orr_inst3(.in({I4[3],I3[3],I2[3],I1[3],I0[3]}), .out(orr_inst3_out));
coreir_orr #(.width(5)) orr_inst4(.in({I4[4],I3[4],I2[4],I1[4],I0[4]}), .out(orr_inst4_out));
coreir_orr #(.width(5)) orr_inst5(.in({I4[5],I3[5],I2[5],I1[5],I0[5]}), .out(orr_inst5_out));
coreir_orr #(.width(5)) orr_inst6(.in({I4[6],I3[6],I2[6],I1[6],I0[6]}), .out(orr_inst6_out));
coreir_orr #(.width(5)) orr_inst7(.in({I4[7],I3[7],I2[7],I1[7],I0[7]}), .out(orr_inst7_out));
assign O = {orr_inst7_out,orr_inst6_out,orr_inst5_out,orr_inst4_out,orr_inst3_out,orr_inst2_out,orr_inst1_out,orr_inst0_out};
endmodule

module Or5x32 (input [31:0] I0, input [31:0] I1, input [31:0] I2, input [31:0] I3, input [31:0] I4, output [31:0] O);
wire orr_inst0_out;
wire orr_inst1_out;
wire orr_inst10_out;
wire orr_inst11_out;
wire orr_inst12_out;
wire orr_inst13_out;
wire orr_inst14_out;
wire orr_inst15_out;
wire orr_inst16_out;
wire orr_inst17_out;
wire orr_inst18_out;
wire orr_inst19_out;
wire orr_inst2_out;
wire orr_inst20_out;
wire orr_inst21_out;
wire orr_inst22_out;
wire orr_inst23_out;
wire orr_inst24_out;
wire orr_inst25_out;
wire orr_inst26_out;
wire orr_inst27_out;
wire orr_inst28_out;
wire orr_inst29_out;
wire orr_inst3_out;
wire orr_inst30_out;
wire orr_inst31_out;
wire orr_inst4_out;
wire orr_inst5_out;
wire orr_inst6_out;
wire orr_inst7_out;
wire orr_inst8_out;
wire orr_inst9_out;
coreir_orr #(.width(5)) orr_inst0(.in({I4[0],I3[0],I2[0],I1[0],I0[0]}), .out(orr_inst0_out));
coreir_orr #(.width(5)) orr_inst1(.in({I4[1],I3[1],I2[1],I1[1],I0[1]}), .out(orr_inst1_out));
coreir_orr #(.width(5)) orr_inst10(.in({I4[10],I3[10],I2[10],I1[10],I0[10]}), .out(orr_inst10_out));
coreir_orr #(.width(5)) orr_inst11(.in({I4[11],I3[11],I2[11],I1[11],I0[11]}), .out(orr_inst11_out));
coreir_orr #(.width(5)) orr_inst12(.in({I4[12],I3[12],I2[12],I1[12],I0[12]}), .out(orr_inst12_out));
coreir_orr #(.width(5)) orr_inst13(.in({I4[13],I3[13],I2[13],I1[13],I0[13]}), .out(orr_inst13_out));
coreir_orr #(.width(5)) orr_inst14(.in({I4[14],I3[14],I2[14],I1[14],I0[14]}), .out(orr_inst14_out));
coreir_orr #(.width(5)) orr_inst15(.in({I4[15],I3[15],I2[15],I1[15],I0[15]}), .out(orr_inst15_out));
coreir_orr #(.width(5)) orr_inst16(.in({I4[16],I3[16],I2[16],I1[16],I0[16]}), .out(orr_inst16_out));
coreir_orr #(.width(5)) orr_inst17(.in({I4[17],I3[17],I2[17],I1[17],I0[17]}), .out(orr_inst17_out));
coreir_orr #(.width(5)) orr_inst18(.in({I4[18],I3[18],I2[18],I1[18],I0[18]}), .out(orr_inst18_out));
coreir_orr #(.width(5)) orr_inst19(.in({I4[19],I3[19],I2[19],I1[19],I0[19]}), .out(orr_inst19_out));
coreir_orr #(.width(5)) orr_inst2(.in({I4[2],I3[2],I2[2],I1[2],I0[2]}), .out(orr_inst2_out));
coreir_orr #(.width(5)) orr_inst20(.in({I4[20],I3[20],I2[20],I1[20],I0[20]}), .out(orr_inst20_out));
coreir_orr #(.width(5)) orr_inst21(.in({I4[21],I3[21],I2[21],I1[21],I0[21]}), .out(orr_inst21_out));
coreir_orr #(.width(5)) orr_inst22(.in({I4[22],I3[22],I2[22],I1[22],I0[22]}), .out(orr_inst22_out));
coreir_orr #(.width(5)) orr_inst23(.in({I4[23],I3[23],I2[23],I1[23],I0[23]}), .out(orr_inst23_out));
coreir_orr #(.width(5)) orr_inst24(.in({I4[24],I3[24],I2[24],I1[24],I0[24]}), .out(orr_inst24_out));
coreir_orr #(.width(5)) orr_inst25(.in({I4[25],I3[25],I2[25],I1[25],I0[25]}), .out(orr_inst25_out));
coreir_orr #(.width(5)) orr_inst26(.in({I4[26],I3[26],I2[26],I1[26],I0[26]}), .out(orr_inst26_out));
coreir_orr #(.width(5)) orr_inst27(.in({I4[27],I3[27],I2[27],I1[27],I0[27]}), .out(orr_inst27_out));
coreir_orr #(.width(5)) orr_inst28(.in({I4[28],I3[28],I2[28],I1[28],I0[28]}), .out(orr_inst28_out));
coreir_orr #(.width(5)) orr_inst29(.in({I4[29],I3[29],I2[29],I1[29],I0[29]}), .out(orr_inst29_out));
coreir_orr #(.width(5)) orr_inst3(.in({I4[3],I3[3],I2[3],I1[3],I0[3]}), .out(orr_inst3_out));
coreir_orr #(.width(5)) orr_inst30(.in({I4[30],I3[30],I2[30],I1[30],I0[30]}), .out(orr_inst30_out));
coreir_orr #(.width(5)) orr_inst31(.in({I4[31],I3[31],I2[31],I1[31],I0[31]}), .out(orr_inst31_out));
coreir_orr #(.width(5)) orr_inst4(.in({I4[4],I3[4],I2[4],I1[4],I0[4]}), .out(orr_inst4_out));
coreir_orr #(.width(5)) orr_inst5(.in({I4[5],I3[5],I2[5],I1[5],I0[5]}), .out(orr_inst5_out));
coreir_orr #(.width(5)) orr_inst6(.in({I4[6],I3[6],I2[6],I1[6],I0[6]}), .out(orr_inst6_out));
coreir_orr #(.width(5)) orr_inst7(.in({I4[7],I3[7],I2[7],I1[7],I0[7]}), .out(orr_inst7_out));
coreir_orr #(.width(5)) orr_inst8(.in({I4[8],I3[8],I2[8],I1[8],I0[8]}), .out(orr_inst8_out));
coreir_orr #(.width(5)) orr_inst9(.in({I4[9],I3[9],I2[9],I1[9],I0[9]}), .out(orr_inst9_out));
assign O = {orr_inst31_out,orr_inst30_out,orr_inst29_out,orr_inst28_out,orr_inst27_out,orr_inst26_out,orr_inst25_out,orr_inst24_out,orr_inst23_out,orr_inst22_out,orr_inst21_out,orr_inst20_out,orr_inst19_out,orr_inst18_out,orr_inst17_out,orr_inst16_out,orr_inst15_out,orr_inst14_out,orr_inst13_out,orr_inst12_out,orr_inst11_out,orr_inst10_out,orr_inst9_out,orr_inst8_out,orr_inst7_out,orr_inst6_out,orr_inst5_out,orr_inst4_out,orr_inst3_out,orr_inst2_out,orr_inst1_out,orr_inst0_out};
endmodule

module Or4x32 (input [31:0] I0, input [31:0] I1, input [31:0] I2, input [31:0] I3, output [31:0] O);
wire orr_inst0_out;
wire orr_inst1_out;
wire orr_inst10_out;
wire orr_inst11_out;
wire orr_inst12_out;
wire orr_inst13_out;
wire orr_inst14_out;
wire orr_inst15_out;
wire orr_inst16_out;
wire orr_inst17_out;
wire orr_inst18_out;
wire orr_inst19_out;
wire orr_inst2_out;
wire orr_inst20_out;
wire orr_inst21_out;
wire orr_inst22_out;
wire orr_inst23_out;
wire orr_inst24_out;
wire orr_inst25_out;
wire orr_inst26_out;
wire orr_inst27_out;
wire orr_inst28_out;
wire orr_inst29_out;
wire orr_inst3_out;
wire orr_inst30_out;
wire orr_inst31_out;
wire orr_inst4_out;
wire orr_inst5_out;
wire orr_inst6_out;
wire orr_inst7_out;
wire orr_inst8_out;
wire orr_inst9_out;
coreir_orr #(.width(4)) orr_inst0(.in({I3[0],I2[0],I1[0],I0[0]}), .out(orr_inst0_out));
coreir_orr #(.width(4)) orr_inst1(.in({I3[1],I2[1],I1[1],I0[1]}), .out(orr_inst1_out));
coreir_orr #(.width(4)) orr_inst10(.in({I3[10],I2[10],I1[10],I0[10]}), .out(orr_inst10_out));
coreir_orr #(.width(4)) orr_inst11(.in({I3[11],I2[11],I1[11],I0[11]}), .out(orr_inst11_out));
coreir_orr #(.width(4)) orr_inst12(.in({I3[12],I2[12],I1[12],I0[12]}), .out(orr_inst12_out));
coreir_orr #(.width(4)) orr_inst13(.in({I3[13],I2[13],I1[13],I0[13]}), .out(orr_inst13_out));
coreir_orr #(.width(4)) orr_inst14(.in({I3[14],I2[14],I1[14],I0[14]}), .out(orr_inst14_out));
coreir_orr #(.width(4)) orr_inst15(.in({I3[15],I2[15],I1[15],I0[15]}), .out(orr_inst15_out));
coreir_orr #(.width(4)) orr_inst16(.in({I3[16],I2[16],I1[16],I0[16]}), .out(orr_inst16_out));
coreir_orr #(.width(4)) orr_inst17(.in({I3[17],I2[17],I1[17],I0[17]}), .out(orr_inst17_out));
coreir_orr #(.width(4)) orr_inst18(.in({I3[18],I2[18],I1[18],I0[18]}), .out(orr_inst18_out));
coreir_orr #(.width(4)) orr_inst19(.in({I3[19],I2[19],I1[19],I0[19]}), .out(orr_inst19_out));
coreir_orr #(.width(4)) orr_inst2(.in({I3[2],I2[2],I1[2],I0[2]}), .out(orr_inst2_out));
coreir_orr #(.width(4)) orr_inst20(.in({I3[20],I2[20],I1[20],I0[20]}), .out(orr_inst20_out));
coreir_orr #(.width(4)) orr_inst21(.in({I3[21],I2[21],I1[21],I0[21]}), .out(orr_inst21_out));
coreir_orr #(.width(4)) orr_inst22(.in({I3[22],I2[22],I1[22],I0[22]}), .out(orr_inst22_out));
coreir_orr #(.width(4)) orr_inst23(.in({I3[23],I2[23],I1[23],I0[23]}), .out(orr_inst23_out));
coreir_orr #(.width(4)) orr_inst24(.in({I3[24],I2[24],I1[24],I0[24]}), .out(orr_inst24_out));
coreir_orr #(.width(4)) orr_inst25(.in({I3[25],I2[25],I1[25],I0[25]}), .out(orr_inst25_out));
coreir_orr #(.width(4)) orr_inst26(.in({I3[26],I2[26],I1[26],I0[26]}), .out(orr_inst26_out));
coreir_orr #(.width(4)) orr_inst27(.in({I3[27],I2[27],I1[27],I0[27]}), .out(orr_inst27_out));
coreir_orr #(.width(4)) orr_inst28(.in({I3[28],I2[28],I1[28],I0[28]}), .out(orr_inst28_out));
coreir_orr #(.width(4)) orr_inst29(.in({I3[29],I2[29],I1[29],I0[29]}), .out(orr_inst29_out));
coreir_orr #(.width(4)) orr_inst3(.in({I3[3],I2[3],I1[3],I0[3]}), .out(orr_inst3_out));
coreir_orr #(.width(4)) orr_inst30(.in({I3[30],I2[30],I1[30],I0[30]}), .out(orr_inst30_out));
coreir_orr #(.width(4)) orr_inst31(.in({I3[31],I2[31],I1[31],I0[31]}), .out(orr_inst31_out));
coreir_orr #(.width(4)) orr_inst4(.in({I3[4],I2[4],I1[4],I0[4]}), .out(orr_inst4_out));
coreir_orr #(.width(4)) orr_inst5(.in({I3[5],I2[5],I1[5],I0[5]}), .out(orr_inst5_out));
coreir_orr #(.width(4)) orr_inst6(.in({I3[6],I2[6],I1[6],I0[6]}), .out(orr_inst6_out));
coreir_orr #(.width(4)) orr_inst7(.in({I3[7],I2[7],I1[7],I0[7]}), .out(orr_inst7_out));
coreir_orr #(.width(4)) orr_inst8(.in({I3[8],I2[8],I1[8],I0[8]}), .out(orr_inst8_out));
coreir_orr #(.width(4)) orr_inst9(.in({I3[9],I2[9],I1[9],I0[9]}), .out(orr_inst9_out));
assign O = {orr_inst31_out,orr_inst30_out,orr_inst29_out,orr_inst28_out,orr_inst27_out,orr_inst26_out,orr_inst25_out,orr_inst24_out,orr_inst23_out,orr_inst22_out,orr_inst21_out,orr_inst20_out,orr_inst19_out,orr_inst18_out,orr_inst17_out,orr_inst16_out,orr_inst15_out,orr_inst14_out,orr_inst13_out,orr_inst12_out,orr_inst11_out,orr_inst10_out,orr_inst9_out,orr_inst8_out,orr_inst7_out,orr_inst6_out,orr_inst5_out,orr_inst4_out,orr_inst3_out,orr_inst2_out,orr_inst1_out,orr_inst0_out};
endmodule

module Or4x1 (input [0:0] I0, input [0:0] I1, input [0:0] I2, input [0:0] I3, output [0:0] O);
wire orr_inst0_out;
coreir_orr #(.width(4)) orr_inst0(.in({I3[0],I2[0],I1[0],I0[0]}), .out(orr_inst0_out));
assign O = orr_inst0_out;
endmodule

module MuxWrapper_1_16 (input [15:0] I_0, output [15:0] O);
assign O = I_0;
endmodule

module MuxWrapper_1_1 (input [0:0] I_0, output [0:0] O);
assign O = I_0;
endmodule

module Mux9x1 (input [0:0] I0, input [0:0] I1, input [0:0] I2, input [0:0] I3, input [0:0] I4, input [0:0] I5, input [0:0] I6, input [0:0] I7, input [0:0] I8, output [0:0] O, input [3:0] S);
wire [0:0] coreir_commonlib_mux9x1_inst0_out;
commonlib_muxn__N9__width1 coreir_commonlib_mux9x1_inst0(.in_data_0(I0), .in_data_1(I1), .in_data_2(I2), .in_data_3(I3), .in_data_4(I4), .in_data_5(I5), .in_data_6(I6), .in_data_7(I7), .in_data_8(I8), .in_sel(S), .out(coreir_commonlib_mux9x1_inst0_out));
assign O = coreir_commonlib_mux9x1_inst0_out;
endmodule

module MuxWrapper_9_1 (input [0:0] I_0, input [0:0] I_1, input [0:0] I_2, input [0:0] I_3, input [0:0] I_4, input [0:0] I_5, input [0:0] I_6, input [0:0] I_7, input [0:0] I_8, output [0:0] O, input [3:0] S);
wire [0:0] Mux9x1_inst0_O;
Mux9x1 Mux9x1_inst0(.I0(I_0), .I1(I_1), .I2(I_2), .I3(I_3), .I4(I_4), .I5(I_5), .I6(I_6), .I7(I_7), .I8(I_8), .O(Mux9x1_inst0_O), .S(S));
assign O = Mux9x1_inst0_O;
endmodule

module Mux8x32 (input [31:0] I0, input [31:0] I1, input [31:0] I2, input [31:0] I3, input [31:0] I4, input [31:0] I5, input [31:0] I6, input [31:0] I7, output [31:0] O, input [2:0] S);
wire [31:0] coreir_commonlib_mux8x32_inst0_out;
commonlib_muxn__N8__width32 coreir_commonlib_mux8x32_inst0(.in_data_0(I0), .in_data_1(I1), .in_data_2(I2), .in_data_3(I3), .in_data_4(I4), .in_data_5(I5), .in_data_6(I6), .in_data_7(I7), .in_sel(S), .out(coreir_commonlib_mux8x32_inst0_out));
assign O = coreir_commonlib_mux8x32_inst0_out;
endmodule

module MuxWrapper_8_32 (input [31:0] I_0, input [31:0] I_1, input [31:0] I_2, input [31:0] I_3, input [31:0] I_4, input [31:0] I_5, input [31:0] I_6, input [31:0] I_7, output [31:0] O, input [2:0] S);
wire [31:0] Mux8x32_inst0_O;
Mux8x32 Mux8x32_inst0(.I0(I_0), .I1(I_1), .I2(I_2), .I3(I_3), .I4(I_4), .I5(I_5), .I6(I_6), .I7(I_7), .O(Mux8x32_inst0_O), .S(S));
assign O = Mux8x32_inst0_O;
endmodule

module Mux5x32 (input [31:0] I0, input [31:0] I1, input [31:0] I2, input [31:0] I3, input [31:0] I4, output [31:0] O, input [2:0] S);
wire [31:0] coreir_commonlib_mux5x32_inst0_out;
commonlib_muxn__N5__width32 coreir_commonlib_mux5x32_inst0(.in_data_0(I0), .in_data_1(I1), .in_data_2(I2), .in_data_3(I3), .in_data_4(I4), .in_sel(S), .out(coreir_commonlib_mux5x32_inst0_out));
assign O = coreir_commonlib_mux5x32_inst0_out;
endmodule

module MuxWrapper_5_32 (input [31:0] I_0, input [31:0] I_1, input [31:0] I_2, input [31:0] I_3, input [31:0] I_4, output [31:0] O, input [2:0] S);
wire [31:0] Mux5x32_inst0_O;
Mux5x32 Mux5x32_inst0(.I0(I_0), .I1(I_1), .I2(I_2), .I3(I_3), .I4(I_4), .O(Mux5x32_inst0_O), .S(S));
assign O = Mux5x32_inst0_O;
endmodule

module Mux5x16 (input [15:0] I0, input [15:0] I1, input [15:0] I2, input [15:0] I3, input [15:0] I4, output [15:0] O, input [2:0] S);
wire [15:0] coreir_commonlib_mux5x16_inst0_out;
commonlib_muxn__N5__width16 coreir_commonlib_mux5x16_inst0(.in_data_0(I0), .in_data_1(I1), .in_data_2(I2), .in_data_3(I3), .in_data_4(I4), .in_sel(S), .out(coreir_commonlib_mux5x16_inst0_out));
assign O = coreir_commonlib_mux5x16_inst0_out;
endmodule

module MuxWrapper_5_16 (input [15:0] I_0, input [15:0] I_1, input [15:0] I_2, input [15:0] I_3, input [15:0] I_4, output [15:0] O, input [2:0] S);
wire [15:0] Mux5x16_inst0_O;
Mux5x16 Mux5x16_inst0(.I0(I_0), .I1(I_1), .I2(I_2), .I3(I_3), .I4(I_4), .O(Mux5x16_inst0_O), .S(S));
assign O = Mux5x16_inst0_O;
endmodule

module Mux4x16 (input [15:0] I0, input [15:0] I1, input [15:0] I2, input [15:0] I3, output [15:0] O, input [1:0] S);
wire [15:0] coreir_commonlib_mux4x16_inst0_out;
commonlib_muxn__N4__width16 coreir_commonlib_mux4x16_inst0(.in_data_0(I0), .in_data_1(I1), .in_data_2(I2), .in_data_3(I3), .in_sel(S), .out(coreir_commonlib_mux4x16_inst0_out));
assign O = coreir_commonlib_mux4x16_inst0_out;
endmodule

module MuxWrapper_4_16 (input [15:0] I_0, input [15:0] I_1, input [15:0] I_2, input [15:0] I_3, output [15:0] O, input [1:0] S);
wire [15:0] Mux4x16_inst0_O;
Mux4x16 Mux4x16_inst0(.I0(I_0), .I1(I_1), .I2(I_2), .I3(I_3), .O(Mux4x16_inst0_O), .S(S));
assign O = Mux4x16_inst0_O;
endmodule

module Mux4x1 (input [0:0] I0, input [0:0] I1, input [0:0] I2, input [0:0] I3, output [0:0] O, input [1:0] S);
wire [0:0] coreir_commonlib_mux4x1_inst0_out;
commonlib_muxn__N4__width1 coreir_commonlib_mux4x1_inst0(.in_data_0(I0), .in_data_1(I1), .in_data_2(I2), .in_data_3(I3), .in_sel(S), .out(coreir_commonlib_mux4x1_inst0_out));
assign O = coreir_commonlib_mux4x1_inst0_out;
endmodule

module MuxWrapper_4_1 (input [0:0] I_0, input [0:0] I_1, input [0:0] I_2, input [0:0] I_3, output [0:0] O, input [1:0] S);
wire [0:0] Mux4x1_inst0_O;
Mux4x1 Mux4x1_inst0(.I0(I_0), .I1(I_1), .I2(I_2), .I3(I_3), .O(Mux4x1_inst0_O), .S(S));
assign O = Mux4x1_inst0_O;
endmodule

module Mux40x32 (input [31:0] I0, input [31:0] I1, input [31:0] I10, input [31:0] I11, input [31:0] I12, input [31:0] I13, input [31:0] I14, input [31:0] I15, input [31:0] I16, input [31:0] I17, input [31:0] I18, input [31:0] I19, input [31:0] I2, input [31:0] I20, input [31:0] I21, input [31:0] I22, input [31:0] I23, input [31:0] I24, input [31:0] I25, input [31:0] I26, input [31:0] I27, input [31:0] I28, input [31:0] I29, input [31:0] I3, input [31:0] I30, input [31:0] I31, input [31:0] I32, input [31:0] I33, input [31:0] I34, input [31:0] I35, input [31:0] I36, input [31:0] I37, input [31:0] I38, input [31:0] I39, input [31:0] I4, input [31:0] I5, input [31:0] I6, input [31:0] I7, input [31:0] I8, input [31:0] I9, output [31:0] O, input [5:0] S);
wire [31:0] coreir_commonlib_mux40x32_inst0_out;
commonlib_muxn__N40__width32 coreir_commonlib_mux40x32_inst0(.in_data_0(I0), .in_data_1(I1), .in_data_10(I10), .in_data_11(I11), .in_data_12(I12), .in_data_13(I13), .in_data_14(I14), .in_data_15(I15), .in_data_16(I16), .in_data_17(I17), .in_data_18(I18), .in_data_19(I19), .in_data_2(I2), .in_data_20(I20), .in_data_21(I21), .in_data_22(I22), .in_data_23(I23), .in_data_24(I24), .in_data_25(I25), .in_data_26(I26), .in_data_27(I27), .in_data_28(I28), .in_data_29(I29), .in_data_3(I3), .in_data_30(I30), .in_data_31(I31), .in_data_32(I32), .in_data_33(I33), .in_data_34(I34), .in_data_35(I35), .in_data_36(I36), .in_data_37(I37), .in_data_38(I38), .in_data_39(I39), .in_data_4(I4), .in_data_5(I5), .in_data_6(I6), .in_data_7(I7), .in_data_8(I8), .in_data_9(I9), .in_sel(S), .out(coreir_commonlib_mux40x32_inst0_out));
assign O = coreir_commonlib_mux40x32_inst0_out;
endmodule

module MuxWrapper_40_32 (input [31:0] I_0, input [31:0] I_1, input [31:0] I_10, input [31:0] I_11, input [31:0] I_12, input [31:0] I_13, input [31:0] I_14, input [31:0] I_15, input [31:0] I_16, input [31:0] I_17, input [31:0] I_18, input [31:0] I_19, input [31:0] I_2, input [31:0] I_20, input [31:0] I_21, input [31:0] I_22, input [31:0] I_23, input [31:0] I_24, input [31:0] I_25, input [31:0] I_26, input [31:0] I_27, input [31:0] I_28, input [31:0] I_29, input [31:0] I_3, input [31:0] I_30, input [31:0] I_31, input [31:0] I_32, input [31:0] I_33, input [31:0] I_34, input [31:0] I_35, input [31:0] I_36, input [31:0] I_37, input [31:0] I_38, input [31:0] I_39, input [31:0] I_4, input [31:0] I_5, input [31:0] I_6, input [31:0] I_7, input [31:0] I_8, input [31:0] I_9, output [31:0] O, input [5:0] S);
wire [31:0] Mux40x32_inst0_O;
Mux40x32 Mux40x32_inst0(.I0(I_0), .I1(I_1), .I10(I_10), .I11(I_11), .I12(I_12), .I13(I_13), .I14(I_14), .I15(I_15), .I16(I_16), .I17(I_17), .I18(I_18), .I19(I_19), .I2(I_2), .I20(I_20), .I21(I_21), .I22(I_22), .I23(I_23), .I24(I_24), .I25(I_25), .I26(I_26), .I27(I_27), .I28(I_28), .I29(I_29), .I3(I_3), .I30(I_30), .I31(I_31), .I32(I_32), .I33(I_33), .I34(I_34), .I35(I_35), .I36(I_36), .I37(I_37), .I38(I_38), .I39(I_39), .I4(I_4), .I5(I_5), .I6(I_6), .I7(I_7), .I8(I_8), .I9(I_9), .O(Mux40x32_inst0_O), .S(S));
assign O = Mux40x32_inst0_O;
endmodule

module Mux35x32 (input [31:0] I0, input [31:0] I1, input [31:0] I10, input [31:0] I11, input [31:0] I12, input [31:0] I13, input [31:0] I14, input [31:0] I15, input [31:0] I16, input [31:0] I17, input [31:0] I18, input [31:0] I19, input [31:0] I2, input [31:0] I20, input [31:0] I21, input [31:0] I22, input [31:0] I23, input [31:0] I24, input [31:0] I25, input [31:0] I26, input [31:0] I27, input [31:0] I28, input [31:0] I29, input [31:0] I3, input [31:0] I30, input [31:0] I31, input [31:0] I32, input [31:0] I33, input [31:0] I34, input [31:0] I4, input [31:0] I5, input [31:0] I6, input [31:0] I7, input [31:0] I8, input [31:0] I9, output [31:0] O, input [5:0] S);
wire [31:0] coreir_commonlib_mux35x32_inst0_out;
commonlib_muxn__N35__width32 coreir_commonlib_mux35x32_inst0(.in_data_0(I0), .in_data_1(I1), .in_data_10(I10), .in_data_11(I11), .in_data_12(I12), .in_data_13(I13), .in_data_14(I14), .in_data_15(I15), .in_data_16(I16), .in_data_17(I17), .in_data_18(I18), .in_data_19(I19), .in_data_2(I2), .in_data_20(I20), .in_data_21(I21), .in_data_22(I22), .in_data_23(I23), .in_data_24(I24), .in_data_25(I25), .in_data_26(I26), .in_data_27(I27), .in_data_28(I28), .in_data_29(I29), .in_data_3(I3), .in_data_30(I30), .in_data_31(I31), .in_data_32(I32), .in_data_33(I33), .in_data_34(I34), .in_data_4(I4), .in_data_5(I5), .in_data_6(I6), .in_data_7(I7), .in_data_8(I8), .in_data_9(I9), .in_sel(S), .out(coreir_commonlib_mux35x32_inst0_out));
assign O = coreir_commonlib_mux35x32_inst0_out;
endmodule

module MuxWrapper_35_32 (input [31:0] I_0, input [31:0] I_1, input [31:0] I_10, input [31:0] I_11, input [31:0] I_12, input [31:0] I_13, input [31:0] I_14, input [31:0] I_15, input [31:0] I_16, input [31:0] I_17, input [31:0] I_18, input [31:0] I_19, input [31:0] I_2, input [31:0] I_20, input [31:0] I_21, input [31:0] I_22, input [31:0] I_23, input [31:0] I_24, input [31:0] I_25, input [31:0] I_26, input [31:0] I_27, input [31:0] I_28, input [31:0] I_29, input [31:0] I_3, input [31:0] I_30, input [31:0] I_31, input [31:0] I_32, input [31:0] I_33, input [31:0] I_34, input [31:0] I_4, input [31:0] I_5, input [31:0] I_6, input [31:0] I_7, input [31:0] I_8, input [31:0] I_9, output [31:0] O, input [5:0] S);
wire [31:0] Mux35x32_inst0_O;
Mux35x32 Mux35x32_inst0(.I0(I_0), .I1(I_1), .I10(I_10), .I11(I_11), .I12(I_12), .I13(I_13), .I14(I_14), .I15(I_15), .I16(I_16), .I17(I_17), .I18(I_18), .I19(I_19), .I2(I_2), .I20(I_20), .I21(I_21), .I22(I_22), .I23(I_23), .I24(I_24), .I25(I_25), .I26(I_26), .I27(I_27), .I28(I_28), .I29(I_29), .I3(I_3), .I30(I_30), .I31(I_31), .I32(I_32), .I33(I_33), .I34(I_34), .I4(I_4), .I5(I_5), .I6(I_6), .I7(I_7), .I8(I_8), .I9(I_9), .O(Mux35x32_inst0_O), .S(S));
assign O = Mux35x32_inst0_O;
endmodule

module Mux2xOutUInt8 (input [7:0] I0, input [7:0] I1, output [7:0] O, input S);
wire [7:0] coreir_commonlib_mux2x8_inst0_out;
commonlib_muxn__N2__width8 coreir_commonlib_mux2x8_inst0(.in_data_0(I0), .in_data_1(I1), .in_sel(S), .out(coreir_commonlib_mux2x8_inst0_out));
assign O = coreir_commonlib_mux2x8_inst0_out;
endmodule

module Mux2xOutUInt32 (input [31:0] I0, input [31:0] I1, output [31:0] O, input S);
wire [31:0] coreir_commonlib_mux2x32_inst0_out;
commonlib_muxn__N2__width32 coreir_commonlib_mux2x32_inst0(.in_data_0(I0), .in_data_1(I1), .in_sel(S), .out(coreir_commonlib_mux2x32_inst0_out));
assign O = coreir_commonlib_mux2x32_inst0_out;
endmodule

module Mux2xOutUInt23 (input [22:0] I0, input [22:0] I1, output [22:0] O, input S);
wire [22:0] coreir_commonlib_mux2x23_inst0_out;
commonlib_muxn__N2__width23 coreir_commonlib_mux2x23_inst0(.in_data_0(I0), .in_data_1(I1), .in_sel(S), .out(coreir_commonlib_mux2x23_inst0_out));
assign O = coreir_commonlib_mux2x23_inst0_out;
endmodule

module Mux2xOutUInt16 (input [15:0] I0, input [15:0] I1, output [15:0] O, input S);
wire [15:0] coreir_commonlib_mux2x16_inst0_out;
commonlib_muxn__N2__width16 coreir_commonlib_mux2x16_inst0(.in_data_0(I0), .in_data_1(I1), .in_sel(S), .out(coreir_commonlib_mux2x16_inst0_out));
assign O = coreir_commonlib_mux2x16_inst0_out;
endmodule

module Mux2xOutSInt9 (input [8:0] I0, input [8:0] I1, output [8:0] O, input S);
wire [8:0] coreir_commonlib_mux2x9_inst0_out;
commonlib_muxn__N2__width9 coreir_commonlib_mux2x9_inst0(.in_data_0(I0), .in_data_1(I1), .in_sel(S), .out(coreir_commonlib_mux2x9_inst0_out));
assign O = coreir_commonlib_mux2x9_inst0_out;
endmodule

module Mux2xOutSInt16 (input [15:0] I0, input [15:0] I1, output [15:0] O, input S);
wire [15:0] coreir_commonlib_mux2x16_inst0_out;
commonlib_muxn__N2__width16 coreir_commonlib_mux2x16_inst0(.in_data_0(I0), .in_data_1(I1), .in_sel(S), .out(coreir_commonlib_mux2x16_inst0_out));
assign O = coreir_commonlib_mux2x16_inst0_out;
endmodule

module Mux2xOutBits5 (input [4:0] I0, input [4:0] I1, output [4:0] O, input S);
wire [4:0] coreir_commonlib_mux2x5_inst0_out;
commonlib_muxn__N2__width5 coreir_commonlib_mux2x5_inst0(.in_data_0(I0), .in_data_1(I1), .in_sel(S), .out(coreir_commonlib_mux2x5_inst0_out));
assign O = coreir_commonlib_mux2x5_inst0_out;
endmodule

module Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_5 (input ASYNCRESET, input CE, input CLK, input [4:0] I, output [4:0] O);
wire [4:0] enable_mux_O;
wire [4:0] value_out;
Mux2xOutBits5 enable_mux(.I0(value_out), .I1(I), .O(enable_mux_O), .S(CE));
coreir_reg_arst #(.arst_posedge(1'b1), .clk_posedge(1'b1), .init(5'h00), .width(5)) value(.arst(ASYNCRESET), .clk(CLK), .in(enable_mux_O), .out(value_out));
assign O = value_out;
endmodule

module Mux2xOutBits4 (input [3:0] I0, input [3:0] I1, output [3:0] O, input S);
wire [3:0] coreir_commonlib_mux2x4_inst0_out;
commonlib_muxn__N2__width4 coreir_commonlib_mux2x4_inst0(.in_data_0(I0), .in_data_1(I1), .in_sel(S), .out(coreir_commonlib_mux2x4_inst0_out));
assign O = coreir_commonlib_mux2x4_inst0_out;
endmodule

module Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4 (input ASYNCRESET, input CE, input CLK, input [3:0] I, output [3:0] O);
wire [3:0] enable_mux_O;
wire [3:0] value_out;
Mux2xOutBits4 enable_mux(.I0(value_out), .I1(I), .O(enable_mux_O), .S(CE));
coreir_reg_arst #(.arst_posedge(1'b1), .clk_posedge(1'b1), .init(4'h0), .width(4)) value(.arst(ASYNCRESET), .clk(CLK), .in(enable_mux_O), .out(value_out));
assign O = value_out;
endmodule

module Mux2xOutBits32 (input [31:0] I0, input [31:0] I1, output [31:0] O, input S);
wire [31:0] coreir_commonlib_mux2x32_inst0_out;
commonlib_muxn__N2__width32 coreir_commonlib_mux2x32_inst0(.in_data_0(I0), .in_data_1(I1), .in_sel(S), .out(coreir_commonlib_mux2x32_inst0_out));
assign O = coreir_commonlib_mux2x32_inst0_out;
endmodule

module Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_32 (input ASYNCRESET, input CE, input CLK, input [31:0] I, output [31:0] O);
wire [31:0] enable_mux_O;
wire [31:0] value_out;
Mux2xOutBits32 enable_mux(.I0(value_out), .I1(I), .O(enable_mux_O), .S(CE));
coreir_reg_arst #(.arst_posedge(1'b1), .clk_posedge(1'b1), .init('h00000000), .width(32)) value(.arst(ASYNCRESET), .clk(CLK), .in(enable_mux_O), .out(value_out));
assign O = value_out;
endmodule

module Mux2xOutBits3 (input [2:0] I0, input [2:0] I1, output [2:0] O, input S);
wire [2:0] coreir_commonlib_mux2x3_inst0_out;
commonlib_muxn__N2__width3 coreir_commonlib_mux2x3_inst0(.in_data_0(I0), .in_data_1(I1), .in_sel(S), .out(coreir_commonlib_mux2x3_inst0_out));
assign O = coreir_commonlib_mux2x3_inst0_out;
endmodule

module Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3 (input ASYNCRESET, input CE, input CLK, input [2:0] I, output [2:0] O);
wire [2:0] enable_mux_O;
wire [2:0] value_out;
Mux2xOutBits3 enable_mux(.I0(value_out), .I1(I), .O(enable_mux_O), .S(CE));
coreir_reg_arst #(.arst_posedge(1'b1), .clk_posedge(1'b1), .init(3'h0), .width(3)) value(.arst(ASYNCRESET), .clk(CLK), .in(enable_mux_O), .out(value_out));
assign O = value_out;
endmodule

module Mux2xOutBits2 (input [1:0] I0, input [1:0] I1, output [1:0] O, input S);
wire [1:0] coreir_commonlib_mux2x2_inst0_out;
commonlib_muxn__N2__width2 coreir_commonlib_mux2x2_inst0(.in_data_0(I0), .in_data_1(I1), .in_sel(S), .out(coreir_commonlib_mux2x2_inst0_out));
assign O = coreir_commonlib_mux2x2_inst0_out;
endmodule

module Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2 (input ASYNCRESET, input CE, input CLK, input [1:0] I, output [1:0] O);
wire [1:0] enable_mux_O;
wire [1:0] value_out;
Mux2xOutBits2 enable_mux(.I0(value_out), .I1(I), .O(enable_mux_O), .S(CE));
coreir_reg_arst #(.arst_posedge(1'b1), .clk_posedge(1'b1), .init(2'h0), .width(2)) value(.arst(ASYNCRESET), .clk(CLK), .in(enable_mux_O), .out(value_out));
assign O = value_out;
endmodule

module Mux2xOutBits16 (input [15:0] I0, input [15:0] I1, output [15:0] O, input S);
wire [15:0] coreir_commonlib_mux2x16_inst0_out;
commonlib_muxn__N2__width16 coreir_commonlib_mux2x16_inst0(.in_data_0(I0), .in_data_1(I1), .in_sel(S), .out(coreir_commonlib_mux2x16_inst0_out));
assign O = coreir_commonlib_mux2x16_inst0_out;
endmodule

module Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_16 (input ASYNCRESET, input CE, input CLK, input [15:0] I, output [15:0] O);
wire [15:0] enable_mux_O;
wire [15:0] value_out;
Mux2xOutBits16 enable_mux(.I0(value_out), .I1(I), .O(enable_mux_O), .S(CE));
coreir_reg_arst #(.arst_posedge(1'b1), .clk_posedge(1'b1), .init(16'h0000), .width(16)) value(.arst(ASYNCRESET), .clk(CLK), .in(enable_mux_O), .out(value_out));
assign O = value_out;
endmodule

module Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_16 (input CE, input CLK, input [15:0] I, output [15:0] O);
wire [15:0] enable_mux_O;
wire [15:0] value_out;
Mux2xOutBits16 enable_mux(.I0(value_out), .I1(I), .O(enable_mux_O), .S(CE));
coreir_reg #(.clk_posedge(1'b1), .init(16'h0000), .width(16)) value(.clk(CLK), .in(enable_mux_O), .out(value_out));
assign O = value_out;
endmodule

module Register_comb (output [15:0] O0, output [15:0] O1, input en, input [15:0] self_value_O, input [15:0] value);
wire [15:0] Mux2xOutBits16_inst0_O;
Mux2xOutBits16 Mux2xOutBits16_inst0(.I0(self_value_O), .I1(value), .O(Mux2xOutBits16_inst0_O), .S(en));
assign O0 = Mux2xOutBits16_inst0_O;
assign O1 = self_value_O;
endmodule

module Register (input ASYNCRESET, input CLK, output [15:0] O, input en, input [15:0] value);
wire [15:0] Register_comb_inst0_O0;
wire [15:0] Register_comb_inst0_O1;
wire [15:0] reg_PR_inst0_out;
Register_comb Register_comb_inst0(.O0(Register_comb_inst0_O0), .O1(Register_comb_inst0_O1), .en(en), .self_value_O(reg_PR_inst0_out), .value(value));
coreir_reg_arst #(.arst_posedge(1'b1), .clk_posedge(1'b1), .init(16'h0000), .width(16)) reg_PR_inst0(.arst(ASYNCRESET), .clk(CLK), .in(Register_comb_inst0_O0), .out(reg_PR_inst0_out));
assign O = Register_comb_inst0_O1;
endmodule

module Mux2xOutBits1 (input [0:0] I0, input [0:0] I1, output [0:0] O, input S);
wire [0:0] coreir_commonlib_mux2x1_inst0_out;
commonlib_muxn__N2__width1 coreir_commonlib_mux2x1_inst0(.in_data_0(I0), .in_data_1(I1), .in_sel(S), .out(coreir_commonlib_mux2x1_inst0_out));
assign O = coreir_commonlib_mux2x1_inst0_out;
endmodule

module Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1 (input ASYNCRESET, input CE, input CLK, input [0:0] I, output [0:0] O);
wire [0:0] enable_mux_O;
wire [0:0] value_out;
Mux2xOutBits1 enable_mux(.I0(value_out), .I1(I), .O(enable_mux_O), .S(CE));
coreir_reg_arst #(.arst_posedge(1'b1), .clk_posedge(1'b1), .init(1'h0), .width(1)) value(.arst(ASYNCRESET), .clk(CLK), .in(enable_mux_O), .out(value_out));
assign O = value_out;
endmodule

module Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_1 (input CE, input CLK, input [0:0] I, output [0:0] O);
wire [0:0] enable_mux_O;
wire [0:0] value_out;
Mux2xOutBits1 enable_mux(.I0(value_out), .I1(I), .O(enable_mux_O), .S(CE));
coreir_reg #(.clk_posedge(1'b1), .init(1'h0), .width(1)) value(.clk(CLK), .in(enable_mux_O), .out(value_out));
assign O = value_out;
endmodule

module Mux2xOutBit (input I0, input I1, output O, input S);
wire [0:0] coreir_commonlib_mux2x1_inst0_out;
commonlib_muxn__N2__width1 coreir_commonlib_mux2x1_inst0(.in_data_0(I0), .in_data_1(I1), .in_sel(S), .out(coreir_commonlib_mux2x1_inst0_out));
assign O = coreir_commonlib_mux2x1_inst0_out[0];
endmodule

module cond (input C, input N, output O, input V, input Z, input alu, input [4:0] code, input lut);
wire Mux2xOutBit_inst0_O;
wire Mux2xOutBit_inst1_O;
wire Mux2xOutBit_inst10_O;
wire Mux2xOutBit_inst11_O;
wire Mux2xOutBit_inst12_O;
wire Mux2xOutBit_inst13_O;
wire Mux2xOutBit_inst14_O;
wire Mux2xOutBit_inst15_O;
wire Mux2xOutBit_inst16_O;
wire Mux2xOutBit_inst17_O;
wire Mux2xOutBit_inst18_O;
wire Mux2xOutBit_inst2_O;
wire Mux2xOutBit_inst3_O;
wire Mux2xOutBit_inst4_O;
wire Mux2xOutBit_inst5_O;
wire Mux2xOutBit_inst6_O;
wire Mux2xOutBit_inst7_O;
wire Mux2xOutBit_inst8_O;
wire Mux2xOutBit_inst9_O;
wire [4:0] const_0_5_out;
wire [4:0] const_10_5_out;
wire [4:0] const_11_5_out;
wire [4:0] const_12_5_out;
wire [4:0] const_13_5_out;
wire [4:0] const_14_5_out;
wire [4:0] const_15_5_out;
wire [4:0] const_16_5_out;
wire [4:0] const_17_5_out;
wire [4:0] const_18_5_out;
wire [4:0] const_1_5_out;
wire [4:0] const_2_5_out;
wire [4:0] const_3_5_out;
wire [4:0] const_4_5_out;
wire [4:0] const_5_5_out;
wire [4:0] const_6_5_out;
wire [4:0] const_7_5_out;
wire [4:0] const_8_5_out;
wire [4:0] const_9_5_out;
wire magma_Bit_and_inst0_out;
wire magma_Bit_and_inst1_out;
wire magma_Bit_and_inst2_out;
wire magma_Bit_and_inst3_out;
wire magma_Bit_not_inst0_out;
wire magma_Bit_not_inst1_out;
wire magma_Bit_not_inst10_out;
wire magma_Bit_not_inst11_out;
wire magma_Bit_not_inst12_out;
wire magma_Bit_not_inst2_out;
wire magma_Bit_not_inst3_out;
wire magma_Bit_not_inst4_out;
wire magma_Bit_not_inst5_out;
wire magma_Bit_not_inst6_out;
wire magma_Bit_not_inst7_out;
wire magma_Bit_not_inst8_out;
wire magma_Bit_not_inst9_out;
wire magma_Bit_or_inst0_out;
wire magma_Bit_or_inst1_out;
wire magma_Bit_or_inst2_out;
wire magma_Bit_or_inst3_out;
wire magma_Bit_or_inst4_out;
wire magma_Bit_or_inst5_out;
wire magma_Bit_xor_inst0_out;
wire magma_Bit_xor_inst1_out;
wire magma_Bit_xor_inst2_out;
wire magma_Bit_xor_inst3_out;
wire magma_Bits_5_eq_inst0_out;
wire magma_Bits_5_eq_inst1_out;
wire magma_Bits_5_eq_inst10_out;
wire magma_Bits_5_eq_inst11_out;
wire magma_Bits_5_eq_inst12_out;
wire magma_Bits_5_eq_inst13_out;
wire magma_Bits_5_eq_inst14_out;
wire magma_Bits_5_eq_inst15_out;
wire magma_Bits_5_eq_inst16_out;
wire magma_Bits_5_eq_inst17_out;
wire magma_Bits_5_eq_inst18_out;
wire magma_Bits_5_eq_inst19_out;
wire magma_Bits_5_eq_inst2_out;
wire magma_Bits_5_eq_inst20_out;
wire magma_Bits_5_eq_inst3_out;
wire magma_Bits_5_eq_inst4_out;
wire magma_Bits_5_eq_inst5_out;
wire magma_Bits_5_eq_inst6_out;
wire magma_Bits_5_eq_inst7_out;
wire magma_Bits_5_eq_inst8_out;
wire magma_Bits_5_eq_inst9_out;
Mux2xOutBit Mux2xOutBit_inst0(.I0(magma_Bit_and_inst3_out), .I1(magma_Bit_or_inst3_out), .O(Mux2xOutBit_inst0_O), .S(magma_Bits_5_eq_inst0_out));
Mux2xOutBit Mux2xOutBit_inst1(.I0(Mux2xOutBit_inst0_O), .I1(magma_Bit_and_inst2_out), .O(Mux2xOutBit_inst1_O), .S(magma_Bits_5_eq_inst1_out));
Mux2xOutBit Mux2xOutBit_inst10(.I0(Mux2xOutBit_inst9_O), .I1(magma_Bit_and_inst0_out), .O(Mux2xOutBit_inst10_O), .S(magma_Bits_5_eq_inst10_out));
Mux2xOutBit Mux2xOutBit_inst11(.I0(Mux2xOutBit_inst10_O), .I1(magma_Bit_not_inst3_out), .O(Mux2xOutBit_inst11_O), .S(magma_Bits_5_eq_inst11_out));
Mux2xOutBit Mux2xOutBit_inst12(.I0(Mux2xOutBit_inst11_O), .I1(V), .O(Mux2xOutBit_inst12_O), .S(magma_Bits_5_eq_inst12_out));
Mux2xOutBit Mux2xOutBit_inst13(.I0(Mux2xOutBit_inst12_O), .I1(magma_Bit_not_inst2_out), .O(Mux2xOutBit_inst13_O), .S(magma_Bits_5_eq_inst13_out));
Mux2xOutBit Mux2xOutBit_inst14(.I0(Mux2xOutBit_inst13_O), .I1(N), .O(Mux2xOutBit_inst14_O), .S(magma_Bits_5_eq_inst14_out));
Mux2xOutBit Mux2xOutBit_inst15(.I0(Mux2xOutBit_inst14_O), .I1(magma_Bit_not_inst1_out), .O(Mux2xOutBit_inst15_O), .S(magma_Bit_or_inst4_out));
Mux2xOutBit Mux2xOutBit_inst16(.I0(Mux2xOutBit_inst15_O), .I1(C), .O(Mux2xOutBit_inst16_O), .S(magma_Bit_or_inst5_out));
Mux2xOutBit Mux2xOutBit_inst17(.I0(Mux2xOutBit_inst16_O), .I1(magma_Bit_not_inst0_out), .O(Mux2xOutBit_inst17_O), .S(magma_Bits_5_eq_inst19_out));
Mux2xOutBit Mux2xOutBit_inst18(.I0(Mux2xOutBit_inst17_O), .I1(Z), .O(Mux2xOutBit_inst18_O), .S(magma_Bits_5_eq_inst20_out));
Mux2xOutBit Mux2xOutBit_inst2(.I0(Mux2xOutBit_inst1_O), .I1(magma_Bit_or_inst2_out), .O(Mux2xOutBit_inst2_O), .S(magma_Bits_5_eq_inst2_out));
Mux2xOutBit Mux2xOutBit_inst3(.I0(Mux2xOutBit_inst2_O), .I1(lut), .O(Mux2xOutBit_inst3_O), .S(magma_Bits_5_eq_inst3_out));
Mux2xOutBit Mux2xOutBit_inst4(.I0(Mux2xOutBit_inst3_O), .I1(alu), .O(Mux2xOutBit_inst4_O), .S(magma_Bits_5_eq_inst4_out));
Mux2xOutBit Mux2xOutBit_inst5(.I0(Mux2xOutBit_inst4_O), .I1(magma_Bit_or_inst1_out), .O(Mux2xOutBit_inst5_O), .S(magma_Bits_5_eq_inst5_out));
Mux2xOutBit Mux2xOutBit_inst6(.I0(Mux2xOutBit_inst5_O), .I1(magma_Bit_and_inst1_out), .O(Mux2xOutBit_inst6_O), .S(magma_Bits_5_eq_inst6_out));
Mux2xOutBit Mux2xOutBit_inst7(.I0(Mux2xOutBit_inst6_O), .I1(magma_Bit_xor_inst1_out), .O(Mux2xOutBit_inst7_O), .S(magma_Bits_5_eq_inst7_out));
Mux2xOutBit Mux2xOutBit_inst8(.I0(Mux2xOutBit_inst7_O), .I1(magma_Bit_not_inst6_out), .O(Mux2xOutBit_inst8_O), .S(magma_Bits_5_eq_inst8_out));
Mux2xOutBit Mux2xOutBit_inst9(.I0(Mux2xOutBit_inst8_O), .I1(magma_Bit_or_inst0_out), .O(Mux2xOutBit_inst9_O), .S(magma_Bits_5_eq_inst9_out));
coreir_const #(.value(5'h00), .width(5)) const_0_5(.out(const_0_5_out));
coreir_const #(.value(5'h0a), .width(5)) const_10_5(.out(const_10_5_out));
coreir_const #(.value(5'h0b), .width(5)) const_11_5(.out(const_11_5_out));
coreir_const #(.value(5'h0c), .width(5)) const_12_5(.out(const_12_5_out));
coreir_const #(.value(5'h0d), .width(5)) const_13_5(.out(const_13_5_out));
coreir_const #(.value(5'h0e), .width(5)) const_14_5(.out(const_14_5_out));
coreir_const #(.value(5'h0f), .width(5)) const_15_5(.out(const_15_5_out));
coreir_const #(.value(5'h10), .width(5)) const_16_5(.out(const_16_5_out));
coreir_const #(.value(5'h11), .width(5)) const_17_5(.out(const_17_5_out));
coreir_const #(.value(5'h12), .width(5)) const_18_5(.out(const_18_5_out));
coreir_const #(.value(5'h01), .width(5)) const_1_5(.out(const_1_5_out));
coreir_const #(.value(5'h02), .width(5)) const_2_5(.out(const_2_5_out));
coreir_const #(.value(5'h03), .width(5)) const_3_5(.out(const_3_5_out));
coreir_const #(.value(5'h04), .width(5)) const_4_5(.out(const_4_5_out));
coreir_const #(.value(5'h05), .width(5)) const_5_5(.out(const_5_5_out));
coreir_const #(.value(5'h06), .width(5)) const_6_5(.out(const_6_5_out));
coreir_const #(.value(5'h07), .width(5)) const_7_5(.out(const_7_5_out));
coreir_const #(.value(5'h08), .width(5)) const_8_5(.out(const_8_5_out));
coreir_const #(.value(5'h09), .width(5)) const_9_5(.out(const_9_5_out));
corebit_and magma_Bit_and_inst0(.in0(C), .in1(magma_Bit_not_inst4_out), .out(magma_Bit_and_inst0_out));
corebit_and magma_Bit_and_inst1(.in0(magma_Bit_not_inst7_out), .in1(magma_Bit_not_inst8_out), .out(magma_Bit_and_inst1_out));
corebit_and magma_Bit_and_inst2(.in0(magma_Bit_not_inst10_out), .in1(magma_Bit_not_inst11_out), .out(magma_Bit_and_inst2_out));
corebit_and magma_Bit_and_inst3(.in0(N), .in1(magma_Bit_not_inst12_out), .out(magma_Bit_and_inst3_out));
corebit_not magma_Bit_not_inst0(.in(Z), .out(magma_Bit_not_inst0_out));
corebit_not magma_Bit_not_inst1(.in(C), .out(magma_Bit_not_inst1_out));
corebit_not magma_Bit_not_inst10(.in(N), .out(magma_Bit_not_inst10_out));
corebit_not magma_Bit_not_inst11(.in(Z), .out(magma_Bit_not_inst11_out));
corebit_not magma_Bit_not_inst12(.in(Z), .out(magma_Bit_not_inst12_out));
corebit_not magma_Bit_not_inst2(.in(N), .out(magma_Bit_not_inst2_out));
corebit_not magma_Bit_not_inst3(.in(V), .out(magma_Bit_not_inst3_out));
corebit_not magma_Bit_not_inst4(.in(Z), .out(magma_Bit_not_inst4_out));
corebit_not magma_Bit_not_inst5(.in(C), .out(magma_Bit_not_inst5_out));
corebit_not magma_Bit_not_inst6(.in(magma_Bit_xor_inst0_out), .out(magma_Bit_not_inst6_out));
corebit_not magma_Bit_not_inst7(.in(Z), .out(magma_Bit_not_inst7_out));
corebit_not magma_Bit_not_inst8(.in(magma_Bit_xor_inst2_out), .out(magma_Bit_not_inst8_out));
corebit_not magma_Bit_not_inst9(.in(N), .out(magma_Bit_not_inst9_out));
corebit_or magma_Bit_or_inst0(.in0(magma_Bit_not_inst5_out), .in1(Z), .out(magma_Bit_or_inst0_out));
corebit_or magma_Bit_or_inst1(.in0(Z), .in1(magma_Bit_xor_inst3_out), .out(magma_Bit_or_inst1_out));
corebit_or magma_Bit_or_inst2(.in0(magma_Bit_not_inst9_out), .in1(Z), .out(magma_Bit_or_inst2_out));
corebit_or magma_Bit_or_inst3(.in0(N), .in1(Z), .out(magma_Bit_or_inst3_out));
corebit_or magma_Bit_or_inst4(.in0(magma_Bits_5_eq_inst15_out), .in1(magma_Bits_5_eq_inst16_out), .out(magma_Bit_or_inst4_out));
corebit_or magma_Bit_or_inst5(.in0(magma_Bits_5_eq_inst17_out), .in1(magma_Bits_5_eq_inst18_out), .out(magma_Bit_or_inst5_out));
corebit_xor magma_Bit_xor_inst0(.in0(N), .in1(V), .out(magma_Bit_xor_inst0_out));
corebit_xor magma_Bit_xor_inst1(.in0(N), .in1(V), .out(magma_Bit_xor_inst1_out));
corebit_xor magma_Bit_xor_inst2(.in0(N), .in1(V), .out(magma_Bit_xor_inst2_out));
corebit_xor magma_Bit_xor_inst3(.in0(N), .in1(V), .out(magma_Bit_xor_inst3_out));
coreir_eq #(.width(5)) magma_Bits_5_eq_inst0(.in0(code), .in1(const_18_5_out), .out(magma_Bits_5_eq_inst0_out));
coreir_eq #(.width(5)) magma_Bits_5_eq_inst1(.in0(code), .in1(const_17_5_out), .out(magma_Bits_5_eq_inst1_out));
coreir_eq #(.width(5)) magma_Bits_5_eq_inst10(.in0(code), .in1(const_8_5_out), .out(magma_Bits_5_eq_inst10_out));
coreir_eq #(.width(5)) magma_Bits_5_eq_inst11(.in0(code), .in1(const_7_5_out), .out(magma_Bits_5_eq_inst11_out));
coreir_eq #(.width(5)) magma_Bits_5_eq_inst12(.in0(code), .in1(const_6_5_out), .out(magma_Bits_5_eq_inst12_out));
coreir_eq #(.width(5)) magma_Bits_5_eq_inst13(.in0(code), .in1(const_5_5_out), .out(magma_Bits_5_eq_inst13_out));
coreir_eq #(.width(5)) magma_Bits_5_eq_inst14(.in0(code), .in1(const_4_5_out), .out(magma_Bits_5_eq_inst14_out));
coreir_eq #(.width(5)) magma_Bits_5_eq_inst15(.in0(code), .in1(const_3_5_out), .out(magma_Bits_5_eq_inst15_out));
coreir_eq #(.width(5)) magma_Bits_5_eq_inst16(.in0(code), .in1(const_3_5_out), .out(magma_Bits_5_eq_inst16_out));
coreir_eq #(.width(5)) magma_Bits_5_eq_inst17(.in0(code), .in1(const_2_5_out), .out(magma_Bits_5_eq_inst17_out));
coreir_eq #(.width(5)) magma_Bits_5_eq_inst18(.in0(code), .in1(const_2_5_out), .out(magma_Bits_5_eq_inst18_out));
coreir_eq #(.width(5)) magma_Bits_5_eq_inst19(.in0(code), .in1(const_1_5_out), .out(magma_Bits_5_eq_inst19_out));
coreir_eq #(.width(5)) magma_Bits_5_eq_inst2(.in0(code), .in1(const_16_5_out), .out(magma_Bits_5_eq_inst2_out));
coreir_eq #(.width(5)) magma_Bits_5_eq_inst20(.in0(code), .in1(const_0_5_out), .out(magma_Bits_5_eq_inst20_out));
coreir_eq #(.width(5)) magma_Bits_5_eq_inst3(.in0(code), .in1(const_14_5_out), .out(magma_Bits_5_eq_inst3_out));
coreir_eq #(.width(5)) magma_Bits_5_eq_inst4(.in0(code), .in1(const_15_5_out), .out(magma_Bits_5_eq_inst4_out));
coreir_eq #(.width(5)) magma_Bits_5_eq_inst5(.in0(code), .in1(const_13_5_out), .out(magma_Bits_5_eq_inst5_out));
coreir_eq #(.width(5)) magma_Bits_5_eq_inst6(.in0(code), .in1(const_12_5_out), .out(magma_Bits_5_eq_inst6_out));
coreir_eq #(.width(5)) magma_Bits_5_eq_inst7(.in0(code), .in1(const_11_5_out), .out(magma_Bits_5_eq_inst7_out));
coreir_eq #(.width(5)) magma_Bits_5_eq_inst8(.in0(code), .in1(const_10_5_out), .out(magma_Bits_5_eq_inst8_out));
coreir_eq #(.width(5)) magma_Bits_5_eq_inst9(.in0(code), .in1(const_9_5_out), .out(magma_Bits_5_eq_inst9_out));
assign O = Mux2xOutBit_inst18_O;
endmodule

module alu (output [15:0] O0, output O1, output O2, output O3, output O4, output O5, input [15:0] a, input [15:0] b, input d, input [7:0] inst_alu, input inst_bit0, input inst_bit1, input inst_bit2, input [4:0] inst_cond, input [15:0] inst_data0, input [15:0] inst_data1, input [7:0] inst_lut, input [1:0] inst_rega, input [1:0] inst_regb, input [1:0] inst_regd, input [1:0] inst_rege, input [1:0] inst_regf, input [0:0] inst_signed_);
wire Mux2xOutBit_inst0_O;
wire Mux2xOutBit_inst1_O;
wire Mux2xOutBit_inst10_O;
wire Mux2xOutBit_inst11_O;
wire Mux2xOutBit_inst12_O;
wire Mux2xOutBit_inst13_O;
wire Mux2xOutBit_inst14_O;
wire Mux2xOutBit_inst15_O;
wire Mux2xOutBit_inst16_O;
wire Mux2xOutBit_inst17_O;
wire Mux2xOutBit_inst18_O;
wire Mux2xOutBit_inst19_O;
wire Mux2xOutBit_inst2_O;
wire Mux2xOutBit_inst20_O;
wire Mux2xOutBit_inst21_O;
wire Mux2xOutBit_inst22_O;
wire Mux2xOutBit_inst23_O;
wire Mux2xOutBit_inst24_O;
wire Mux2xOutBit_inst25_O;
wire Mux2xOutBit_inst26_O;
wire Mux2xOutBit_inst27_O;
wire Mux2xOutBit_inst28_O;
wire Mux2xOutBit_inst29_O;
wire Mux2xOutBit_inst3_O;
wire Mux2xOutBit_inst30_O;
wire Mux2xOutBit_inst31_O;
wire Mux2xOutBit_inst32_O;
wire Mux2xOutBit_inst33_O;
wire Mux2xOutBit_inst34_O;
wire Mux2xOutBit_inst35_O;
wire Mux2xOutBit_inst36_O;
wire Mux2xOutBit_inst37_O;
wire Mux2xOutBit_inst38_O;
wire Mux2xOutBit_inst39_O;
wire Mux2xOutBit_inst4_O;
wire Mux2xOutBit_inst40_O;
wire Mux2xOutBit_inst41_O;
wire Mux2xOutBit_inst42_O;
wire Mux2xOutBit_inst43_O;
wire Mux2xOutBit_inst44_O;
wire Mux2xOutBit_inst45_O;
wire Mux2xOutBit_inst46_O;
wire Mux2xOutBit_inst47_O;
wire Mux2xOutBit_inst48_O;
wire Mux2xOutBit_inst49_O;
wire Mux2xOutBit_inst5_O;
wire Mux2xOutBit_inst50_O;
wire Mux2xOutBit_inst51_O;
wire Mux2xOutBit_inst52_O;
wire Mux2xOutBit_inst6_O;
wire Mux2xOutBit_inst7_O;
wire Mux2xOutBit_inst8_O;
wire Mux2xOutBit_inst9_O;
wire [15:0] Mux2xOutSInt16_inst0_O;
wire [15:0] Mux2xOutSInt16_inst1_O;
wire [15:0] Mux2xOutSInt16_inst10_O;
wire [15:0] Mux2xOutSInt16_inst11_O;
wire [15:0] Mux2xOutSInt16_inst12_O;
wire [15:0] Mux2xOutSInt16_inst13_O;
wire [15:0] Mux2xOutSInt16_inst14_O;
wire [15:0] Mux2xOutSInt16_inst15_O;
wire [15:0] Mux2xOutSInt16_inst16_O;
wire [15:0] Mux2xOutSInt16_inst17_O;
wire [15:0] Mux2xOutSInt16_inst18_O;
wire [15:0] Mux2xOutSInt16_inst19_O;
wire [15:0] Mux2xOutSInt16_inst2_O;
wire [15:0] Mux2xOutSInt16_inst20_O;
wire [15:0] Mux2xOutSInt16_inst21_O;
wire [15:0] Mux2xOutSInt16_inst22_O;
wire [15:0] Mux2xOutSInt16_inst23_O;
wire [15:0] Mux2xOutSInt16_inst24_O;
wire [15:0] Mux2xOutSInt16_inst25_O;
wire [15:0] Mux2xOutSInt16_inst26_O;
wire [15:0] Mux2xOutSInt16_inst27_O;
wire [15:0] Mux2xOutSInt16_inst28_O;
wire [15:0] Mux2xOutSInt16_inst29_O;
wire [15:0] Mux2xOutSInt16_inst3_O;
wire [15:0] Mux2xOutSInt16_inst30_O;
wire [15:0] Mux2xOutSInt16_inst4_O;
wire [15:0] Mux2xOutSInt16_inst5_O;
wire [15:0] Mux2xOutSInt16_inst6_O;
wire [15:0] Mux2xOutSInt16_inst7_O;
wire [15:0] Mux2xOutSInt16_inst8_O;
wire [15:0] Mux2xOutSInt16_inst9_O;
wire [8:0] Mux2xOutSInt9_inst0_O;
wire [8:0] Mux2xOutSInt9_inst1_O;
wire [8:0] Mux2xOutSInt9_inst10_O;
wire [8:0] Mux2xOutSInt9_inst11_O;
wire [8:0] Mux2xOutSInt9_inst12_O;
wire [8:0] Mux2xOutSInt9_inst13_O;
wire [8:0] Mux2xOutSInt9_inst14_O;
wire [8:0] Mux2xOutSInt9_inst15_O;
wire [8:0] Mux2xOutSInt9_inst16_O;
wire [8:0] Mux2xOutSInt9_inst17_O;
wire [8:0] Mux2xOutSInt9_inst18_O;
wire [8:0] Mux2xOutSInt9_inst19_O;
wire [8:0] Mux2xOutSInt9_inst2_O;
wire [8:0] Mux2xOutSInt9_inst20_O;
wire [8:0] Mux2xOutSInt9_inst21_O;
wire [8:0] Mux2xOutSInt9_inst22_O;
wire [8:0] Mux2xOutSInt9_inst23_O;
wire [8:0] Mux2xOutSInt9_inst24_O;
wire [8:0] Mux2xOutSInt9_inst25_O;
wire [8:0] Mux2xOutSInt9_inst26_O;
wire [8:0] Mux2xOutSInt9_inst27_O;
wire [8:0] Mux2xOutSInt9_inst28_O;
wire [8:0] Mux2xOutSInt9_inst29_O;
wire [8:0] Mux2xOutSInt9_inst3_O;
wire [8:0] Mux2xOutSInt9_inst30_O;
wire [8:0] Mux2xOutSInt9_inst31_O;
wire [8:0] Mux2xOutSInt9_inst32_O;
wire [8:0] Mux2xOutSInt9_inst33_O;
wire [8:0] Mux2xOutSInt9_inst34_O;
wire [8:0] Mux2xOutSInt9_inst35_O;
wire [8:0] Mux2xOutSInt9_inst36_O;
wire [8:0] Mux2xOutSInt9_inst37_O;
wire [8:0] Mux2xOutSInt9_inst38_O;
wire [8:0] Mux2xOutSInt9_inst39_O;
wire [8:0] Mux2xOutSInt9_inst4_O;
wire [8:0] Mux2xOutSInt9_inst40_O;
wire [8:0] Mux2xOutSInt9_inst41_O;
wire [8:0] Mux2xOutSInt9_inst42_O;
wire [8:0] Mux2xOutSInt9_inst5_O;
wire [8:0] Mux2xOutSInt9_inst6_O;
wire [8:0] Mux2xOutSInt9_inst7_O;
wire [8:0] Mux2xOutSInt9_inst8_O;
wire [8:0] Mux2xOutSInt9_inst9_O;
wire [15:0] Mux2xOutUInt16_inst0_O;
wire [15:0] Mux2xOutUInt16_inst1_O;
wire [15:0] Mux2xOutUInt16_inst10_O;
wire [15:0] Mux2xOutUInt16_inst11_O;
wire [15:0] Mux2xOutUInt16_inst12_O;
wire [15:0] Mux2xOutUInt16_inst13_O;
wire [15:0] Mux2xOutUInt16_inst14_O;
wire [15:0] Mux2xOutUInt16_inst15_O;
wire [15:0] Mux2xOutUInt16_inst16_O;
wire [15:0] Mux2xOutUInt16_inst17_O;
wire [15:0] Mux2xOutUInt16_inst18_O;
wire [15:0] Mux2xOutUInt16_inst19_O;
wire [15:0] Mux2xOutUInt16_inst2_O;
wire [15:0] Mux2xOutUInt16_inst20_O;
wire [15:0] Mux2xOutUInt16_inst21_O;
wire [15:0] Mux2xOutUInt16_inst22_O;
wire [15:0] Mux2xOutUInt16_inst23_O;
wire [15:0] Mux2xOutUInt16_inst24_O;
wire [15:0] Mux2xOutUInt16_inst25_O;
wire [15:0] Mux2xOutUInt16_inst26_O;
wire [15:0] Mux2xOutUInt16_inst27_O;
wire [15:0] Mux2xOutUInt16_inst28_O;
wire [15:0] Mux2xOutUInt16_inst29_O;
wire [15:0] Mux2xOutUInt16_inst3_O;
wire [15:0] Mux2xOutUInt16_inst30_O;
wire [15:0] Mux2xOutUInt16_inst31_O;
wire [15:0] Mux2xOutUInt16_inst32_O;
wire [15:0] Mux2xOutUInt16_inst33_O;
wire [15:0] Mux2xOutUInt16_inst34_O;
wire [15:0] Mux2xOutUInt16_inst35_O;
wire [15:0] Mux2xOutUInt16_inst36_O;
wire [15:0] Mux2xOutUInt16_inst37_O;
wire [15:0] Mux2xOutUInt16_inst38_O;
wire [15:0] Mux2xOutUInt16_inst39_O;
wire [15:0] Mux2xOutUInt16_inst4_O;
wire [15:0] Mux2xOutUInt16_inst40_O;
wire [15:0] Mux2xOutUInt16_inst41_O;
wire [15:0] Mux2xOutUInt16_inst42_O;
wire [15:0] Mux2xOutUInt16_inst43_O;
wire [15:0] Mux2xOutUInt16_inst44_O;
wire [15:0] Mux2xOutUInt16_inst45_O;
wire [15:0] Mux2xOutUInt16_inst46_O;
wire [15:0] Mux2xOutUInt16_inst47_O;
wire [15:0] Mux2xOutUInt16_inst48_O;
wire [15:0] Mux2xOutUInt16_inst49_O;
wire [15:0] Mux2xOutUInt16_inst5_O;
wire [15:0] Mux2xOutUInt16_inst50_O;
wire [15:0] Mux2xOutUInt16_inst51_O;
wire [15:0] Mux2xOutUInt16_inst52_O;
wire [15:0] Mux2xOutUInt16_inst53_O;
wire [15:0] Mux2xOutUInt16_inst54_O;
wire [15:0] Mux2xOutUInt16_inst55_O;
wire [15:0] Mux2xOutUInt16_inst56_O;
wire [15:0] Mux2xOutUInt16_inst57_O;
wire [15:0] Mux2xOutUInt16_inst58_O;
wire [15:0] Mux2xOutUInt16_inst59_O;
wire [15:0] Mux2xOutUInt16_inst6_O;
wire [15:0] Mux2xOutUInt16_inst60_O;
wire [15:0] Mux2xOutUInt16_inst61_O;
wire [15:0] Mux2xOutUInt16_inst62_O;
wire [15:0] Mux2xOutUInt16_inst63_O;
wire [15:0] Mux2xOutUInt16_inst64_O;
wire [15:0] Mux2xOutUInt16_inst65_O;
wire [15:0] Mux2xOutUInt16_inst66_O;
wire [15:0] Mux2xOutUInt16_inst67_O;
wire [15:0] Mux2xOutUInt16_inst68_O;
wire [15:0] Mux2xOutUInt16_inst69_O;
wire [15:0] Mux2xOutUInt16_inst7_O;
wire [15:0] Mux2xOutUInt16_inst70_O;
wire [15:0] Mux2xOutUInt16_inst71_O;
wire [15:0] Mux2xOutUInt16_inst72_O;
wire [15:0] Mux2xOutUInt16_inst73_O;
wire [15:0] Mux2xOutUInt16_inst74_O;
wire [15:0] Mux2xOutUInt16_inst75_O;
wire [15:0] Mux2xOutUInt16_inst76_O;
wire [15:0] Mux2xOutUInt16_inst77_O;
wire [15:0] Mux2xOutUInt16_inst78_O;
wire [15:0] Mux2xOutUInt16_inst79_O;
wire [15:0] Mux2xOutUInt16_inst8_O;
wire [15:0] Mux2xOutUInt16_inst80_O;
wire [15:0] Mux2xOutUInt16_inst81_O;
wire [15:0] Mux2xOutUInt16_inst82_O;
wire [15:0] Mux2xOutUInt16_inst83_O;
wire [15:0] Mux2xOutUInt16_inst84_O;
wire [15:0] Mux2xOutUInt16_inst85_O;
wire [15:0] Mux2xOutUInt16_inst9_O;
wire [22:0] Mux2xOutUInt23_inst0_O;
wire [31:0] Mux2xOutUInt32_inst0_O;
wire [31:0] Mux2xOutUInt32_inst1_O;
wire [7:0] Mux2xOutUInt8_inst0_O;
wire [7:0] Mux2xOutUInt8_inst1_O;
wire [7:0] Mux2xOutUInt8_inst10_O;
wire [7:0] Mux2xOutUInt8_inst11_O;
wire [7:0] Mux2xOutUInt8_inst12_O;
wire [7:0] Mux2xOutUInt8_inst13_O;
wire [7:0] Mux2xOutUInt8_inst14_O;
wire [7:0] Mux2xOutUInt8_inst15_O;
wire [7:0] Mux2xOutUInt8_inst16_O;
wire [7:0] Mux2xOutUInt8_inst17_O;
wire [7:0] Mux2xOutUInt8_inst18_O;
wire [7:0] Mux2xOutUInt8_inst19_O;
wire [7:0] Mux2xOutUInt8_inst2_O;
wire [7:0] Mux2xOutUInt8_inst20_O;
wire [7:0] Mux2xOutUInt8_inst3_O;
wire [7:0] Mux2xOutUInt8_inst4_O;
wire [7:0] Mux2xOutUInt8_inst5_O;
wire [7:0] Mux2xOutUInt8_inst6_O;
wire [7:0] Mux2xOutUInt8_inst7_O;
wire [7:0] Mux2xOutUInt8_inst8_O;
wire [7:0] Mux2xOutUInt8_inst9_O;
wire bit_const_0_None_out;
wire bit_const_1_None_out;
wire [15:0] const_0_16_out;
wire [22:0] const_0_23_out;
wire [6:0] const_0_7_out;
wire [7:0] const_0_8_out;
wire [8:0] const_0_9_out;
wire [15:0] const_10_16_out;
wire [15:0] const_11_16_out;
wire [7:0] const_11_8_out;
wire [15:0] const_127_16_out;
wire [7:0] const_127_8_out;
wire [8:0] const_127_9_out;
wire [15:0] const_128_16_out;
wire [15:0] const_12_16_out;
wire [7:0] const_12_8_out;
wire [15:0] const_13_16_out;
wire [7:0] const_13_8_out;
wire [7:0] const_142_8_out;
wire [7:0] const_146_8_out;
wire [7:0] const_147_8_out;
wire [7:0] const_148_8_out;
wire [7:0] const_149_8_out;
wire [15:0] const_14_16_out;
wire [7:0] const_150_8_out;
wire [7:0] const_151_8_out;
wire [7:0] const_152_8_out;
wire [15:0] const_15_16_out;
wire [7:0] const_15_8_out;
wire [7:0] const_17_8_out;
wire [7:0] const_18_8_out;
wire [7:0] const_19_8_out;
wire [0:0] const_1_1_out;
wire [15:0] const_1_16_out;
wire [7:0] const_1_8_out;
wire [7:0] const_20_8_out;
wire [7:0] const_22_8_out;
wire [7:0] const_23_8_out;
wire [7:0] const_24_8_out;
wire [7:0] const_255_8_out;
wire [8:0] const_255_9_out;
wire [7:0] const_25_8_out;
wire [15:0] const_2_16_out;
wire [7:0] const_2_8_out;
wire [15:0] const_32512_16_out;
wire [15:0] const_32640_16_out;
wire [15:0] const_32768_16_out;
wire [15:0] const_3_16_out;
wire [7:0] const_3_8_out;
wire [15:0] const_4_16_out;
wire [7:0] const_4_8_out;
wire [15:0] const_5_16_out;
wire [7:0] const_5_8_out;
wire [15:0] const_65409_16_out;
wire [15:0] const_6_16_out;
wire [7:0] const_6_8_out;
wire [15:0] const_7_16_out;
wire [22:0] const_7_23_out;
wire [15:0] const_8_16_out;
wire [7:0] const_8_8_out;
wire [15:0] const_9_16_out;
wire [15:0] magma_BFloat_16_add_inst0_out;
wire [15:0] magma_BFloat_16_mul_inst0_out;
wire magma_Bit_and_inst0_out;
wire magma_Bit_and_inst1_out;
wire magma_Bit_and_inst2_out;
wire magma_Bit_and_inst3_out;
wire magma_Bit_and_inst4_out;
wire [15:0] magma_Bit_ite_Out_UInt_16_inst0_out;
wire [15:0] magma_Bit_ite_Out_UInt_16_inst1_out;
wire [15:0] magma_Bit_ite_Out_UInt_16_inst2_out;
wire [15:0] magma_Bit_ite_Out_UInt_16_inst3_out;
wire magma_Bit_not_inst0_out;
wire magma_Bit_not_inst1_out;
wire magma_Bit_not_inst10_out;
wire magma_Bit_not_inst11_out;
wire magma_Bit_not_inst12_out;
wire magma_Bit_not_inst13_out;
wire magma_Bit_not_inst14_out;
wire magma_Bit_not_inst15_out;
wire magma_Bit_not_inst16_out;
wire magma_Bit_not_inst17_out;
wire magma_Bit_not_inst18_out;
wire magma_Bit_not_inst19_out;
wire magma_Bit_not_inst2_out;
wire magma_Bit_not_inst20_out;
wire magma_Bit_not_inst21_out;
wire magma_Bit_not_inst22_out;
wire magma_Bit_not_inst23_out;
wire magma_Bit_not_inst24_out;
wire magma_Bit_not_inst25_out;
wire magma_Bit_not_inst3_out;
wire magma_Bit_not_inst4_out;
wire magma_Bit_not_inst5_out;
wire magma_Bit_not_inst6_out;
wire magma_Bit_not_inst7_out;
wire magma_Bit_not_inst8_out;
wire magma_Bit_not_inst9_out;
wire magma_Bit_or_inst0_out;
wire magma_Bit_or_inst1_out;
wire magma_Bit_or_inst10_out;
wire magma_Bit_or_inst11_out;
wire magma_Bit_or_inst12_out;
wire magma_Bit_or_inst13_out;
wire magma_Bit_or_inst14_out;
wire magma_Bit_or_inst15_out;
wire magma_Bit_or_inst16_out;
wire magma_Bit_or_inst17_out;
wire magma_Bit_or_inst18_out;
wire magma_Bit_or_inst19_out;
wire magma_Bit_or_inst2_out;
wire magma_Bit_or_inst20_out;
wire magma_Bit_or_inst21_out;
wire magma_Bit_or_inst22_out;
wire magma_Bit_or_inst23_out;
wire magma_Bit_or_inst24_out;
wire magma_Bit_or_inst25_out;
wire magma_Bit_or_inst26_out;
wire magma_Bit_or_inst27_out;
wire magma_Bit_or_inst28_out;
wire magma_Bit_or_inst29_out;
wire magma_Bit_or_inst3_out;
wire magma_Bit_or_inst30_out;
wire magma_Bit_or_inst31_out;
wire magma_Bit_or_inst32_out;
wire magma_Bit_or_inst33_out;
wire magma_Bit_or_inst34_out;
wire magma_Bit_or_inst35_out;
wire magma_Bit_or_inst36_out;
wire magma_Bit_or_inst37_out;
wire magma_Bit_or_inst38_out;
wire magma_Bit_or_inst39_out;
wire magma_Bit_or_inst4_out;
wire magma_Bit_or_inst40_out;
wire magma_Bit_or_inst41_out;
wire magma_Bit_or_inst42_out;
wire magma_Bit_or_inst43_out;
wire magma_Bit_or_inst44_out;
wire magma_Bit_or_inst45_out;
wire magma_Bit_or_inst46_out;
wire magma_Bit_or_inst47_out;
wire magma_Bit_or_inst48_out;
wire magma_Bit_or_inst49_out;
wire magma_Bit_or_inst5_out;
wire magma_Bit_or_inst50_out;
wire magma_Bit_or_inst51_out;
wire magma_Bit_or_inst52_out;
wire magma_Bit_or_inst53_out;
wire magma_Bit_or_inst6_out;
wire magma_Bit_or_inst7_out;
wire magma_Bit_or_inst8_out;
wire magma_Bit_or_inst9_out;
wire magma_Bit_xor_inst0_out;
wire magma_Bit_xor_inst1_out;
wire magma_Bit_xor_inst10_out;
wire magma_Bit_xor_inst11_out;
wire magma_Bit_xor_inst12_out;
wire magma_Bit_xor_inst13_out;
wire magma_Bit_xor_inst14_out;
wire magma_Bit_xor_inst15_out;
wire magma_Bit_xor_inst16_out;
wire magma_Bit_xor_inst17_out;
wire magma_Bit_xor_inst18_out;
wire magma_Bit_xor_inst19_out;
wire magma_Bit_xor_inst2_out;
wire magma_Bit_xor_inst20_out;
wire magma_Bit_xor_inst21_out;
wire magma_Bit_xor_inst22_out;
wire magma_Bit_xor_inst23_out;
wire magma_Bit_xor_inst24_out;
wire magma_Bit_xor_inst25_out;
wire magma_Bit_xor_inst3_out;
wire magma_Bit_xor_inst4_out;
wire magma_Bit_xor_inst5_out;
wire magma_Bit_xor_inst6_out;
wire magma_Bit_xor_inst7_out;
wire magma_Bit_xor_inst8_out;
wire magma_Bit_xor_inst9_out;
wire [15:0] magma_Bits_16_add_inst0_out;
wire [15:0] magma_Bits_16_and_inst0_out;
wire [15:0] magma_Bits_16_and_inst1_out;
wire [15:0] magma_Bits_16_and_inst10_out;
wire [15:0] magma_Bits_16_and_inst11_out;
wire [15:0] magma_Bits_16_and_inst12_out;
wire [15:0] magma_Bits_16_and_inst13_out;
wire [15:0] magma_Bits_16_and_inst14_out;
wire [15:0] magma_Bits_16_and_inst2_out;
wire [15:0] magma_Bits_16_and_inst3_out;
wire [15:0] magma_Bits_16_and_inst4_out;
wire [15:0] magma_Bits_16_and_inst5_out;
wire [15:0] magma_Bits_16_and_inst6_out;
wire [15:0] magma_Bits_16_and_inst7_out;
wire [15:0] magma_Bits_16_and_inst8_out;
wire [15:0] magma_Bits_16_and_inst9_out;
wire [15:0] magma_Bits_16_ashr_inst0_out;
wire magma_Bits_16_eq_inst0_out;
wire magma_Bits_16_eq_inst1_out;
wire magma_Bits_16_eq_inst2_out;
wire [15:0] magma_Bits_16_lshr_inst0_out;
wire [15:0] magma_Bits_16_lshr_inst1_out;
wire [15:0] magma_Bits_16_lshr_inst2_out;
wire [15:0] magma_Bits_16_mul_inst0_out;
wire [15:0] magma_Bits_16_neg_inst0_out;
wire [15:0] magma_Bits_16_neg_inst1_out;
wire [15:0] magma_Bits_16_neg_inst2_out;
wire [15:0] magma_Bits_16_neg_inst3_out;
wire [15:0] magma_Bits_16_not_inst0_out;
wire [15:0] magma_Bits_16_or_inst0_out;
wire [15:0] magma_Bits_16_or_inst1_out;
wire [15:0] magma_Bits_16_or_inst2_out;
wire [15:0] magma_Bits_16_or_inst3_out;
wire [15:0] magma_Bits_16_or_inst4_out;
wire [15:0] magma_Bits_16_or_inst5_out;
wire [15:0] magma_Bits_16_or_inst6_out;
wire [15:0] magma_Bits_16_or_inst7_out;
wire [15:0] magma_Bits_16_or_inst8_out;
wire [15:0] magma_Bits_16_or_inst9_out;
wire magma_Bits_16_sge_inst0_out;
wire magma_Bits_16_sge_inst1_out;
wire magma_Bits_16_sge_inst2_out;
wire [15:0] magma_Bits_16_shl_inst0_out;
wire [15:0] magma_Bits_16_shl_inst1_out;
wire [15:0] magma_Bits_16_shl_inst2_out;
wire [15:0] magma_Bits_16_shl_inst3_out;
wire [15:0] magma_Bits_16_shl_inst4_out;
wire [15:0] magma_Bits_16_shl_inst5_out;
wire [15:0] magma_Bits_16_shl_inst6_out;
wire [15:0] magma_Bits_16_shl_inst7_out;
wire magma_Bits_16_sle_inst0_out;
wire [15:0] magma_Bits_16_sub_inst0_out;
wire [15:0] magma_Bits_16_sub_inst1_out;
wire magma_Bits_16_uge_inst0_out;
wire magma_Bits_16_uge_inst1_out;
wire magma_Bits_16_ule_inst0_out;
wire [15:0] magma_Bits_16_xor_inst0_out;
wire [15:0] magma_Bits_16_xor_inst1_out;
wire [16:0] magma_Bits_17_add_inst0_out;
wire [16:0] magma_Bits_17_add_inst1_out;
wire magma_Bits_1_eq_inst0_out;
wire magma_Bits_1_eq_inst1_out;
wire magma_Bits_1_eq_inst2_out;
wire magma_Bits_1_eq_inst3_out;
wire magma_Bits_1_eq_inst4_out;
wire magma_Bits_1_eq_inst5_out;
wire magma_Bits_1_eq_inst6_out;
wire magma_Bits_1_eq_inst7_out;
wire magma_Bits_1_eq_inst8_out;
wire [22:0] magma_Bits_23_lshr_inst0_out;
wire [22:0] magma_Bits_23_shl_inst0_out;
wire [31:0] magma_Bits_32_mul_inst0_out;
wire magma_Bits_7_eq_inst0_out;
wire magma_Bits_7_eq_inst1_out;
wire magma_Bits_7_eq_inst2_out;
wire [7:0] magma_Bits_8_add_inst0_out;
wire [7:0] magma_Bits_8_add_inst1_out;
wire magma_Bits_8_eq_inst0_out;
wire magma_Bits_8_eq_inst1_out;
wire magma_Bits_8_eq_inst10_out;
wire magma_Bits_8_eq_inst100_out;
wire magma_Bits_8_eq_inst101_out;
wire magma_Bits_8_eq_inst102_out;
wire magma_Bits_8_eq_inst103_out;
wire magma_Bits_8_eq_inst104_out;
wire magma_Bits_8_eq_inst105_out;
wire magma_Bits_8_eq_inst106_out;
wire magma_Bits_8_eq_inst107_out;
wire magma_Bits_8_eq_inst108_out;
wire magma_Bits_8_eq_inst109_out;
wire magma_Bits_8_eq_inst11_out;
wire magma_Bits_8_eq_inst110_out;
wire magma_Bits_8_eq_inst111_out;
wire magma_Bits_8_eq_inst112_out;
wire magma_Bits_8_eq_inst113_out;
wire magma_Bits_8_eq_inst114_out;
wire magma_Bits_8_eq_inst115_out;
wire magma_Bits_8_eq_inst116_out;
wire magma_Bits_8_eq_inst117_out;
wire magma_Bits_8_eq_inst118_out;
wire magma_Bits_8_eq_inst119_out;
wire magma_Bits_8_eq_inst12_out;
wire magma_Bits_8_eq_inst120_out;
wire magma_Bits_8_eq_inst121_out;
wire magma_Bits_8_eq_inst122_out;
wire magma_Bits_8_eq_inst123_out;
wire magma_Bits_8_eq_inst124_out;
wire magma_Bits_8_eq_inst125_out;
wire magma_Bits_8_eq_inst126_out;
wire magma_Bits_8_eq_inst127_out;
wire magma_Bits_8_eq_inst128_out;
wire magma_Bits_8_eq_inst129_out;
wire magma_Bits_8_eq_inst13_out;
wire magma_Bits_8_eq_inst130_out;
wire magma_Bits_8_eq_inst131_out;
wire magma_Bits_8_eq_inst132_out;
wire magma_Bits_8_eq_inst133_out;
wire magma_Bits_8_eq_inst134_out;
wire magma_Bits_8_eq_inst135_out;
wire magma_Bits_8_eq_inst136_out;
wire magma_Bits_8_eq_inst137_out;
wire magma_Bits_8_eq_inst138_out;
wire magma_Bits_8_eq_inst139_out;
wire magma_Bits_8_eq_inst14_out;
wire magma_Bits_8_eq_inst140_out;
wire magma_Bits_8_eq_inst141_out;
wire magma_Bits_8_eq_inst142_out;
wire magma_Bits_8_eq_inst143_out;
wire magma_Bits_8_eq_inst144_out;
wire magma_Bits_8_eq_inst145_out;
wire magma_Bits_8_eq_inst146_out;
wire magma_Bits_8_eq_inst147_out;
wire magma_Bits_8_eq_inst148_out;
wire magma_Bits_8_eq_inst149_out;
wire magma_Bits_8_eq_inst15_out;
wire magma_Bits_8_eq_inst150_out;
wire magma_Bits_8_eq_inst151_out;
wire magma_Bits_8_eq_inst152_out;
wire magma_Bits_8_eq_inst153_out;
wire magma_Bits_8_eq_inst154_out;
wire magma_Bits_8_eq_inst155_out;
wire magma_Bits_8_eq_inst156_out;
wire magma_Bits_8_eq_inst157_out;
wire magma_Bits_8_eq_inst158_out;
wire magma_Bits_8_eq_inst159_out;
wire magma_Bits_8_eq_inst16_out;
wire magma_Bits_8_eq_inst160_out;
wire magma_Bits_8_eq_inst161_out;
wire magma_Bits_8_eq_inst162_out;
wire magma_Bits_8_eq_inst163_out;
wire magma_Bits_8_eq_inst164_out;
wire magma_Bits_8_eq_inst165_out;
wire magma_Bits_8_eq_inst166_out;
wire magma_Bits_8_eq_inst167_out;
wire magma_Bits_8_eq_inst168_out;
wire magma_Bits_8_eq_inst169_out;
wire magma_Bits_8_eq_inst17_out;
wire magma_Bits_8_eq_inst170_out;
wire magma_Bits_8_eq_inst171_out;
wire magma_Bits_8_eq_inst172_out;
wire magma_Bits_8_eq_inst173_out;
wire magma_Bits_8_eq_inst174_out;
wire magma_Bits_8_eq_inst175_out;
wire magma_Bits_8_eq_inst176_out;
wire magma_Bits_8_eq_inst177_out;
wire magma_Bits_8_eq_inst178_out;
wire magma_Bits_8_eq_inst179_out;
wire magma_Bits_8_eq_inst18_out;
wire magma_Bits_8_eq_inst180_out;
wire magma_Bits_8_eq_inst181_out;
wire magma_Bits_8_eq_inst182_out;
wire magma_Bits_8_eq_inst183_out;
wire magma_Bits_8_eq_inst184_out;
wire magma_Bits_8_eq_inst185_out;
wire magma_Bits_8_eq_inst186_out;
wire magma_Bits_8_eq_inst187_out;
wire magma_Bits_8_eq_inst188_out;
wire magma_Bits_8_eq_inst189_out;
wire magma_Bits_8_eq_inst19_out;
wire magma_Bits_8_eq_inst190_out;
wire magma_Bits_8_eq_inst191_out;
wire magma_Bits_8_eq_inst192_out;
wire magma_Bits_8_eq_inst193_out;
wire magma_Bits_8_eq_inst194_out;
wire magma_Bits_8_eq_inst195_out;
wire magma_Bits_8_eq_inst196_out;
wire magma_Bits_8_eq_inst197_out;
wire magma_Bits_8_eq_inst198_out;
wire magma_Bits_8_eq_inst199_out;
wire magma_Bits_8_eq_inst2_out;
wire magma_Bits_8_eq_inst20_out;
wire magma_Bits_8_eq_inst200_out;
wire magma_Bits_8_eq_inst201_out;
wire magma_Bits_8_eq_inst202_out;
wire magma_Bits_8_eq_inst203_out;
wire magma_Bits_8_eq_inst204_out;
wire magma_Bits_8_eq_inst205_out;
wire magma_Bits_8_eq_inst206_out;
wire magma_Bits_8_eq_inst207_out;
wire magma_Bits_8_eq_inst208_out;
wire magma_Bits_8_eq_inst209_out;
wire magma_Bits_8_eq_inst21_out;
wire magma_Bits_8_eq_inst210_out;
wire magma_Bits_8_eq_inst211_out;
wire magma_Bits_8_eq_inst212_out;
wire magma_Bits_8_eq_inst213_out;
wire magma_Bits_8_eq_inst214_out;
wire magma_Bits_8_eq_inst215_out;
wire magma_Bits_8_eq_inst216_out;
wire magma_Bits_8_eq_inst217_out;
wire magma_Bits_8_eq_inst218_out;
wire magma_Bits_8_eq_inst219_out;
wire magma_Bits_8_eq_inst22_out;
wire magma_Bits_8_eq_inst220_out;
wire magma_Bits_8_eq_inst221_out;
wire magma_Bits_8_eq_inst222_out;
wire magma_Bits_8_eq_inst223_out;
wire magma_Bits_8_eq_inst224_out;
wire magma_Bits_8_eq_inst225_out;
wire magma_Bits_8_eq_inst226_out;
wire magma_Bits_8_eq_inst227_out;
wire magma_Bits_8_eq_inst228_out;
wire magma_Bits_8_eq_inst229_out;
wire magma_Bits_8_eq_inst23_out;
wire magma_Bits_8_eq_inst230_out;
wire magma_Bits_8_eq_inst231_out;
wire magma_Bits_8_eq_inst232_out;
wire magma_Bits_8_eq_inst233_out;
wire magma_Bits_8_eq_inst234_out;
wire magma_Bits_8_eq_inst235_out;
wire magma_Bits_8_eq_inst236_out;
wire magma_Bits_8_eq_inst237_out;
wire magma_Bits_8_eq_inst238_out;
wire magma_Bits_8_eq_inst239_out;
wire magma_Bits_8_eq_inst24_out;
wire magma_Bits_8_eq_inst240_out;
wire magma_Bits_8_eq_inst241_out;
wire magma_Bits_8_eq_inst242_out;
wire magma_Bits_8_eq_inst243_out;
wire magma_Bits_8_eq_inst244_out;
wire magma_Bits_8_eq_inst245_out;
wire magma_Bits_8_eq_inst246_out;
wire magma_Bits_8_eq_inst247_out;
wire magma_Bits_8_eq_inst248_out;
wire magma_Bits_8_eq_inst249_out;
wire magma_Bits_8_eq_inst25_out;
wire magma_Bits_8_eq_inst250_out;
wire magma_Bits_8_eq_inst251_out;
wire magma_Bits_8_eq_inst26_out;
wire magma_Bits_8_eq_inst27_out;
wire magma_Bits_8_eq_inst28_out;
wire magma_Bits_8_eq_inst29_out;
wire magma_Bits_8_eq_inst3_out;
wire magma_Bits_8_eq_inst30_out;
wire magma_Bits_8_eq_inst31_out;
wire magma_Bits_8_eq_inst32_out;
wire magma_Bits_8_eq_inst33_out;
wire magma_Bits_8_eq_inst34_out;
wire magma_Bits_8_eq_inst35_out;
wire magma_Bits_8_eq_inst36_out;
wire magma_Bits_8_eq_inst37_out;
wire magma_Bits_8_eq_inst38_out;
wire magma_Bits_8_eq_inst39_out;
wire magma_Bits_8_eq_inst4_out;
wire magma_Bits_8_eq_inst40_out;
wire magma_Bits_8_eq_inst41_out;
wire magma_Bits_8_eq_inst42_out;
wire magma_Bits_8_eq_inst43_out;
wire magma_Bits_8_eq_inst44_out;
wire magma_Bits_8_eq_inst45_out;
wire magma_Bits_8_eq_inst46_out;
wire magma_Bits_8_eq_inst47_out;
wire magma_Bits_8_eq_inst48_out;
wire magma_Bits_8_eq_inst49_out;
wire magma_Bits_8_eq_inst5_out;
wire magma_Bits_8_eq_inst50_out;
wire magma_Bits_8_eq_inst51_out;
wire magma_Bits_8_eq_inst52_out;
wire magma_Bits_8_eq_inst53_out;
wire magma_Bits_8_eq_inst54_out;
wire magma_Bits_8_eq_inst55_out;
wire magma_Bits_8_eq_inst56_out;
wire magma_Bits_8_eq_inst57_out;
wire magma_Bits_8_eq_inst58_out;
wire magma_Bits_8_eq_inst59_out;
wire magma_Bits_8_eq_inst6_out;
wire magma_Bits_8_eq_inst60_out;
wire magma_Bits_8_eq_inst61_out;
wire magma_Bits_8_eq_inst62_out;
wire magma_Bits_8_eq_inst63_out;
wire magma_Bits_8_eq_inst64_out;
wire magma_Bits_8_eq_inst65_out;
wire magma_Bits_8_eq_inst66_out;
wire magma_Bits_8_eq_inst67_out;
wire magma_Bits_8_eq_inst68_out;
wire magma_Bits_8_eq_inst69_out;
wire magma_Bits_8_eq_inst7_out;
wire magma_Bits_8_eq_inst70_out;
wire magma_Bits_8_eq_inst71_out;
wire magma_Bits_8_eq_inst72_out;
wire magma_Bits_8_eq_inst73_out;
wire magma_Bits_8_eq_inst74_out;
wire magma_Bits_8_eq_inst75_out;
wire magma_Bits_8_eq_inst76_out;
wire magma_Bits_8_eq_inst77_out;
wire magma_Bits_8_eq_inst78_out;
wire magma_Bits_8_eq_inst79_out;
wire magma_Bits_8_eq_inst8_out;
wire magma_Bits_8_eq_inst80_out;
wire magma_Bits_8_eq_inst81_out;
wire magma_Bits_8_eq_inst82_out;
wire magma_Bits_8_eq_inst83_out;
wire magma_Bits_8_eq_inst84_out;
wire magma_Bits_8_eq_inst85_out;
wire magma_Bits_8_eq_inst86_out;
wire magma_Bits_8_eq_inst87_out;
wire magma_Bits_8_eq_inst88_out;
wire magma_Bits_8_eq_inst89_out;
wire magma_Bits_8_eq_inst9_out;
wire magma_Bits_8_eq_inst90_out;
wire magma_Bits_8_eq_inst91_out;
wire magma_Bits_8_eq_inst92_out;
wire magma_Bits_8_eq_inst93_out;
wire magma_Bits_8_eq_inst94_out;
wire magma_Bits_8_eq_inst95_out;
wire magma_Bits_8_eq_inst96_out;
wire magma_Bits_8_eq_inst97_out;
wire magma_Bits_8_eq_inst98_out;
wire magma_Bits_8_eq_inst99_out;
wire [7:0] magma_Bits_8_sub_inst0_out;
wire magma_Bits_8_ugt_inst0_out;
wire [8:0] magma_Bits_9_add_inst0_out;
wire [8:0] magma_Bits_9_neg_inst0_out;
wire [8:0] magma_Bits_9_neg_inst1_out;
wire magma_Bits_9_slt_inst0_out;
wire magma_Bits_9_slt_inst1_out;
wire magma_Bits_9_slt_inst2_out;
wire magma_Bits_9_slt_inst3_out;
wire [8:0] magma_Bits_9_sub_inst0_out;
wire [8:0] magma_Bits_9_sub_inst1_out;
wire [8:0] magma_Bits_9_sub_inst2_out;
wire magma_Bits_9_ugt_inst0_out;
wire overflow_inst0_O;
Mux2xOutBit Mux2xOutBit_inst0(.I0(magma_Bits_16_uge_inst0_out), .I1(magma_Bits_16_sge_inst0_out), .O(Mux2xOutBit_inst0_O), .S(magma_Bits_1_eq_inst4_out));
Mux2xOutBit Mux2xOutBit_inst1(.I0(magma_Bits_16_ule_inst0_out), .I1(magma_Bits_16_sle_inst0_out), .O(Mux2xOutBit_inst1_O), .S(magma_Bits_1_eq_inst5_out));
Mux2xOutBit Mux2xOutBit_inst10(.I0(Mux2xOutBit_inst8_O), .I1(bit_const_0_None_out), .O(Mux2xOutBit_inst10_O), .S(magma_Bits_8_eq_inst39_out));
Mux2xOutBit Mux2xOutBit_inst11(.I0(Mux2xOutBit_inst9_O), .I1(bit_const_0_None_out), .O(Mux2xOutBit_inst11_O), .S(magma_Bits_8_eq_inst43_out));
Mux2xOutBit Mux2xOutBit_inst12(.I0(Mux2xOutBit_inst10_O), .I1(bit_const_0_None_out), .O(Mux2xOutBit_inst12_O), .S(magma_Bits_8_eq_inst48_out));
Mux2xOutBit Mux2xOutBit_inst13(.I0(Mux2xOutBit_inst11_O), .I1(magma_Bits_9_ugt_inst0_out), .O(Mux2xOutBit_inst13_O), .S(magma_Bits_8_eq_inst51_out));
Mux2xOutBit Mux2xOutBit_inst14(.I0(Mux2xOutBit_inst12_O), .I1(bit_const_0_None_out), .O(Mux2xOutBit_inst14_O), .S(magma_Bits_8_eq_inst56_out));
Mux2xOutBit Mux2xOutBit_inst15(.I0(Mux2xOutBit_inst13_O), .I1(bit_const_0_None_out), .O(Mux2xOutBit_inst15_O), .S(magma_Bits_8_eq_inst58_out));
Mux2xOutBit Mux2xOutBit_inst16(.I0(Mux2xOutBit_inst14_O), .I1(bit_const_0_None_out), .O(Mux2xOutBit_inst16_O), .S(magma_Bits_8_eq_inst65_out));
Mux2xOutBit Mux2xOutBit_inst17(.I0(Mux2xOutBit_inst15_O), .I1(bit_const_0_None_out), .O(Mux2xOutBit_inst17_O), .S(magma_Bits_8_eq_inst67_out));
Mux2xOutBit Mux2xOutBit_inst18(.I0(Mux2xOutBit_inst16_O), .I1(bit_const_0_None_out), .O(Mux2xOutBit_inst18_O), .S(magma_Bit_or_inst16_out));
Mux2xOutBit Mux2xOutBit_inst19(.I0(Mux2xOutBit_inst17_O), .I1(bit_const_0_None_out), .O(Mux2xOutBit_inst19_O), .S(magma_Bit_or_inst20_out));
Mux2xOutBit Mux2xOutBit_inst2(.I0(magma_Bits_16_uge_inst1_out), .I1(magma_Bits_16_sge_inst1_out), .O(Mux2xOutBit_inst2_O), .S(magma_Bits_1_eq_inst6_out));
Mux2xOutBit Mux2xOutBit_inst20(.I0(Mux2xOutBit_inst18_O), .I1(bit_const_0_None_out), .O(Mux2xOutBit_inst20_O), .S(magma_Bits_8_eq_inst101_out));
Mux2xOutBit Mux2xOutBit_inst21(.I0(Mux2xOutBit_inst19_O), .I1(bit_const_0_None_out), .O(Mux2xOutBit_inst21_O), .S(magma_Bits_8_eq_inst103_out));
Mux2xOutBit Mux2xOutBit_inst22(.I0(Mux2xOutBit_inst20_O), .I1(bit_const_0_None_out), .O(Mux2xOutBit_inst22_O), .S(magma_Bits_8_eq_inst110_out));
Mux2xOutBit Mux2xOutBit_inst23(.I0(Mux2xOutBit_inst21_O), .I1(bit_const_0_None_out), .O(Mux2xOutBit_inst23_O), .S(magma_Bits_8_eq_inst112_out));
Mux2xOutBit Mux2xOutBit_inst24(.I0(Mux2xOutBit_inst22_O), .I1(bit_const_0_None_out), .O(Mux2xOutBit_inst24_O), .S(magma_Bits_8_eq_inst119_out));
Mux2xOutBit Mux2xOutBit_inst25(.I0(Mux2xOutBit_inst23_O), .I1(bit_const_0_None_out), .O(Mux2xOutBit_inst25_O), .S(magma_Bits_8_eq_inst121_out));
Mux2xOutBit Mux2xOutBit_inst26(.I0(Mux2xOutBit_inst24_O), .I1(bit_const_0_None_out), .O(Mux2xOutBit_inst26_O), .S(magma_Bits_8_eq_inst128_out));
Mux2xOutBit Mux2xOutBit_inst27(.I0(Mux2xOutBit_inst25_O), .I1(bit_const_0_None_out), .O(Mux2xOutBit_inst27_O), .S(magma_Bits_8_eq_inst130_out));
Mux2xOutBit Mux2xOutBit_inst28(.I0(Mux2xOutBit_inst26_O), .I1(bit_const_0_None_out), .O(Mux2xOutBit_inst28_O), .S(magma_Bits_8_eq_inst137_out));
Mux2xOutBit Mux2xOutBit_inst29(.I0(Mux2xOutBit_inst27_O), .I1(bit_const_0_None_out), .O(Mux2xOutBit_inst29_O), .S(magma_Bits_8_eq_inst139_out));
Mux2xOutBit Mux2xOutBit_inst3(.I0(bit_const_0_None_out), .I1(d), .O(Mux2xOutBit_inst3_O), .S(magma_Bit_or_inst1_out));
Mux2xOutBit Mux2xOutBit_inst30(.I0(Mux2xOutBit_inst28_O), .I1(bit_const_0_None_out), .O(Mux2xOutBit_inst30_O), .S(magma_Bits_8_eq_inst146_out));
Mux2xOutBit Mux2xOutBit_inst31(.I0(Mux2xOutBit_inst29_O), .I1(bit_const_0_None_out), .O(Mux2xOutBit_inst31_O), .S(magma_Bits_8_eq_inst148_out));
Mux2xOutBit Mux2xOutBit_inst32(.I0(Mux2xOutBit_inst30_O), .I1(bit_const_0_None_out), .O(Mux2xOutBit_inst32_O), .S(magma_Bits_8_eq_inst155_out));
Mux2xOutBit Mux2xOutBit_inst33(.I0(Mux2xOutBit_inst31_O), .I1(Mux2xOutUInt16_inst0_O[15]), .O(Mux2xOutBit_inst33_O), .S(magma_Bits_8_eq_inst157_out));
Mux2xOutBit Mux2xOutBit_inst34(.I0(Mux2xOutBit_inst32_O), .I1(bit_const_0_None_out), .O(Mux2xOutBit_inst34_O), .S(magma_Bits_8_eq_inst164_out));
Mux2xOutBit Mux2xOutBit_inst35(.I0(Mux2xOutBit_inst33_O), .I1(Mux2xOutBit_inst1_O), .O(Mux2xOutBit_inst35_O), .S(magma_Bits_8_eq_inst166_out));
Mux2xOutBit Mux2xOutBit_inst36(.I0(Mux2xOutBit_inst34_O), .I1(bit_const_0_None_out), .O(Mux2xOutBit_inst36_O), .S(magma_Bits_8_eq_inst173_out));
Mux2xOutBit Mux2xOutBit_inst37(.I0(Mux2xOutBit_inst35_O), .I1(Mux2xOutBit_inst0_O), .O(Mux2xOutBit_inst37_O), .S(magma_Bits_8_eq_inst175_out));
Mux2xOutBit Mux2xOutBit_inst38(.I0(bit_const_0_None_out), .I1(bit_const_0_None_out), .O(Mux2xOutBit_inst38_O), .S(magma_Bits_8_eq_inst182_out));
Mux2xOutBit Mux2xOutBit_inst39(.I0(Mux2xOutBit_inst36_O), .I1(bit_const_0_None_out), .O(Mux2xOutBit_inst39_O), .S(magma_Bits_8_eq_inst183_out));
Mux2xOutBit Mux2xOutBit_inst4(.I0(Mux2xOutBit_inst3_O), .I1(bit_const_1_None_out), .O(Mux2xOutBit_inst4_O), .S(magma_Bits_8_eq_inst12_out));
Mux2xOutBit Mux2xOutBit_inst40(.I0(Mux2xOutBit_inst37_O), .I1(bit_const_0_None_out), .O(Mux2xOutBit_inst40_O), .S(magma_Bits_8_eq_inst185_out));
Mux2xOutBit Mux2xOutBit_inst41(.I0(Mux2xOutBit_inst38_O), .I1(bit_const_0_None_out), .O(Mux2xOutBit_inst41_O), .S(magma_Bits_8_eq_inst192_out));
Mux2xOutBit Mux2xOutBit_inst42(.I0(Mux2xOutBit_inst39_O), .I1(bit_const_0_None_out), .O(Mux2xOutBit_inst42_O), .S(magma_Bits_8_eq_inst193_out));
Mux2xOutBit Mux2xOutBit_inst43(.I0(Mux2xOutBit_inst40_O), .I1(bit_const_0_None_out), .O(Mux2xOutBit_inst43_O), .S(magma_Bits_8_eq_inst195_out));
Mux2xOutBit Mux2xOutBit_inst44(.I0(Mux2xOutBit_inst41_O), .I1(bit_const_0_None_out), .O(Mux2xOutBit_inst44_O), .S(magma_Bits_8_eq_inst202_out));
Mux2xOutBit Mux2xOutBit_inst45(.I0(Mux2xOutBit_inst42_O), .I1(bit_const_0_None_out), .O(Mux2xOutBit_inst45_O), .S(magma_Bits_8_eq_inst203_out));
Mux2xOutBit Mux2xOutBit_inst46(.I0(Mux2xOutBit_inst43_O), .I1(bit_const_0_None_out), .O(Mux2xOutBit_inst46_O), .S(magma_Bits_8_eq_inst205_out));
Mux2xOutBit Mux2xOutBit_inst47(.I0(Mux2xOutBit_inst44_O), .I1(magma_Bits_17_add_inst1_out[16]), .O(Mux2xOutBit_inst47_O), .S(magma_Bit_or_inst41_out));
Mux2xOutBit Mux2xOutBit_inst48(.I0(Mux2xOutBit_inst45_O), .I1(overflow_inst0_O), .O(Mux2xOutBit_inst48_O), .S(magma_Bit_or_inst44_out));
Mux2xOutBit Mux2xOutBit_inst49(.I0(Mux2xOutBit_inst46_O), .I1(magma_Bits_17_add_inst1_out[16]), .O(Mux2xOutBit_inst49_O), .S(magma_Bit_or_inst50_out));
Mux2xOutBit Mux2xOutBit_inst5(.I0(bit_const_0_None_out), .I1(bit_const_0_None_out), .O(Mux2xOutBit_inst5_O), .S(magma_Bits_8_eq_inst19_out));
Mux2xOutBit Mux2xOutBit_inst50(.I0(magma_Bits_16_eq_inst2_out), .I1(magma_Bit_and_inst2_out), .O(Mux2xOutBit_inst50_O), .S(magma_Bit_or_inst53_out));
Mux2xOutBit Mux2xOutBit_inst51(.I0(Mux2xOutBit_inst50_O), .I1(bit_const_1_None_out), .O(Mux2xOutBit_inst51_O), .S(magma_Bit_and_inst4_out));
Mux2xOutBit Mux2xOutBit_inst52(.I0(Mux2xOutBit_inst50_O), .I1(Mux2xOutBit_inst51_O), .O(Mux2xOutBit_inst52_O), .S(magma_Bits_8_eq_inst251_out));
Mux2xOutBit Mux2xOutBit_inst6(.I0(bit_const_0_None_out), .I1(magma_Bits_8_ugt_inst0_out), .O(Mux2xOutBit_inst6_O), .S(magma_Bits_8_eq_inst23_out));
Mux2xOutBit Mux2xOutBit_inst7(.I0(Mux2xOutBit_inst5_O), .I1(bit_const_0_None_out), .O(Mux2xOutBit_inst7_O), .S(magma_Bits_8_eq_inst29_out));
Mux2xOutBit Mux2xOutBit_inst8(.I0(Mux2xOutBit_inst6_O), .I1(bit_const_0_None_out), .O(Mux2xOutBit_inst8_O), .S(magma_Bits_8_eq_inst33_out));
Mux2xOutBit Mux2xOutBit_inst9(.I0(Mux2xOutBit_inst7_O), .I1(bit_const_0_None_out), .O(Mux2xOutBit_inst9_O), .S(magma_Bits_8_eq_inst35_out));
Mux2xOutSInt16 Mux2xOutSInt16_inst0(.I0(const_65409_16_out), .I1(const_0_16_out), .O(Mux2xOutSInt16_inst0_O), .S(magma_Bit_not_inst0_out));
Mux2xOutSInt16 Mux2xOutSInt16_inst1(.I0(Mux2xOutSInt16_inst0_O), .I1(const_1_16_out), .O(Mux2xOutSInt16_inst1_O), .S(magma_Bit_not_inst1_out));
Mux2xOutSInt16 Mux2xOutSInt16_inst10(.I0(Mux2xOutSInt16_inst9_O), .I1(const_2_16_out), .O(Mux2xOutSInt16_inst10_O), .S(magma_Bit_not_inst11_out));
Mux2xOutSInt16 Mux2xOutSInt16_inst11(.I0(Mux2xOutSInt16_inst10_O), .I1(const_3_16_out), .O(Mux2xOutSInt16_inst11_O), .S(magma_Bit_not_inst12_out));
Mux2xOutSInt16 Mux2xOutSInt16_inst12(.I0(Mux2xOutSInt16_inst11_O), .I1(const_4_16_out), .O(Mux2xOutSInt16_inst12_O), .S(magma_Bit_not_inst13_out));
Mux2xOutSInt16 Mux2xOutSInt16_inst13(.I0(Mux2xOutSInt16_inst12_O), .I1(const_5_16_out), .O(Mux2xOutSInt16_inst13_O), .S(magma_Bit_not_inst14_out));
Mux2xOutSInt16 Mux2xOutSInt16_inst14(.I0(Mux2xOutSInt16_inst13_O), .I1(const_6_16_out), .O(Mux2xOutSInt16_inst14_O), .S(magma_Bit_not_inst15_out));
Mux2xOutSInt16 Mux2xOutSInt16_inst15(.I0(Mux2xOutSInt16_inst14_O), .I1(const_7_16_out), .O(Mux2xOutSInt16_inst15_O), .S(magma_Bit_not_inst16_out));
Mux2xOutSInt16 Mux2xOutSInt16_inst16(.I0(Mux2xOutSInt16_inst15_O), .I1(const_8_16_out), .O(Mux2xOutSInt16_inst16_O), .S(magma_Bit_not_inst17_out));
Mux2xOutSInt16 Mux2xOutSInt16_inst17(.I0(Mux2xOutSInt16_inst16_O), .I1(const_9_16_out), .O(Mux2xOutSInt16_inst17_O), .S(magma_Bit_not_inst18_out));
Mux2xOutSInt16 Mux2xOutSInt16_inst18(.I0(Mux2xOutSInt16_inst17_O), .I1(const_10_16_out), .O(Mux2xOutSInt16_inst18_O), .S(magma_Bit_not_inst19_out));
Mux2xOutSInt16 Mux2xOutSInt16_inst19(.I0(Mux2xOutSInt16_inst18_O), .I1(const_11_16_out), .O(Mux2xOutSInt16_inst19_O), .S(magma_Bit_not_inst20_out));
Mux2xOutSInt16 Mux2xOutSInt16_inst2(.I0(Mux2xOutSInt16_inst1_O), .I1(const_2_16_out), .O(Mux2xOutSInt16_inst2_O), .S(magma_Bit_not_inst2_out));
Mux2xOutSInt16 Mux2xOutSInt16_inst20(.I0(Mux2xOutSInt16_inst19_O), .I1(const_12_16_out), .O(Mux2xOutSInt16_inst20_O), .S(magma_Bit_not_inst21_out));
Mux2xOutSInt16 Mux2xOutSInt16_inst21(.I0(Mux2xOutSInt16_inst20_O), .I1(const_13_16_out), .O(Mux2xOutSInt16_inst21_O), .S(magma_Bit_not_inst22_out));
Mux2xOutSInt16 Mux2xOutSInt16_inst22(.I0(Mux2xOutSInt16_inst21_O), .I1(const_14_16_out), .O(Mux2xOutSInt16_inst22_O), .S(magma_Bit_not_inst23_out));
Mux2xOutSInt16 Mux2xOutSInt16_inst23(.I0(Mux2xOutSInt16_inst22_O), .I1(const_15_16_out), .O(Mux2xOutSInt16_inst23_O), .S(magma_Bit_not_inst24_out));
Mux2xOutSInt16 Mux2xOutSInt16_inst24(.I0(Mux2xOutSInt16_inst23_O), .I1(Mux2xOutSInt16_inst7_O), .O(Mux2xOutSInt16_inst24_O), .S(magma_Bits_8_eq_inst3_out));
Mux2xOutSInt16 Mux2xOutSInt16_inst25(.I0(Mux2xOutUInt16_inst5_O), .I1({Mux2xOutSInt9_inst0_O[7],Mux2xOutSInt9_inst0_O[7],Mux2xOutSInt9_inst0_O[7],Mux2xOutSInt9_inst0_O[7],Mux2xOutSInt9_inst0_O[7],Mux2xOutSInt9_inst0_O[7],Mux2xOutSInt9_inst0_O[7],Mux2xOutSInt9_inst0_O[7],Mux2xOutSInt9_inst0_O[7],Mux2xOutSInt9_inst0_O[6],Mux2xOutSInt9_inst0_O[5],Mux2xOutSInt9_inst0_O[4],Mux2xOutSInt9_inst0_O[3],Mux2xOutSInt9_inst0_O[2],Mux2xOutSInt9_inst0_O[1],Mux2xOutSInt9_inst0_O[0]}), .O(Mux2xOutSInt16_inst25_O), .S(magma_Bits_8_eq_inst4_out));
Mux2xOutSInt16 Mux2xOutSInt16_inst26(.I0(magma_Bits_16_shl_inst1_out), .I1(magma_Bits_16_shl_inst0_out), .O(Mux2xOutSInt16_inst26_O), .S(magma_Bits_8_eq_inst5_out));
Mux2xOutSInt16 Mux2xOutSInt16_inst27(.I0(const_32512_16_out), .I1(const_127_16_out), .O(Mux2xOutSInt16_inst27_O), .S(magma_Bits_8_eq_inst6_out));
Mux2xOutSInt16 Mux2xOutSInt16_inst28(.I0({magma_Bits_23_lshr_inst0_out[15],magma_Bits_23_lshr_inst0_out[14],magma_Bits_23_lshr_inst0_out[13],magma_Bits_23_lshr_inst0_out[12],magma_Bits_23_lshr_inst0_out[11],magma_Bits_23_lshr_inst0_out[10],magma_Bits_23_lshr_inst0_out[9],magma_Bits_23_lshr_inst0_out[8],magma_Bits_23_lshr_inst0_out[7],magma_Bits_23_lshr_inst0_out[6],magma_Bits_23_lshr_inst0_out[5],magma_Bits_23_lshr_inst0_out[4],magma_Bits_23_lshr_inst0_out[3],magma_Bits_23_lshr_inst0_out[2],magma_Bits_23_lshr_inst0_out[1],magma_Bits_23_lshr_inst0_out[0]}), .I1(magma_Bits_16_neg_inst2_out), .O(Mux2xOutSInt16_inst28_O), .S(magma_Bits_16_eq_inst0_out));
Mux2xOutSInt16 Mux2xOutSInt16_inst29(.I0(magma_Bits_16_and_inst14_out), .I1(magma_Bits_16_neg_inst3_out), .O(Mux2xOutSInt16_inst29_O), .S(magma_Bits_16_eq_inst1_out));
Mux2xOutSInt16 Mux2xOutSInt16_inst3(.I0(Mux2xOutSInt16_inst2_O), .I1(const_3_16_out), .O(Mux2xOutSInt16_inst3_O), .S(magma_Bit_not_inst3_out));
Mux2xOutSInt16 Mux2xOutSInt16_inst30(.I0(Mux2xOutSInt16_inst29_O), .I1(Mux2xOutSInt16_inst28_O), .O(Mux2xOutSInt16_inst30_O), .S(magma_Bits_8_eq_inst27_out));
Mux2xOutSInt16 Mux2xOutSInt16_inst4(.I0(Mux2xOutSInt16_inst3_O), .I1(const_4_16_out), .O(Mux2xOutSInt16_inst4_O), .S(magma_Bit_not_inst4_out));
Mux2xOutSInt16 Mux2xOutSInt16_inst5(.I0(Mux2xOutSInt16_inst4_O), .I1(const_5_16_out), .O(Mux2xOutSInt16_inst5_O), .S(magma_Bit_not_inst5_out));
Mux2xOutSInt16 Mux2xOutSInt16_inst6(.I0(Mux2xOutSInt16_inst5_O), .I1(const_6_16_out), .O(Mux2xOutSInt16_inst6_O), .S(magma_Bit_not_inst6_out));
Mux2xOutSInt16 Mux2xOutSInt16_inst7(.I0(Mux2xOutSInt16_inst6_O), .I1(const_7_16_out), .O(Mux2xOutSInt16_inst7_O), .S(magma_Bit_not_inst7_out));
Mux2xOutSInt16 Mux2xOutSInt16_inst8(.I0(const_65409_16_out), .I1(const_0_16_out), .O(Mux2xOutSInt16_inst8_O), .S(magma_Bit_not_inst9_out));
Mux2xOutSInt16 Mux2xOutSInt16_inst9(.I0(Mux2xOutSInt16_inst8_O), .I1(const_1_16_out), .O(Mux2xOutSInt16_inst9_O), .S(magma_Bit_not_inst10_out));
Mux2xOutSInt9 Mux2xOutSInt9_inst0(.I0(magma_Bits_9_sub_inst0_out), .I1(magma_Bits_9_neg_inst0_out), .O(Mux2xOutSInt9_inst0_O), .S(magma_Bits_9_slt_inst1_out));
Mux2xOutSInt9 Mux2xOutSInt9_inst1(.I0({bit_const_0_None_out,Mux2xOutUInt16_inst0_O[14],Mux2xOutUInt16_inst0_O[13],Mux2xOutUInt16_inst0_O[12],Mux2xOutUInt16_inst0_O[11],Mux2xOutUInt16_inst0_O[10],Mux2xOutUInt16_inst0_O[9],Mux2xOutUInt16_inst0_O[8],Mux2xOutUInt16_inst0_O[7]}), .I1({bit_const_0_None_out,Mux2xOutUInt16_inst0_O[14],Mux2xOutUInt16_inst0_O[13],Mux2xOutUInt16_inst0_O[12],Mux2xOutUInt16_inst0_O[11],Mux2xOutUInt16_inst0_O[10],Mux2xOutUInt16_inst0_O[9],Mux2xOutUInt16_inst0_O[8],Mux2xOutUInt16_inst0_O[7]}), .O(Mux2xOutSInt9_inst1_O), .S(magma_Bits_8_eq_inst16_out));
Mux2xOutSInt9 Mux2xOutSInt9_inst10(.I0(Mux2xOutSInt9_inst8_O), .I1(magma_Bits_9_sub_inst0_out), .O(Mux2xOutSInt9_inst10_O), .S(magma_Bits_8_eq_inst46_out));
Mux2xOutSInt9 Mux2xOutSInt9_inst11(.I0(Mux2xOutSInt9_inst9_O), .I1({bit_const_0_None_out,Mux2xOutUInt16_inst0_O[14],Mux2xOutUInt16_inst0_O[13],Mux2xOutUInt16_inst0_O[12],Mux2xOutUInt16_inst0_O[11],Mux2xOutUInt16_inst0_O[10],Mux2xOutUInt16_inst0_O[9],Mux2xOutUInt16_inst0_O[8],Mux2xOutUInt16_inst0_O[7]}), .O(Mux2xOutSInt9_inst11_O), .S(magma_Bits_8_eq_inst53_out));
Mux2xOutSInt9 Mux2xOutSInt9_inst12(.I0(Mux2xOutSInt9_inst10_O), .I1(magma_Bits_9_sub_inst0_out), .O(Mux2xOutSInt9_inst12_O), .S(magma_Bits_8_eq_inst54_out));
Mux2xOutSInt9 Mux2xOutSInt9_inst13(.I0(Mux2xOutSInt9_inst11_O), .I1({bit_const_0_None_out,Mux2xOutUInt16_inst0_O[14],Mux2xOutUInt16_inst0_O[13],Mux2xOutUInt16_inst0_O[12],Mux2xOutUInt16_inst0_O[11],Mux2xOutUInt16_inst0_O[10],Mux2xOutUInt16_inst0_O[9],Mux2xOutUInt16_inst0_O[8],Mux2xOutUInt16_inst0_O[7]}), .O(Mux2xOutSInt9_inst13_O), .S(magma_Bits_8_eq_inst62_out));
Mux2xOutSInt9 Mux2xOutSInt9_inst14(.I0(Mux2xOutSInt9_inst12_O), .I1(magma_Bits_9_sub_inst0_out), .O(Mux2xOutSInt9_inst14_O), .S(magma_Bits_8_eq_inst63_out));
Mux2xOutSInt9 Mux2xOutSInt9_inst15(.I0(Mux2xOutSInt9_inst13_O), .I1({bit_const_0_None_out,Mux2xOutUInt16_inst0_O[14],Mux2xOutUInt16_inst0_O[13],Mux2xOutUInt16_inst0_O[12],Mux2xOutUInt16_inst0_O[11],Mux2xOutUInt16_inst0_O[10],Mux2xOutUInt16_inst0_O[9],Mux2xOutUInt16_inst0_O[8],Mux2xOutUInt16_inst0_O[7]}), .O(Mux2xOutSInt9_inst15_O), .S(magma_Bit_or_inst10_out));
Mux2xOutSInt9 Mux2xOutSInt9_inst16(.I0(Mux2xOutSInt9_inst14_O), .I1(magma_Bits_9_sub_inst0_out), .O(Mux2xOutSInt9_inst16_O), .S(magma_Bit_or_inst12_out));
Mux2xOutSInt9 Mux2xOutSInt9_inst17(.I0(Mux2xOutSInt9_inst15_O), .I1({bit_const_0_None_out,Mux2xOutUInt16_inst0_O[14],Mux2xOutUInt16_inst0_O[13],Mux2xOutUInt16_inst0_O[12],Mux2xOutUInt16_inst0_O[11],Mux2xOutUInt16_inst0_O[10],Mux2xOutUInt16_inst0_O[9],Mux2xOutUInt16_inst0_O[8],Mux2xOutUInt16_inst0_O[7]}), .O(Mux2xOutSInt9_inst17_O), .S(magma_Bits_8_eq_inst98_out));
Mux2xOutSInt9 Mux2xOutSInt9_inst18(.I0(Mux2xOutSInt9_inst16_O), .I1(magma_Bits_9_sub_inst0_out), .O(Mux2xOutSInt9_inst18_O), .S(magma_Bits_8_eq_inst99_out));
Mux2xOutSInt9 Mux2xOutSInt9_inst19(.I0(Mux2xOutSInt9_inst17_O), .I1({bit_const_0_None_out,Mux2xOutUInt16_inst0_O[14],Mux2xOutUInt16_inst0_O[13],Mux2xOutUInt16_inst0_O[12],Mux2xOutUInt16_inst0_O[11],Mux2xOutUInt16_inst0_O[10],Mux2xOutUInt16_inst0_O[9],Mux2xOutUInt16_inst0_O[8],Mux2xOutUInt16_inst0_O[7]}), .O(Mux2xOutSInt9_inst19_O), .S(magma_Bits_8_eq_inst107_out));
Mux2xOutSInt9 Mux2xOutSInt9_inst2(.I0(magma_Bits_9_sub_inst0_out), .I1(magma_Bits_9_sub_inst2_out), .O(Mux2xOutSInt9_inst2_O), .S(magma_Bits_8_eq_inst17_out));
Mux2xOutSInt9 Mux2xOutSInt9_inst20(.I0(Mux2xOutSInt9_inst18_O), .I1(magma_Bits_9_sub_inst0_out), .O(Mux2xOutSInt9_inst20_O), .S(magma_Bits_8_eq_inst108_out));
Mux2xOutSInt9 Mux2xOutSInt9_inst21(.I0(Mux2xOutSInt9_inst19_O), .I1({bit_const_0_None_out,Mux2xOutUInt16_inst0_O[14],Mux2xOutUInt16_inst0_O[13],Mux2xOutUInt16_inst0_O[12],Mux2xOutUInt16_inst0_O[11],Mux2xOutUInt16_inst0_O[10],Mux2xOutUInt16_inst0_O[9],Mux2xOutUInt16_inst0_O[8],Mux2xOutUInt16_inst0_O[7]}), .O(Mux2xOutSInt9_inst21_O), .S(magma_Bits_8_eq_inst116_out));
Mux2xOutSInt9 Mux2xOutSInt9_inst22(.I0(Mux2xOutSInt9_inst20_O), .I1(magma_Bits_9_sub_inst0_out), .O(Mux2xOutSInt9_inst22_O), .S(magma_Bits_8_eq_inst117_out));
Mux2xOutSInt9 Mux2xOutSInt9_inst23(.I0(Mux2xOutSInt9_inst21_O), .I1({bit_const_0_None_out,Mux2xOutUInt16_inst0_O[14],Mux2xOutUInt16_inst0_O[13],Mux2xOutUInt16_inst0_O[12],Mux2xOutUInt16_inst0_O[11],Mux2xOutUInt16_inst0_O[10],Mux2xOutUInt16_inst0_O[9],Mux2xOutUInt16_inst0_O[8],Mux2xOutUInt16_inst0_O[7]}), .O(Mux2xOutSInt9_inst23_O), .S(magma_Bits_8_eq_inst125_out));
Mux2xOutSInt9 Mux2xOutSInt9_inst24(.I0(Mux2xOutSInt9_inst22_O), .I1(magma_Bits_9_sub_inst0_out), .O(Mux2xOutSInt9_inst24_O), .S(magma_Bits_8_eq_inst126_out));
Mux2xOutSInt9 Mux2xOutSInt9_inst25(.I0(Mux2xOutSInt9_inst23_O), .I1({bit_const_0_None_out,Mux2xOutUInt16_inst0_O[14],Mux2xOutUInt16_inst0_O[13],Mux2xOutUInt16_inst0_O[12],Mux2xOutUInt16_inst0_O[11],Mux2xOutUInt16_inst0_O[10],Mux2xOutUInt16_inst0_O[9],Mux2xOutUInt16_inst0_O[8],Mux2xOutUInt16_inst0_O[7]}), .O(Mux2xOutSInt9_inst25_O), .S(magma_Bits_8_eq_inst134_out));
Mux2xOutSInt9 Mux2xOutSInt9_inst26(.I0(Mux2xOutSInt9_inst24_O), .I1(magma_Bits_9_sub_inst0_out), .O(Mux2xOutSInt9_inst26_O), .S(magma_Bits_8_eq_inst135_out));
Mux2xOutSInt9 Mux2xOutSInt9_inst27(.I0(Mux2xOutSInt9_inst25_O), .I1({bit_const_0_None_out,Mux2xOutUInt16_inst0_O[14],Mux2xOutUInt16_inst0_O[13],Mux2xOutUInt16_inst0_O[12],Mux2xOutUInt16_inst0_O[11],Mux2xOutUInt16_inst0_O[10],Mux2xOutUInt16_inst0_O[9],Mux2xOutUInt16_inst0_O[8],Mux2xOutUInt16_inst0_O[7]}), .O(Mux2xOutSInt9_inst27_O), .S(magma_Bits_8_eq_inst143_out));
Mux2xOutSInt9 Mux2xOutSInt9_inst28(.I0(Mux2xOutSInt9_inst26_O), .I1(magma_Bits_9_sub_inst0_out), .O(Mux2xOutSInt9_inst28_O), .S(magma_Bits_8_eq_inst144_out));
Mux2xOutSInt9 Mux2xOutSInt9_inst29(.I0(Mux2xOutSInt9_inst27_O), .I1({bit_const_0_None_out,Mux2xOutUInt16_inst0_O[14],Mux2xOutUInt16_inst0_O[13],Mux2xOutUInt16_inst0_O[12],Mux2xOutUInt16_inst0_O[11],Mux2xOutUInt16_inst0_O[10],Mux2xOutUInt16_inst0_O[9],Mux2xOutUInt16_inst0_O[8],Mux2xOutUInt16_inst0_O[7]}), .O(Mux2xOutSInt9_inst29_O), .S(magma_Bits_8_eq_inst152_out));
Mux2xOutSInt9 Mux2xOutSInt9_inst3(.I0(Mux2xOutSInt9_inst1_O), .I1({bit_const_0_None_out,Mux2xOutUInt16_inst0_O[14],Mux2xOutUInt16_inst0_O[13],Mux2xOutUInt16_inst0_O[12],Mux2xOutUInt16_inst0_O[11],Mux2xOutUInt16_inst0_O[10],Mux2xOutUInt16_inst0_O[9],Mux2xOutUInt16_inst0_O[8],Mux2xOutUInt16_inst0_O[7]}), .O(Mux2xOutSInt9_inst3_O), .S(magma_Bits_8_eq_inst21_out));
Mux2xOutSInt9 Mux2xOutSInt9_inst30(.I0(Mux2xOutSInt9_inst28_O), .I1(magma_Bits_9_sub_inst0_out), .O(Mux2xOutSInt9_inst30_O), .S(magma_Bits_8_eq_inst153_out));
Mux2xOutSInt9 Mux2xOutSInt9_inst31(.I0(Mux2xOutSInt9_inst29_O), .I1({bit_const_0_None_out,Mux2xOutUInt16_inst0_O[14],Mux2xOutUInt16_inst0_O[13],Mux2xOutUInt16_inst0_O[12],Mux2xOutUInt16_inst0_O[11],Mux2xOutUInt16_inst0_O[10],Mux2xOutUInt16_inst0_O[9],Mux2xOutUInt16_inst0_O[8],Mux2xOutUInt16_inst0_O[7]}), .O(Mux2xOutSInt9_inst31_O), .S(magma_Bits_8_eq_inst161_out));
Mux2xOutSInt9 Mux2xOutSInt9_inst32(.I0(Mux2xOutSInt9_inst30_O), .I1(magma_Bits_9_sub_inst0_out), .O(Mux2xOutSInt9_inst32_O), .S(magma_Bits_8_eq_inst162_out));
Mux2xOutSInt9 Mux2xOutSInt9_inst33(.I0(Mux2xOutSInt9_inst31_O), .I1({bit_const_0_None_out,Mux2xOutUInt16_inst0_O[14],Mux2xOutUInt16_inst0_O[13],Mux2xOutUInt16_inst0_O[12],Mux2xOutUInt16_inst0_O[11],Mux2xOutUInt16_inst0_O[10],Mux2xOutUInt16_inst0_O[9],Mux2xOutUInt16_inst0_O[8],Mux2xOutUInt16_inst0_O[7]}), .O(Mux2xOutSInt9_inst33_O), .S(magma_Bits_8_eq_inst170_out));
Mux2xOutSInt9 Mux2xOutSInt9_inst34(.I0(Mux2xOutSInt9_inst32_O), .I1(magma_Bits_9_sub_inst0_out), .O(Mux2xOutSInt9_inst34_O), .S(magma_Bits_8_eq_inst171_out));
Mux2xOutSInt9 Mux2xOutSInt9_inst35(.I0(Mux2xOutSInt9_inst33_O), .I1({bit_const_0_None_out,Mux2xOutUInt16_inst0_O[14],Mux2xOutUInt16_inst0_O[13],Mux2xOutUInt16_inst0_O[12],Mux2xOutUInt16_inst0_O[11],Mux2xOutUInt16_inst0_O[10],Mux2xOutUInt16_inst0_O[9],Mux2xOutUInt16_inst0_O[8],Mux2xOutUInt16_inst0_O[7]}), .O(Mux2xOutSInt9_inst35_O), .S(magma_Bits_8_eq_inst179_out));
Mux2xOutSInt9 Mux2xOutSInt9_inst36(.I0(Mux2xOutSInt9_inst34_O), .I1(magma_Bits_9_sub_inst0_out), .O(Mux2xOutSInt9_inst36_O), .S(magma_Bits_8_eq_inst180_out));
Mux2xOutSInt9 Mux2xOutSInt9_inst37(.I0(Mux2xOutSInt9_inst35_O), .I1({bit_const_0_None_out,Mux2xOutUInt16_inst0_O[14],Mux2xOutUInt16_inst0_O[13],Mux2xOutUInt16_inst0_O[12],Mux2xOutUInt16_inst0_O[11],Mux2xOutUInt16_inst0_O[10],Mux2xOutUInt16_inst0_O[9],Mux2xOutUInt16_inst0_O[8],Mux2xOutUInt16_inst0_O[7]}), .O(Mux2xOutSInt9_inst37_O), .S(magma_Bits_8_eq_inst189_out));
Mux2xOutSInt9 Mux2xOutSInt9_inst38(.I0(Mux2xOutSInt9_inst36_O), .I1(magma_Bits_9_sub_inst0_out), .O(Mux2xOutSInt9_inst38_O), .S(magma_Bits_8_eq_inst190_out));
Mux2xOutSInt9 Mux2xOutSInt9_inst39(.I0(Mux2xOutSInt9_inst37_O), .I1({bit_const_0_None_out,Mux2xOutUInt16_inst0_O[14],Mux2xOutUInt16_inst0_O[13],Mux2xOutUInt16_inst0_O[12],Mux2xOutUInt16_inst0_O[11],Mux2xOutUInt16_inst0_O[10],Mux2xOutUInt16_inst0_O[9],Mux2xOutUInt16_inst0_O[8],Mux2xOutUInt16_inst0_O[7]}), .O(Mux2xOutSInt9_inst39_O), .S(magma_Bits_8_eq_inst199_out));
Mux2xOutSInt9 Mux2xOutSInt9_inst4(.I0(Mux2xOutSInt9_inst2_O), .I1(magma_Bits_9_sub_inst1_out), .O(Mux2xOutSInt9_inst4_O), .S(magma_Bits_8_eq_inst22_out));
Mux2xOutSInt9 Mux2xOutSInt9_inst40(.I0(Mux2xOutSInt9_inst38_O), .I1(magma_Bits_9_sub_inst0_out), .O(Mux2xOutSInt9_inst40_O), .S(magma_Bits_8_eq_inst200_out));
Mux2xOutSInt9 Mux2xOutSInt9_inst41(.I0(Mux2xOutSInt9_inst39_O), .I1({bit_const_0_None_out,Mux2xOutUInt16_inst0_O[14],Mux2xOutUInt16_inst0_O[13],Mux2xOutUInt16_inst0_O[12],Mux2xOutUInt16_inst0_O[11],Mux2xOutUInt16_inst0_O[10],Mux2xOutUInt16_inst0_O[9],Mux2xOutUInt16_inst0_O[8],Mux2xOutUInt16_inst0_O[7]}), .O(Mux2xOutSInt9_inst41_O), .S(magma_Bit_or_inst32_out));
Mux2xOutSInt9 Mux2xOutSInt9_inst42(.I0(Mux2xOutSInt9_inst40_O), .I1(magma_Bits_9_sub_inst0_out), .O(Mux2xOutSInt9_inst42_O), .S(magma_Bit_or_inst35_out));
Mux2xOutSInt9 Mux2xOutSInt9_inst5(.I0(Mux2xOutSInt9_inst3_O), .I1({bit_const_0_None_out,Mux2xOutUInt16_inst0_O[14],Mux2xOutUInt16_inst0_O[13],Mux2xOutUInt16_inst0_O[12],Mux2xOutUInt16_inst0_O[11],Mux2xOutUInt16_inst0_O[10],Mux2xOutUInt16_inst0_O[9],Mux2xOutUInt16_inst0_O[8],Mux2xOutUInt16_inst0_O[7]}), .O(Mux2xOutSInt9_inst5_O), .S(magma_Bits_8_eq_inst31_out));
Mux2xOutSInt9 Mux2xOutSInt9_inst6(.I0(Mux2xOutSInt9_inst4_O), .I1(magma_Bits_9_sub_inst0_out), .O(Mux2xOutSInt9_inst6_O), .S(magma_Bits_8_eq_inst32_out));
Mux2xOutSInt9 Mux2xOutSInt9_inst7(.I0(Mux2xOutSInt9_inst5_O), .I1({bit_const_0_None_out,Mux2xOutUInt16_inst0_O[14],Mux2xOutUInt16_inst0_O[13],Mux2xOutUInt16_inst0_O[12],Mux2xOutUInt16_inst0_O[11],Mux2xOutUInt16_inst0_O[10],Mux2xOutUInt16_inst0_O[9],Mux2xOutUInt16_inst0_O[8],Mux2xOutUInt16_inst0_O[7]}), .O(Mux2xOutSInt9_inst7_O), .S(magma_Bits_8_eq_inst37_out));
Mux2xOutSInt9 Mux2xOutSInt9_inst8(.I0(Mux2xOutSInt9_inst6_O), .I1(magma_Bits_9_sub_inst0_out), .O(Mux2xOutSInt9_inst8_O), .S(magma_Bits_8_eq_inst38_out));
Mux2xOutSInt9 Mux2xOutSInt9_inst9(.I0(Mux2xOutSInt9_inst7_O), .I1({bit_const_0_None_out,Mux2xOutUInt16_inst0_O[14],Mux2xOutUInt16_inst0_O[13],Mux2xOutUInt16_inst0_O[12],Mux2xOutUInt16_inst0_O[11],Mux2xOutUInt16_inst0_O[10],Mux2xOutUInt16_inst0_O[9],Mux2xOutUInt16_inst0_O[8],Mux2xOutUInt16_inst0_O[7]}), .O(Mux2xOutSInt9_inst9_O), .S(magma_Bits_8_eq_inst45_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst0(.I0(a), .I1(a), .O(Mux2xOutUInt16_inst0_O), .S(magma_Bits_1_eq_inst0_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst1(.I0(b), .I1(b), .O(Mux2xOutUInt16_inst1_O), .S(magma_Bits_1_eq_inst1_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst10(.I0(Mux2xOutUInt16_inst9_O), .I1(magma_Bits_16_xor_inst1_out), .O(Mux2xOutUInt16_inst10_O), .S(magma_Bit_or_inst2_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst11(.I0(magma_Bits_16_shl_inst7_out), .I1(magma_Bits_16_lshr_inst2_out), .O(Mux2xOutUInt16_inst11_O), .S(magma_Bits_9_slt_inst3_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst12(.I0(magma_Bits_16_or_inst1_out), .I1(Mux2xOutSInt16_inst29_O), .O(Mux2xOutUInt16_inst12_O), .S(magma_Bits_8_eq_inst18_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst13(.I0(magma_Bits_16_and_inst12_out), .I1(magma_Bits_16_and_inst10_out), .O(Mux2xOutUInt16_inst13_O), .S(magma_Bits_8_eq_inst24_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst14(.I0(magma_Bits_16_or_inst9_out), .I1(magma_Bits_16_or_inst8_out), .O(Mux2xOutUInt16_inst14_O), .S(magma_Bits_8_eq_inst25_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst15(.I0(magma_Bits_16_and_inst14_out), .I1({magma_Bits_23_lshr_inst0_out[15],magma_Bits_23_lshr_inst0_out[14],magma_Bits_23_lshr_inst0_out[13],magma_Bits_23_lshr_inst0_out[12],magma_Bits_23_lshr_inst0_out[11],magma_Bits_23_lshr_inst0_out[10],magma_Bits_23_lshr_inst0_out[9],magma_Bits_23_lshr_inst0_out[8],magma_Bits_23_lshr_inst0_out[7],magma_Bits_23_lshr_inst0_out[6],magma_Bits_23_lshr_inst0_out[5],magma_Bits_23_lshr_inst0_out[4],magma_Bits_23_lshr_inst0_out[3],magma_Bits_23_lshr_inst0_out[2],magma_Bits_23_lshr_inst0_out[1],magma_Bits_23_lshr_inst0_out[0]}), .O(Mux2xOutUInt16_inst15_O), .S(magma_Bits_8_eq_inst26_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst16(.I0(Mux2xOutUInt16_inst12_O), .I1(Mux2xOutSInt16_inst28_O), .O(Mux2xOutUInt16_inst16_O), .S(magma_Bits_8_eq_inst28_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst17(.I0(Mux2xOutUInt16_inst16_O), .I1(magma_Bits_16_or_inst1_out), .O(Mux2xOutUInt16_inst17_O), .S(magma_Bits_8_eq_inst34_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst18(.I0(Mux2xOutUInt16_inst13_O), .I1(magma_Bits_16_and_inst7_out), .O(Mux2xOutUInt16_inst18_O), .S(magma_Bits_8_eq_inst40_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst19(.I0(Mux2xOutUInt16_inst14_O), .I1(magma_Bits_16_and_inst9_out), .O(Mux2xOutUInt16_inst19_O), .S(magma_Bits_8_eq_inst41_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst2(.I0(magma_Bits_16_lshr_inst0_out), .I1(magma_Bits_16_ashr_inst0_out), .O(Mux2xOutUInt16_inst2_O), .S(magma_Bits_1_eq_inst7_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst20(.I0(Mux2xOutUInt16_inst17_O), .I1(magma_Bits_16_or_inst7_out), .O(Mux2xOutUInt16_inst20_O), .S(magma_Bits_8_eq_inst42_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst21(.I0(Mux2xOutUInt16_inst6_O), .I1(magma_Bits_16_and_inst5_out), .O(Mux2xOutUInt16_inst21_O), .S(magma_Bits_8_eq_inst47_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst22(.I0(magma_Bits_16_shl_inst6_out), .I1(magma_Bits_16_shl_inst5_out), .O(Mux2xOutUInt16_inst22_O), .S(magma_Bits_8_eq_inst49_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst23(.I0(Mux2xOutUInt16_inst20_O), .I1(magma_Bits_16_or_inst4_out), .O(Mux2xOutUInt16_inst23_O), .S(magma_Bits_8_eq_inst50_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst24(.I0(Mux2xOutUInt16_inst21_O), .I1(Mux2xOutUInt16_inst6_O), .O(Mux2xOutUInt16_inst24_O), .S(magma_Bits_8_eq_inst55_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst25(.I0(Mux2xOutUInt16_inst23_O), .I1(magma_Bits_16_and_inst4_out), .O(Mux2xOutUInt16_inst25_O), .S(magma_Bits_8_eq_inst57_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst26(.I0(Mux2xOutUInt16_inst0_O), .I1(Mux2xOutUInt16_inst0_O), .O(Mux2xOutUInt16_inst26_O), .S(magma_Bits_8_eq_inst59_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst27(.I0(Mux2xOutUInt16_inst9_O), .I1(Mux2xOutUInt16_inst9_O), .O(Mux2xOutUInt16_inst27_O), .S(magma_Bits_8_eq_inst60_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst28(.I0(Mux2xOutUInt16_inst24_O), .I1(Mux2xOutUInt16_inst6_O), .O(Mux2xOutUInt16_inst28_O), .S(magma_Bits_8_eq_inst64_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst29(.I0(Mux2xOutUInt16_inst25_O), .I1(magma_BFloat_16_mul_inst0_out), .O(Mux2xOutUInt16_inst29_O), .S(magma_Bits_8_eq_inst66_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst3(.I0(const_0_16_out), .I1(const_32768_16_out), .O(Mux2xOutUInt16_inst3_O), .S(magma_Bits_9_slt_inst0_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst30(.I0(Mux2xOutUInt16_inst26_O), .I1(Mux2xOutUInt16_inst0_O), .O(Mux2xOutUInt16_inst30_O), .S(magma_Bit_or_inst4_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst31(.I0(Mux2xOutUInt16_inst27_O), .I1(Mux2xOutUInt16_inst10_O), .O(Mux2xOutUInt16_inst31_O), .S(magma_Bit_or_inst6_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst32(.I0(Mux2xOutUInt16_inst28_O), .I1(Mux2xOutUInt16_inst6_O), .O(Mux2xOutUInt16_inst32_O), .S(magma_Bit_or_inst14_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst33(.I0(Mux2xOutUInt16_inst29_O), .I1(magma_BFloat_16_add_inst0_out), .O(Mux2xOutUInt16_inst33_O), .S(magma_Bit_or_inst18_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst34(.I0(Mux2xOutUInt16_inst30_O), .I1(Mux2xOutUInt16_inst0_O), .O(Mux2xOutUInt16_inst34_O), .S(magma_Bits_8_eq_inst95_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst35(.I0(Mux2xOutUInt16_inst31_O), .I1(Mux2xOutUInt16_inst9_O), .O(Mux2xOutUInt16_inst35_O), .S(magma_Bits_8_eq_inst96_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst36(.I0(Mux2xOutUInt16_inst32_O), .I1(Mux2xOutUInt16_inst6_O), .O(Mux2xOutUInt16_inst36_O), .S(magma_Bits_8_eq_inst100_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst37(.I0(Mux2xOutUInt16_inst33_O), .I1(magma_Bits_16_shl_inst3_out), .O(Mux2xOutUInt16_inst37_O), .S(magma_Bits_8_eq_inst102_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst38(.I0(Mux2xOutUInt16_inst34_O), .I1(Mux2xOutUInt16_inst0_O), .O(Mux2xOutUInt16_inst38_O), .S(magma_Bits_8_eq_inst104_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst39(.I0(Mux2xOutUInt16_inst35_O), .I1(Mux2xOutUInt16_inst9_O), .O(Mux2xOutUInt16_inst39_O), .S(magma_Bits_8_eq_inst105_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst4(.I0(const_0_16_out), .I1(magma_Bits_16_and_inst0_out), .O(Mux2xOutUInt16_inst4_O), .S(magma_Bits_1_eq_inst8_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst40(.I0(Mux2xOutUInt16_inst36_O), .I1(Mux2xOutUInt16_inst6_O), .O(Mux2xOutUInt16_inst40_O), .S(magma_Bits_8_eq_inst109_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst41(.I0(Mux2xOutUInt16_inst37_O), .I1(Mux2xOutUInt16_inst2_O), .O(Mux2xOutUInt16_inst41_O), .S(magma_Bits_8_eq_inst111_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst42(.I0(Mux2xOutUInt16_inst38_O), .I1(Mux2xOutUInt16_inst0_O), .O(Mux2xOutUInt16_inst42_O), .S(magma_Bits_8_eq_inst113_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst43(.I0(Mux2xOutUInt16_inst39_O), .I1(Mux2xOutUInt16_inst9_O), .O(Mux2xOutUInt16_inst43_O), .S(magma_Bits_8_eq_inst114_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst44(.I0(Mux2xOutUInt16_inst40_O), .I1(Mux2xOutUInt16_inst6_O), .O(Mux2xOutUInt16_inst44_O), .S(magma_Bits_8_eq_inst118_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst45(.I0(Mux2xOutUInt16_inst41_O), .I1(magma_Bits_16_xor_inst0_out), .O(Mux2xOutUInt16_inst45_O), .S(magma_Bits_8_eq_inst120_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst46(.I0(Mux2xOutUInt16_inst42_O), .I1(Mux2xOutUInt16_inst0_O), .O(Mux2xOutUInt16_inst46_O), .S(magma_Bits_8_eq_inst122_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst47(.I0(Mux2xOutUInt16_inst43_O), .I1(Mux2xOutUInt16_inst9_O), .O(Mux2xOutUInt16_inst47_O), .S(magma_Bits_8_eq_inst123_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst48(.I0(Mux2xOutUInt16_inst44_O), .I1(Mux2xOutUInt16_inst6_O), .O(Mux2xOutUInt16_inst48_O), .S(magma_Bits_8_eq_inst127_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst49(.I0(Mux2xOutUInt16_inst45_O), .I1(magma_Bits_16_or_inst2_out), .O(Mux2xOutUInt16_inst49_O), .S(magma_Bits_8_eq_inst129_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst5(.I0(Mux2xOutUInt16_inst0_O), .I1(magma_Bits_16_neg_inst0_out), .O(Mux2xOutUInt16_inst5_O), .S(magma_Bit_not_inst8_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst50(.I0(Mux2xOutUInt16_inst46_O), .I1(Mux2xOutUInt16_inst0_O), .O(Mux2xOutUInt16_inst50_O), .S(magma_Bits_8_eq_inst131_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst51(.I0(Mux2xOutUInt16_inst47_O), .I1(Mux2xOutUInt16_inst9_O), .O(Mux2xOutUInt16_inst51_O), .S(magma_Bits_8_eq_inst132_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst52(.I0(Mux2xOutUInt16_inst48_O), .I1(Mux2xOutUInt16_inst6_O), .O(Mux2xOutUInt16_inst52_O), .S(magma_Bits_8_eq_inst136_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst53(.I0(Mux2xOutUInt16_inst49_O), .I1(magma_Bits_16_and_inst3_out), .O(Mux2xOutUInt16_inst53_O), .S(magma_Bits_8_eq_inst138_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst54(.I0(Mux2xOutUInt16_inst50_O), .I1(Mux2xOutUInt16_inst0_O), .O(Mux2xOutUInt16_inst54_O), .S(magma_Bits_8_eq_inst140_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst55(.I0(Mux2xOutUInt16_inst51_O), .I1(Mux2xOutUInt16_inst9_O), .O(Mux2xOutUInt16_inst55_O), .S(magma_Bits_8_eq_inst141_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst56(.I0(Mux2xOutUInt16_inst52_O), .I1(Mux2xOutUInt16_inst6_O), .O(Mux2xOutUInt16_inst56_O), .S(magma_Bits_8_eq_inst145_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst57(.I0(Mux2xOutUInt16_inst53_O), .I1(magma_Bit_ite_Out_UInt_16_inst3_out), .O(Mux2xOutUInt16_inst57_O), .S(magma_Bits_8_eq_inst147_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst58(.I0(Mux2xOutUInt16_inst54_O), .I1(Mux2xOutUInt16_inst0_O), .O(Mux2xOutUInt16_inst58_O), .S(magma_Bits_8_eq_inst149_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst59(.I0(Mux2xOutUInt16_inst55_O), .I1(Mux2xOutUInt16_inst9_O), .O(Mux2xOutUInt16_inst59_O), .S(magma_Bits_8_eq_inst150_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst6(.I0(Mux2xOutUInt16_inst4_O), .I1(Mux2xOutUInt16_inst3_O), .O(Mux2xOutUInt16_inst6_O), .S(magma_Bits_8_eq_inst2_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst60(.I0(Mux2xOutUInt16_inst56_O), .I1(Mux2xOutUInt16_inst6_O), .O(Mux2xOutUInt16_inst60_O), .S(magma_Bits_8_eq_inst154_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst61(.I0(Mux2xOutUInt16_inst57_O), .I1(magma_Bit_ite_Out_UInt_16_inst2_out), .O(Mux2xOutUInt16_inst61_O), .S(magma_Bits_8_eq_inst156_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst62(.I0(Mux2xOutUInt16_inst58_O), .I1(Mux2xOutUInt16_inst0_O), .O(Mux2xOutUInt16_inst62_O), .S(magma_Bits_8_eq_inst158_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst63(.I0(Mux2xOutUInt16_inst59_O), .I1(Mux2xOutUInt16_inst9_O), .O(Mux2xOutUInt16_inst63_O), .S(magma_Bits_8_eq_inst159_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst64(.I0(Mux2xOutUInt16_inst60_O), .I1(Mux2xOutUInt16_inst6_O), .O(Mux2xOutUInt16_inst64_O), .S(magma_Bits_8_eq_inst163_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst65(.I0(Mux2xOutUInt16_inst61_O), .I1(magma_Bit_ite_Out_UInt_16_inst1_out), .O(Mux2xOutUInt16_inst65_O), .S(magma_Bits_8_eq_inst165_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst66(.I0(Mux2xOutUInt16_inst62_O), .I1(Mux2xOutUInt16_inst0_O), .O(Mux2xOutUInt16_inst66_O), .S(magma_Bits_8_eq_inst167_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst67(.I0(Mux2xOutUInt16_inst63_O), .I1(Mux2xOutUInt16_inst9_O), .O(Mux2xOutUInt16_inst67_O), .S(magma_Bits_8_eq_inst168_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst68(.I0(Mux2xOutUInt16_inst64_O), .I1(Mux2xOutUInt16_inst6_O), .O(Mux2xOutUInt16_inst68_O), .S(magma_Bits_8_eq_inst172_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst69(.I0(Mux2xOutUInt16_inst65_O), .I1(magma_Bit_ite_Out_UInt_16_inst0_out), .O(Mux2xOutUInt16_inst69_O), .S(magma_Bits_8_eq_inst174_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst7(.I0(const_0_16_out), .I1(magma_Bits_16_and_inst1_out), .O(Mux2xOutUInt16_inst7_O), .S(magma_Bits_16_sge_inst2_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst70(.I0(Mux2xOutUInt16_inst66_O), .I1(Mux2xOutUInt16_inst0_O), .O(Mux2xOutUInt16_inst70_O), .S(magma_Bits_8_eq_inst176_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst71(.I0(Mux2xOutUInt16_inst67_O), .I1(Mux2xOutUInt16_inst9_O), .O(Mux2xOutUInt16_inst71_O), .S(magma_Bits_8_eq_inst177_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst72(.I0(Mux2xOutUInt16_inst68_O), .I1(Mux2xOutUInt16_inst6_O), .O(Mux2xOutUInt16_inst72_O), .S(magma_Bits_8_eq_inst181_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst73(.I0(Mux2xOutUInt16_inst69_O), .I1({magma_Bits_32_mul_inst0_out[31],magma_Bits_32_mul_inst0_out[30],magma_Bits_32_mul_inst0_out[29],magma_Bits_32_mul_inst0_out[28],magma_Bits_32_mul_inst0_out[27],magma_Bits_32_mul_inst0_out[26],magma_Bits_32_mul_inst0_out[25],magma_Bits_32_mul_inst0_out[24],magma_Bits_32_mul_inst0_out[23],magma_Bits_32_mul_inst0_out[22],magma_Bits_32_mul_inst0_out[21],magma_Bits_32_mul_inst0_out[20],magma_Bits_32_mul_inst0_out[19],magma_Bits_32_mul_inst0_out[18],magma_Bits_32_mul_inst0_out[17],magma_Bits_32_mul_inst0_out[16]}), .O(Mux2xOutUInt16_inst73_O), .S(magma_Bits_8_eq_inst184_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst74(.I0(Mux2xOutUInt16_inst70_O), .I1(Mux2xOutUInt16_inst0_O), .O(Mux2xOutUInt16_inst74_O), .S(magma_Bits_8_eq_inst186_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst75(.I0(Mux2xOutUInt16_inst71_O), .I1(Mux2xOutUInt16_inst9_O), .O(Mux2xOutUInt16_inst75_O), .S(magma_Bits_8_eq_inst187_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst76(.I0(Mux2xOutUInt16_inst72_O), .I1(Mux2xOutUInt16_inst6_O), .O(Mux2xOutUInt16_inst76_O), .S(magma_Bits_8_eq_inst191_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst77(.I0(Mux2xOutUInt16_inst73_O), .I1({magma_Bits_32_mul_inst0_out[23],magma_Bits_32_mul_inst0_out[22],magma_Bits_32_mul_inst0_out[21],magma_Bits_32_mul_inst0_out[20],magma_Bits_32_mul_inst0_out[19],magma_Bits_32_mul_inst0_out[18],magma_Bits_32_mul_inst0_out[17],magma_Bits_32_mul_inst0_out[16],magma_Bits_32_mul_inst0_out[15],magma_Bits_32_mul_inst0_out[14],magma_Bits_32_mul_inst0_out[13],magma_Bits_32_mul_inst0_out[12],magma_Bits_32_mul_inst0_out[11],magma_Bits_32_mul_inst0_out[10],magma_Bits_32_mul_inst0_out[9],magma_Bits_32_mul_inst0_out[8]}), .O(Mux2xOutUInt16_inst77_O), .S(magma_Bits_8_eq_inst194_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst78(.I0(Mux2xOutUInt16_inst74_O), .I1(Mux2xOutUInt16_inst0_O), .O(Mux2xOutUInt16_inst78_O), .S(magma_Bits_8_eq_inst196_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst79(.I0(Mux2xOutUInt16_inst75_O), .I1(Mux2xOutUInt16_inst9_O), .O(Mux2xOutUInt16_inst79_O), .S(magma_Bits_8_eq_inst197_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst8(.I0(Mux2xOutUInt16_inst7_O), .I1(magma_Bits_16_lshr_inst1_out), .O(Mux2xOutUInt16_inst8_O), .S(magma_Bits_8_eq_inst7_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst80(.I0(Mux2xOutUInt16_inst76_O), .I1(Mux2xOutUInt16_inst6_O), .O(Mux2xOutUInt16_inst80_O), .S(magma_Bits_8_eq_inst201_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst81(.I0(Mux2xOutUInt16_inst77_O), .I1({magma_Bits_32_mul_inst0_out[15],magma_Bits_32_mul_inst0_out[14],magma_Bits_32_mul_inst0_out[13],magma_Bits_32_mul_inst0_out[12],magma_Bits_32_mul_inst0_out[11],magma_Bits_32_mul_inst0_out[10],magma_Bits_32_mul_inst0_out[9],magma_Bits_32_mul_inst0_out[8],magma_Bits_32_mul_inst0_out[7],magma_Bits_32_mul_inst0_out[6],magma_Bits_32_mul_inst0_out[5],magma_Bits_32_mul_inst0_out[4],magma_Bits_32_mul_inst0_out[3],magma_Bits_32_mul_inst0_out[2],magma_Bits_32_mul_inst0_out[1],magma_Bits_32_mul_inst0_out[0]}), .O(Mux2xOutUInt16_inst81_O), .S(magma_Bits_8_eq_inst204_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst82(.I0(Mux2xOutUInt16_inst78_O), .I1(Mux2xOutUInt16_inst0_O), .O(Mux2xOutUInt16_inst82_O), .S(magma_Bit_or_inst23_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst83(.I0(Mux2xOutUInt16_inst79_O), .I1(Mux2xOutUInt16_inst9_O), .O(Mux2xOutUInt16_inst83_O), .S(magma_Bit_or_inst26_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst84(.I0(Mux2xOutUInt16_inst80_O), .I1(Mux2xOutUInt16_inst6_O), .O(Mux2xOutUInt16_inst84_O), .S(magma_Bit_or_inst38_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst85(.I0(Mux2xOutUInt16_inst81_O), .I1({magma_Bits_17_add_inst1_out[15],magma_Bits_17_add_inst1_out[14],magma_Bits_17_add_inst1_out[13],magma_Bits_17_add_inst1_out[12],magma_Bits_17_add_inst1_out[11],magma_Bits_17_add_inst1_out[10],magma_Bits_17_add_inst1_out[9],magma_Bits_17_add_inst1_out[8],magma_Bits_17_add_inst1_out[7],magma_Bits_17_add_inst1_out[6],magma_Bits_17_add_inst1_out[5],magma_Bits_17_add_inst1_out[4],magma_Bits_17_add_inst1_out[3],magma_Bits_17_add_inst1_out[2],magma_Bits_17_add_inst1_out[1],magma_Bits_17_add_inst1_out[0]}), .O(Mux2xOutUInt16_inst85_O), .S(magma_Bit_or_inst47_out));
Mux2xOutUInt16 Mux2xOutUInt16_inst9(.I0(Mux2xOutUInt16_inst1_O), .I1(magma_Bits_16_not_inst0_out), .O(Mux2xOutUInt16_inst9_O), .S(magma_Bit_or_inst0_out));
Mux2xOutUInt23 Mux2xOutUInt23_inst0(.I0(magma_Bits_23_shl_inst0_out), .I1(const_0_23_out), .O(Mux2xOutUInt23_inst0_O), .S(magma_Bits_9_slt_inst2_out));
Mux2xOutUInt32 Mux2xOutUInt32_inst0(.I0({bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,a[15],a[14],a[13],a[12],a[11],a[10],a[9],a[8],a[7],a[6],a[5],a[4],a[3],a[2],a[1],a[0]}), .I1({a[15],a[15],a[15],a[15],a[15],a[15],a[15],a[15],a[15],a[15],a[15],a[15],a[15],a[15],a[15],a[15],a[15],a[14],a[13],a[12],a[11],a[10],a[9],a[8],a[7],a[6],a[5],a[4],a[3],a[2],a[1],a[0]}), .O(Mux2xOutUInt32_inst0_O), .S(magma_Bits_1_eq_inst2_out));
Mux2xOutUInt32 Mux2xOutUInt32_inst1(.I0({bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,b[15],b[14],b[13],b[12],b[11],b[10],b[9],b[8],b[7],b[6],b[5],b[4],b[3],b[2],b[1],b[0]}), .I1({b[15],b[15],b[15],b[15],b[15],b[15],b[15],b[15],b[15],b[15],b[15],b[15],b[15],b[15],b[15],b[15],b[15],b[14],b[13],b[12],b[11],b[10],b[9],b[8],b[7],b[6],b[5],b[4],b[3],b[2],b[1],b[0]}), .O(Mux2xOutUInt32_inst1_O), .S(magma_Bits_1_eq_inst3_out));
Mux2xOutUInt8 Mux2xOutUInt8_inst0(.I0({Mux2xOutUInt16_inst0_O[14],Mux2xOutUInt16_inst0_O[13],Mux2xOutUInt16_inst0_O[12],Mux2xOutUInt16_inst0_O[11],Mux2xOutUInt16_inst0_O[10],Mux2xOutUInt16_inst0_O[9],Mux2xOutUInt16_inst0_O[8],Mux2xOutUInt16_inst0_O[7]}), .I1({Mux2xOutUInt16_inst0_O[14],Mux2xOutUInt16_inst0_O[13],Mux2xOutUInt16_inst0_O[12],Mux2xOutUInt16_inst0_O[11],Mux2xOutUInt16_inst0_O[10],Mux2xOutUInt16_inst0_O[9],Mux2xOutUInt16_inst0_O[8],Mux2xOutUInt16_inst0_O[7]}), .O(Mux2xOutUInt8_inst0_O), .S(magma_Bits_8_eq_inst15_out));
Mux2xOutUInt8 Mux2xOutUInt8_inst1(.I0(Mux2xOutUInt8_inst0_O), .I1({Mux2xOutUInt16_inst0_O[14],Mux2xOutUInt16_inst0_O[13],Mux2xOutUInt16_inst0_O[12],Mux2xOutUInt16_inst0_O[11],Mux2xOutUInt16_inst0_O[10],Mux2xOutUInt16_inst0_O[9],Mux2xOutUInt16_inst0_O[8],Mux2xOutUInt16_inst0_O[7]}), .O(Mux2xOutUInt8_inst1_O), .S(magma_Bits_8_eq_inst20_out));
Mux2xOutUInt8 Mux2xOutUInt8_inst10(.I0(Mux2xOutUInt8_inst9_O), .I1({Mux2xOutUInt16_inst0_O[14],Mux2xOutUInt16_inst0_O[13],Mux2xOutUInt16_inst0_O[12],Mux2xOutUInt16_inst0_O[11],Mux2xOutUInt16_inst0_O[10],Mux2xOutUInt16_inst0_O[9],Mux2xOutUInt16_inst0_O[8],Mux2xOutUInt16_inst0_O[7]}), .O(Mux2xOutUInt8_inst10_O), .S(magma_Bits_8_eq_inst115_out));
Mux2xOutUInt8 Mux2xOutUInt8_inst11(.I0(Mux2xOutUInt8_inst10_O), .I1({Mux2xOutUInt16_inst0_O[14],Mux2xOutUInt16_inst0_O[13],Mux2xOutUInt16_inst0_O[12],Mux2xOutUInt16_inst0_O[11],Mux2xOutUInt16_inst0_O[10],Mux2xOutUInt16_inst0_O[9],Mux2xOutUInt16_inst0_O[8],Mux2xOutUInt16_inst0_O[7]}), .O(Mux2xOutUInt8_inst11_O), .S(magma_Bits_8_eq_inst124_out));
Mux2xOutUInt8 Mux2xOutUInt8_inst12(.I0(Mux2xOutUInt8_inst11_O), .I1({Mux2xOutUInt16_inst0_O[14],Mux2xOutUInt16_inst0_O[13],Mux2xOutUInt16_inst0_O[12],Mux2xOutUInt16_inst0_O[11],Mux2xOutUInt16_inst0_O[10],Mux2xOutUInt16_inst0_O[9],Mux2xOutUInt16_inst0_O[8],Mux2xOutUInt16_inst0_O[7]}), .O(Mux2xOutUInt8_inst12_O), .S(magma_Bits_8_eq_inst133_out));
Mux2xOutUInt8 Mux2xOutUInt8_inst13(.I0(Mux2xOutUInt8_inst12_O), .I1({Mux2xOutUInt16_inst0_O[14],Mux2xOutUInt16_inst0_O[13],Mux2xOutUInt16_inst0_O[12],Mux2xOutUInt16_inst0_O[11],Mux2xOutUInt16_inst0_O[10],Mux2xOutUInt16_inst0_O[9],Mux2xOutUInt16_inst0_O[8],Mux2xOutUInt16_inst0_O[7]}), .O(Mux2xOutUInt8_inst13_O), .S(magma_Bits_8_eq_inst142_out));
Mux2xOutUInt8 Mux2xOutUInt8_inst14(.I0(Mux2xOutUInt8_inst13_O), .I1({Mux2xOutUInt16_inst0_O[14],Mux2xOutUInt16_inst0_O[13],Mux2xOutUInt16_inst0_O[12],Mux2xOutUInt16_inst0_O[11],Mux2xOutUInt16_inst0_O[10],Mux2xOutUInt16_inst0_O[9],Mux2xOutUInt16_inst0_O[8],Mux2xOutUInt16_inst0_O[7]}), .O(Mux2xOutUInt8_inst14_O), .S(magma_Bits_8_eq_inst151_out));
Mux2xOutUInt8 Mux2xOutUInt8_inst15(.I0(Mux2xOutUInt8_inst14_O), .I1({Mux2xOutUInt16_inst0_O[14],Mux2xOutUInt16_inst0_O[13],Mux2xOutUInt16_inst0_O[12],Mux2xOutUInt16_inst0_O[11],Mux2xOutUInt16_inst0_O[10],Mux2xOutUInt16_inst0_O[9],Mux2xOutUInt16_inst0_O[8],Mux2xOutUInt16_inst0_O[7]}), .O(Mux2xOutUInt8_inst15_O), .S(magma_Bits_8_eq_inst160_out));
Mux2xOutUInt8 Mux2xOutUInt8_inst16(.I0(Mux2xOutUInt8_inst15_O), .I1({Mux2xOutUInt16_inst0_O[14],Mux2xOutUInt16_inst0_O[13],Mux2xOutUInt16_inst0_O[12],Mux2xOutUInt16_inst0_O[11],Mux2xOutUInt16_inst0_O[10],Mux2xOutUInt16_inst0_O[9],Mux2xOutUInt16_inst0_O[8],Mux2xOutUInt16_inst0_O[7]}), .O(Mux2xOutUInt8_inst16_O), .S(magma_Bits_8_eq_inst169_out));
Mux2xOutUInt8 Mux2xOutUInt8_inst17(.I0(Mux2xOutUInt8_inst16_O), .I1({Mux2xOutUInt16_inst0_O[14],Mux2xOutUInt16_inst0_O[13],Mux2xOutUInt16_inst0_O[12],Mux2xOutUInt16_inst0_O[11],Mux2xOutUInt16_inst0_O[10],Mux2xOutUInt16_inst0_O[9],Mux2xOutUInt16_inst0_O[8],Mux2xOutUInt16_inst0_O[7]}), .O(Mux2xOutUInt8_inst17_O), .S(magma_Bits_8_eq_inst178_out));
Mux2xOutUInt8 Mux2xOutUInt8_inst18(.I0(Mux2xOutUInt8_inst17_O), .I1({Mux2xOutUInt16_inst0_O[14],Mux2xOutUInt16_inst0_O[13],Mux2xOutUInt16_inst0_O[12],Mux2xOutUInt16_inst0_O[11],Mux2xOutUInt16_inst0_O[10],Mux2xOutUInt16_inst0_O[9],Mux2xOutUInt16_inst0_O[8],Mux2xOutUInt16_inst0_O[7]}), .O(Mux2xOutUInt8_inst18_O), .S(magma_Bits_8_eq_inst188_out));
Mux2xOutUInt8 Mux2xOutUInt8_inst19(.I0(Mux2xOutUInt8_inst18_O), .I1({Mux2xOutUInt16_inst0_O[14],Mux2xOutUInt16_inst0_O[13],Mux2xOutUInt16_inst0_O[12],Mux2xOutUInt16_inst0_O[11],Mux2xOutUInt16_inst0_O[10],Mux2xOutUInt16_inst0_O[9],Mux2xOutUInt16_inst0_O[8],Mux2xOutUInt16_inst0_O[7]}), .O(Mux2xOutUInt8_inst19_O), .S(magma_Bits_8_eq_inst198_out));
Mux2xOutUInt8 Mux2xOutUInt8_inst2(.I0(Mux2xOutUInt8_inst1_O), .I1({Mux2xOutUInt16_inst0_O[14],Mux2xOutUInt16_inst0_O[13],Mux2xOutUInt16_inst0_O[12],Mux2xOutUInt16_inst0_O[11],Mux2xOutUInt16_inst0_O[10],Mux2xOutUInt16_inst0_O[9],Mux2xOutUInt16_inst0_O[8],Mux2xOutUInt16_inst0_O[7]}), .O(Mux2xOutUInt8_inst2_O), .S(magma_Bits_8_eq_inst30_out));
Mux2xOutUInt8 Mux2xOutUInt8_inst20(.I0(Mux2xOutUInt8_inst19_O), .I1({Mux2xOutUInt16_inst0_O[14],Mux2xOutUInt16_inst0_O[13],Mux2xOutUInt16_inst0_O[12],Mux2xOutUInt16_inst0_O[11],Mux2xOutUInt16_inst0_O[10],Mux2xOutUInt16_inst0_O[9],Mux2xOutUInt16_inst0_O[8],Mux2xOutUInt16_inst0_O[7]}), .O(Mux2xOutUInt8_inst20_O), .S(magma_Bit_or_inst29_out));
Mux2xOutUInt8 Mux2xOutUInt8_inst3(.I0(Mux2xOutUInt8_inst2_O), .I1({Mux2xOutUInt16_inst0_O[14],Mux2xOutUInt16_inst0_O[13],Mux2xOutUInt16_inst0_O[12],Mux2xOutUInt16_inst0_O[11],Mux2xOutUInt16_inst0_O[10],Mux2xOutUInt16_inst0_O[9],Mux2xOutUInt16_inst0_O[8],Mux2xOutUInt16_inst0_O[7]}), .O(Mux2xOutUInt8_inst3_O), .S(magma_Bits_8_eq_inst36_out));
Mux2xOutUInt8 Mux2xOutUInt8_inst4(.I0(Mux2xOutUInt8_inst3_O), .I1({Mux2xOutUInt16_inst0_O[14],Mux2xOutUInt16_inst0_O[13],Mux2xOutUInt16_inst0_O[12],Mux2xOutUInt16_inst0_O[11],Mux2xOutUInt16_inst0_O[10],Mux2xOutUInt16_inst0_O[9],Mux2xOutUInt16_inst0_O[8],Mux2xOutUInt16_inst0_O[7]}), .O(Mux2xOutUInt8_inst4_O), .S(magma_Bits_8_eq_inst44_out));
Mux2xOutUInt8 Mux2xOutUInt8_inst5(.I0(Mux2xOutUInt8_inst4_O), .I1({Mux2xOutUInt16_inst0_O[14],Mux2xOutUInt16_inst0_O[13],Mux2xOutUInt16_inst0_O[12],Mux2xOutUInt16_inst0_O[11],Mux2xOutUInt16_inst0_O[10],Mux2xOutUInt16_inst0_O[9],Mux2xOutUInt16_inst0_O[8],Mux2xOutUInt16_inst0_O[7]}), .O(Mux2xOutUInt8_inst5_O), .S(magma_Bits_8_eq_inst52_out));
Mux2xOutUInt8 Mux2xOutUInt8_inst6(.I0(Mux2xOutUInt8_inst5_O), .I1({Mux2xOutUInt16_inst0_O[14],Mux2xOutUInt16_inst0_O[13],Mux2xOutUInt16_inst0_O[12],Mux2xOutUInt16_inst0_O[11],Mux2xOutUInt16_inst0_O[10],Mux2xOutUInt16_inst0_O[9],Mux2xOutUInt16_inst0_O[8],Mux2xOutUInt16_inst0_O[7]}), .O(Mux2xOutUInt8_inst6_O), .S(magma_Bits_8_eq_inst61_out));
Mux2xOutUInt8 Mux2xOutUInt8_inst7(.I0(Mux2xOutUInt8_inst6_O), .I1({Mux2xOutUInt16_inst0_O[14],Mux2xOutUInt16_inst0_O[13],Mux2xOutUInt16_inst0_O[12],Mux2xOutUInt16_inst0_O[11],Mux2xOutUInt16_inst0_O[10],Mux2xOutUInt16_inst0_O[9],Mux2xOutUInt16_inst0_O[8],Mux2xOutUInt16_inst0_O[7]}), .O(Mux2xOutUInt8_inst7_O), .S(magma_Bit_or_inst8_out));
Mux2xOutUInt8 Mux2xOutUInt8_inst8(.I0(Mux2xOutUInt8_inst7_O), .I1({Mux2xOutUInt16_inst0_O[14],Mux2xOutUInt16_inst0_O[13],Mux2xOutUInt16_inst0_O[12],Mux2xOutUInt16_inst0_O[11],Mux2xOutUInt16_inst0_O[10],Mux2xOutUInt16_inst0_O[9],Mux2xOutUInt16_inst0_O[8],Mux2xOutUInt16_inst0_O[7]}), .O(Mux2xOutUInt8_inst8_O), .S(magma_Bits_8_eq_inst97_out));
Mux2xOutUInt8 Mux2xOutUInt8_inst9(.I0(Mux2xOutUInt8_inst8_O), .I1({Mux2xOutUInt16_inst0_O[14],Mux2xOutUInt16_inst0_O[13],Mux2xOutUInt16_inst0_O[12],Mux2xOutUInt16_inst0_O[11],Mux2xOutUInt16_inst0_O[10],Mux2xOutUInt16_inst0_O[9],Mux2xOutUInt16_inst0_O[8],Mux2xOutUInt16_inst0_O[7]}), .O(Mux2xOutUInt8_inst9_O), .S(magma_Bits_8_eq_inst106_out));
corebit_const #(.value(1'b0)) bit_const_0_None(.out(bit_const_0_None_out));
corebit_const #(.value(1'b1)) bit_const_1_None(.out(bit_const_1_None_out));
coreir_const #(.value(16'h0000), .width(16)) const_0_16(.out(const_0_16_out));
coreir_const #(.value(23'h000000), .width(23)) const_0_23(.out(const_0_23_out));
coreir_const #(.value(7'h00), .width(7)) const_0_7(.out(const_0_7_out));
coreir_const #(.value(8'h00), .width(8)) const_0_8(.out(const_0_8_out));
coreir_const #(.value(9'h000), .width(9)) const_0_9(.out(const_0_9_out));
coreir_const #(.value(16'h000a), .width(16)) const_10_16(.out(const_10_16_out));
coreir_const #(.value(16'h000b), .width(16)) const_11_16(.out(const_11_16_out));
coreir_const #(.value(8'h0b), .width(8)) const_11_8(.out(const_11_8_out));
coreir_const #(.value(16'h007f), .width(16)) const_127_16(.out(const_127_16_out));
coreir_const #(.value(8'h7f), .width(8)) const_127_8(.out(const_127_8_out));
coreir_const #(.value(9'h07f), .width(9)) const_127_9(.out(const_127_9_out));
coreir_const #(.value(16'h0080), .width(16)) const_128_16(.out(const_128_16_out));
coreir_const #(.value(16'h000c), .width(16)) const_12_16(.out(const_12_16_out));
coreir_const #(.value(8'h0c), .width(8)) const_12_8(.out(const_12_8_out));
coreir_const #(.value(16'h000d), .width(16)) const_13_16(.out(const_13_16_out));
coreir_const #(.value(8'h0d), .width(8)) const_13_8(.out(const_13_8_out));
coreir_const #(.value(8'h8e), .width(8)) const_142_8(.out(const_142_8_out));
coreir_const #(.value(8'h92), .width(8)) const_146_8(.out(const_146_8_out));
coreir_const #(.value(8'h93), .width(8)) const_147_8(.out(const_147_8_out));
coreir_const #(.value(8'h94), .width(8)) const_148_8(.out(const_148_8_out));
coreir_const #(.value(8'h95), .width(8)) const_149_8(.out(const_149_8_out));
coreir_const #(.value(16'h000e), .width(16)) const_14_16(.out(const_14_16_out));
coreir_const #(.value(8'h96), .width(8)) const_150_8(.out(const_150_8_out));
coreir_const #(.value(8'h97), .width(8)) const_151_8(.out(const_151_8_out));
coreir_const #(.value(8'h98), .width(8)) const_152_8(.out(const_152_8_out));
coreir_const #(.value(16'h000f), .width(16)) const_15_16(.out(const_15_16_out));
coreir_const #(.value(8'h0f), .width(8)) const_15_8(.out(const_15_8_out));
coreir_const #(.value(8'h11), .width(8)) const_17_8(.out(const_17_8_out));
coreir_const #(.value(8'h12), .width(8)) const_18_8(.out(const_18_8_out));
coreir_const #(.value(8'h13), .width(8)) const_19_8(.out(const_19_8_out));
coreir_const #(.value(1'h1), .width(1)) const_1_1(.out(const_1_1_out));
coreir_const #(.value(16'h0001), .width(16)) const_1_16(.out(const_1_16_out));
coreir_const #(.value(8'h01), .width(8)) const_1_8(.out(const_1_8_out));
coreir_const #(.value(8'h14), .width(8)) const_20_8(.out(const_20_8_out));
coreir_const #(.value(8'h16), .width(8)) const_22_8(.out(const_22_8_out));
coreir_const #(.value(8'h17), .width(8)) const_23_8(.out(const_23_8_out));
coreir_const #(.value(8'h18), .width(8)) const_24_8(.out(const_24_8_out));
coreir_const #(.value(8'hff), .width(8)) const_255_8(.out(const_255_8_out));
coreir_const #(.value(9'h0ff), .width(9)) const_255_9(.out(const_255_9_out));
coreir_const #(.value(8'h19), .width(8)) const_25_8(.out(const_25_8_out));
coreir_const #(.value(16'h0002), .width(16)) const_2_16(.out(const_2_16_out));
coreir_const #(.value(8'h02), .width(8)) const_2_8(.out(const_2_8_out));
coreir_const #(.value(16'h7f00), .width(16)) const_32512_16(.out(const_32512_16_out));
coreir_const #(.value(16'h7f80), .width(16)) const_32640_16(.out(const_32640_16_out));
coreir_const #(.value(16'h8000), .width(16)) const_32768_16(.out(const_32768_16_out));
coreir_const #(.value(16'h0003), .width(16)) const_3_16(.out(const_3_16_out));
coreir_const #(.value(8'h03), .width(8)) const_3_8(.out(const_3_8_out));
coreir_const #(.value(16'h0004), .width(16)) const_4_16(.out(const_4_16_out));
coreir_const #(.value(8'h04), .width(8)) const_4_8(.out(const_4_8_out));
coreir_const #(.value(16'h0005), .width(16)) const_5_16(.out(const_5_16_out));
coreir_const #(.value(8'h05), .width(8)) const_5_8(.out(const_5_8_out));
coreir_const #(.value(16'hff81), .width(16)) const_65409_16(.out(const_65409_16_out));
coreir_const #(.value(16'h0006), .width(16)) const_6_16(.out(const_6_16_out));
coreir_const #(.value(8'h06), .width(8)) const_6_8(.out(const_6_8_out));
coreir_const #(.value(16'h0007), .width(16)) const_7_16(.out(const_7_16_out));
coreir_const #(.value(23'h000007), .width(23)) const_7_23(.out(const_7_23_out));
coreir_const #(.value(16'h0008), .width(16)) const_8_16(.out(const_8_16_out));
coreir_const #(.value(8'h08), .width(8)) const_8_8(.out(const_8_8_out));
coreir_const #(.value(16'h0009), .width(16)) const_9_16(.out(const_9_16_out));
float_add__exp_bits8__frac_bits7 magma_BFloat_16_add_inst0(.in0(Mux2xOutUInt16_inst0_O), .in1(Mux2xOutUInt16_inst10_O), .out(magma_BFloat_16_add_inst0_out));
float_mul__exp_bits8__frac_bits7 magma_BFloat_16_mul_inst0(.in0(Mux2xOutUInt16_inst0_O), .in1(Mux2xOutUInt16_inst9_O), .out(magma_BFloat_16_mul_inst0_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(magma_Bits_7_eq_inst0_out), .out(magma_Bit_and_inst0_out));
corebit_and magma_Bit_and_inst1(.in0(magma_Bits_8_eq_inst1_out), .in1(magma_Bits_7_eq_inst1_out), .out(magma_Bit_and_inst1_out));
corebit_and magma_Bit_and_inst2(.in0(magma_Bits_8_eq_inst246_out), .in1(magma_Bits_7_eq_inst2_out), .out(magma_Bit_and_inst2_out));
corebit_and magma_Bit_and_inst3(.in0(magma_Bit_and_inst0_out), .in1(magma_Bit_and_inst1_out), .out(magma_Bit_and_inst3_out));
corebit_and magma_Bit_and_inst4(.in0(magma_Bit_and_inst3_out), .in1(magma_Bit_not_inst25_out), .out(magma_Bit_and_inst4_out));
coreir_mux #(.width(16)) magma_Bit_ite_Out_UInt_16_inst0(.in0(Mux2xOutUInt16_inst9_O), .in1(Mux2xOutUInt16_inst0_O), .out(magma_Bit_ite_Out_UInt_16_inst0_out), .sel(Mux2xOutBit_inst0_O));
coreir_mux #(.width(16)) magma_Bit_ite_Out_UInt_16_inst1(.in0(Mux2xOutUInt16_inst9_O), .in1(Mux2xOutUInt16_inst0_O), .out(magma_Bit_ite_Out_UInt_16_inst1_out), .sel(Mux2xOutBit_inst1_O));
coreir_mux #(.width(16)) magma_Bit_ite_Out_UInt_16_inst2(.in0(magma_Bits_16_neg_inst1_out), .in1(Mux2xOutUInt16_inst0_O), .out(magma_Bit_ite_Out_UInt_16_inst2_out), .sel(Mux2xOutBit_inst2_O));
coreir_mux #(.width(16)) magma_Bit_ite_Out_UInt_16_inst3(.in0(Mux2xOutUInt16_inst9_O), .in1(Mux2xOutUInt16_inst0_O), .out(magma_Bit_ite_Out_UInt_16_inst3_out), .sel(d));
corebit_not magma_Bit_not_inst0(.in(magma_Bit_xor_inst0_out), .out(magma_Bit_not_inst0_out));
corebit_not magma_Bit_not_inst1(.in(magma_Bit_xor_inst1_out), .out(magma_Bit_not_inst1_out));
corebit_not magma_Bit_not_inst10(.in(magma_Bit_xor_inst10_out), .out(magma_Bit_not_inst10_out));
corebit_not magma_Bit_not_inst11(.in(magma_Bit_xor_inst11_out), .out(magma_Bit_not_inst11_out));
corebit_not magma_Bit_not_inst12(.in(magma_Bit_xor_inst12_out), .out(magma_Bit_not_inst12_out));
corebit_not magma_Bit_not_inst13(.in(magma_Bit_xor_inst13_out), .out(magma_Bit_not_inst13_out));
corebit_not magma_Bit_not_inst14(.in(magma_Bit_xor_inst14_out), .out(magma_Bit_not_inst14_out));
corebit_not magma_Bit_not_inst15(.in(magma_Bit_xor_inst15_out), .out(magma_Bit_not_inst15_out));
corebit_not magma_Bit_not_inst16(.in(magma_Bit_xor_inst16_out), .out(magma_Bit_not_inst16_out));
corebit_not magma_Bit_not_inst17(.in(magma_Bit_xor_inst17_out), .out(magma_Bit_not_inst17_out));
corebit_not magma_Bit_not_inst18(.in(magma_Bit_xor_inst18_out), .out(magma_Bit_not_inst18_out));
corebit_not magma_Bit_not_inst19(.in(magma_Bit_xor_inst19_out), .out(magma_Bit_not_inst19_out));
corebit_not magma_Bit_not_inst2(.in(magma_Bit_xor_inst2_out), .out(magma_Bit_not_inst2_out));
corebit_not magma_Bit_not_inst20(.in(magma_Bit_xor_inst20_out), .out(magma_Bit_not_inst20_out));
corebit_not magma_Bit_not_inst21(.in(magma_Bit_xor_inst21_out), .out(magma_Bit_not_inst21_out));
corebit_not magma_Bit_not_inst22(.in(magma_Bit_xor_inst22_out), .out(magma_Bit_not_inst22_out));
corebit_not magma_Bit_not_inst23(.in(magma_Bit_xor_inst23_out), .out(magma_Bit_not_inst23_out));
corebit_not magma_Bit_not_inst24(.in(magma_Bit_xor_inst24_out), .out(magma_Bit_not_inst24_out));
corebit_not magma_Bit_not_inst25(.in(magma_Bit_xor_inst25_out), .out(magma_Bit_not_inst25_out));
corebit_not magma_Bit_not_inst3(.in(magma_Bit_xor_inst3_out), .out(magma_Bit_not_inst3_out));
corebit_not magma_Bit_not_inst4(.in(magma_Bit_xor_inst4_out), .out(magma_Bit_not_inst4_out));
corebit_not magma_Bit_not_inst5(.in(magma_Bit_xor_inst5_out), .out(magma_Bit_not_inst5_out));
corebit_not magma_Bit_not_inst6(.in(magma_Bit_xor_inst6_out), .out(magma_Bit_not_inst6_out));
corebit_not magma_Bit_not_inst7(.in(magma_Bit_xor_inst7_out), .out(magma_Bit_not_inst7_out));
corebit_not magma_Bit_not_inst8(.in(magma_Bit_xor_inst8_out), .out(magma_Bit_not_inst8_out));
corebit_not magma_Bit_not_inst9(.in(magma_Bit_xor_inst9_out), .out(magma_Bit_not_inst9_out));
corebit_or magma_Bit_or_inst0(.in0(magma_Bits_8_eq_inst8_out), .in1(magma_Bits_8_eq_inst9_out), .out(magma_Bit_or_inst0_out));
corebit_or magma_Bit_or_inst1(.in0(magma_Bits_8_eq_inst10_out), .in1(magma_Bits_8_eq_inst11_out), .out(magma_Bit_or_inst1_out));
corebit_or magma_Bit_or_inst10(.in0(magma_Bit_or_inst9_out), .in1(magma_Bits_8_eq_inst79_out), .out(magma_Bit_or_inst10_out));
corebit_or magma_Bit_or_inst11(.in0(magma_Bits_8_eq_inst80_out), .in1(magma_Bits_8_eq_inst81_out), .out(magma_Bit_or_inst11_out));
corebit_or magma_Bit_or_inst12(.in0(magma_Bit_or_inst11_out), .in1(magma_Bits_8_eq_inst82_out), .out(magma_Bit_or_inst12_out));
corebit_or magma_Bit_or_inst13(.in0(magma_Bits_8_eq_inst83_out), .in1(magma_Bits_8_eq_inst84_out), .out(magma_Bit_or_inst13_out));
corebit_or magma_Bit_or_inst14(.in0(magma_Bit_or_inst13_out), .in1(magma_Bits_8_eq_inst85_out), .out(magma_Bit_or_inst14_out));
corebit_or magma_Bit_or_inst15(.in0(magma_Bits_8_eq_inst86_out), .in1(magma_Bits_8_eq_inst87_out), .out(magma_Bit_or_inst15_out));
corebit_or magma_Bit_or_inst16(.in0(magma_Bit_or_inst15_out), .in1(magma_Bits_8_eq_inst88_out), .out(magma_Bit_or_inst16_out));
corebit_or magma_Bit_or_inst17(.in0(magma_Bits_8_eq_inst89_out), .in1(magma_Bits_8_eq_inst90_out), .out(magma_Bit_or_inst17_out));
corebit_or magma_Bit_or_inst18(.in0(magma_Bit_or_inst17_out), .in1(magma_Bits_8_eq_inst91_out), .out(magma_Bit_or_inst18_out));
corebit_or magma_Bit_or_inst19(.in0(magma_Bits_8_eq_inst92_out), .in1(magma_Bits_8_eq_inst93_out), .out(magma_Bit_or_inst19_out));
corebit_or magma_Bit_or_inst2(.in0(magma_Bits_8_eq_inst13_out), .in1(magma_Bits_8_eq_inst14_out), .out(magma_Bit_or_inst2_out));
corebit_or magma_Bit_or_inst20(.in0(magma_Bit_or_inst19_out), .in1(magma_Bits_8_eq_inst94_out), .out(magma_Bit_or_inst20_out));
corebit_or magma_Bit_or_inst21(.in0(magma_Bits_8_eq_inst206_out), .in1(magma_Bits_8_eq_inst207_out), .out(magma_Bit_or_inst21_out));
corebit_or magma_Bit_or_inst22(.in0(magma_Bit_or_inst21_out), .in1(magma_Bits_8_eq_inst208_out), .out(magma_Bit_or_inst22_out));
corebit_or magma_Bit_or_inst23(.in0(magma_Bit_or_inst22_out), .in1(magma_Bits_8_eq_inst209_out), .out(magma_Bit_or_inst23_out));
corebit_or magma_Bit_or_inst24(.in0(magma_Bits_8_eq_inst210_out), .in1(magma_Bits_8_eq_inst211_out), .out(magma_Bit_or_inst24_out));
corebit_or magma_Bit_or_inst25(.in0(magma_Bit_or_inst24_out), .in1(magma_Bits_8_eq_inst212_out), .out(magma_Bit_or_inst25_out));
corebit_or magma_Bit_or_inst26(.in0(magma_Bit_or_inst25_out), .in1(magma_Bits_8_eq_inst213_out), .out(magma_Bit_or_inst26_out));
corebit_or magma_Bit_or_inst27(.in0(magma_Bits_8_eq_inst214_out), .in1(magma_Bits_8_eq_inst215_out), .out(magma_Bit_or_inst27_out));
corebit_or magma_Bit_or_inst28(.in0(magma_Bit_or_inst27_out), .in1(magma_Bits_8_eq_inst216_out), .out(magma_Bit_or_inst28_out));
corebit_or magma_Bit_or_inst29(.in0(magma_Bit_or_inst28_out), .in1(magma_Bits_8_eq_inst217_out), .out(magma_Bit_or_inst29_out));
corebit_or magma_Bit_or_inst3(.in0(magma_Bits_8_eq_inst68_out), .in1(magma_Bits_8_eq_inst69_out), .out(magma_Bit_or_inst3_out));
corebit_or magma_Bit_or_inst30(.in0(magma_Bits_8_eq_inst218_out), .in1(magma_Bits_8_eq_inst219_out), .out(magma_Bit_or_inst30_out));
corebit_or magma_Bit_or_inst31(.in0(magma_Bit_or_inst30_out), .in1(magma_Bits_8_eq_inst220_out), .out(magma_Bit_or_inst31_out));
corebit_or magma_Bit_or_inst32(.in0(magma_Bit_or_inst31_out), .in1(magma_Bits_8_eq_inst221_out), .out(magma_Bit_or_inst32_out));
corebit_or magma_Bit_or_inst33(.in0(magma_Bits_8_eq_inst222_out), .in1(magma_Bits_8_eq_inst223_out), .out(magma_Bit_or_inst33_out));
corebit_or magma_Bit_or_inst34(.in0(magma_Bit_or_inst33_out), .in1(magma_Bits_8_eq_inst224_out), .out(magma_Bit_or_inst34_out));
corebit_or magma_Bit_or_inst35(.in0(magma_Bit_or_inst34_out), .in1(magma_Bits_8_eq_inst225_out), .out(magma_Bit_or_inst35_out));
corebit_or magma_Bit_or_inst36(.in0(magma_Bits_8_eq_inst226_out), .in1(magma_Bits_8_eq_inst227_out), .out(magma_Bit_or_inst36_out));
corebit_or magma_Bit_or_inst37(.in0(magma_Bit_or_inst36_out), .in1(magma_Bits_8_eq_inst228_out), .out(magma_Bit_or_inst37_out));
corebit_or magma_Bit_or_inst38(.in0(magma_Bit_or_inst37_out), .in1(magma_Bits_8_eq_inst229_out), .out(magma_Bit_or_inst38_out));
corebit_or magma_Bit_or_inst39(.in0(magma_Bits_8_eq_inst230_out), .in1(magma_Bits_8_eq_inst231_out), .out(magma_Bit_or_inst39_out));
corebit_or magma_Bit_or_inst4(.in0(magma_Bit_or_inst3_out), .in1(magma_Bits_8_eq_inst70_out), .out(magma_Bit_or_inst4_out));
corebit_or magma_Bit_or_inst40(.in0(magma_Bit_or_inst39_out), .in1(magma_Bits_8_eq_inst232_out), .out(magma_Bit_or_inst40_out));
corebit_or magma_Bit_or_inst41(.in0(magma_Bit_or_inst40_out), .in1(magma_Bits_8_eq_inst233_out), .out(magma_Bit_or_inst41_out));
corebit_or magma_Bit_or_inst42(.in0(magma_Bits_8_eq_inst234_out), .in1(magma_Bits_8_eq_inst235_out), .out(magma_Bit_or_inst42_out));
corebit_or magma_Bit_or_inst43(.in0(magma_Bit_or_inst42_out), .in1(magma_Bits_8_eq_inst236_out), .out(magma_Bit_or_inst43_out));
corebit_or magma_Bit_or_inst44(.in0(magma_Bit_or_inst43_out), .in1(magma_Bits_8_eq_inst237_out), .out(magma_Bit_or_inst44_out));
corebit_or magma_Bit_or_inst45(.in0(magma_Bits_8_eq_inst238_out), .in1(magma_Bits_8_eq_inst239_out), .out(magma_Bit_or_inst45_out));
corebit_or magma_Bit_or_inst46(.in0(magma_Bit_or_inst45_out), .in1(magma_Bits_8_eq_inst240_out), .out(magma_Bit_or_inst46_out));
corebit_or magma_Bit_or_inst47(.in0(magma_Bit_or_inst46_out), .in1(magma_Bits_8_eq_inst241_out), .out(magma_Bit_or_inst47_out));
corebit_or magma_Bit_or_inst48(.in0(magma_Bits_8_eq_inst242_out), .in1(magma_Bits_8_eq_inst243_out), .out(magma_Bit_or_inst48_out));
corebit_or magma_Bit_or_inst49(.in0(magma_Bit_or_inst48_out), .in1(magma_Bits_8_eq_inst244_out), .out(magma_Bit_or_inst49_out));
corebit_or magma_Bit_or_inst5(.in0(magma_Bits_8_eq_inst71_out), .in1(magma_Bits_8_eq_inst72_out), .out(magma_Bit_or_inst5_out));
corebit_or magma_Bit_or_inst50(.in0(magma_Bit_or_inst49_out), .in1(magma_Bits_8_eq_inst245_out), .out(magma_Bit_or_inst50_out));
corebit_or magma_Bit_or_inst51(.in0(magma_Bits_8_eq_inst247_out), .in1(magma_Bits_8_eq_inst248_out), .out(magma_Bit_or_inst51_out));
corebit_or magma_Bit_or_inst52(.in0(magma_Bit_or_inst51_out), .in1(magma_Bits_8_eq_inst249_out), .out(magma_Bit_or_inst52_out));
corebit_or magma_Bit_or_inst53(.in0(magma_Bit_or_inst52_out), .in1(magma_Bits_8_eq_inst250_out), .out(magma_Bit_or_inst53_out));
corebit_or magma_Bit_or_inst6(.in0(magma_Bit_or_inst5_out), .in1(magma_Bits_8_eq_inst73_out), .out(magma_Bit_or_inst6_out));
corebit_or magma_Bit_or_inst7(.in0(magma_Bits_8_eq_inst74_out), .in1(magma_Bits_8_eq_inst75_out), .out(magma_Bit_or_inst7_out));
corebit_or magma_Bit_or_inst8(.in0(magma_Bit_or_inst7_out), .in1(magma_Bits_8_eq_inst76_out), .out(magma_Bit_or_inst8_out));
corebit_or magma_Bit_or_inst9(.in0(magma_Bits_8_eq_inst77_out), .in1(magma_Bits_8_eq_inst78_out), .out(magma_Bit_or_inst9_out));
corebit_xor magma_Bit_xor_inst0(.in0(Mux2xOutSInt9_inst0_O[0]), .in1(bit_const_1_None_out), .out(magma_Bit_xor_inst0_out));
corebit_xor magma_Bit_xor_inst1(.in0(Mux2xOutSInt9_inst0_O[1]), .in1(bit_const_1_None_out), .out(magma_Bit_xor_inst1_out));
corebit_xor magma_Bit_xor_inst10(.in0(Mux2xOutUInt16_inst5_O[1]), .in1(bit_const_1_None_out), .out(magma_Bit_xor_inst10_out));
corebit_xor magma_Bit_xor_inst11(.in0(Mux2xOutUInt16_inst5_O[2]), .in1(bit_const_1_None_out), .out(magma_Bit_xor_inst11_out));
corebit_xor magma_Bit_xor_inst12(.in0(Mux2xOutUInt16_inst5_O[3]), .in1(bit_const_1_None_out), .out(magma_Bit_xor_inst12_out));
corebit_xor magma_Bit_xor_inst13(.in0(Mux2xOutUInt16_inst5_O[4]), .in1(bit_const_1_None_out), .out(magma_Bit_xor_inst13_out));
corebit_xor magma_Bit_xor_inst14(.in0(Mux2xOutUInt16_inst5_O[5]), .in1(bit_const_1_None_out), .out(magma_Bit_xor_inst14_out));
corebit_xor magma_Bit_xor_inst15(.in0(Mux2xOutUInt16_inst5_O[6]), .in1(bit_const_1_None_out), .out(magma_Bit_xor_inst15_out));
corebit_xor magma_Bit_xor_inst16(.in0(Mux2xOutUInt16_inst5_O[7]), .in1(bit_const_1_None_out), .out(magma_Bit_xor_inst16_out));
corebit_xor magma_Bit_xor_inst17(.in0(Mux2xOutUInt16_inst5_O[8]), .in1(bit_const_1_None_out), .out(magma_Bit_xor_inst17_out));
corebit_xor magma_Bit_xor_inst18(.in0(Mux2xOutUInt16_inst5_O[9]), .in1(bit_const_1_None_out), .out(magma_Bit_xor_inst18_out));
corebit_xor magma_Bit_xor_inst19(.in0(Mux2xOutUInt16_inst5_O[10]), .in1(bit_const_1_None_out), .out(magma_Bit_xor_inst19_out));
corebit_xor magma_Bit_xor_inst2(.in0(Mux2xOutSInt9_inst0_O[2]), .in1(bit_const_1_None_out), .out(magma_Bit_xor_inst2_out));
corebit_xor magma_Bit_xor_inst20(.in0(Mux2xOutUInt16_inst5_O[11]), .in1(bit_const_1_None_out), .out(magma_Bit_xor_inst20_out));
corebit_xor magma_Bit_xor_inst21(.in0(Mux2xOutUInt16_inst5_O[12]), .in1(bit_const_1_None_out), .out(magma_Bit_xor_inst21_out));
corebit_xor magma_Bit_xor_inst22(.in0(Mux2xOutUInt16_inst5_O[13]), .in1(bit_const_1_None_out), .out(magma_Bit_xor_inst22_out));
corebit_xor magma_Bit_xor_inst23(.in0(Mux2xOutUInt16_inst5_O[14]), .in1(bit_const_1_None_out), .out(magma_Bit_xor_inst23_out));
corebit_xor magma_Bit_xor_inst24(.in0(Mux2xOutUInt16_inst5_O[15]), .in1(bit_const_1_None_out), .out(magma_Bit_xor_inst24_out));
corebit_xor magma_Bit_xor_inst25(.in0(Mux2xOutUInt16_inst0_O[15]), .in1(Mux2xOutUInt16_inst1_O[15]), .out(magma_Bit_xor_inst25_out));
corebit_xor magma_Bit_xor_inst3(.in0(Mux2xOutSInt9_inst0_O[3]), .in1(bit_const_1_None_out), .out(magma_Bit_xor_inst3_out));
corebit_xor magma_Bit_xor_inst4(.in0(Mux2xOutSInt9_inst0_O[4]), .in1(bit_const_1_None_out), .out(magma_Bit_xor_inst4_out));
corebit_xor magma_Bit_xor_inst5(.in0(Mux2xOutSInt9_inst0_O[5]), .in1(bit_const_1_None_out), .out(magma_Bit_xor_inst5_out));
corebit_xor magma_Bit_xor_inst6(.in0(Mux2xOutSInt9_inst0_O[6]), .in1(bit_const_1_None_out), .out(magma_Bit_xor_inst6_out));
corebit_xor magma_Bit_xor_inst7(.in0(Mux2xOutSInt9_inst0_O[7]), .in1(bit_const_1_None_out), .out(magma_Bit_xor_inst7_out));
corebit_xor magma_Bit_xor_inst8(.in0(Mux2xOutUInt16_inst4_O[15]), .in1(bit_const_1_None_out), .out(magma_Bit_xor_inst8_out));
corebit_xor magma_Bit_xor_inst9(.in0(Mux2xOutUInt16_inst5_O[0]), .in1(bit_const_1_None_out), .out(magma_Bit_xor_inst9_out));
coreir_add #(.width(16)) magma_Bits_16_add_inst0(.in0(Mux2xOutSInt16_inst24_O), .in1(const_127_16_out), .out(magma_Bits_16_add_inst0_out));
coreir_and #(.width(16)) magma_Bits_16_and_inst0(.in0(Mux2xOutUInt16_inst0_O), .in1(const_32768_16_out), .out(magma_Bits_16_and_inst0_out));
coreir_and #(.width(16)) magma_Bits_16_and_inst1(.in0(magma_Bits_16_mul_inst0_out), .in1(Mux2xOutSInt16_inst27_O), .out(magma_Bits_16_and_inst1_out));
coreir_and #(.width(16)) magma_Bits_16_and_inst10(.in0(Mux2xOutUInt16_inst0_O), .in1(const_32768_16_out), .out(magma_Bits_16_and_inst10_out));
coreir_and #(.width(16)) magma_Bits_16_and_inst11(.in0(Mux2xOutUInt16_inst0_O), .in1(const_127_16_out), .out(magma_Bits_16_and_inst11_out));
coreir_and #(.width(16)) magma_Bits_16_and_inst12(.in0(Mux2xOutUInt16_inst0_O), .in1(const_32768_16_out), .out(magma_Bits_16_and_inst12_out));
coreir_and #(.width(16)) magma_Bits_16_and_inst13(.in0(Mux2xOutUInt16_inst0_O), .in1(const_127_16_out), .out(magma_Bits_16_and_inst13_out));
coreir_and #(.width(16)) magma_Bits_16_and_inst14(.in0(Mux2xOutUInt16_inst11_O), .in1(const_127_16_out), .out(magma_Bits_16_and_inst14_out));
coreir_and #(.width(16)) magma_Bits_16_and_inst2(.in0(magma_Bits_16_shl_inst2_out), .in1(const_32640_16_out), .out(magma_Bits_16_and_inst2_out));
coreir_and #(.width(16)) magma_Bits_16_and_inst3(.in0(Mux2xOutUInt16_inst0_O), .in1(Mux2xOutUInt16_inst9_O), .out(magma_Bits_16_and_inst3_out));
coreir_and #(.width(16)) magma_Bits_16_and_inst4(.in0(Mux2xOutUInt16_inst0_O), .in1(const_127_16_out), .out(magma_Bits_16_and_inst4_out));
coreir_and #(.width(16)) magma_Bits_16_and_inst5(.in0(Mux2xOutUInt16_inst0_O), .in1(const_32768_16_out), .out(magma_Bits_16_and_inst5_out));
coreir_and #(.width(16)) magma_Bits_16_and_inst6(.in0(Mux2xOutUInt16_inst0_O), .in1(const_127_16_out), .out(magma_Bits_16_and_inst6_out));
coreir_and #(.width(16)) magma_Bits_16_and_inst7(.in0(Mux2xOutUInt16_inst0_O), .in1(const_32768_16_out), .out(magma_Bits_16_and_inst7_out));
coreir_and #(.width(16)) magma_Bits_16_and_inst8(.in0(Mux2xOutUInt16_inst9_O), .in1(const_32768_16_out), .out(magma_Bits_16_and_inst8_out));
coreir_and #(.width(16)) magma_Bits_16_and_inst9(.in0(Mux2xOutUInt16_inst0_O), .in1(const_127_16_out), .out(magma_Bits_16_and_inst9_out));
coreir_ashr #(.width(16)) magma_Bits_16_ashr_inst0(.in0(a), .in1(b), .out(magma_Bits_16_ashr_inst0_out));
coreir_eq #(.width(16)) magma_Bits_16_eq_inst0(.in0(magma_Bits_16_and_inst10_out), .in1(const_32768_16_out), .out(magma_Bits_16_eq_inst0_out));
coreir_eq #(.width(16)) magma_Bits_16_eq_inst1(.in0(magma_Bits_16_and_inst12_out), .in1(const_32768_16_out), .out(magma_Bits_16_eq_inst1_out));
coreir_eq #(.width(16)) magma_Bits_16_eq_inst2(.in0(Mux2xOutUInt16_inst85_O), .in1(const_0_16_out), .out(magma_Bits_16_eq_inst2_out));
coreir_lshr #(.width(16)) magma_Bits_16_lshr_inst0(.in0(a), .in1(b), .out(magma_Bits_16_lshr_inst0_out));
coreir_lshr #(.width(16)) magma_Bits_16_lshr_inst1(.in0(Mux2xOutUInt16_inst7_O), .in1(const_8_16_out), .out(magma_Bits_16_lshr_inst1_out));
coreir_lshr #(.width(16)) magma_Bits_16_lshr_inst2(.in0(magma_Bits_16_or_inst9_out), .in1({bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,magma_Bits_9_neg_inst1_out[8],magma_Bits_9_neg_inst1_out[7],magma_Bits_9_neg_inst1_out[6],magma_Bits_9_neg_inst1_out[5],magma_Bits_9_neg_inst1_out[4],magma_Bits_9_neg_inst1_out[3],magma_Bits_9_neg_inst1_out[2],magma_Bits_9_neg_inst1_out[1],magma_Bits_9_neg_inst1_out[0]}), .out(magma_Bits_16_lshr_inst2_out));
coreir_mul #(.width(16)) magma_Bits_16_mul_inst0(.in0(Mux2xOutSInt16_inst25_O), .in1(Mux2xOutSInt16_inst26_O), .out(magma_Bits_16_mul_inst0_out));
coreir_neg #(.width(16)) magma_Bits_16_neg_inst0(.in(Mux2xOutUInt16_inst0_O), .out(magma_Bits_16_neg_inst0_out));
coreir_neg #(.width(16)) magma_Bits_16_neg_inst1(.in(Mux2xOutUInt16_inst0_O), .out(magma_Bits_16_neg_inst1_out));
coreir_neg #(.width(16)) magma_Bits_16_neg_inst2(.in({magma_Bits_23_lshr_inst0_out[15],magma_Bits_23_lshr_inst0_out[14],magma_Bits_23_lshr_inst0_out[13],magma_Bits_23_lshr_inst0_out[12],magma_Bits_23_lshr_inst0_out[11],magma_Bits_23_lshr_inst0_out[10],magma_Bits_23_lshr_inst0_out[9],magma_Bits_23_lshr_inst0_out[8],magma_Bits_23_lshr_inst0_out[7],magma_Bits_23_lshr_inst0_out[6],magma_Bits_23_lshr_inst0_out[5],magma_Bits_23_lshr_inst0_out[4],magma_Bits_23_lshr_inst0_out[3],magma_Bits_23_lshr_inst0_out[2],magma_Bits_23_lshr_inst0_out[1],magma_Bits_23_lshr_inst0_out[0]}), .out(magma_Bits_16_neg_inst2_out));
coreir_neg #(.width(16)) magma_Bits_16_neg_inst3(.in(magma_Bits_16_and_inst14_out), .out(magma_Bits_16_neg_inst3_out));
coreir_not #(.width(16)) magma_Bits_16_not_inst0(.in(Mux2xOutUInt16_inst1_O), .out(magma_Bits_16_not_inst0_out));
coreir_or #(.width(16)) magma_Bits_16_or_inst0(.in0(Mux2xOutUInt16_inst6_O), .in1(magma_Bits_16_and_inst2_out), .out(magma_Bits_16_or_inst0_out));
coreir_or #(.width(16)) magma_Bits_16_or_inst1(.in0(magma_Bits_16_or_inst0_out), .in1(Mux2xOutUInt16_inst8_O), .out(magma_Bits_16_or_inst1_out));
coreir_or #(.width(16)) magma_Bits_16_or_inst2(.in0(Mux2xOutUInt16_inst0_O), .in1(Mux2xOutUInt16_inst9_O), .out(magma_Bits_16_or_inst2_out));
coreir_or #(.width(16)) magma_Bits_16_or_inst3(.in0(magma_Bits_16_and_inst5_out), .in1(magma_Bits_16_shl_inst5_out), .out(magma_Bits_16_or_inst3_out));
coreir_or #(.width(16)) magma_Bits_16_or_inst4(.in0(magma_Bits_16_or_inst3_out), .in1(magma_Bits_16_and_inst6_out), .out(magma_Bits_16_or_inst4_out));
coreir_or #(.width(16)) magma_Bits_16_or_inst5(.in0(magma_Bits_16_and_inst7_out), .in1(magma_Bits_16_and_inst8_out), .out(magma_Bits_16_or_inst5_out));
coreir_or #(.width(16)) magma_Bits_16_or_inst6(.in0(magma_Bits_16_or_inst5_out), .in1(magma_Bits_16_shl_inst6_out), .out(magma_Bits_16_or_inst6_out));
coreir_or #(.width(16)) magma_Bits_16_or_inst7(.in0(magma_Bits_16_or_inst6_out), .in1(magma_Bits_16_and_inst9_out), .out(magma_Bits_16_or_inst7_out));
coreir_or #(.width(16)) magma_Bits_16_or_inst8(.in0(magma_Bits_16_and_inst11_out), .in1(const_128_16_out), .out(magma_Bits_16_or_inst8_out));
coreir_or #(.width(16)) magma_Bits_16_or_inst9(.in0(magma_Bits_16_and_inst13_out), .in1(const_128_16_out), .out(magma_Bits_16_or_inst9_out));
coreir_sge #(.width(16)) magma_Bits_16_sge_inst0(.in0(a), .in1(b), .out(magma_Bits_16_sge_inst0_out));
coreir_sge #(.width(16)) magma_Bits_16_sge_inst1(.in0(a), .in1(const_0_16_out), .out(magma_Bits_16_sge_inst1_out));
coreir_sge #(.width(16)) magma_Bits_16_sge_inst2(.in0(Mux2xOutSInt16_inst24_O), .in1(const_0_16_out), .out(magma_Bits_16_sge_inst2_out));
coreir_shl #(.width(16)) magma_Bits_16_shl_inst0(.in0(const_1_16_out), .in1(magma_Bits_16_sub_inst0_out), .out(magma_Bits_16_shl_inst0_out));
coreir_shl #(.width(16)) magma_Bits_16_shl_inst1(.in0(const_1_16_out), .in1(magma_Bits_16_sub_inst1_out), .out(magma_Bits_16_shl_inst1_out));
coreir_shl #(.width(16)) magma_Bits_16_shl_inst2(.in0(magma_Bits_16_add_inst0_out), .in1(const_7_16_out), .out(magma_Bits_16_shl_inst2_out));
coreir_shl #(.width(16)) magma_Bits_16_shl_inst3(.in0(Mux2xOutUInt16_inst0_O), .in1(Mux2xOutUInt16_inst9_O), .out(magma_Bits_16_shl_inst3_out));
coreir_shl #(.width(16)) magma_Bits_16_shl_inst4(.in0(const_1_16_out), .in1(const_15_16_out), .out(magma_Bits_16_shl_inst4_out));
coreir_shl #(.width(16)) magma_Bits_16_shl_inst5(.in0({bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,magma_Bits_8_add_inst0_out[7],magma_Bits_8_add_inst0_out[6],magma_Bits_8_add_inst0_out[5],magma_Bits_8_add_inst0_out[4],magma_Bits_8_add_inst0_out[3],magma_Bits_8_add_inst0_out[2],magma_Bits_8_add_inst0_out[1],magma_Bits_8_add_inst0_out[0]}), .in1(const_7_16_out), .out(magma_Bits_16_shl_inst5_out));
coreir_shl #(.width(16)) magma_Bits_16_shl_inst6(.in0({bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,magma_Bits_8_add_inst1_out[7],magma_Bits_8_add_inst1_out[6],magma_Bits_8_add_inst1_out[5],magma_Bits_8_add_inst1_out[4],magma_Bits_8_add_inst1_out[3],magma_Bits_8_add_inst1_out[2],magma_Bits_8_add_inst1_out[1],magma_Bits_8_add_inst1_out[0]}), .in1(const_7_16_out), .out(magma_Bits_16_shl_inst6_out));
coreir_shl #(.width(16)) magma_Bits_16_shl_inst7(.in0(magma_Bits_16_or_inst9_out), .in1({bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,magma_Bits_9_sub_inst2_out[8],magma_Bits_9_sub_inst2_out[7],magma_Bits_9_sub_inst2_out[6],magma_Bits_9_sub_inst2_out[5],magma_Bits_9_sub_inst2_out[4],magma_Bits_9_sub_inst2_out[3],magma_Bits_9_sub_inst2_out[2],magma_Bits_9_sub_inst2_out[1],magma_Bits_9_sub_inst2_out[0]}), .out(magma_Bits_16_shl_inst7_out));
coreir_sle #(.width(16)) magma_Bits_16_sle_inst0(.in0(a), .in1(b), .out(magma_Bits_16_sle_inst0_out));
coreir_sub #(.width(16)) magma_Bits_16_sub_inst0(.in0(const_7_16_out), .in1(Mux2xOutSInt16_inst7_O), .out(magma_Bits_16_sub_inst0_out));
coreir_sub #(.width(16)) magma_Bits_16_sub_inst1(.in0(const_15_16_out), .in1(Mux2xOutSInt16_inst23_O), .out(magma_Bits_16_sub_inst1_out));
coreir_uge #(.width(16)) magma_Bits_16_uge_inst0(.in0(a), .in1(b), .out(magma_Bits_16_uge_inst0_out));
coreir_uge #(.width(16)) magma_Bits_16_uge_inst1(.in0(a), .in1(const_0_16_out), .out(magma_Bits_16_uge_inst1_out));
coreir_ule #(.width(16)) magma_Bits_16_ule_inst0(.in0(a), .in1(b), .out(magma_Bits_16_ule_inst0_out));
coreir_xor #(.width(16)) magma_Bits_16_xor_inst0(.in0(Mux2xOutUInt16_inst0_O), .in1(Mux2xOutUInt16_inst9_O), .out(magma_Bits_16_xor_inst0_out));
coreir_xor #(.width(16)) magma_Bits_16_xor_inst1(.in0(magma_Bits_16_shl_inst4_out), .in1(Mux2xOutUInt16_inst9_O), .out(magma_Bits_16_xor_inst1_out));
coreir_add #(.width(17)) magma_Bits_17_add_inst0(.in0({bit_const_0_None_out,Mux2xOutUInt16_inst0_O[15],Mux2xOutUInt16_inst0_O[14],Mux2xOutUInt16_inst0_O[13],Mux2xOutUInt16_inst0_O[12],Mux2xOutUInt16_inst0_O[11],Mux2xOutUInt16_inst0_O[10],Mux2xOutUInt16_inst0_O[9],Mux2xOutUInt16_inst0_O[8],Mux2xOutUInt16_inst0_O[7],Mux2xOutUInt16_inst0_O[6],Mux2xOutUInt16_inst0_O[5],Mux2xOutUInt16_inst0_O[4],Mux2xOutUInt16_inst0_O[3],Mux2xOutUInt16_inst0_O[2],Mux2xOutUInt16_inst0_O[1],Mux2xOutUInt16_inst0_O[0]}), .in1({bit_const_0_None_out,Mux2xOutUInt16_inst9_O[15],Mux2xOutUInt16_inst9_O[14],Mux2xOutUInt16_inst9_O[13],Mux2xOutUInt16_inst9_O[12],Mux2xOutUInt16_inst9_O[11],Mux2xOutUInt16_inst9_O[10],Mux2xOutUInt16_inst9_O[9],Mux2xOutUInt16_inst9_O[8],Mux2xOutUInt16_inst9_O[7],Mux2xOutUInt16_inst9_O[6],Mux2xOutUInt16_inst9_O[5],Mux2xOutUInt16_inst9_O[4],Mux2xOutUInt16_inst9_O[3],Mux2xOutUInt16_inst9_O[2],Mux2xOutUInt16_inst9_O[1],Mux2xOutUInt16_inst9_O[0]}), .out(magma_Bits_17_add_inst0_out));
coreir_add #(.width(17)) magma_Bits_17_add_inst1(.in0(magma_Bits_17_add_inst0_out), .in1({bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,Mux2xOutBit_inst4_O}), .out(magma_Bits_17_add_inst1_out));
coreir_eq #(.width(1)) magma_Bits_1_eq_inst0(.in0(inst_signed_), .in1(const_1_1_out), .out(magma_Bits_1_eq_inst0_out));
coreir_eq #(.width(1)) magma_Bits_1_eq_inst1(.in0(inst_signed_), .in1(const_1_1_out), .out(magma_Bits_1_eq_inst1_out));
coreir_eq #(.width(1)) magma_Bits_1_eq_inst2(.in0(inst_signed_), .in1(const_1_1_out), .out(magma_Bits_1_eq_inst2_out));
coreir_eq #(.width(1)) magma_Bits_1_eq_inst3(.in0(inst_signed_), .in1(const_1_1_out), .out(magma_Bits_1_eq_inst3_out));
coreir_eq #(.width(1)) magma_Bits_1_eq_inst4(.in0(inst_signed_), .in1(const_1_1_out), .out(magma_Bits_1_eq_inst4_out));
coreir_eq #(.width(1)) magma_Bits_1_eq_inst5(.in0(inst_signed_), .in1(const_1_1_out), .out(magma_Bits_1_eq_inst5_out));
coreir_eq #(.width(1)) magma_Bits_1_eq_inst6(.in0(inst_signed_), .in1(const_1_1_out), .out(magma_Bits_1_eq_inst6_out));
coreir_eq #(.width(1)) magma_Bits_1_eq_inst7(.in0(inst_signed_), .in1(const_1_1_out), .out(magma_Bits_1_eq_inst7_out));
coreir_eq #(.width(1)) magma_Bits_1_eq_inst8(.in0(inst_signed_), .in1(const_1_1_out), .out(magma_Bits_1_eq_inst8_out));
coreir_lshr #(.width(23)) magma_Bits_23_lshr_inst0(.in0(Mux2xOutUInt23_inst0_O), .in1(const_7_23_out), .out(magma_Bits_23_lshr_inst0_out));
coreir_shl #(.width(23)) magma_Bits_23_shl_inst0(.in0({bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,magma_Bits_16_or_inst8_out[15],magma_Bits_16_or_inst8_out[14],magma_Bits_16_or_inst8_out[13],magma_Bits_16_or_inst8_out[12],magma_Bits_16_or_inst8_out[11],magma_Bits_16_or_inst8_out[10],magma_Bits_16_or_inst8_out[9],magma_Bits_16_or_inst8_out[8],magma_Bits_16_or_inst8_out[7],magma_Bits_16_or_inst8_out[6],magma_Bits_16_or_inst8_out[5],magma_Bits_16_or_inst8_out[4],magma_Bits_16_or_inst8_out[3],magma_Bits_16_or_inst8_out[2],magma_Bits_16_or_inst8_out[1],magma_Bits_16_or_inst8_out[0]}), .in1({bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,magma_Bits_9_sub_inst1_out[8],magma_Bits_9_sub_inst1_out[7],magma_Bits_9_sub_inst1_out[6],magma_Bits_9_sub_inst1_out[5],magma_Bits_9_sub_inst1_out[4],magma_Bits_9_sub_inst1_out[3],magma_Bits_9_sub_inst1_out[2],magma_Bits_9_sub_inst1_out[1],magma_Bits_9_sub_inst1_out[0]}), .out(magma_Bits_23_shl_inst0_out));
coreir_mul #(.width(32)) magma_Bits_32_mul_inst0(.in0(Mux2xOutUInt32_inst0_O), .in1(Mux2xOutUInt32_inst1_O), .out(magma_Bits_32_mul_inst0_out));
coreir_eq #(.width(7)) magma_Bits_7_eq_inst0(.in0({Mux2xOutUInt16_inst0_O[6],Mux2xOutUInt16_inst0_O[5],Mux2xOutUInt16_inst0_O[4],Mux2xOutUInt16_inst0_O[3],Mux2xOutUInt16_inst0_O[2],Mux2xOutUInt16_inst0_O[1],Mux2xOutUInt16_inst0_O[0]}), .in1(const_0_7_out), .out(magma_Bits_7_eq_inst0_out));
coreir_eq #(.width(7)) magma_Bits_7_eq_inst1(.in0({Mux2xOutUInt16_inst1_O[6],Mux2xOutUInt16_inst1_O[5],Mux2xOutUInt16_inst1_O[4],Mux2xOutUInt16_inst1_O[3],Mux2xOutUInt16_inst1_O[2],Mux2xOutUInt16_inst1_O[1],Mux2xOutUInt16_inst1_O[0]}), .in1(const_0_7_out), .out(magma_Bits_7_eq_inst1_out));
coreir_eq #(.width(7)) magma_Bits_7_eq_inst2(.in0({Mux2xOutUInt16_inst85_O[6],Mux2xOutUInt16_inst85_O[5],Mux2xOutUInt16_inst85_O[4],Mux2xOutUInt16_inst85_O[3],Mux2xOutUInt16_inst85_O[2],Mux2xOutUInt16_inst85_O[1],Mux2xOutUInt16_inst85_O[0]}), .in1(const_0_7_out), .out(magma_Bits_7_eq_inst2_out));
coreir_add #(.width(8)) magma_Bits_8_add_inst0(.in0({Mux2xOutUInt16_inst0_O[14],Mux2xOutUInt16_inst0_O[13],Mux2xOutUInt16_inst0_O[12],Mux2xOutUInt16_inst0_O[11],Mux2xOutUInt16_inst0_O[10],Mux2xOutUInt16_inst0_O[9],Mux2xOutUInt16_inst0_O[8],Mux2xOutUInt16_inst0_O[7]}), .in1({Mux2xOutUInt16_inst9_O[7],Mux2xOutUInt16_inst9_O[6],Mux2xOutUInt16_inst9_O[5],Mux2xOutUInt16_inst9_O[4],Mux2xOutUInt16_inst9_O[3],Mux2xOutUInt16_inst9_O[2],Mux2xOutUInt16_inst9_O[1],Mux2xOutUInt16_inst9_O[0]}), .out(magma_Bits_8_add_inst0_out));
coreir_add #(.width(8)) magma_Bits_8_add_inst1(.in0(magma_Bits_8_sub_inst0_out), .in1(const_127_8_out), .out(magma_Bits_8_add_inst1_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0({Mux2xOutUInt16_inst0_O[14],Mux2xOutUInt16_inst0_O[13],Mux2xOutUInt16_inst0_O[12],Mux2xOutUInt16_inst0_O[11],Mux2xOutUInt16_inst0_O[10],Mux2xOutUInt16_inst0_O[9],Mux2xOutUInt16_inst0_O[8],Mux2xOutUInt16_inst0_O[7]}), .in1(const_255_8_out), .out(magma_Bits_8_eq_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst1(.in0({Mux2xOutUInt16_inst1_O[14],Mux2xOutUInt16_inst1_O[13],Mux2xOutUInt16_inst1_O[12],Mux2xOutUInt16_inst1_O[11],Mux2xOutUInt16_inst1_O[10],Mux2xOutUInt16_inst1_O[9],Mux2xOutUInt16_inst1_O[8],Mux2xOutUInt16_inst1_O[7]}), .in1(const_255_8_out), .out(magma_Bits_8_eq_inst1_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst10(.in0(inst_alu), .in1(const_2_8_out), .out(magma_Bits_8_eq_inst10_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst100(.in0(inst_alu), .in1(const_17_8_out), .out(magma_Bits_8_eq_inst100_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst101(.in0(inst_alu), .in1(const_17_8_out), .out(magma_Bits_8_eq_inst101_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst102(.in0(inst_alu), .in1(const_17_8_out), .out(magma_Bits_8_eq_inst102_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst103(.in0(inst_alu), .in1(const_17_8_out), .out(magma_Bits_8_eq_inst103_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst104(.in0(inst_alu), .in1(const_15_8_out), .out(magma_Bits_8_eq_inst104_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst105(.in0(inst_alu), .in1(const_15_8_out), .out(magma_Bits_8_eq_inst105_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst106(.in0(inst_alu), .in1(const_15_8_out), .out(magma_Bits_8_eq_inst106_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst107(.in0(inst_alu), .in1(const_15_8_out), .out(magma_Bits_8_eq_inst107_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst108(.in0(inst_alu), .in1(const_15_8_out), .out(magma_Bits_8_eq_inst108_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst109(.in0(inst_alu), .in1(const_15_8_out), .out(magma_Bits_8_eq_inst109_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst11(.in0(inst_alu), .in1(const_6_8_out), .out(magma_Bits_8_eq_inst11_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst110(.in0(inst_alu), .in1(const_15_8_out), .out(magma_Bits_8_eq_inst110_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst111(.in0(inst_alu), .in1(const_15_8_out), .out(magma_Bits_8_eq_inst111_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst112(.in0(inst_alu), .in1(const_15_8_out), .out(magma_Bits_8_eq_inst112_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst113(.in0(inst_alu), .in1(const_20_8_out), .out(magma_Bits_8_eq_inst113_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst114(.in0(inst_alu), .in1(const_20_8_out), .out(magma_Bits_8_eq_inst114_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst115(.in0(inst_alu), .in1(const_20_8_out), .out(magma_Bits_8_eq_inst115_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst116(.in0(inst_alu), .in1(const_20_8_out), .out(magma_Bits_8_eq_inst116_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst117(.in0(inst_alu), .in1(const_20_8_out), .out(magma_Bits_8_eq_inst117_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst118(.in0(inst_alu), .in1(const_20_8_out), .out(magma_Bits_8_eq_inst118_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst119(.in0(inst_alu), .in1(const_20_8_out), .out(magma_Bits_8_eq_inst119_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst12(.in0(inst_alu), .in1(const_1_8_out), .out(magma_Bits_8_eq_inst12_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst120(.in0(inst_alu), .in1(const_20_8_out), .out(magma_Bits_8_eq_inst120_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst121(.in0(inst_alu), .in1(const_20_8_out), .out(magma_Bits_8_eq_inst121_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst122(.in0(inst_alu), .in1(const_18_8_out), .out(magma_Bits_8_eq_inst122_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst123(.in0(inst_alu), .in1(const_18_8_out), .out(magma_Bits_8_eq_inst123_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst124(.in0(inst_alu), .in1(const_18_8_out), .out(magma_Bits_8_eq_inst124_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst125(.in0(inst_alu), .in1(const_18_8_out), .out(magma_Bits_8_eq_inst125_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst126(.in0(inst_alu), .in1(const_18_8_out), .out(magma_Bits_8_eq_inst126_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst127(.in0(inst_alu), .in1(const_18_8_out), .out(magma_Bits_8_eq_inst127_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst128(.in0(inst_alu), .in1(const_18_8_out), .out(magma_Bits_8_eq_inst128_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst129(.in0(inst_alu), .in1(const_18_8_out), .out(magma_Bits_8_eq_inst129_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst13(.in0(inst_alu), .in1(const_23_8_out), .out(magma_Bits_8_eq_inst13_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst130(.in0(inst_alu), .in1(const_18_8_out), .out(magma_Bits_8_eq_inst130_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst131(.in0(inst_alu), .in1(const_19_8_out), .out(magma_Bits_8_eq_inst131_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst132(.in0(inst_alu), .in1(const_19_8_out), .out(magma_Bits_8_eq_inst132_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst133(.in0(inst_alu), .in1(const_19_8_out), .out(magma_Bits_8_eq_inst133_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst134(.in0(inst_alu), .in1(const_19_8_out), .out(magma_Bits_8_eq_inst134_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst135(.in0(inst_alu), .in1(const_19_8_out), .out(magma_Bits_8_eq_inst135_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst136(.in0(inst_alu), .in1(const_19_8_out), .out(magma_Bits_8_eq_inst136_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst137(.in0(inst_alu), .in1(const_19_8_out), .out(magma_Bits_8_eq_inst137_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst138(.in0(inst_alu), .in1(const_19_8_out), .out(magma_Bits_8_eq_inst138_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst139(.in0(inst_alu), .in1(const_19_8_out), .out(magma_Bits_8_eq_inst139_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst14(.in0(inst_alu), .in1(const_24_8_out), .out(magma_Bits_8_eq_inst14_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst140(.in0(inst_alu), .in1(const_8_8_out), .out(magma_Bits_8_eq_inst140_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst141(.in0(inst_alu), .in1(const_8_8_out), .out(magma_Bits_8_eq_inst141_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst142(.in0(inst_alu), .in1(const_8_8_out), .out(magma_Bits_8_eq_inst142_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst143(.in0(inst_alu), .in1(const_8_8_out), .out(magma_Bits_8_eq_inst143_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst144(.in0(inst_alu), .in1(const_8_8_out), .out(magma_Bits_8_eq_inst144_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst145(.in0(inst_alu), .in1(const_8_8_out), .out(magma_Bits_8_eq_inst145_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst146(.in0(inst_alu), .in1(const_8_8_out), .out(magma_Bits_8_eq_inst146_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst147(.in0(inst_alu), .in1(const_8_8_out), .out(magma_Bits_8_eq_inst147_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst148(.in0(inst_alu), .in1(const_8_8_out), .out(magma_Bits_8_eq_inst148_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst149(.in0(inst_alu), .in1(const_3_8_out), .out(magma_Bits_8_eq_inst149_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst15(.in0(inst_alu), .in1(const_151_8_out), .out(magma_Bits_8_eq_inst15_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst150(.in0(inst_alu), .in1(const_3_8_out), .out(magma_Bits_8_eq_inst150_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst151(.in0(inst_alu), .in1(const_3_8_out), .out(magma_Bits_8_eq_inst151_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst152(.in0(inst_alu), .in1(const_3_8_out), .out(magma_Bits_8_eq_inst152_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst153(.in0(inst_alu), .in1(const_3_8_out), .out(magma_Bits_8_eq_inst153_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst154(.in0(inst_alu), .in1(const_3_8_out), .out(magma_Bits_8_eq_inst154_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst155(.in0(inst_alu), .in1(const_3_8_out), .out(magma_Bits_8_eq_inst155_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst156(.in0(inst_alu), .in1(const_3_8_out), .out(magma_Bits_8_eq_inst156_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst157(.in0(inst_alu), .in1(const_3_8_out), .out(magma_Bits_8_eq_inst157_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst158(.in0(inst_alu), .in1(const_5_8_out), .out(magma_Bits_8_eq_inst158_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst159(.in0(inst_alu), .in1(const_5_8_out), .out(magma_Bits_8_eq_inst159_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst16(.in0(inst_alu), .in1(const_151_8_out), .out(magma_Bits_8_eq_inst16_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst160(.in0(inst_alu), .in1(const_5_8_out), .out(magma_Bits_8_eq_inst160_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst161(.in0(inst_alu), .in1(const_5_8_out), .out(magma_Bits_8_eq_inst161_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst162(.in0(inst_alu), .in1(const_5_8_out), .out(magma_Bits_8_eq_inst162_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst163(.in0(inst_alu), .in1(const_5_8_out), .out(magma_Bits_8_eq_inst163_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst164(.in0(inst_alu), .in1(const_5_8_out), .out(magma_Bits_8_eq_inst164_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst165(.in0(inst_alu), .in1(const_5_8_out), .out(magma_Bits_8_eq_inst165_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst166(.in0(inst_alu), .in1(const_5_8_out), .out(magma_Bits_8_eq_inst166_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst167(.in0(inst_alu), .in1(const_4_8_out), .out(magma_Bits_8_eq_inst167_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst168(.in0(inst_alu), .in1(const_4_8_out), .out(magma_Bits_8_eq_inst168_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst169(.in0(inst_alu), .in1(const_4_8_out), .out(magma_Bits_8_eq_inst169_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst17(.in0(inst_alu), .in1(const_151_8_out), .out(magma_Bits_8_eq_inst17_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst170(.in0(inst_alu), .in1(const_4_8_out), .out(magma_Bits_8_eq_inst170_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst171(.in0(inst_alu), .in1(const_4_8_out), .out(magma_Bits_8_eq_inst171_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst172(.in0(inst_alu), .in1(const_4_8_out), .out(magma_Bits_8_eq_inst172_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst173(.in0(inst_alu), .in1(const_4_8_out), .out(magma_Bits_8_eq_inst173_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst174(.in0(inst_alu), .in1(const_4_8_out), .out(magma_Bits_8_eq_inst174_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst175(.in0(inst_alu), .in1(const_4_8_out), .out(magma_Bits_8_eq_inst175_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst176(.in0(inst_alu), .in1(const_13_8_out), .out(magma_Bits_8_eq_inst176_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst177(.in0(inst_alu), .in1(const_13_8_out), .out(magma_Bits_8_eq_inst177_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst178(.in0(inst_alu), .in1(const_13_8_out), .out(magma_Bits_8_eq_inst178_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst179(.in0(inst_alu), .in1(const_13_8_out), .out(magma_Bits_8_eq_inst179_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst18(.in0(inst_alu), .in1(const_151_8_out), .out(magma_Bits_8_eq_inst18_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst180(.in0(inst_alu), .in1(const_13_8_out), .out(magma_Bits_8_eq_inst180_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst181(.in0(inst_alu), .in1(const_13_8_out), .out(magma_Bits_8_eq_inst181_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst182(.in0(inst_alu), .in1(const_13_8_out), .out(magma_Bits_8_eq_inst182_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst183(.in0(inst_alu), .in1(const_13_8_out), .out(magma_Bits_8_eq_inst183_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst184(.in0(inst_alu), .in1(const_13_8_out), .out(magma_Bits_8_eq_inst184_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst185(.in0(inst_alu), .in1(const_13_8_out), .out(magma_Bits_8_eq_inst185_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst186(.in0(inst_alu), .in1(const_12_8_out), .out(magma_Bits_8_eq_inst186_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst187(.in0(inst_alu), .in1(const_12_8_out), .out(magma_Bits_8_eq_inst187_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst188(.in0(inst_alu), .in1(const_12_8_out), .out(magma_Bits_8_eq_inst188_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst189(.in0(inst_alu), .in1(const_12_8_out), .out(magma_Bits_8_eq_inst189_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst19(.in0(inst_alu), .in1(const_151_8_out), .out(magma_Bits_8_eq_inst19_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst190(.in0(inst_alu), .in1(const_12_8_out), .out(magma_Bits_8_eq_inst190_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst191(.in0(inst_alu), .in1(const_12_8_out), .out(magma_Bits_8_eq_inst191_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst192(.in0(inst_alu), .in1(const_12_8_out), .out(magma_Bits_8_eq_inst192_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst193(.in0(inst_alu), .in1(const_12_8_out), .out(magma_Bits_8_eq_inst193_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst194(.in0(inst_alu), .in1(const_12_8_out), .out(magma_Bits_8_eq_inst194_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst195(.in0(inst_alu), .in1(const_12_8_out), .out(magma_Bits_8_eq_inst195_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst196(.in0(inst_alu), .in1(const_11_8_out), .out(magma_Bits_8_eq_inst196_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst197(.in0(inst_alu), .in1(const_11_8_out), .out(magma_Bits_8_eq_inst197_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst198(.in0(inst_alu), .in1(const_11_8_out), .out(magma_Bits_8_eq_inst198_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst199(.in0(inst_alu), .in1(const_11_8_out), .out(magma_Bits_8_eq_inst199_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst2(.in0(inst_alu), .in1(const_149_8_out), .out(magma_Bits_8_eq_inst2_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst20(.in0(inst_alu), .in1(const_150_8_out), .out(magma_Bits_8_eq_inst20_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst200(.in0(inst_alu), .in1(const_11_8_out), .out(magma_Bits_8_eq_inst200_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst201(.in0(inst_alu), .in1(const_11_8_out), .out(magma_Bits_8_eq_inst201_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst202(.in0(inst_alu), .in1(const_11_8_out), .out(magma_Bits_8_eq_inst202_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst203(.in0(inst_alu), .in1(const_11_8_out), .out(magma_Bits_8_eq_inst203_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst204(.in0(inst_alu), .in1(const_11_8_out), .out(magma_Bits_8_eq_inst204_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst205(.in0(inst_alu), .in1(const_11_8_out), .out(magma_Bits_8_eq_inst205_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst206(.in0(inst_alu), .in1(const_0_8_out), .out(magma_Bits_8_eq_inst206_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst207(.in0(inst_alu), .in1(const_1_8_out), .out(magma_Bits_8_eq_inst207_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst208(.in0(inst_alu), .in1(const_2_8_out), .out(magma_Bits_8_eq_inst208_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst209(.in0(inst_alu), .in1(const_6_8_out), .out(magma_Bits_8_eq_inst209_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst21(.in0(inst_alu), .in1(const_150_8_out), .out(magma_Bits_8_eq_inst21_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst210(.in0(inst_alu), .in1(const_0_8_out), .out(magma_Bits_8_eq_inst210_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst211(.in0(inst_alu), .in1(const_1_8_out), .out(magma_Bits_8_eq_inst211_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst212(.in0(inst_alu), .in1(const_2_8_out), .out(magma_Bits_8_eq_inst212_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst213(.in0(inst_alu), .in1(const_6_8_out), .out(magma_Bits_8_eq_inst213_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst214(.in0(inst_alu), .in1(const_0_8_out), .out(magma_Bits_8_eq_inst214_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst215(.in0(inst_alu), .in1(const_1_8_out), .out(magma_Bits_8_eq_inst215_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst216(.in0(inst_alu), .in1(const_2_8_out), .out(magma_Bits_8_eq_inst216_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst217(.in0(inst_alu), .in1(const_6_8_out), .out(magma_Bits_8_eq_inst217_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst218(.in0(inst_alu), .in1(const_0_8_out), .out(magma_Bits_8_eq_inst218_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst219(.in0(inst_alu), .in1(const_1_8_out), .out(magma_Bits_8_eq_inst219_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst22(.in0(inst_alu), .in1(const_150_8_out), .out(magma_Bits_8_eq_inst22_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst220(.in0(inst_alu), .in1(const_2_8_out), .out(magma_Bits_8_eq_inst220_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst221(.in0(inst_alu), .in1(const_6_8_out), .out(magma_Bits_8_eq_inst221_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst222(.in0(inst_alu), .in1(const_0_8_out), .out(magma_Bits_8_eq_inst222_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst223(.in0(inst_alu), .in1(const_1_8_out), .out(magma_Bits_8_eq_inst223_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst224(.in0(inst_alu), .in1(const_2_8_out), .out(magma_Bits_8_eq_inst224_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst225(.in0(inst_alu), .in1(const_6_8_out), .out(magma_Bits_8_eq_inst225_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst226(.in0(inst_alu), .in1(const_0_8_out), .out(magma_Bits_8_eq_inst226_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst227(.in0(inst_alu), .in1(const_1_8_out), .out(magma_Bits_8_eq_inst227_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst228(.in0(inst_alu), .in1(const_2_8_out), .out(magma_Bits_8_eq_inst228_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst229(.in0(inst_alu), .in1(const_6_8_out), .out(magma_Bits_8_eq_inst229_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst23(.in0(inst_alu), .in1(const_150_8_out), .out(magma_Bits_8_eq_inst23_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst230(.in0(inst_alu), .in1(const_0_8_out), .out(magma_Bits_8_eq_inst230_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst231(.in0(inst_alu), .in1(const_1_8_out), .out(magma_Bits_8_eq_inst231_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst232(.in0(inst_alu), .in1(const_2_8_out), .out(magma_Bits_8_eq_inst232_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst233(.in0(inst_alu), .in1(const_6_8_out), .out(magma_Bits_8_eq_inst233_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst234(.in0(inst_alu), .in1(const_0_8_out), .out(magma_Bits_8_eq_inst234_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst235(.in0(inst_alu), .in1(const_1_8_out), .out(magma_Bits_8_eq_inst235_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst236(.in0(inst_alu), .in1(const_2_8_out), .out(magma_Bits_8_eq_inst236_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst237(.in0(inst_alu), .in1(const_6_8_out), .out(magma_Bits_8_eq_inst237_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst238(.in0(inst_alu), .in1(const_0_8_out), .out(magma_Bits_8_eq_inst238_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst239(.in0(inst_alu), .in1(const_1_8_out), .out(magma_Bits_8_eq_inst239_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst24(.in0(inst_alu), .in1(const_150_8_out), .out(magma_Bits_8_eq_inst24_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst240(.in0(inst_alu), .in1(const_2_8_out), .out(magma_Bits_8_eq_inst240_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst241(.in0(inst_alu), .in1(const_6_8_out), .out(magma_Bits_8_eq_inst241_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst242(.in0(inst_alu), .in1(const_0_8_out), .out(magma_Bits_8_eq_inst242_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst243(.in0(inst_alu), .in1(const_1_8_out), .out(magma_Bits_8_eq_inst243_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst244(.in0(inst_alu), .in1(const_2_8_out), .out(magma_Bits_8_eq_inst244_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst245(.in0(inst_alu), .in1(const_6_8_out), .out(magma_Bits_8_eq_inst245_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst246(.in0({Mux2xOutUInt16_inst85_O[14],Mux2xOutUInt16_inst85_O[13],Mux2xOutUInt16_inst85_O[12],Mux2xOutUInt16_inst85_O[11],Mux2xOutUInt16_inst85_O[10],Mux2xOutUInt16_inst85_O[9],Mux2xOutUInt16_inst85_O[8],Mux2xOutUInt16_inst85_O[7]}), .in1(const_0_8_out), .out(magma_Bits_8_eq_inst246_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst247(.in0(inst_alu), .in1(const_23_8_out), .out(magma_Bits_8_eq_inst247_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst248(.in0(inst_alu), .in1(const_22_8_out), .out(magma_Bits_8_eq_inst248_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst249(.in0(inst_alu), .in1(const_25_8_out), .out(magma_Bits_8_eq_inst249_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst25(.in0(inst_alu), .in1(const_150_8_out), .out(magma_Bits_8_eq_inst25_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst250(.in0(inst_alu), .in1(const_24_8_out), .out(magma_Bits_8_eq_inst250_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst251(.in0(inst_alu), .in1(const_24_8_out), .out(magma_Bits_8_eq_inst251_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst26(.in0(inst_alu), .in1(const_150_8_out), .out(magma_Bits_8_eq_inst26_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst27(.in0(inst_alu), .in1(const_150_8_out), .out(magma_Bits_8_eq_inst27_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst28(.in0(inst_alu), .in1(const_150_8_out), .out(magma_Bits_8_eq_inst28_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst29(.in0(inst_alu), .in1(const_150_8_out), .out(magma_Bits_8_eq_inst29_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst3(.in0(inst_alu), .in1(const_149_8_out), .out(magma_Bits_8_eq_inst3_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst30(.in0(inst_alu), .in1(const_149_8_out), .out(magma_Bits_8_eq_inst30_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst31(.in0(inst_alu), .in1(const_149_8_out), .out(magma_Bits_8_eq_inst31_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst32(.in0(inst_alu), .in1(const_149_8_out), .out(magma_Bits_8_eq_inst32_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst33(.in0(inst_alu), .in1(const_149_8_out), .out(magma_Bits_8_eq_inst33_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst34(.in0(inst_alu), .in1(const_149_8_out), .out(magma_Bits_8_eq_inst34_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst35(.in0(inst_alu), .in1(const_149_8_out), .out(magma_Bits_8_eq_inst35_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst36(.in0(inst_alu), .in1(const_148_8_out), .out(magma_Bits_8_eq_inst36_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst37(.in0(inst_alu), .in1(const_148_8_out), .out(magma_Bits_8_eq_inst37_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst38(.in0(inst_alu), .in1(const_148_8_out), .out(magma_Bits_8_eq_inst38_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst39(.in0(inst_alu), .in1(const_148_8_out), .out(magma_Bits_8_eq_inst39_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst4(.in0(inst_alu), .in1(const_149_8_out), .out(magma_Bits_8_eq_inst4_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst40(.in0(inst_alu), .in1(const_148_8_out), .out(magma_Bits_8_eq_inst40_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst41(.in0(inst_alu), .in1(const_148_8_out), .out(magma_Bits_8_eq_inst41_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst42(.in0(inst_alu), .in1(const_148_8_out), .out(magma_Bits_8_eq_inst42_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst43(.in0(inst_alu), .in1(const_148_8_out), .out(magma_Bits_8_eq_inst43_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst44(.in0(inst_alu), .in1(const_147_8_out), .out(magma_Bits_8_eq_inst44_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst45(.in0(inst_alu), .in1(const_147_8_out), .out(magma_Bits_8_eq_inst45_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst46(.in0(inst_alu), .in1(const_147_8_out), .out(magma_Bits_8_eq_inst46_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst47(.in0(inst_alu), .in1(const_147_8_out), .out(magma_Bits_8_eq_inst47_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst48(.in0(inst_alu), .in1(const_147_8_out), .out(magma_Bits_8_eq_inst48_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst49(.in0(inst_alu), .in1(const_147_8_out), .out(magma_Bits_8_eq_inst49_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst5(.in0(inst_alu), .in1(const_149_8_out), .out(magma_Bits_8_eq_inst5_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst50(.in0(inst_alu), .in1(const_147_8_out), .out(magma_Bits_8_eq_inst50_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst51(.in0(inst_alu), .in1(const_147_8_out), .out(magma_Bits_8_eq_inst51_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst52(.in0(inst_alu), .in1(const_146_8_out), .out(magma_Bits_8_eq_inst52_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst53(.in0(inst_alu), .in1(const_146_8_out), .out(magma_Bits_8_eq_inst53_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst54(.in0(inst_alu), .in1(const_146_8_out), .out(magma_Bits_8_eq_inst54_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst55(.in0(inst_alu), .in1(const_146_8_out), .out(magma_Bits_8_eq_inst55_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst56(.in0(inst_alu), .in1(const_146_8_out), .out(magma_Bits_8_eq_inst56_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst57(.in0(inst_alu), .in1(const_146_8_out), .out(magma_Bits_8_eq_inst57_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst58(.in0(inst_alu), .in1(const_146_8_out), .out(magma_Bits_8_eq_inst58_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst59(.in0(inst_alu), .in1(const_25_8_out), .out(magma_Bits_8_eq_inst59_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst6(.in0(inst_alu), .in1(const_149_8_out), .out(magma_Bits_8_eq_inst6_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst60(.in0(inst_alu), .in1(const_25_8_out), .out(magma_Bits_8_eq_inst60_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst61(.in0(inst_alu), .in1(const_25_8_out), .out(magma_Bits_8_eq_inst61_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst62(.in0(inst_alu), .in1(const_25_8_out), .out(magma_Bits_8_eq_inst62_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst63(.in0(inst_alu), .in1(const_25_8_out), .out(magma_Bits_8_eq_inst63_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst64(.in0(inst_alu), .in1(const_25_8_out), .out(magma_Bits_8_eq_inst64_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst65(.in0(inst_alu), .in1(const_25_8_out), .out(magma_Bits_8_eq_inst65_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst66(.in0(inst_alu), .in1(const_25_8_out), .out(magma_Bits_8_eq_inst66_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst67(.in0(inst_alu), .in1(const_25_8_out), .out(magma_Bits_8_eq_inst67_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst68(.in0(inst_alu), .in1(const_22_8_out), .out(magma_Bits_8_eq_inst68_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst69(.in0(inst_alu), .in1(const_23_8_out), .out(magma_Bits_8_eq_inst69_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst7(.in0(inst_alu), .in1(const_152_8_out), .out(magma_Bits_8_eq_inst7_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst70(.in0(inst_alu), .in1(const_24_8_out), .out(magma_Bits_8_eq_inst70_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst71(.in0(inst_alu), .in1(const_22_8_out), .out(magma_Bits_8_eq_inst71_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst72(.in0(inst_alu), .in1(const_23_8_out), .out(magma_Bits_8_eq_inst72_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst73(.in0(inst_alu), .in1(const_24_8_out), .out(magma_Bits_8_eq_inst73_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst74(.in0(inst_alu), .in1(const_22_8_out), .out(magma_Bits_8_eq_inst74_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst75(.in0(inst_alu), .in1(const_23_8_out), .out(magma_Bits_8_eq_inst75_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst76(.in0(inst_alu), .in1(const_24_8_out), .out(magma_Bits_8_eq_inst76_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst77(.in0(inst_alu), .in1(const_22_8_out), .out(magma_Bits_8_eq_inst77_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst78(.in0(inst_alu), .in1(const_23_8_out), .out(magma_Bits_8_eq_inst78_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst79(.in0(inst_alu), .in1(const_24_8_out), .out(magma_Bits_8_eq_inst79_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst8(.in0(inst_alu), .in1(const_1_8_out), .out(magma_Bits_8_eq_inst8_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst80(.in0(inst_alu), .in1(const_22_8_out), .out(magma_Bits_8_eq_inst80_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst81(.in0(inst_alu), .in1(const_23_8_out), .out(magma_Bits_8_eq_inst81_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst82(.in0(inst_alu), .in1(const_24_8_out), .out(magma_Bits_8_eq_inst82_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst83(.in0(inst_alu), .in1(const_22_8_out), .out(magma_Bits_8_eq_inst83_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst84(.in0(inst_alu), .in1(const_23_8_out), .out(magma_Bits_8_eq_inst84_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst85(.in0(inst_alu), .in1(const_24_8_out), .out(magma_Bits_8_eq_inst85_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst86(.in0(inst_alu), .in1(const_22_8_out), .out(magma_Bits_8_eq_inst86_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst87(.in0(inst_alu), .in1(const_23_8_out), .out(magma_Bits_8_eq_inst87_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst88(.in0(inst_alu), .in1(const_24_8_out), .out(magma_Bits_8_eq_inst88_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst89(.in0(inst_alu), .in1(const_22_8_out), .out(magma_Bits_8_eq_inst89_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst9(.in0(inst_alu), .in1(const_6_8_out), .out(magma_Bits_8_eq_inst9_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst90(.in0(inst_alu), .in1(const_23_8_out), .out(magma_Bits_8_eq_inst90_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst91(.in0(inst_alu), .in1(const_24_8_out), .out(magma_Bits_8_eq_inst91_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst92(.in0(inst_alu), .in1(const_22_8_out), .out(magma_Bits_8_eq_inst92_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst93(.in0(inst_alu), .in1(const_23_8_out), .out(magma_Bits_8_eq_inst93_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst94(.in0(inst_alu), .in1(const_24_8_out), .out(magma_Bits_8_eq_inst94_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst95(.in0(inst_alu), .in1(const_17_8_out), .out(magma_Bits_8_eq_inst95_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst96(.in0(inst_alu), .in1(const_17_8_out), .out(magma_Bits_8_eq_inst96_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst97(.in0(inst_alu), .in1(const_17_8_out), .out(magma_Bits_8_eq_inst97_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst98(.in0(inst_alu), .in1(const_17_8_out), .out(magma_Bits_8_eq_inst98_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst99(.in0(inst_alu), .in1(const_17_8_out), .out(magma_Bits_8_eq_inst99_out));
coreir_sub #(.width(8)) magma_Bits_8_sub_inst0(.in0({Mux2xOutUInt16_inst0_O[14],Mux2xOutUInt16_inst0_O[13],Mux2xOutUInt16_inst0_O[12],Mux2xOutUInt16_inst0_O[11],Mux2xOutUInt16_inst0_O[10],Mux2xOutUInt16_inst0_O[9],Mux2xOutUInt16_inst0_O[8],Mux2xOutUInt16_inst0_O[7]}), .in1({Mux2xOutUInt16_inst9_O[14],Mux2xOutUInt16_inst9_O[13],Mux2xOutUInt16_inst9_O[12],Mux2xOutUInt16_inst9_O[11],Mux2xOutUInt16_inst9_O[10],Mux2xOutUInt16_inst9_O[9],Mux2xOutUInt16_inst9_O[8],Mux2xOutUInt16_inst9_O[7]}), .out(magma_Bits_8_sub_inst0_out));
coreir_ugt #(.width(8)) magma_Bits_8_ugt_inst0(.in0({Mux2xOutUInt16_inst0_O[14],Mux2xOutUInt16_inst0_O[13],Mux2xOutUInt16_inst0_O[12],Mux2xOutUInt16_inst0_O[11],Mux2xOutUInt16_inst0_O[10],Mux2xOutUInt16_inst0_O[9],Mux2xOutUInt16_inst0_O[8],Mux2xOutUInt16_inst0_O[7]}), .in1(const_142_8_out), .out(magma_Bits_8_ugt_inst0_out));
coreir_add #(.width(9)) magma_Bits_9_add_inst0(.in0({bit_const_0_None_out,Mux2xOutUInt16_inst0_O[14],Mux2xOutUInt16_inst0_O[13],Mux2xOutUInt16_inst0_O[12],Mux2xOutUInt16_inst0_O[11],Mux2xOutUInt16_inst0_O[10],Mux2xOutUInt16_inst0_O[9],Mux2xOutUInt16_inst0_O[8],Mux2xOutUInt16_inst0_O[7]}), .in1({Mux2xOutUInt16_inst9_O[8],Mux2xOutUInt16_inst9_O[7],Mux2xOutUInt16_inst9_O[6],Mux2xOutUInt16_inst9_O[5],Mux2xOutUInt16_inst9_O[4],Mux2xOutUInt16_inst9_O[3],Mux2xOutUInt16_inst9_O[2],Mux2xOutUInt16_inst9_O[1],Mux2xOutUInt16_inst9_O[0]}), .out(magma_Bits_9_add_inst0_out));
coreir_neg #(.width(9)) magma_Bits_9_neg_inst0(.in(magma_Bits_9_sub_inst0_out), .out(magma_Bits_9_neg_inst0_out));
coreir_neg #(.width(9)) magma_Bits_9_neg_inst1(.in(magma_Bits_9_sub_inst2_out), .out(magma_Bits_9_neg_inst1_out));
coreir_slt #(.width(9)) magma_Bits_9_slt_inst0(.in0(magma_Bits_9_sub_inst0_out), .in1(const_0_9_out), .out(magma_Bits_9_slt_inst0_out));
coreir_slt #(.width(9)) magma_Bits_9_slt_inst1(.in0(magma_Bits_9_sub_inst0_out), .in1(const_0_9_out), .out(magma_Bits_9_slt_inst1_out));
coreir_slt #(.width(9)) magma_Bits_9_slt_inst2(.in0(magma_Bits_9_sub_inst1_out), .in1(const_0_9_out), .out(magma_Bits_9_slt_inst2_out));
coreir_slt #(.width(9)) magma_Bits_9_slt_inst3(.in0(magma_Bits_9_sub_inst2_out), .in1(const_0_9_out), .out(magma_Bits_9_slt_inst3_out));
coreir_sub #(.width(9)) magma_Bits_9_sub_inst0(.in0({bit_const_0_None_out,Mux2xOutUInt16_inst0_O[14],Mux2xOutUInt16_inst0_O[13],Mux2xOutUInt16_inst0_O[12],Mux2xOutUInt16_inst0_O[11],Mux2xOutUInt16_inst0_O[10],Mux2xOutUInt16_inst0_O[9],Mux2xOutUInt16_inst0_O[8],Mux2xOutUInt16_inst0_O[7]}), .in1(const_127_9_out), .out(magma_Bits_9_sub_inst0_out));
coreir_sub #(.width(9)) magma_Bits_9_sub_inst1(.in0({bit_const_0_None_out,Mux2xOutUInt16_inst0_O[14],Mux2xOutUInt16_inst0_O[13],Mux2xOutUInt16_inst0_O[12],Mux2xOutUInt16_inst0_O[11],Mux2xOutUInt16_inst0_O[10],Mux2xOutUInt16_inst0_O[9],Mux2xOutUInt16_inst0_O[8],Mux2xOutUInt16_inst0_O[7]}), .in1(const_127_9_out), .out(magma_Bits_9_sub_inst1_out));
coreir_sub #(.width(9)) magma_Bits_9_sub_inst2(.in0({bit_const_0_None_out,Mux2xOutUInt16_inst0_O[14],Mux2xOutUInt16_inst0_O[13],Mux2xOutUInt16_inst0_O[12],Mux2xOutUInt16_inst0_O[11],Mux2xOutUInt16_inst0_O[10],Mux2xOutUInt16_inst0_O[9],Mux2xOutUInt16_inst0_O[8],Mux2xOutUInt16_inst0_O[7]}), .in1(const_127_9_out), .out(magma_Bits_9_sub_inst2_out));
coreir_ugt #(.width(9)) magma_Bits_9_ugt_inst0(.in0(magma_Bits_9_add_inst0_out), .in1(const_255_9_out), .out(magma_Bits_9_ugt_inst0_out));
overflow overflow_inst0(.O(overflow_inst0_O), .a(Mux2xOutUInt16_inst0_O), .b(Mux2xOutUInt16_inst9_O), .res({magma_Bits_17_add_inst1_out[15],magma_Bits_17_add_inst1_out[14],magma_Bits_17_add_inst1_out[13],magma_Bits_17_add_inst1_out[12],magma_Bits_17_add_inst1_out[11],magma_Bits_17_add_inst1_out[10],magma_Bits_17_add_inst1_out[9],magma_Bits_17_add_inst1_out[8],magma_Bits_17_add_inst1_out[7],magma_Bits_17_add_inst1_out[6],magma_Bits_17_add_inst1_out[5],magma_Bits_17_add_inst1_out[4],magma_Bits_17_add_inst1_out[3],magma_Bits_17_add_inst1_out[2],magma_Bits_17_add_inst1_out[1],magma_Bits_17_add_inst1_out[0]}));
assign O0 = Mux2xOutUInt16_inst85_O;
assign O1 = Mux2xOutBit_inst49_O;
assign O2 = Mux2xOutBit_inst52_O;
assign O3 = Mux2xOutUInt16_inst85_O[15];
assign O4 = Mux2xOutBit_inst47_O;
assign O5 = Mux2xOutBit_inst48_O;
endmodule

module PE_comb (output [1:0] O0, output [15:0] O1, output O10, output [15:0] O11, output [1:0] O12, output O13, output O14, output O15, output O16, output O17, output [1:0] O18, output O19, output [15:0] O2, output O20, output O21, output O22, output O23, output [1:0] O24, output O25, output O26, output O27, output O28, output O29, output O3, output [15:0] O30, output O31, output [31:0] O32, output O4, output [15:0] O5, output [1:0] O6, output [15:0] O7, output [15:0] O8, output O9, input bit0, input bit1, input bit2, input clk_en, input [7:0] config_addr, input [31:0] config_data, input config_en, input [15:0] data0, input [15:0] data1, input [7:0] inst_alu, input inst_bit0, input inst_bit1, input inst_bit2, input [4:0] inst_cond, input [15:0] inst_data0, input [15:0] inst_data1, input [7:0] inst_lut, input [1:0] inst_rega, input [1:0] inst_regb, input [1:0] inst_regd, input [1:0] inst_rege, input [1:0] inst_regf, input [0:0] inst_signed_, input [15:0] self_rega_O0, input [15:0] self_rega_O1, input [15:0] self_regb_O0, input [15:0] self_regb_O1, input self_regd_O0, input self_regd_O1, input self_rege_O0, input self_rege_O1, input self_regf_O0, input self_regf_O1);
wire _lut_inst0_O;
wire [15:0] alu_inst0_O0;
wire alu_inst0_O1;
wire alu_inst0_O2;
wire alu_inst0_O3;
wire alu_inst0_O4;
wire alu_inst0_O5;
wire bit_const_0_None_out;
wire cond_inst0_O;
wire [2:0] const_3_3_out;
wire [2:0] const_4_3_out;
wire magma_Bit_and_inst0_out;
wire magma_Bit_and_inst1_out;
wire [31:0] magma_Bit_ite_Out_ConfigBits_32_inst0_out;
wire magma_Bits_3_eq_inst0_out;
wire magma_Bits_3_eq_inst1_out;
_lut _lut_inst0(.O(_lut_inst0_O), .bit0(self_regd_O0), .bit1(self_rege_O0), .bit2(self_regf_O0), .lut(inst_lut));
alu alu_inst0(.O0(alu_inst0_O0), .O1(alu_inst0_O1), .O2(alu_inst0_O2), .O3(alu_inst0_O3), .O4(alu_inst0_O4), .O5(alu_inst0_O5), .a(self_rega_O0), .b(self_regb_O0), .d(self_regd_O0), .inst_alu(inst_alu), .inst_bit0(inst_bit0), .inst_bit1(inst_bit1), .inst_bit2(inst_bit2), .inst_cond(inst_cond), .inst_data0(inst_data0), .inst_data1(inst_data1), .inst_lut(inst_lut), .inst_rega(inst_rega), .inst_regb(inst_regb), .inst_regd(inst_regd), .inst_rege(inst_rege), .inst_regf(inst_regf), .inst_signed_(inst_signed_));
corebit_const #(.value(1'b0)) bit_const_0_None(.out(bit_const_0_None_out));
cond cond_inst0(.C(alu_inst0_O4), .N(alu_inst0_O3), .O(cond_inst0_O), .V(alu_inst0_O5), .Z(alu_inst0_O2), .alu(alu_inst0_O1), .code(inst_cond), .lut(_lut_inst0_O));
coreir_const #(.value(3'h3), .width(3)) const_3_3(.out(const_3_3_out));
coreir_const #(.value(3'h4), .width(3)) const_4_3(.out(const_4_3_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_3_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
corebit_and magma_Bit_and_inst1(.in0(magma_Bits_3_eq_inst1_out), .in1(config_en), .out(magma_Bit_and_inst1_out));
coreir_mux #(.width(32)) magma_Bit_ite_Out_ConfigBits_32_inst0(.in0({self_regb_O1[15],self_regb_O1[14],self_regb_O1[13],self_regb_O1[12],self_regb_O1[11],self_regb_O1[10],self_regb_O1[9],self_regb_O1[8],self_regb_O1[7],self_regb_O1[6],self_regb_O1[5],self_regb_O1[4],self_regb_O1[3],self_regb_O1[2],self_regb_O1[1],self_regb_O1[0],self_rega_O1[15],self_rega_O1[14],self_rega_O1[13],self_rega_O1[12],self_rega_O1[11],self_rega_O1[10],self_rega_O1[9],self_rega_O1[8],self_rega_O1[7],self_rega_O1[6],self_rega_O1[5],self_rega_O1[4],self_rega_O1[3],self_rega_O1[2],self_rega_O1[1],self_rega_O1[0]}), .in1({bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,self_regf_O1,self_rege_O1,self_regd_O1}), .out(magma_Bit_ite_Out_ConfigBits_32_inst0_out), .sel(magma_Bits_3_eq_inst1_out));
coreir_eq #(.width(3)) magma_Bits_3_eq_inst0(.in0({config_addr[2],config_addr[1],config_addr[0]}), .in1(const_3_3_out), .out(magma_Bits_3_eq_inst0_out));
coreir_eq #(.width(3)) magma_Bits_3_eq_inst1(.in0({config_addr[2],config_addr[1],config_addr[0]}), .in1(const_4_3_out), .out(magma_Bits_3_eq_inst1_out));
assign O0 = inst_rega;
assign O1 = inst_data0;
assign O10 = magma_Bit_and_inst0_out;
assign O11 = {config_data[31],config_data[30],config_data[29],config_data[28],config_data[27],config_data[26],config_data[25],config_data[24],config_data[23],config_data[22],config_data[21],config_data[20],config_data[19],config_data[18],config_data[17],config_data[16]};
assign O12 = inst_regd;
assign O13 = inst_bit0;
assign O14 = bit0;
assign O15 = clk_en;
assign O16 = magma_Bit_and_inst1_out;
assign O17 = config_data[0];
assign O18 = inst_rege;
assign O19 = inst_bit1;
assign O2 = data0;
assign O20 = bit1;
assign O21 = clk_en;
assign O22 = magma_Bit_and_inst1_out;
assign O23 = config_data[1];
assign O24 = inst_regf;
assign O25 = inst_bit2;
assign O26 = bit2;
assign O27 = clk_en;
assign O28 = magma_Bit_and_inst1_out;
assign O29 = config_data[2];
assign O3 = clk_en;
assign O30 = alu_inst0_O0;
assign O31 = cond_inst0_O;
assign O32 = magma_Bit_ite_Out_ConfigBits_32_inst0_out;
assign O4 = magma_Bit_and_inst0_out;
assign O5 = {config_data[15],config_data[14],config_data[13],config_data[12],config_data[11],config_data[10],config_data[9],config_data[8],config_data[7],config_data[6],config_data[5],config_data[4],config_data[3],config_data[2],config_data[1],config_data[0]};
assign O6 = inst_regb;
assign O7 = inst_data1;
assign O8 = data1;
assign O9 = clk_en;
endmodule

module Register_comb_unq1 (output O0, output O1, input en, input self_value_O, input value);
wire Mux2xOutBit_inst0_O;
Mux2xOutBit Mux2xOutBit_inst0(.I0(self_value_O), .I1(value), .O(Mux2xOutBit_inst0_O), .S(en));
assign O0 = Mux2xOutBit_inst0_O;
assign O1 = self_value_O;
endmodule

module RegisterMode_comb_unq1 (output O0, output O1, output O2, output O3, input clk_en, input config_data, input config_we, input const_, input [1:0] mode, input self_register_O, input value);
wire Mux2xOutBit_inst0_O;
wire Mux2xOutBit_inst1_O;
wire Mux2xOutBit_inst10_O;
wire Mux2xOutBit_inst11_O;
wire Mux2xOutBit_inst12_O;
wire Mux2xOutBit_inst13_O;
wire Mux2xOutBit_inst2_O;
wire Mux2xOutBit_inst3_O;
wire Mux2xOutBit_inst4_O;
wire Mux2xOutBit_inst5_O;
wire Mux2xOutBit_inst6_O;
wire Mux2xOutBit_inst7_O;
wire Mux2xOutBit_inst8_O;
wire Mux2xOutBit_inst9_O;
wire bit_const_0_None_out;
wire bit_const_1_None_out;
wire [1:0] const_0_2_out;
wire [1:0] const_2_2_out;
wire [1:0] const_3_2_out;
wire magma_Bit_not_inst0_out;
wire magma_Bit_not_inst1_out;
wire magma_Bit_not_inst2_out;
wire magma_Bit_xor_inst0_out;
wire magma_Bit_xor_inst1_out;
wire magma_Bit_xor_inst2_out;
wire magma_Bits_2_eq_inst0_out;
wire magma_Bits_2_eq_inst1_out;
wire magma_Bits_2_eq_inst10_out;
wire magma_Bits_2_eq_inst2_out;
wire magma_Bits_2_eq_inst3_out;
wire magma_Bits_2_eq_inst4_out;
wire magma_Bits_2_eq_inst5_out;
wire magma_Bits_2_eq_inst6_out;
wire magma_Bits_2_eq_inst7_out;
wire magma_Bits_2_eq_inst8_out;
wire magma_Bits_2_eq_inst9_out;
Mux2xOutBit Mux2xOutBit_inst0(.I0(value), .I1(value), .O(Mux2xOutBit_inst0_O), .S(magma_Bits_2_eq_inst0_out));
Mux2xOutBit Mux2xOutBit_inst1(.I0(bit_const_0_None_out), .I1(clk_en), .O(Mux2xOutBit_inst1_O), .S(magma_Bits_2_eq_inst1_out));
Mux2xOutBit Mux2xOutBit_inst10(.I0(Mux2xOutBit_inst6_O), .I1(Mux2xOutBit_inst3_O), .O(Mux2xOutBit_inst10_O), .S(magma_Bits_2_eq_inst7_out));
Mux2xOutBit Mux2xOutBit_inst11(.I0(Mux2xOutBit_inst7_O), .I1(Mux2xOutBit_inst4_O), .O(Mux2xOutBit_inst11_O), .S(magma_Bits_2_eq_inst8_out));
Mux2xOutBit Mux2xOutBit_inst12(.I0(Mux2xOutBit_inst8_O), .I1(const_), .O(Mux2xOutBit_inst12_O), .S(magma_Bits_2_eq_inst9_out));
Mux2xOutBit Mux2xOutBit_inst13(.I0(Mux2xOutBit_inst9_O), .I1(Mux2xOutBit_inst5_O), .O(Mux2xOutBit_inst13_O), .S(magma_Bits_2_eq_inst10_out));
Mux2xOutBit Mux2xOutBit_inst2(.I0(self_register_O), .I1(self_register_O), .O(Mux2xOutBit_inst2_O), .S(magma_Bits_2_eq_inst2_out));
Mux2xOutBit Mux2xOutBit_inst3(.I0(Mux2xOutBit_inst0_O), .I1(config_data), .O(Mux2xOutBit_inst3_O), .S(magma_Bit_not_inst0_out));
Mux2xOutBit Mux2xOutBit_inst4(.I0(Mux2xOutBit_inst1_O), .I1(bit_const_1_None_out), .O(Mux2xOutBit_inst4_O), .S(magma_Bit_not_inst1_out));
Mux2xOutBit Mux2xOutBit_inst5(.I0(Mux2xOutBit_inst2_O), .I1(self_register_O), .O(Mux2xOutBit_inst5_O), .S(magma_Bit_not_inst2_out));
Mux2xOutBit Mux2xOutBit_inst6(.I0(Mux2xOutBit_inst3_O), .I1(Mux2xOutBit_inst3_O), .O(Mux2xOutBit_inst6_O), .S(magma_Bits_2_eq_inst3_out));
Mux2xOutBit Mux2xOutBit_inst7(.I0(Mux2xOutBit_inst4_O), .I1(Mux2xOutBit_inst4_O), .O(Mux2xOutBit_inst7_O), .S(magma_Bits_2_eq_inst4_out));
Mux2xOutBit Mux2xOutBit_inst8(.I0(Mux2xOutBit_inst5_O), .I1(value), .O(Mux2xOutBit_inst8_O), .S(magma_Bits_2_eq_inst5_out));
Mux2xOutBit Mux2xOutBit_inst9(.I0(Mux2xOutBit_inst5_O), .I1(Mux2xOutBit_inst5_O), .O(Mux2xOutBit_inst9_O), .S(magma_Bits_2_eq_inst6_out));
corebit_const #(.value(1'b0)) bit_const_0_None(.out(bit_const_0_None_out));
corebit_const #(.value(1'b1)) bit_const_1_None(.out(bit_const_1_None_out));
coreir_const #(.value(2'h0), .width(2)) const_0_2(.out(const_0_2_out));
coreir_const #(.value(2'h2), .width(2)) const_2_2(.out(const_2_2_out));
coreir_const #(.value(2'h3), .width(2)) const_3_2(.out(const_3_2_out));
corebit_not magma_Bit_not_inst0(.in(magma_Bit_xor_inst0_out), .out(magma_Bit_not_inst0_out));
corebit_not magma_Bit_not_inst1(.in(magma_Bit_xor_inst1_out), .out(magma_Bit_not_inst1_out));
corebit_not magma_Bit_not_inst2(.in(magma_Bit_xor_inst2_out), .out(magma_Bit_not_inst2_out));
corebit_xor magma_Bit_xor_inst0(.in0(config_we), .in1(bit_const_1_None_out), .out(magma_Bit_xor_inst0_out));
corebit_xor magma_Bit_xor_inst1(.in0(config_we), .in1(bit_const_1_None_out), .out(magma_Bit_xor_inst1_out));
corebit_xor magma_Bit_xor_inst2(.in0(config_we), .in1(bit_const_1_None_out), .out(magma_Bit_xor_inst2_out));
coreir_eq #(.width(2)) magma_Bits_2_eq_inst0(.in0(mode), .in1(const_3_2_out), .out(magma_Bits_2_eq_inst0_out));
coreir_eq #(.width(2)) magma_Bits_2_eq_inst1(.in0(mode), .in1(const_3_2_out), .out(magma_Bits_2_eq_inst1_out));
coreir_eq #(.width(2)) magma_Bits_2_eq_inst10(.in0(mode), .in1(const_0_2_out), .out(magma_Bits_2_eq_inst10_out));
coreir_eq #(.width(2)) magma_Bits_2_eq_inst2(.in0(mode), .in1(const_3_2_out), .out(magma_Bits_2_eq_inst2_out));
coreir_eq #(.width(2)) magma_Bits_2_eq_inst3(.in0(mode), .in1(const_2_2_out), .out(magma_Bits_2_eq_inst3_out));
coreir_eq #(.width(2)) magma_Bits_2_eq_inst4(.in0(mode), .in1(const_2_2_out), .out(magma_Bits_2_eq_inst4_out));
coreir_eq #(.width(2)) magma_Bits_2_eq_inst5(.in0(mode), .in1(const_2_2_out), .out(magma_Bits_2_eq_inst5_out));
coreir_eq #(.width(2)) magma_Bits_2_eq_inst6(.in0(mode), .in1(const_2_2_out), .out(magma_Bits_2_eq_inst6_out));
coreir_eq #(.width(2)) magma_Bits_2_eq_inst7(.in0(mode), .in1(const_0_2_out), .out(magma_Bits_2_eq_inst7_out));
coreir_eq #(.width(2)) magma_Bits_2_eq_inst8(.in0(mode), .in1(const_0_2_out), .out(magma_Bits_2_eq_inst8_out));
coreir_eq #(.width(2)) magma_Bits_2_eq_inst9(.in0(mode), .in1(const_0_2_out), .out(magma_Bits_2_eq_inst9_out));
assign O0 = Mux2xOutBit_inst10_O;
assign O1 = Mux2xOutBit_inst11_O;
assign O2 = Mux2xOutBit_inst12_O;
assign O3 = Mux2xOutBit_inst13_O;
endmodule

module RegisterMode_comb (output [15:0] O0, output O1, output [15:0] O2, output [15:0] O3, input clk_en, input [15:0] config_data, input config_we, input [15:0] const_, input [1:0] mode, input [15:0] self_register_O, input [15:0] value);
wire Mux2xOutBit_inst0_O;
wire Mux2xOutBit_inst1_O;
wire Mux2xOutBit_inst2_O;
wire Mux2xOutBit_inst3_O;
wire [15:0] Mux2xOutBits16_inst0_O;
wire [15:0] Mux2xOutBits16_inst1_O;
wire [15:0] Mux2xOutBits16_inst2_O;
wire [15:0] Mux2xOutBits16_inst3_O;
wire [15:0] Mux2xOutBits16_inst4_O;
wire [15:0] Mux2xOutBits16_inst5_O;
wire [15:0] Mux2xOutBits16_inst6_O;
wire [15:0] Mux2xOutBits16_inst7_O;
wire [15:0] Mux2xOutBits16_inst8_O;
wire [15:0] Mux2xOutBits16_inst9_O;
wire bit_const_0_None_out;
wire bit_const_1_None_out;
wire [1:0] const_0_2_out;
wire [1:0] const_2_2_out;
wire [1:0] const_3_2_out;
wire magma_Bit_not_inst0_out;
wire magma_Bit_not_inst1_out;
wire magma_Bit_not_inst2_out;
wire magma_Bit_xor_inst0_out;
wire magma_Bit_xor_inst1_out;
wire magma_Bit_xor_inst2_out;
wire magma_Bits_2_eq_inst0_out;
wire magma_Bits_2_eq_inst1_out;
wire magma_Bits_2_eq_inst10_out;
wire magma_Bits_2_eq_inst2_out;
wire magma_Bits_2_eq_inst3_out;
wire magma_Bits_2_eq_inst4_out;
wire magma_Bits_2_eq_inst5_out;
wire magma_Bits_2_eq_inst6_out;
wire magma_Bits_2_eq_inst7_out;
wire magma_Bits_2_eq_inst8_out;
wire magma_Bits_2_eq_inst9_out;
Mux2xOutBit Mux2xOutBit_inst0(.I0(bit_const_0_None_out), .I1(clk_en), .O(Mux2xOutBit_inst0_O), .S(magma_Bits_2_eq_inst1_out));
Mux2xOutBit Mux2xOutBit_inst1(.I0(Mux2xOutBit_inst0_O), .I1(bit_const_1_None_out), .O(Mux2xOutBit_inst1_O), .S(magma_Bit_not_inst1_out));
Mux2xOutBit Mux2xOutBit_inst2(.I0(Mux2xOutBit_inst1_O), .I1(Mux2xOutBit_inst1_O), .O(Mux2xOutBit_inst2_O), .S(magma_Bits_2_eq_inst4_out));
Mux2xOutBit Mux2xOutBit_inst3(.I0(Mux2xOutBit_inst2_O), .I1(Mux2xOutBit_inst1_O), .O(Mux2xOutBit_inst3_O), .S(magma_Bits_2_eq_inst8_out));
Mux2xOutBits16 Mux2xOutBits16_inst0(.I0(value), .I1(value), .O(Mux2xOutBits16_inst0_O), .S(magma_Bits_2_eq_inst0_out));
Mux2xOutBits16 Mux2xOutBits16_inst1(.I0(self_register_O), .I1(self_register_O), .O(Mux2xOutBits16_inst1_O), .S(magma_Bits_2_eq_inst2_out));
Mux2xOutBits16 Mux2xOutBits16_inst2(.I0(Mux2xOutBits16_inst0_O), .I1(config_data), .O(Mux2xOutBits16_inst2_O), .S(magma_Bit_not_inst0_out));
Mux2xOutBits16 Mux2xOutBits16_inst3(.I0(Mux2xOutBits16_inst1_O), .I1(self_register_O), .O(Mux2xOutBits16_inst3_O), .S(magma_Bit_not_inst2_out));
Mux2xOutBits16 Mux2xOutBits16_inst4(.I0(Mux2xOutBits16_inst2_O), .I1(Mux2xOutBits16_inst2_O), .O(Mux2xOutBits16_inst4_O), .S(magma_Bits_2_eq_inst3_out));
Mux2xOutBits16 Mux2xOutBits16_inst5(.I0(Mux2xOutBits16_inst3_O), .I1(value), .O(Mux2xOutBits16_inst5_O), .S(magma_Bits_2_eq_inst5_out));
Mux2xOutBits16 Mux2xOutBits16_inst6(.I0(Mux2xOutBits16_inst3_O), .I1(Mux2xOutBits16_inst3_O), .O(Mux2xOutBits16_inst6_O), .S(magma_Bits_2_eq_inst6_out));
Mux2xOutBits16 Mux2xOutBits16_inst7(.I0(Mux2xOutBits16_inst4_O), .I1(Mux2xOutBits16_inst2_O), .O(Mux2xOutBits16_inst7_O), .S(magma_Bits_2_eq_inst7_out));
Mux2xOutBits16 Mux2xOutBits16_inst8(.I0(Mux2xOutBits16_inst5_O), .I1(const_), .O(Mux2xOutBits16_inst8_O), .S(magma_Bits_2_eq_inst9_out));
Mux2xOutBits16 Mux2xOutBits16_inst9(.I0(Mux2xOutBits16_inst6_O), .I1(Mux2xOutBits16_inst3_O), .O(Mux2xOutBits16_inst9_O), .S(magma_Bits_2_eq_inst10_out));
corebit_const #(.value(1'b0)) bit_const_0_None(.out(bit_const_0_None_out));
corebit_const #(.value(1'b1)) bit_const_1_None(.out(bit_const_1_None_out));
coreir_const #(.value(2'h0), .width(2)) const_0_2(.out(const_0_2_out));
coreir_const #(.value(2'h2), .width(2)) const_2_2(.out(const_2_2_out));
coreir_const #(.value(2'h3), .width(2)) const_3_2(.out(const_3_2_out));
corebit_not magma_Bit_not_inst0(.in(magma_Bit_xor_inst0_out), .out(magma_Bit_not_inst0_out));
corebit_not magma_Bit_not_inst1(.in(magma_Bit_xor_inst1_out), .out(magma_Bit_not_inst1_out));
corebit_not magma_Bit_not_inst2(.in(magma_Bit_xor_inst2_out), .out(magma_Bit_not_inst2_out));
corebit_xor magma_Bit_xor_inst0(.in0(config_we), .in1(bit_const_1_None_out), .out(magma_Bit_xor_inst0_out));
corebit_xor magma_Bit_xor_inst1(.in0(config_we), .in1(bit_const_1_None_out), .out(magma_Bit_xor_inst1_out));
corebit_xor magma_Bit_xor_inst2(.in0(config_we), .in1(bit_const_1_None_out), .out(magma_Bit_xor_inst2_out));
coreir_eq #(.width(2)) magma_Bits_2_eq_inst0(.in0(mode), .in1(const_3_2_out), .out(magma_Bits_2_eq_inst0_out));
coreir_eq #(.width(2)) magma_Bits_2_eq_inst1(.in0(mode), .in1(const_3_2_out), .out(magma_Bits_2_eq_inst1_out));
coreir_eq #(.width(2)) magma_Bits_2_eq_inst10(.in0(mode), .in1(const_0_2_out), .out(magma_Bits_2_eq_inst10_out));
coreir_eq #(.width(2)) magma_Bits_2_eq_inst2(.in0(mode), .in1(const_3_2_out), .out(magma_Bits_2_eq_inst2_out));
coreir_eq #(.width(2)) magma_Bits_2_eq_inst3(.in0(mode), .in1(const_2_2_out), .out(magma_Bits_2_eq_inst3_out));
coreir_eq #(.width(2)) magma_Bits_2_eq_inst4(.in0(mode), .in1(const_2_2_out), .out(magma_Bits_2_eq_inst4_out));
coreir_eq #(.width(2)) magma_Bits_2_eq_inst5(.in0(mode), .in1(const_2_2_out), .out(magma_Bits_2_eq_inst5_out));
coreir_eq #(.width(2)) magma_Bits_2_eq_inst6(.in0(mode), .in1(const_2_2_out), .out(magma_Bits_2_eq_inst6_out));
coreir_eq #(.width(2)) magma_Bits_2_eq_inst7(.in0(mode), .in1(const_0_2_out), .out(magma_Bits_2_eq_inst7_out));
coreir_eq #(.width(2)) magma_Bits_2_eq_inst8(.in0(mode), .in1(const_0_2_out), .out(magma_Bits_2_eq_inst8_out));
coreir_eq #(.width(2)) magma_Bits_2_eq_inst9(.in0(mode), .in1(const_0_2_out), .out(magma_Bits_2_eq_inst9_out));
assign O0 = Mux2xOutBits16_inst7_O;
assign O1 = Mux2xOutBit_inst3_O;
assign O2 = Mux2xOutBits16_inst8_O;
assign O3 = Mux2xOutBits16_inst9_O;
endmodule

module RegisterMode (input ASYNCRESET, input CLK, output [15:0] O0, output [15:0] O1, input clk_en, input [15:0] config_data, input config_we, input [15:0] const_, input [1:0] mode, input [15:0] value);
wire [15:0] RegisterMode_comb_inst0_O0;
wire RegisterMode_comb_inst0_O1;
wire [15:0] RegisterMode_comb_inst0_O2;
wire [15:0] RegisterMode_comb_inst0_O3;
wire [15:0] Register_inst0_O;
RegisterMode_comb RegisterMode_comb_inst0(.O0(RegisterMode_comb_inst0_O0), .O1(RegisterMode_comb_inst0_O1), .O2(RegisterMode_comb_inst0_O2), .O3(RegisterMode_comb_inst0_O3), .clk_en(clk_en), .config_data(config_data), .config_we(config_we), .const_(const_), .mode(mode), .self_register_O(Register_inst0_O), .value(value));
Register Register_inst0(.ASYNCRESET(ASYNCRESET), .CLK(CLK), .O(Register_inst0_O), .en(RegisterMode_comb_inst0_O1), .value(RegisterMode_comb_inst0_O0));
assign O0 = RegisterMode_comb_inst0_O2;
assign O1 = RegisterMode_comb_inst0_O3;
endmodule

module Mux2x32 (input [31:0] I0, input [31:0] I1, output [31:0] O, input S);
wire [31:0] coreir_commonlib_mux2x32_inst0_out;
commonlib_muxn__N2__width32 coreir_commonlib_mux2x32_inst0(.in_data_0(I0), .in_data_1(I1), .in_sel(S), .out(coreir_commonlib_mux2x32_inst0_out));
assign O = coreir_commonlib_mux2x32_inst0_out;
endmodule

module MuxWrapper_2_32 (input [31:0] I_0, input [31:0] I_1, output [31:0] O, input [0:0] S);
wire [31:0] Mux2x32_inst0_O;
Mux2x32 Mux2x32_inst0(.I0(I_0), .I1(I_1), .O(Mux2x32_inst0_O), .S(S[0]));
assign O = Mux2x32_inst0_O;
endmodule

module MuxWithDefaultWrapper_8_32_8_0 (input [0:0] EN, input [31:0] I_0, input [31:0] I_1, input [31:0] I_2, input [31:0] I_3, input [31:0] I_4, input [31:0] I_5, input [31:0] I_6, input [31:0] I_7, output [31:0] O, input [7:0] S);
wire [31:0] MuxWrapper_2_32_inst0_O;
wire [31:0] MuxWrapper_8_32_inst0_O;
wire and_inst0_out;
wire [31:0] const_0_32_out;
wire [7:0] const_8_8_out;
wire coreir_ult8_inst0_out;
MuxWrapper_2_32 MuxWrapper_2_32_inst0(.I_0(const_0_32_out), .I_1(MuxWrapper_8_32_inst0_O), .O(MuxWrapper_2_32_inst0_O), .S(and_inst0_out));
MuxWrapper_8_32 MuxWrapper_8_32_inst0(.I_0(I_0), .I_1(I_1), .I_2(I_2), .I_3(I_3), .I_4(I_4), .I_5(I_5), .I_6(I_6), .I_7(I_7), .O(MuxWrapper_8_32_inst0_O), .S({S[2],S[1],S[0]}));
corebit_and and_inst0(.in0(coreir_ult8_inst0_out), .in1(EN[0]), .out(and_inst0_out));
coreir_const #(.value('h00000000), .width(32)) const_0_32(.out(const_0_32_out));
coreir_const #(.value(8'h08), .width(8)) const_8_8(.out(const_8_8_out));
coreir_ult #(.width(8)) coreir_ult8_inst0(.in0(S), .in1(const_8_8_out), .out(coreir_ult8_inst0_out));
assign O = MuxWrapper_2_32_inst0_O;
endmodule

module Mux2x16 (input [15:0] I0, input [15:0] I1, output [15:0] O, input S);
wire [15:0] coreir_commonlib_mux2x16_inst0_out;
commonlib_muxn__N2__width16 coreir_commonlib_mux2x16_inst0(.in_data_0(I0), .in_data_1(I1), .in_sel(S), .out(coreir_commonlib_mux2x16_inst0_out));
assign O = coreir_commonlib_mux2x16_inst0_out;
endmodule

module MuxWrapper_2_16 (input [15:0] I_0, input [15:0] I_1, output [15:0] O, input [0:0] S);
wire [15:0] Mux2x16_inst0_O;
Mux2x16 Mux2x16_inst0(.I0(I_0), .I1(I_1), .O(Mux2x16_inst0_O), .S(S[0]));
assign O = Mux2x16_inst0_O;
endmodule

module Mux2x1 (input [0:0] I0, input [0:0] I1, output [0:0] O, input S);
wire [0:0] coreir_commonlib_mux2x1_inst0_out;
commonlib_muxn__N2__width1 coreir_commonlib_mux2x1_inst0(.in_data_0(I0), .in_data_1(I1), .in_sel(S), .out(coreir_commonlib_mux2x1_inst0_out));
assign O = coreir_commonlib_mux2x1_inst0_out;
endmodule

module MuxWrapper_2_1 (input [0:0] I_0, input [0:0] I_1, output [0:0] O, input [0:0] S);
wire [0:0] Mux2x1_inst0_O;
Mux2x1 Mux2x1_inst0(.I0(I_0), .I1(I_1), .O(Mux2x1_inst0_O), .S(S[0]));
assign O = Mux2x1_inst0_O;
endmodule

module Mux20x16 (input [15:0] I0, input [15:0] I1, input [15:0] I10, input [15:0] I11, input [15:0] I12, input [15:0] I13, input [15:0] I14, input [15:0] I15, input [15:0] I16, input [15:0] I17, input [15:0] I18, input [15:0] I19, input [15:0] I2, input [15:0] I3, input [15:0] I4, input [15:0] I5, input [15:0] I6, input [15:0] I7, input [15:0] I8, input [15:0] I9, output [15:0] O, input [4:0] S);
wire [15:0] coreir_commonlib_mux20x16_inst0_out;
commonlib_muxn__N20__width16 coreir_commonlib_mux20x16_inst0(.in_data_0(I0), .in_data_1(I1), .in_data_10(I10), .in_data_11(I11), .in_data_12(I12), .in_data_13(I13), .in_data_14(I14), .in_data_15(I15), .in_data_16(I16), .in_data_17(I17), .in_data_18(I18), .in_data_19(I19), .in_data_2(I2), .in_data_3(I3), .in_data_4(I4), .in_data_5(I5), .in_data_6(I6), .in_data_7(I7), .in_data_8(I8), .in_data_9(I9), .in_sel(S), .out(coreir_commonlib_mux20x16_inst0_out));
assign O = coreir_commonlib_mux20x16_inst0_out;
endmodule

module MuxWrapper_20_16 (input [15:0] I_0, input [15:0] I_1, input [15:0] I_10, input [15:0] I_11, input [15:0] I_12, input [15:0] I_13, input [15:0] I_14, input [15:0] I_15, input [15:0] I_16, input [15:0] I_17, input [15:0] I_18, input [15:0] I_19, input [15:0] I_2, input [15:0] I_3, input [15:0] I_4, input [15:0] I_5, input [15:0] I_6, input [15:0] I_7, input [15:0] I_8, input [15:0] I_9, output [15:0] O, input [4:0] S);
wire [15:0] Mux20x16_inst0_O;
Mux20x16 Mux20x16_inst0(.I0(I_0), .I1(I_1), .I10(I_10), .I11(I_11), .I12(I_12), .I13(I_13), .I14(I_14), .I15(I_15), .I16(I_16), .I17(I_17), .I18(I_18), .I19(I_19), .I2(I_2), .I3(I_3), .I4(I_4), .I5(I_5), .I6(I_6), .I7(I_7), .I8(I_8), .I9(I_9), .O(Mux20x16_inst0_O), .S(S));
assign O = Mux20x16_inst0_O;
endmodule

module Mux20x1 (input [0:0] I0, input [0:0] I1, input [0:0] I10, input [0:0] I11, input [0:0] I12, input [0:0] I13, input [0:0] I14, input [0:0] I15, input [0:0] I16, input [0:0] I17, input [0:0] I18, input [0:0] I19, input [0:0] I2, input [0:0] I3, input [0:0] I4, input [0:0] I5, input [0:0] I6, input [0:0] I7, input [0:0] I8, input [0:0] I9, output [0:0] O, input [4:0] S);
wire [0:0] coreir_commonlib_mux20x1_inst0_out;
commonlib_muxn__N20__width1 coreir_commonlib_mux20x1_inst0(.in_data_0(I0), .in_data_1(I1), .in_data_10(I10), .in_data_11(I11), .in_data_12(I12), .in_data_13(I13), .in_data_14(I14), .in_data_15(I15), .in_data_16(I16), .in_data_17(I17), .in_data_18(I18), .in_data_19(I19), .in_data_2(I2), .in_data_3(I3), .in_data_4(I4), .in_data_5(I5), .in_data_6(I6), .in_data_7(I7), .in_data_8(I8), .in_data_9(I9), .in_sel(S), .out(coreir_commonlib_mux20x1_inst0_out));
assign O = coreir_commonlib_mux20x1_inst0_out;
endmodule

module MuxWrapper_20_1 (input [0:0] I_0, input [0:0] I_1, input [0:0] I_10, input [0:0] I_11, input [0:0] I_12, input [0:0] I_13, input [0:0] I_14, input [0:0] I_15, input [0:0] I_16, input [0:0] I_17, input [0:0] I_18, input [0:0] I_19, input [0:0] I_2, input [0:0] I_3, input [0:0] I_4, input [0:0] I_5, input [0:0] I_6, input [0:0] I_7, input [0:0] I_8, input [0:0] I_9, output [0:0] O, input [4:0] S);
wire [0:0] Mux20x1_inst0_O;
Mux20x1 Mux20x1_inst0(.I0(I_0), .I1(I_1), .I10(I_10), .I11(I_11), .I12(I_12), .I13(I_13), .I14(I_14), .I15(I_15), .I16(I_16), .I17(I_17), .I18(I_18), .I19(I_19), .I2(I_2), .I3(I_3), .I4(I_4), .I5(I_5), .I6(I_6), .I7(I_7), .I8(I_8), .I9(I_9), .O(Mux20x1_inst0_O), .S(S));
assign O = Mux20x1_inst0_O;
endmodule

module Mux15x32 (input [31:0] I0, input [31:0] I1, input [31:0] I10, input [31:0] I11, input [31:0] I12, input [31:0] I13, input [31:0] I14, input [31:0] I2, input [31:0] I3, input [31:0] I4, input [31:0] I5, input [31:0] I6, input [31:0] I7, input [31:0] I8, input [31:0] I9, output [31:0] O, input [3:0] S);
wire [31:0] coreir_commonlib_mux15x32_inst0_out;
commonlib_muxn__N15__width32 coreir_commonlib_mux15x32_inst0(.in_data_0(I0), .in_data_1(I1), .in_data_10(I10), .in_data_11(I11), .in_data_12(I12), .in_data_13(I13), .in_data_14(I14), .in_data_2(I2), .in_data_3(I3), .in_data_4(I4), .in_data_5(I5), .in_data_6(I6), .in_data_7(I7), .in_data_8(I8), .in_data_9(I9), .in_sel(S), .out(coreir_commonlib_mux15x32_inst0_out));
assign O = coreir_commonlib_mux15x32_inst0_out;
endmodule

module MuxWrapper_15_32 (input [31:0] I_0, input [31:0] I_1, input [31:0] I_10, input [31:0] I_11, input [31:0] I_12, input [31:0] I_13, input [31:0] I_14, input [31:0] I_2, input [31:0] I_3, input [31:0] I_4, input [31:0] I_5, input [31:0] I_6, input [31:0] I_7, input [31:0] I_8, input [31:0] I_9, output [31:0] O, input [3:0] S);
wire [31:0] Mux15x32_inst0_O;
Mux15x32 Mux15x32_inst0(.I0(I_0), .I1(I_1), .I10(I_10), .I11(I_11), .I12(I_12), .I13(I_13), .I14(I_14), .I2(I_2), .I3(I_3), .I4(I_4), .I5(I_5), .I6(I_6), .I7(I_7), .I8(I_8), .I9(I_9), .O(Mux15x32_inst0_O), .S(S));
assign O = Mux15x32_inst0_O;
endmodule

module MuxWithDefaultWrapper_15_32_8_0 (input [0:0] EN, input [31:0] I_0, input [31:0] I_1, input [31:0] I_10, input [31:0] I_11, input [31:0] I_12, input [31:0] I_13, input [31:0] I_14, input [31:0] I_2, input [31:0] I_3, input [31:0] I_4, input [31:0] I_5, input [31:0] I_6, input [31:0] I_7, input [31:0] I_8, input [31:0] I_9, output [31:0] O, input [7:0] S);
wire [31:0] MuxWrapper_15_32_inst0_O;
wire [31:0] MuxWrapper_2_32_inst0_O;
wire and_inst0_out;
wire [31:0] const_0_32_out;
wire [7:0] const_15_8_out;
wire coreir_ult8_inst0_out;
MuxWrapper_15_32 MuxWrapper_15_32_inst0(.I_0(I_0), .I_1(I_1), .I_10(I_10), .I_11(I_11), .I_12(I_12), .I_13(I_13), .I_14(I_14), .I_2(I_2), .I_3(I_3), .I_4(I_4), .I_5(I_5), .I_6(I_6), .I_7(I_7), .I_8(I_8), .I_9(I_9), .O(MuxWrapper_15_32_inst0_O), .S({S[3],S[2],S[1],S[0]}));
MuxWrapper_2_32 MuxWrapper_2_32_inst0(.I_0(const_0_32_out), .I_1(MuxWrapper_15_32_inst0_O), .O(MuxWrapper_2_32_inst0_O), .S(and_inst0_out));
corebit_and and_inst0(.in0(coreir_ult8_inst0_out), .in1(EN[0]), .out(and_inst0_out));
coreir_const #(.value('h00000000), .width(32)) const_0_32(.out(const_0_32_out));
coreir_const #(.value(8'h0f), .width(8)) const_15_8(.out(const_15_8_out));
coreir_ult #(.width(8)) coreir_ult8_inst0(.in0(S), .in1(const_15_8_out), .out(coreir_ult8_inst0_out));
assign O = MuxWrapper_2_32_inst0_O;
endmodule

module GlobalController_32_32 (input [11:0] axi4_ctrl_araddr, output axi4_ctrl_arready, input axi4_ctrl_arvalid, input [11:0] axi4_ctrl_awaddr, output axi4_ctrl_awready, input axi4_ctrl_awvalid, output axi4_ctrl_interrupt, output [31:0] axi4_ctrl_rdata, input axi4_ctrl_rready, output [1:0] axi4_ctrl_rresp, output axi4_ctrl_rvalid, input [31:0] axi4_ctrl_wdata, output axi4_ctrl_wready, input axi4_ctrl_wvalid, input cgra_done_pulse, output cgra_soft_reset, output cgra_start_pulse, input clk_in, output clk_out, output [31:0] config_config_addr, output [31:0] config_config_data, input config_done_pulse, output [0:0] config_read, output config_start_pulse, output [0:0] config_write, output [11:0] glb_config_config_addr, output [31:0] glb_config_config_data, output [0:0] glb_config_read, output [0:0] glb_config_write, input [31:0] glb_read_data_in, output [31:0] glb_sram_config_config_addr, output [31:0] glb_sram_config_config_data, output [0:0] glb_sram_config_read, output [0:0] glb_sram_config_write, input [31:0] glb_sram_read_data_in, output glb_stall, input jtag_tck, input jtag_tdi, output jtag_tdo, input jtag_tms, input jtag_trst_n, input [31:0] read_data_in, input reset_in, output reset_out, output [0:0] stall);
wire global_controller_inst0_ARREADY;
wire global_controller_inst0_AWREADY;
wire [31:0] global_controller_inst0_RDATA;
wire [1:0] global_controller_inst0_RRESP;
wire global_controller_inst0_RVALID;
wire global_controller_inst0_WREADY;
wire global_controller_inst0_cgra_soft_reset;
wire [0:0] global_controller_inst0_cgra_stalled;
wire global_controller_inst0_cgra_start_pulse;
wire global_controller_inst0_clk_out;
wire [31:0] global_controller_inst0_config_addr_out;
wire [31:0] global_controller_inst0_config_data_out;
wire global_controller_inst0_config_start_pulse;
wire [11:0] global_controller_inst0_glb_config_addr_out;
wire [31:0] global_controller_inst0_glb_config_data_out;
wire global_controller_inst0_glb_read;
wire [31:0] global_controller_inst0_glb_sram_config_addr_out;
wire [31:0] global_controller_inst0_glb_sram_config_data_out;
wire global_controller_inst0_glb_sram_read;
wire global_controller_inst0_glb_sram_write;
wire global_controller_inst0_glb_stall;
wire global_controller_inst0_glb_write;
wire global_controller_inst0_interrupt;
wire global_controller_inst0_read;
wire global_controller_inst0_reset_out;
wire global_controller_inst0_tdo;
wire global_controller_inst0_write;
global_controller #(.AXI_ADDR_ADVANCE_CLK(60), .AXI_ADDR_CGRA_AUTO_RESTART(24), .AXI_ADDR_CGRA_CONFIG_ADDR(44), .AXI_ADDR_CGRA_CONFIG_DATA(48), .AXI_ADDR_CGRA_SOFT_RESET_EN(40), .AXI_ADDR_CGRA_START(20), .AXI_ADDR_CONFIG_START(28), .AXI_ADDR_GLB_SRAM_CONFIG_ADDR(52), .AXI_ADDR_GLB_SRAM_CONFIG_DATA(56), .AXI_ADDR_GLOBAL_RESET(4), .AXI_ADDR_IER(32), .AXI_ADDR_ISR(36), .AXI_ADDR_RD_DELAY_REG(12), .AXI_ADDR_SOFT_RESET_DELAY(16), .AXI_ADDR_STALL(8), .AXI_ADDR_TEST_REG(0), .NOP(0), .advance_clk(10), .advancing_clk(3), .cgra_ctrl_read(22), .cgra_ctrl_reading(7), .cgra_ctrl_write(21), .glb_read_config(18), .glb_reading(5), .glb_sram_read_config(20), .glb_sram_reading(6), .glb_sram_write_config(19), .glb_write_config(17), .global_reset(7), .rd_delay_sel_reg(16), .rd_rd_delay_reg(14), .read_TST(6), .read_clk_domain(11), .read_config(2), .read_stall(9), .reading(1), .ready(0), .resetting(2), .switch_clk(12), .switching_clk(4), .wr_delay_sel_reg(15), .wr_rd_delay_reg(13), .write_A050(4), .write_TST(5), .write_config(1), .write_stall(8)) global_controller_inst0(.ARADDR(axi4_ctrl_araddr), .ARREADY(global_controller_inst0_ARREADY), .ARVALID(axi4_ctrl_arvalid), .AWADDR(axi4_ctrl_awaddr), .AWREADY(global_controller_inst0_AWREADY), .AWVALID(axi4_ctrl_awvalid), .RDATA(global_controller_inst0_RDATA), .RREADY(axi4_ctrl_rready), .RRESP(global_controller_inst0_RRESP), .RVALID(global_controller_inst0_RVALID), .WDATA(axi4_ctrl_wdata), .WREADY(global_controller_inst0_WREADY), .WVALID(axi4_ctrl_wvalid), .cgra_done_pulse(cgra_done_pulse), .cgra_soft_reset(global_controller_inst0_cgra_soft_reset), .cgra_stalled(global_controller_inst0_cgra_stalled), .cgra_start_pulse(global_controller_inst0_cgra_start_pulse), .clk_in(clk_in), .clk_out(global_controller_inst0_clk_out), .config_addr_out(global_controller_inst0_config_addr_out), .config_data_in(read_data_in), .config_data_out(global_controller_inst0_config_data_out), .config_done_pulse(config_done_pulse), .config_start_pulse(global_controller_inst0_config_start_pulse), .glb_config_addr_out(global_controller_inst0_glb_config_addr_out), .glb_config_data_in(glb_read_data_in), .glb_config_data_out(global_controller_inst0_glb_config_data_out), .glb_read(global_controller_inst0_glb_read), .glb_sram_config_addr_out(global_controller_inst0_glb_sram_config_addr_out), .glb_sram_config_data_in(glb_sram_read_data_in), .glb_sram_config_data_out(global_controller_inst0_glb_sram_config_data_out), .glb_sram_read(global_controller_inst0_glb_sram_read), .glb_sram_write(global_controller_inst0_glb_sram_write), .glb_stall(global_controller_inst0_glb_stall), .glb_write(global_controller_inst0_glb_write), .interrupt(global_controller_inst0_interrupt), .read(global_controller_inst0_read), .reset_in(reset_in), .reset_out(global_controller_inst0_reset_out), .tck(jtag_tck), .tdi(jtag_tdi), .tdo(global_controller_inst0_tdo), .tms(jtag_tms), .trst_n(jtag_trst_n), .write(global_controller_inst0_write));
assign axi4_ctrl_arready = global_controller_inst0_ARREADY;
assign axi4_ctrl_awready = global_controller_inst0_AWREADY;
assign axi4_ctrl_interrupt = global_controller_inst0_interrupt;
assign axi4_ctrl_rdata = global_controller_inst0_RDATA;
assign axi4_ctrl_rresp = global_controller_inst0_RRESP;
assign axi4_ctrl_rvalid = global_controller_inst0_RVALID;
assign axi4_ctrl_wready = global_controller_inst0_WREADY;
assign cgra_soft_reset = global_controller_inst0_cgra_soft_reset;
assign cgra_start_pulse = global_controller_inst0_cgra_start_pulse;
assign clk_out = global_controller_inst0_clk_out;
assign config_config_addr = global_controller_inst0_config_addr_out;
assign config_config_data = global_controller_inst0_config_data_out;
assign config_read = global_controller_inst0_read;
assign config_start_pulse = global_controller_inst0_config_start_pulse;
assign config_write = global_controller_inst0_write;
assign glb_config_config_addr = global_controller_inst0_glb_config_addr_out;
assign glb_config_config_data = global_controller_inst0_glb_config_data_out;
assign glb_config_read = global_controller_inst0_glb_read;
assign glb_config_write = global_controller_inst0_glb_write;
assign glb_sram_config_config_addr = global_controller_inst0_glb_sram_config_addr_out;
assign glb_sram_config_config_data = global_controller_inst0_glb_sram_config_data_out;
assign glb_sram_config_read = global_controller_inst0_glb_sram_read;
assign glb_sram_config_write = global_controller_inst0_glb_sram_write;
assign glb_stall = global_controller_inst0_glb_stall;
assign jtag_tdo = global_controller_inst0_tdo;
assign reset_out = global_controller_inst0_reset_out;
assign stall = global_controller_inst0_cgra_stalled;
endmodule

module GlobalBuffer_32_1_1_17_32_32_32_12 (input [31:0] cgra_config_config_addr, input [31:0] cgra_config_config_data, input [0:0] cgra_config_read, input [0:0] cgra_config_write, output cgra_done_pulse, input cgra_start_pulse, input [15:0] cgra_to_io_addr_high_0, input [15:0] cgra_to_io_addr_low_0, input [0:0] cgra_to_io_rd_en, input [15:0] cgra_to_io_wr_data_0, input [0:0] cgra_to_io_wr_en, input clk, output config_done_pulse, input config_start_pulse, input [11:0] glb_config_config_addr, input [31:0] glb_config_config_data, output [31:0] glb_config_rd_data, input [0:0] glb_config_read, input [0:0] glb_config_write, input [31:0] glb_sram_config_config_addr, input [31:0] glb_sram_config_config_data, output [31:0] glb_sram_config_rd_data, input [0:0] glb_sram_config_read, input [0:0] glb_sram_config_write, output [31:0] glb_to_cgra_config_0_config_addr, output [31:0] glb_to_cgra_config_0_config_data, output [0:0] glb_to_cgra_config_0_read, output [0:0] glb_to_cgra_config_0_write, input glc_to_io_stall, output [15:0] io_to_cgra_rd_data_0, output [0:0] io_to_cgra_rd_data_valid, input reset, input [31:0] soc_data_rd_addr, output [63:0] soc_data_rd_data, input soc_data_rd_en, input [31:0] soc_data_wr_addr, input [63:0] soc_data_wr_data, input [7:0] soc_data_wr_strb);
wire global_buffer_inst0_cgra_done_pulse;
wire global_buffer_inst0_config_done_pulse;
wire [31:0] global_buffer_inst0_glb_config_rd_data;
wire [31:0] global_buffer_inst0_glb_sram_config_rd_data;
wire [31:0] global_buffer_inst0_glb_to_cgra_cfg_addr;
wire [31:0] global_buffer_inst0_glb_to_cgra_cfg_data;
wire [0:0] global_buffer_inst0_glb_to_cgra_cfg_rd;
wire [0:0] global_buffer_inst0_glb_to_cgra_cfg_wr;
wire [63:0] global_buffer_inst0_host_rd_data;
wire [15:0] global_buffer_inst0_io_to_cgra_rd_data;
wire [0:0] global_buffer_inst0_io_to_cgra_rd_data_valid;
global_buffer global_buffer_inst0(.cgra_done_pulse(global_buffer_inst0_cgra_done_pulse), .cgra_start_pulse(cgra_start_pulse), .cgra_to_io_addr_high(cgra_to_io_addr_high_0), .cgra_to_io_addr_low(cgra_to_io_addr_low_0), .cgra_to_io_rd_en(cgra_to_io_rd_en), .cgra_to_io_wr_data(cgra_to_io_wr_data_0), .cgra_to_io_wr_en(cgra_to_io_wr_en), .clk(clk), .config_done_pulse(global_buffer_inst0_config_done_pulse), .config_start_pulse(config_start_pulse), .glb_config_addr(glb_config_config_addr), .glb_config_rd(glb_config_read[0]), .glb_config_rd_data(global_buffer_inst0_glb_config_rd_data), .glb_config_wr(glb_config_write[0]), .glb_config_wr_data(glb_config_config_data), .glb_sram_config_addr(glb_sram_config_config_addr), .glb_sram_config_rd(glb_sram_config_read[0]), .glb_sram_config_rd_data(global_buffer_inst0_glb_sram_config_rd_data), .glb_sram_config_wr(glb_sram_config_write[0]), .glb_sram_config_wr_data(glb_sram_config_config_data), .glb_to_cgra_cfg_addr(global_buffer_inst0_glb_to_cgra_cfg_addr), .glb_to_cgra_cfg_data(global_buffer_inst0_glb_to_cgra_cfg_data), .glb_to_cgra_cfg_rd(global_buffer_inst0_glb_to_cgra_cfg_rd), .glb_to_cgra_cfg_wr(global_buffer_inst0_glb_to_cgra_cfg_wr), .glc_to_cgra_cfg_addr(cgra_config_config_addr), .glc_to_cgra_cfg_data(cgra_config_config_data), .glc_to_cgra_cfg_rd(cgra_config_read[0]), .glc_to_cgra_cfg_wr(cgra_config_write[0]), .glc_to_io_stall(glc_to_io_stall), .host_rd_addr(soc_data_rd_addr), .host_rd_data(global_buffer_inst0_host_rd_data), .host_rd_en(soc_data_rd_en), .host_wr_addr(soc_data_wr_addr), .host_wr_data(soc_data_wr_data), .host_wr_strb(soc_data_wr_strb), .io_to_cgra_rd_data(global_buffer_inst0_io_to_cgra_rd_data), .io_to_cgra_rd_data_valid(global_buffer_inst0_io_to_cgra_rd_data_valid), .reset(reset));
assign cgra_done_pulse = global_buffer_inst0_cgra_done_pulse;
assign config_done_pulse = global_buffer_inst0_config_done_pulse;
assign glb_config_rd_data = global_buffer_inst0_glb_config_rd_data;
assign glb_sram_config_rd_data = global_buffer_inst0_glb_sram_config_rd_data;
assign glb_to_cgra_config_0_config_addr = global_buffer_inst0_glb_to_cgra_cfg_addr;
assign glb_to_cgra_config_0_config_data = global_buffer_inst0_glb_to_cgra_cfg_data;
assign glb_to_cgra_config_0_read = global_buffer_inst0_glb_to_cgra_cfg_rd;
assign glb_to_cgra_config_0_write = global_buffer_inst0_glb_to_cgra_cfg_wr;
assign io_to_cgra_rd_data_0 = global_buffer_inst0_io_to_cgra_rd_data;
assign io_to_cgra_rd_data_valid = global_buffer_inst0_io_to_cgra_rd_data_valid;
assign soc_data_rd_data = global_buffer_inst0_host_rd_data;
endmodule

module Decode98 (input [7:0] I, output O);
wire [7:0] const_9_8_out;
wire coreir_eq_8_inst0_out;
coreir_const #(.value(8'h09), .width(8)) const_9_8(.out(const_9_8_out));
coreir_eq #(.width(8)) coreir_eq_8_inst0(.in0(I), .in1(const_9_8_out), .out(coreir_eq_8_inst0_out));
assign O = coreir_eq_8_inst0_out;
endmodule

module Decode88 (input [7:0] I, output O);
wire [7:0] const_8_8_out;
wire coreir_eq_8_inst0_out;
coreir_const #(.value(8'h08), .width(8)) const_8_8(.out(const_8_8_out));
coreir_eq #(.width(8)) coreir_eq_8_inst0(.in0(I), .in1(const_8_8_out), .out(coreir_eq_8_inst0_out));
assign O = coreir_eq_8_inst0_out;
endmodule

module Decode78 (input [7:0] I, output O);
wire [7:0] const_7_8_out;
wire coreir_eq_8_inst0_out;
coreir_const #(.value(8'h07), .width(8)) const_7_8(.out(const_7_8_out));
coreir_eq #(.width(8)) coreir_eq_8_inst0(.in0(I), .in1(const_7_8_out), .out(coreir_eq_8_inst0_out));
assign O = coreir_eq_8_inst0_out;
endmodule

module Decode68 (input [7:0] I, output O);
wire [7:0] const_6_8_out;
wire coreir_eq_8_inst0_out;
coreir_const #(.value(8'h06), .width(8)) const_6_8(.out(const_6_8_out));
coreir_eq #(.width(8)) coreir_eq_8_inst0(.in0(I), .in1(const_6_8_out), .out(coreir_eq_8_inst0_out));
assign O = coreir_eq_8_inst0_out;
endmodule

module Decode58 (input [7:0] I, output O);
wire [7:0] const_5_8_out;
wire coreir_eq_8_inst0_out;
coreir_const #(.value(8'h05), .width(8)) const_5_8(.out(const_5_8_out));
coreir_eq #(.width(8)) coreir_eq_8_inst0(.in0(I), .in1(const_5_8_out), .out(coreir_eq_8_inst0_out));
assign O = coreir_eq_8_inst0_out;
endmodule

module Decode48 (input [7:0] I, output O);
wire [7:0] const_4_8_out;
wire coreir_eq_8_inst0_out;
coreir_const #(.value(8'h04), .width(8)) const_4_8(.out(const_4_8_out));
coreir_eq #(.width(8)) coreir_eq_8_inst0(.in0(I), .in1(const_4_8_out), .out(coreir_eq_8_inst0_out));
assign O = coreir_eq_8_inst0_out;
endmodule

module Decode38 (input [7:0] I, output O);
wire [7:0] const_3_8_out;
wire coreir_eq_8_inst0_out;
coreir_const #(.value(8'h03), .width(8)) const_3_8(.out(const_3_8_out));
coreir_eq #(.width(8)) coreir_eq_8_inst0(.in0(I), .in1(const_3_8_out), .out(coreir_eq_8_inst0_out));
assign O = coreir_eq_8_inst0_out;
endmodule

module Decode28 (input [7:0] I, output O);
wire [7:0] const_2_8_out;
wire coreir_eq_8_inst0_out;
coreir_const #(.value(8'h02), .width(8)) const_2_8(.out(const_2_8_out));
coreir_eq #(.width(8)) coreir_eq_8_inst0(.in0(I), .in1(const_2_8_out), .out(coreir_eq_8_inst0_out));
assign O = coreir_eq_8_inst0_out;
endmodule

module Decode18 (input [7:0] I, output O);
wire [7:0] const_1_8_out;
wire coreir_eq_8_inst0_out;
coreir_const #(.value(8'h01), .width(8)) const_1_8(.out(const_1_8_out));
coreir_eq #(.width(8)) coreir_eq_8_inst0(.in0(I), .in1(const_1_8_out), .out(coreir_eq_8_inst0_out));
assign O = coreir_eq_8_inst0_out;
endmodule

module Decode148 (input [7:0] I, output O);
wire [7:0] const_14_8_out;
wire coreir_eq_8_inst0_out;
coreir_const #(.value(8'h0e), .width(8)) const_14_8(.out(const_14_8_out));
coreir_eq #(.width(8)) coreir_eq_8_inst0(.in0(I), .in1(const_14_8_out), .out(coreir_eq_8_inst0_out));
assign O = coreir_eq_8_inst0_out;
endmodule

module Decode138 (input [7:0] I, output O);
wire [7:0] const_13_8_out;
wire coreir_eq_8_inst0_out;
coreir_const #(.value(8'h0d), .width(8)) const_13_8(.out(const_13_8_out));
coreir_eq #(.width(8)) coreir_eq_8_inst0(.in0(I), .in1(const_13_8_out), .out(coreir_eq_8_inst0_out));
assign O = coreir_eq_8_inst0_out;
endmodule

module Decode128 (input [7:0] I, output O);
wire [7:0] const_12_8_out;
wire coreir_eq_8_inst0_out;
coreir_const #(.value(8'h0c), .width(8)) const_12_8(.out(const_12_8_out));
coreir_eq #(.width(8)) coreir_eq_8_inst0(.in0(I), .in1(const_12_8_out), .out(coreir_eq_8_inst0_out));
assign O = coreir_eq_8_inst0_out;
endmodule

module Decode118 (input [7:0] I, output O);
wire [7:0] const_11_8_out;
wire coreir_eq_8_inst0_out;
coreir_const #(.value(8'h0b), .width(8)) const_11_8(.out(const_11_8_out));
coreir_eq #(.width(8)) coreir_eq_8_inst0(.in0(I), .in1(const_11_8_out), .out(coreir_eq_8_inst0_out));
assign O = coreir_eq_8_inst0_out;
endmodule

module Decode108 (input [7:0] I, output O);
wire [7:0] const_10_8_out;
wire coreir_eq_8_inst0_out;
coreir_const #(.value(8'h0a), .width(8)) const_10_8(.out(const_10_8_out));
coreir_eq #(.width(8)) coreir_eq_8_inst0(.in0(I), .in1(const_10_8_out), .out(coreir_eq_8_inst0_out));
assign O = coreir_eq_8_inst0_out;
endmodule

module Decode08 (input [7:0] I, output O);
wire [7:0] const_0_8_out;
wire coreir_eq_8_inst0_out;
coreir_const #(.value(8'h00), .width(8)) const_0_8(.out(const_0_8_out));
coreir_eq #(.width(8)) coreir_eq_8_inst0(.in0(I), .in1(const_0_8_out), .out(coreir_eq_8_inst0_out));
assign O = coreir_eq_8_inst0_out;
endmodule

module DFF_init0_has_ceFalse_has_resetFalse_has_async_resetTrue (input ASYNCRESET, input CLK, input I, output O);
wire [0:0] reg_PR_inst0_out;
coreir_reg_arst #(.arst_posedge(1'b1), .clk_posedge(1'b1), .init(1'h0), .width(1)) reg_PR_inst0(.arst(ASYNCRESET), .clk(CLK), .in(I), .out(reg_PR_inst0_out));
assign O = reg_PR_inst0_out[0];
endmodule

module Register_unq1 (input ASYNCRESET, input CLK, output O, input en, input value);
wire DFF_init0_has_ceFalse_has_resetFalse_has_async_resetTrue_inst0_O;
wire Register_comb_inst0_O0;
wire Register_comb_inst0_O1;
DFF_init0_has_ceFalse_has_resetFalse_has_async_resetTrue DFF_init0_has_ceFalse_has_resetFalse_has_async_resetTrue_inst0(.ASYNCRESET(ASYNCRESET), .CLK(CLK), .I(Register_comb_inst0_O0), .O(DFF_init0_has_ceFalse_has_resetFalse_has_async_resetTrue_inst0_O));
Register_comb_unq1 Register_comb_inst0(.O0(Register_comb_inst0_O0), .O1(Register_comb_inst0_O1), .en(en), .self_value_O(DFF_init0_has_ceFalse_has_resetFalse_has_async_resetTrue_inst0_O), .value(value));
assign O = Register_comb_inst0_O1;
endmodule

module RegisterMode_unq1 (input ASYNCRESET, input CLK, output O0, output O1, input clk_en, input config_data, input config_we, input const_, input [1:0] mode, input value);
wire RegisterMode_comb_inst0_O0;
wire RegisterMode_comb_inst0_O1;
wire RegisterMode_comb_inst0_O2;
wire RegisterMode_comb_inst0_O3;
wire Register_inst0_O;
RegisterMode_comb_unq1 RegisterMode_comb_inst0(.O0(RegisterMode_comb_inst0_O0), .O1(RegisterMode_comb_inst0_O1), .O2(RegisterMode_comb_inst0_O2), .O3(RegisterMode_comb_inst0_O3), .clk_en(clk_en), .config_data(config_data), .config_we(config_we), .const_(const_), .mode(mode), .self_register_O(Register_inst0_O), .value(value));
Register_unq1 Register_inst0(.ASYNCRESET(ASYNCRESET), .CLK(CLK), .O(Register_inst0_O), .en(RegisterMode_comb_inst0_O1), .value(RegisterMode_comb_inst0_O0));
assign O0 = RegisterMode_comb_inst0_O2;
assign O1 = RegisterMode_comb_inst0_O3;
endmodule

module PE (input ASYNCRESET, input CLK, output [15:0] O0, output O1, output [31:0] O2, input bit0, input bit1, input bit2, input clk_en, input [7:0] config_addr, input [31:0] config_data, input config_en, input [15:0] data0, input [15:0] data1, input [7:0] inst_alu, input inst_bit0, input inst_bit1, input inst_bit2, input [4:0] inst_cond, input [15:0] inst_data0, input [15:0] inst_data1, input [7:0] inst_lut, input [1:0] inst_rega, input [1:0] inst_regb, input [1:0] inst_regd, input [1:0] inst_rege, input [1:0] inst_regf, input [0:0] inst_signed_);
wire [1:0] PE_comb_inst0_O0;
wire [15:0] PE_comb_inst0_O1;
wire PE_comb_inst0_O10;
wire [15:0] PE_comb_inst0_O11;
wire [1:0] PE_comb_inst0_O12;
wire PE_comb_inst0_O13;
wire PE_comb_inst0_O14;
wire PE_comb_inst0_O15;
wire PE_comb_inst0_O16;
wire PE_comb_inst0_O17;
wire [1:0] PE_comb_inst0_O18;
wire PE_comb_inst0_O19;
wire [15:0] PE_comb_inst0_O2;
wire PE_comb_inst0_O20;
wire PE_comb_inst0_O21;
wire PE_comb_inst0_O22;
wire PE_comb_inst0_O23;
wire [1:0] PE_comb_inst0_O24;
wire PE_comb_inst0_O25;
wire PE_comb_inst0_O26;
wire PE_comb_inst0_O27;
wire PE_comb_inst0_O28;
wire PE_comb_inst0_O29;
wire PE_comb_inst0_O3;
wire [15:0] PE_comb_inst0_O30;
wire PE_comb_inst0_O31;
wire [31:0] PE_comb_inst0_O32;
wire PE_comb_inst0_O4;
wire [15:0] PE_comb_inst0_O5;
wire [1:0] PE_comb_inst0_O6;
wire [15:0] PE_comb_inst0_O7;
wire [15:0] PE_comb_inst0_O8;
wire PE_comb_inst0_O9;
wire [15:0] RegisterMode_inst0_O0;
wire [15:0] RegisterMode_inst0_O1;
wire [15:0] RegisterMode_inst1_O0;
wire [15:0] RegisterMode_inst1_O1;
wire RegisterMode_inst2_O0;
wire RegisterMode_inst2_O1;
wire RegisterMode_inst3_O0;
wire RegisterMode_inst3_O1;
wire RegisterMode_inst4_O0;
wire RegisterMode_inst4_O1;
PE_comb PE_comb_inst0(.O0(PE_comb_inst0_O0), .O1(PE_comb_inst0_O1), .O10(PE_comb_inst0_O10), .O11(PE_comb_inst0_O11), .O12(PE_comb_inst0_O12), .O13(PE_comb_inst0_O13), .O14(PE_comb_inst0_O14), .O15(PE_comb_inst0_O15), .O16(PE_comb_inst0_O16), .O17(PE_comb_inst0_O17), .O18(PE_comb_inst0_O18), .O19(PE_comb_inst0_O19), .O2(PE_comb_inst0_O2), .O20(PE_comb_inst0_O20), .O21(PE_comb_inst0_O21), .O22(PE_comb_inst0_O22), .O23(PE_comb_inst0_O23), .O24(PE_comb_inst0_O24), .O25(PE_comb_inst0_O25), .O26(PE_comb_inst0_O26), .O27(PE_comb_inst0_O27), .O28(PE_comb_inst0_O28), .O29(PE_comb_inst0_O29), .O3(PE_comb_inst0_O3), .O30(PE_comb_inst0_O30), .O31(PE_comb_inst0_O31), .O32(PE_comb_inst0_O32), .O4(PE_comb_inst0_O4), .O5(PE_comb_inst0_O5), .O6(PE_comb_inst0_O6), .O7(PE_comb_inst0_O7), .O8(PE_comb_inst0_O8), .O9(PE_comb_inst0_O9), .bit0(bit0), .bit1(bit1), .bit2(bit2), .clk_en(clk_en), .config_addr(config_addr), .config_data(config_data), .config_en(config_en), .data0(data0), .data1(data1), .inst_alu(inst_alu), .inst_bit0(inst_bit0), .inst_bit1(inst_bit1), .inst_bit2(inst_bit2), .inst_cond(inst_cond), .inst_data0(inst_data0), .inst_data1(inst_data1), .inst_lut(inst_lut), .inst_rega(inst_rega), .inst_regb(inst_regb), .inst_regd(inst_regd), .inst_rege(inst_rege), .inst_regf(inst_regf), .inst_signed_(inst_signed_), .self_rega_O0(RegisterMode_inst0_O0), .self_rega_O1(RegisterMode_inst0_O1), .self_regb_O0(RegisterMode_inst1_O0), .self_regb_O1(RegisterMode_inst1_O1), .self_regd_O0(RegisterMode_inst2_O0), .self_regd_O1(RegisterMode_inst2_O1), .self_rege_O0(RegisterMode_inst3_O0), .self_rege_O1(RegisterMode_inst3_O1), .self_regf_O0(RegisterMode_inst4_O0), .self_regf_O1(RegisterMode_inst4_O1));
RegisterMode RegisterMode_inst0(.ASYNCRESET(ASYNCRESET), .CLK(CLK), .O0(RegisterMode_inst0_O0), .O1(RegisterMode_inst0_O1), .clk_en(PE_comb_inst0_O3), .config_data(PE_comb_inst0_O5), .config_we(PE_comb_inst0_O4), .const_(PE_comb_inst0_O1), .mode(PE_comb_inst0_O0), .value(PE_comb_inst0_O2));
RegisterMode RegisterMode_inst1(.ASYNCRESET(ASYNCRESET), .CLK(CLK), .O0(RegisterMode_inst1_O0), .O1(RegisterMode_inst1_O1), .clk_en(PE_comb_inst0_O9), .config_data(PE_comb_inst0_O11), .config_we(PE_comb_inst0_O10), .const_(PE_comb_inst0_O7), .mode(PE_comb_inst0_O6), .value(PE_comb_inst0_O8));
RegisterMode_unq1 RegisterMode_inst2(.ASYNCRESET(ASYNCRESET), .CLK(CLK), .O0(RegisterMode_inst2_O0), .O1(RegisterMode_inst2_O1), .clk_en(PE_comb_inst0_O15), .config_data(PE_comb_inst0_O17), .config_we(PE_comb_inst0_O16), .const_(PE_comb_inst0_O13), .mode(PE_comb_inst0_O12), .value(PE_comb_inst0_O14));
RegisterMode_unq1 RegisterMode_inst3(.ASYNCRESET(ASYNCRESET), .CLK(CLK), .O0(RegisterMode_inst3_O0), .O1(RegisterMode_inst3_O1), .clk_en(PE_comb_inst0_O21), .config_data(PE_comb_inst0_O23), .config_we(PE_comb_inst0_O22), .const_(PE_comb_inst0_O19), .mode(PE_comb_inst0_O18), .value(PE_comb_inst0_O20));
RegisterMode_unq1 RegisterMode_inst4(.ASYNCRESET(ASYNCRESET), .CLK(CLK), .O0(RegisterMode_inst4_O0), .O1(RegisterMode_inst4_O1), .clk_en(PE_comb_inst0_O27), .config_data(PE_comb_inst0_O29), .config_we(PE_comb_inst0_O28), .const_(PE_comb_inst0_O25), .mode(PE_comb_inst0_O24), .value(PE_comb_inst0_O26));
assign O0 = PE_comb_inst0_O30;
assign O1 = PE_comb_inst0_O31;
assign O2 = PE_comb_inst0_O32;
endmodule

module WrappedPE (input ASYNCRESET, input CLK, output [15:0] O0, output O1, output [31:0] O2, input bit0, input bit1, input bit2, input clk_en, input [7:0] config_addr, input [31:0] config_data, input config_en, input [15:0] data0, input [15:0] data1, input [66:0] inst);
wire [15:0] PE_inst0_O0;
wire PE_inst0_O1;
wire [31:0] PE_inst0_O2;
PE PE_inst0(.ASYNCRESET(ASYNCRESET), .CLK(CLK), .O0(PE_inst0_O0), .O1(PE_inst0_O1), .O2(PE_inst0_O2), .bit0(bit0), .bit1(bit1), .bit2(bit2), .clk_en(clk_en), .config_addr(config_addr), .config_data(config_data), .config_en(config_en), .data0(data0), .data1(data1), .inst_alu({inst[7],inst[6],inst[5],inst[4],inst[3],inst[2],inst[1],inst[0]}), .inst_bit0(inst[60]), .inst_bit1(inst[63]), .inst_bit2(inst[66]), .inst_cond({inst[21],inst[20],inst[19],inst[18],inst[17]}), .inst_data0({inst[39],inst[38],inst[37],inst[36],inst[35],inst[34],inst[33],inst[32],inst[31],inst[30],inst[29],inst[28],inst[27],inst[26],inst[25],inst[24]}), .inst_data1({inst[57],inst[56],inst[55],inst[54],inst[53],inst[52],inst[51],inst[50],inst[49],inst[48],inst[47],inst[46],inst[45],inst[44],inst[43],inst[42]}), .inst_lut({inst[16],inst[15],inst[14],inst[13],inst[12],inst[11],inst[10],inst[9]}), .inst_rega({inst[23],inst[22]}), .inst_regb({inst[41],inst[40]}), .inst_regd({inst[59],inst[58]}), .inst_rege({inst[62],inst[61]}), .inst_regf({inst[65],inst[64]}), .inst_signed_(inst[8]));
assign O0 = PE_inst0_O0;
assign O1 = PE_inst0_O1;
assign O2 = PE_inst0_O2;
endmodule

module ConfigRegister_5_8_32_0 (output [4:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [4:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_5_inst0_O;
wire [7:0] const_0_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_5 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_5_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[4],config_data[3],config_data[2],config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_5_inst0_O));
coreir_const #(.value(8'h00), .width(8)) const_0_8(.out(const_0_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_0_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_5_inst0_O;
endmodule

module ConfigRegister_4_8_32_7 (output [3:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [3:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O;
wire [7:0] const_7_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[3],config_data[2],config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O));
coreir_const #(.value(8'h07), .width(8)) const_7_8(.out(const_7_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_7_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O;
endmodule

module ConfigRegister_4_8_32_39 (output [3:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [3:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O;
wire [7:0] const_39_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[3],config_data[2],config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O));
coreir_const #(.value(8'h27), .width(8)) const_39_8(.out(const_39_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_39_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O;
endmodule

module ConfigRegister_4_8_32_38 (output [3:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [3:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O;
wire [7:0] const_38_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[3],config_data[2],config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O));
coreir_const #(.value(8'h26), .width(8)) const_38_8(.out(const_38_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_38_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O;
endmodule

module ConfigRegister_4_8_32_37 (output [3:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [3:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O;
wire [7:0] const_37_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[3],config_data[2],config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O));
coreir_const #(.value(8'h25), .width(8)) const_37_8(.out(const_37_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_37_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O;
endmodule

module ConfigRegister_4_8_32_36 (output [3:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [3:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O;
wire [7:0] const_36_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[3],config_data[2],config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O));
coreir_const #(.value(8'h24), .width(8)) const_36_8(.out(const_36_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_36_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O;
endmodule

module ConfigRegister_4_8_32_35 (output [3:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [3:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O;
wire [7:0] const_35_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[3],config_data[2],config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O));
coreir_const #(.value(8'h23), .width(8)) const_35_8(.out(const_35_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_35_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O;
endmodule

module ConfigRegister_4_8_32_34 (output [3:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [3:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O;
wire [7:0] const_34_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[3],config_data[2],config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O));
coreir_const #(.value(8'h22), .width(8)) const_34_8(.out(const_34_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_34_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O;
endmodule

module ConfigRegister_4_8_32_33 (output [3:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [3:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O;
wire [7:0] const_33_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[3],config_data[2],config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O));
coreir_const #(.value(8'h21), .width(8)) const_33_8(.out(const_33_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_33_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O;
endmodule

module ConfigRegister_4_8_32_32 (output [3:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [3:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O;
wire [7:0] const_32_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[3],config_data[2],config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O));
coreir_const #(.value(8'h20), .width(8)) const_32_8(.out(const_32_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_32_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O;
endmodule

module ConfigRegister_4_8_32_31 (output [3:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [3:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O;
wire [7:0] const_31_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[3],config_data[2],config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O));
coreir_const #(.value(8'h1f), .width(8)) const_31_8(.out(const_31_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_31_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O;
endmodule

module ConfigRegister_4_8_32_30 (output [3:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [3:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O;
wire [7:0] const_30_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[3],config_data[2],config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O));
coreir_const #(.value(8'h1e), .width(8)) const_30_8(.out(const_30_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_30_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O;
endmodule

module ConfigRegister_4_8_32_29 (output [3:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [3:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O;
wire [7:0] const_29_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[3],config_data[2],config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O));
coreir_const #(.value(8'h1d), .width(8)) const_29_8(.out(const_29_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_29_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O;
endmodule

module ConfigRegister_4_8_32_28 (output [3:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [3:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O;
wire [7:0] const_28_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[3],config_data[2],config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O));
coreir_const #(.value(8'h1c), .width(8)) const_28_8(.out(const_28_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_28_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O;
endmodule

module ConfigRegister_4_8_32_27 (output [3:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [3:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O;
wire [7:0] const_27_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[3],config_data[2],config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O));
coreir_const #(.value(8'h1b), .width(8)) const_27_8(.out(const_27_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_27_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O;
endmodule

module ConfigRegister_4_8_32_26 (output [3:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [3:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O;
wire [7:0] const_26_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[3],config_data[2],config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O));
coreir_const #(.value(8'h1a), .width(8)) const_26_8(.out(const_26_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_26_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O;
endmodule

module ConfigRegister_4_8_32_25 (output [3:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [3:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O;
wire [7:0] const_25_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[3],config_data[2],config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O));
coreir_const #(.value(8'h19), .width(8)) const_25_8(.out(const_25_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_25_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O;
endmodule

module ConfigRegister_4_8_32_24 (output [3:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [3:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O;
wire [7:0] const_24_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[3],config_data[2],config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O));
coreir_const #(.value(8'h18), .width(8)) const_24_8(.out(const_24_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_24_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O;
endmodule

module ConfigRegister_4_8_32_23 (output [3:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [3:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O;
wire [7:0] const_23_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[3],config_data[2],config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O));
coreir_const #(.value(8'h17), .width(8)) const_23_8(.out(const_23_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_23_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O;
endmodule

module ConfigRegister_4_8_32_22 (output [3:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [3:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O;
wire [7:0] const_22_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[3],config_data[2],config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O));
coreir_const #(.value(8'h16), .width(8)) const_22_8(.out(const_22_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_22_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O;
endmodule

module ConfigRegister_4_8_32_21 (output [3:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [3:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O;
wire [7:0] const_21_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[3],config_data[2],config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O));
coreir_const #(.value(8'h15), .width(8)) const_21_8(.out(const_21_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_21_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O;
endmodule

module ConfigRegister_4_8_32_20 (output [3:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [3:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O;
wire [7:0] const_20_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[3],config_data[2],config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O));
coreir_const #(.value(8'h14), .width(8)) const_20_8(.out(const_20_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_20_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O;
endmodule

module ConfigRegister_4_8_32_2 (output [3:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [3:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O;
wire [7:0] const_2_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[3],config_data[2],config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O));
coreir_const #(.value(8'h02), .width(8)) const_2_8(.out(const_2_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_2_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O;
endmodule

module ConfigRegister_4_8_32_0 (output [3:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [3:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O;
wire [7:0] const_0_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[3],config_data[2],config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O));
coreir_const #(.value(8'h00), .width(8)) const_0_8(.out(const_0_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_0_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_4_inst0_O;
endmodule

module ConfigRegister_3_8_32_39 (output [2:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [2:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0_O;
wire [7:0] const_39_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[2],config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0_O));
coreir_const #(.value(8'h27), .width(8)) const_39_8(.out(const_39_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_39_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0_O;
endmodule

module ConfigRegister_3_8_32_38 (output [2:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [2:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0_O;
wire [7:0] const_38_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[2],config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0_O));
coreir_const #(.value(8'h26), .width(8)) const_38_8(.out(const_38_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_38_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0_O;
endmodule

module ConfigRegister_3_8_32_37 (output [2:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [2:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0_O;
wire [7:0] const_37_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[2],config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0_O));
coreir_const #(.value(8'h25), .width(8)) const_37_8(.out(const_37_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_37_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0_O;
endmodule

module ConfigRegister_3_8_32_36 (output [2:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [2:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0_O;
wire [7:0] const_36_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[2],config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0_O));
coreir_const #(.value(8'h24), .width(8)) const_36_8(.out(const_36_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_36_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0_O;
endmodule

module ConfigRegister_3_8_32_35 (output [2:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [2:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0_O;
wire [7:0] const_35_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[2],config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0_O));
coreir_const #(.value(8'h23), .width(8)) const_35_8(.out(const_35_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_35_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0_O;
endmodule

module ConfigRegister_3_8_32_34 (output [2:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [2:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0_O;
wire [7:0] const_34_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[2],config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0_O));
coreir_const #(.value(8'h22), .width(8)) const_34_8(.out(const_34_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_34_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0_O;
endmodule

module ConfigRegister_3_8_32_33 (output [2:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [2:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0_O;
wire [7:0] const_33_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[2],config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0_O));
coreir_const #(.value(8'h21), .width(8)) const_33_8(.out(const_33_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_33_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0_O;
endmodule

module ConfigRegister_3_8_32_32 (output [2:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [2:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0_O;
wire [7:0] const_32_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[2],config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0_O));
coreir_const #(.value(8'h20), .width(8)) const_32_8(.out(const_32_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_32_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0_O;
endmodule

module ConfigRegister_3_8_32_31 (output [2:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [2:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0_O;
wire [7:0] const_31_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[2],config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0_O));
coreir_const #(.value(8'h1f), .width(8)) const_31_8(.out(const_31_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_31_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0_O;
endmodule

module ConfigRegister_3_8_32_30 (output [2:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [2:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0_O;
wire [7:0] const_30_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[2],config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0_O));
coreir_const #(.value(8'h1e), .width(8)) const_30_8(.out(const_30_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_30_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0_O;
endmodule

module ConfigRegister_3_8_32_29 (output [2:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [2:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0_O;
wire [7:0] const_29_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[2],config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0_O));
coreir_const #(.value(8'h1d), .width(8)) const_29_8(.out(const_29_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_29_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0_O;
endmodule

module ConfigRegister_3_8_32_28 (output [2:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [2:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0_O;
wire [7:0] const_28_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[2],config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0_O));
coreir_const #(.value(8'h1c), .width(8)) const_28_8(.out(const_28_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_28_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0_O;
endmodule

module ConfigRegister_3_8_32_27 (output [2:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [2:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0_O;
wire [7:0] const_27_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[2],config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0_O));
coreir_const #(.value(8'h1b), .width(8)) const_27_8(.out(const_27_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_27_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0_O;
endmodule

module ConfigRegister_3_8_32_26 (output [2:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [2:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0_O;
wire [7:0] const_26_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[2],config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0_O));
coreir_const #(.value(8'h1a), .width(8)) const_26_8(.out(const_26_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_26_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0_O;
endmodule

module ConfigRegister_3_8_32_25 (output [2:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [2:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0_O;
wire [7:0] const_25_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[2],config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0_O));
coreir_const #(.value(8'h19), .width(8)) const_25_8(.out(const_25_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_25_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0_O;
endmodule

module ConfigRegister_3_8_32_24 (output [2:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [2:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0_O;
wire [7:0] const_24_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[2],config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0_O));
coreir_const #(.value(8'h18), .width(8)) const_24_8(.out(const_24_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_24_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0_O;
endmodule

module ConfigRegister_3_8_32_23 (output [2:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [2:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0_O;
wire [7:0] const_23_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[2],config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0_O));
coreir_const #(.value(8'h17), .width(8)) const_23_8(.out(const_23_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_23_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0_O;
endmodule

module ConfigRegister_3_8_32_22 (output [2:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [2:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0_O;
wire [7:0] const_22_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[2],config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0_O));
coreir_const #(.value(8'h16), .width(8)) const_22_8(.out(const_22_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_22_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0_O;
endmodule

module ConfigRegister_3_8_32_21 (output [2:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [2:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0_O;
wire [7:0] const_21_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[2],config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0_O));
coreir_const #(.value(8'h15), .width(8)) const_21_8(.out(const_21_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_21_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0_O;
endmodule

module ConfigRegister_3_8_32_20 (output [2:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [2:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0_O;
wire [7:0] const_20_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[2],config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0_O));
coreir_const #(.value(8'h14), .width(8)) const_20_8(.out(const_20_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_20_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_3_inst0_O;
endmodule

module ConfigRegister_32_8_32_2 (output [31:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [31:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_32_inst0_O;
wire [7:0] const_2_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_32 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_32_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I(config_data), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_32_inst0_O));
coreir_const #(.value(8'h02), .width(8)) const_2_8(.out(const_2_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_2_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_32_inst0_O;
endmodule

module ConfigRegister_32_8_32_18 (output [31:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [31:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_32_inst0_O;
wire [7:0] const_18_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_32 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_32_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I(config_data), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_32_inst0_O));
coreir_const #(.value(8'h12), .width(8)) const_18_8(.out(const_18_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_18_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_32_inst0_O;
endmodule

module ConfigRegister_32_8_32_17 (output [31:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [31:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_32_inst0_O;
wire [7:0] const_17_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_32 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_32_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I(config_data), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_32_inst0_O));
coreir_const #(.value(8'h11), .width(8)) const_17_8(.out(const_17_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_17_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_32_inst0_O;
endmodule

module ConfigRegister_32_8_32_16 (output [31:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [31:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_32_inst0_O;
wire [7:0] const_16_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_32 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_32_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I(config_data), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_32_inst0_O));
coreir_const #(.value(8'h10), .width(8)) const_16_8(.out(const_16_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_16_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_32_inst0_O;
endmodule

module ConfigRegister_32_8_32_15 (output [31:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [31:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_32_inst0_O;
wire [7:0] const_15_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_32 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_32_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I(config_data), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_32_inst0_O));
coreir_const #(.value(8'h0f), .width(8)) const_15_8(.out(const_15_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_15_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_32_inst0_O;
endmodule

module ConfigRegister_32_8_32_14 (output [31:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [31:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_32_inst0_O;
wire [7:0] const_14_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_32 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_32_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I(config_data), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_32_inst0_O));
coreir_const #(.value(8'h0e), .width(8)) const_14_8(.out(const_14_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_14_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_32_inst0_O;
endmodule

module ConfigRegister_32_8_32_13 (output [31:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [31:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_32_inst0_O;
wire [7:0] const_13_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_32 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_32_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I(config_data), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_32_inst0_O));
coreir_const #(.value(8'h0d), .width(8)) const_13_8(.out(const_13_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_13_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_32_inst0_O;
endmodule

module ConfigRegister_32_8_32_11 (output [31:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [31:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_32_inst0_O;
wire [7:0] const_11_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_32 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_32_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I(config_data), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_32_inst0_O));
coreir_const #(.value(8'h0b), .width(8)) const_11_8(.out(const_11_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_11_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_32_inst0_O;
endmodule

module ConfigRegister_32_8_32_1 (output [31:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [31:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_32_inst0_O;
wire [7:0] const_1_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_32 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_32_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I(config_data), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_32_inst0_O));
coreir_const #(.value(8'h01), .width(8)) const_1_8(.out(const_1_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_1_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_32_inst0_O;
endmodule

module ConfigRegister_32_8_32_0 (output [31:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [31:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_32_inst0_O;
wire [7:0] const_0_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_32 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_32_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I(config_data), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_32_inst0_O));
coreir_const #(.value(8'h00), .width(8)) const_0_8(.out(const_0_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_0_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_32_inst0_O;
endmodule

module PE_unq1 (output [15:0] alu_res, input [0:0] bit0, input [0:0] bit1, input [0:0] bit2, input clk, input [7:0] config_config_addr, input [31:0] config_config_data, input [0:0] config_read, input [0:0] config_write, input [15:0] data0, input [15:0] data1, output [31:0] read_config_data, output [0:0] res_p, input reset, input [0:0] stall);
wire [0:0] Invert1_inst0_out;
wire [31:0] MuxWrapper_5_32_inst0_O;
wire [31:0] PE_operand1_O;
wire [7:0] PE_operand1_config_addr_out;
wire [31:0] PE_operand1_config_data_out;
wire PE_operand1_config_en_out;
wire PE_operand1_reset_out;
wire [31:0] PE_operand16_O;
wire [7:0] PE_operand16_config_addr_out;
wire [31:0] PE_operand16_config_data_out;
wire PE_operand16_config_en_out;
wire PE_operand16_reset_out;
wire [15:0] WrappedPE_inst0_O0;
wire WrappedPE_inst0_O1;
wire [31:0] WrappedPE_inst0_O2;
wire [31:0] inst_0_O;
wire [31:0] inst_1_O;
wire [31:0] inst_2_O;
wire [0:0] or1_inst0_out;
coreir_not #(.width(1)) Invert1_inst0(.in(stall), .out(Invert1_inst0_out));
MuxWrapper_5_32 MuxWrapper_5_32_inst0(.I_0(inst_0_O), .I_1(inst_1_O), .I_2(inst_2_O), .I_3(PE_operand16_O), .I_4(PE_operand1_O), .O(MuxWrapper_5_32_inst0_O), .S({config_config_addr[2],config_config_addr[1],config_config_addr[0]}));
PassThroughRegister PE_operand1(.O(PE_operand1_O), .O_in(WrappedPE_inst0_O2), .config_addr(config_config_addr), .config_addr_out(PE_operand1_config_addr_out), .config_data(config_config_data), .config_data_out(PE_operand1_config_data_out), .config_en(config_write[0]), .config_en_out(PE_operand1_config_en_out), .reset(reset), .reset_out(PE_operand1_reset_out));
PassThroughRegister PE_operand16(.O(PE_operand16_O), .O_in(WrappedPE_inst0_O2), .config_addr(config_config_addr), .config_addr_out(PE_operand16_config_addr_out), .config_data(config_config_data), .config_data_out(PE_operand16_config_data_out), .config_en(config_write[0]), .config_en_out(PE_operand16_config_en_out), .reset(reset), .reset_out(PE_operand16_reset_out));
WrappedPE WrappedPE_inst0(.ASYNCRESET(reset), .CLK(clk), .O0(WrappedPE_inst0_O0), .O1(WrappedPE_inst0_O1), .O2(WrappedPE_inst0_O2), .bit0(bit0[0]), .bit1(bit1[0]), .bit2(bit2[0]), .clk_en(Invert1_inst0_out[0]), .config_addr(PE_operand16_config_addr_out), .config_data(PE_operand16_config_data_out), .config_en(or1_inst0_out[0]), .data0(data0), .data1(data1), .inst({inst_2_O[2],inst_2_O[1],inst_2_O[0],inst_1_O[31],inst_1_O[30],inst_1_O[29],inst_1_O[28],inst_1_O[27],inst_1_O[26],inst_1_O[25],inst_1_O[24],inst_1_O[23],inst_1_O[22],inst_1_O[21],inst_1_O[20],inst_1_O[19],inst_1_O[18],inst_1_O[17],inst_1_O[16],inst_1_O[15],inst_1_O[14],inst_1_O[13],inst_1_O[12],inst_1_O[11],inst_1_O[10],inst_1_O[9],inst_1_O[8],inst_1_O[7],inst_1_O[6],inst_1_O[5],inst_1_O[4],inst_1_O[3],inst_1_O[2],inst_1_O[1],inst_1_O[0],inst_0_O[31],inst_0_O[30],inst_0_O[29],inst_0_O[28],inst_0_O[27],inst_0_O[26],inst_0_O[25],inst_0_O[24],inst_0_O[23],inst_0_O[22],inst_0_O[21],inst_0_O[20],inst_0_O[19],inst_0_O[18],inst_0_O[17],inst_0_O[16],inst_0_O[15],inst_0_O[14],inst_0_O[13],inst_0_O[12],inst_0_O[11],inst_0_O[10],inst_0_O[9],inst_0_O[8],inst_0_O[7],inst_0_O[6],inst_0_O[5],inst_0_O[4],inst_0_O[3],inst_0_O[2],inst_0_O[1],inst_0_O[0]}));
ConfigRegister_32_8_32_0 inst_0(.O(inst_0_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_32_8_32_1 inst_1(.O(inst_1_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_32_8_32_2 inst_2(.O(inst_2_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
coreir_or #(.width(1)) or1_inst0(.in0(PE_operand16_config_en_out), .in1(PE_operand1_config_en_out), .out(or1_inst0_out));
assign alu_res = WrappedPE_inst0_O0;
assign read_config_data = MuxWrapper_5_32_inst0_O;
assign res_p = WrappedPE_inst0_O1;
endmodule

module ConfigRegister_2_8_32_39 (output [1:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [1:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O;
wire [7:0] const_39_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O));
coreir_const #(.value(8'h27), .width(8)) const_39_8(.out(const_39_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_39_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O;
endmodule

module ConfigRegister_2_8_32_38 (output [1:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [1:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O;
wire [7:0] const_38_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O));
coreir_const #(.value(8'h26), .width(8)) const_38_8(.out(const_38_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_38_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O;
endmodule

module ConfigRegister_2_8_32_37 (output [1:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [1:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O;
wire [7:0] const_37_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O));
coreir_const #(.value(8'h25), .width(8)) const_37_8(.out(const_37_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_37_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O;
endmodule

module ConfigRegister_2_8_32_36 (output [1:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [1:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O;
wire [7:0] const_36_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O));
coreir_const #(.value(8'h24), .width(8)) const_36_8(.out(const_36_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_36_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O;
endmodule

module ConfigRegister_2_8_32_35 (output [1:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [1:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O;
wire [7:0] const_35_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O));
coreir_const #(.value(8'h23), .width(8)) const_35_8(.out(const_35_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_35_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O;
endmodule

module ConfigRegister_2_8_32_34 (output [1:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [1:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O;
wire [7:0] const_34_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O));
coreir_const #(.value(8'h22), .width(8)) const_34_8(.out(const_34_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_34_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O;
endmodule

module ConfigRegister_2_8_32_33 (output [1:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [1:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O;
wire [7:0] const_33_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O));
coreir_const #(.value(8'h21), .width(8)) const_33_8(.out(const_33_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_33_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O;
endmodule

module ConfigRegister_2_8_32_32 (output [1:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [1:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O;
wire [7:0] const_32_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O));
coreir_const #(.value(8'h20), .width(8)) const_32_8(.out(const_32_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_32_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O;
endmodule

module ConfigRegister_2_8_32_31 (output [1:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [1:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O;
wire [7:0] const_31_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O));
coreir_const #(.value(8'h1f), .width(8)) const_31_8(.out(const_31_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_31_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O;
endmodule

module ConfigRegister_2_8_32_30 (output [1:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [1:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O;
wire [7:0] const_30_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O));
coreir_const #(.value(8'h1e), .width(8)) const_30_8(.out(const_30_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_30_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O;
endmodule

module ConfigRegister_2_8_32_29 (output [1:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [1:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O;
wire [7:0] const_29_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O));
coreir_const #(.value(8'h1d), .width(8)) const_29_8(.out(const_29_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_29_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O;
endmodule

module ConfigRegister_2_8_32_28 (output [1:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [1:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O;
wire [7:0] const_28_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O));
coreir_const #(.value(8'h1c), .width(8)) const_28_8(.out(const_28_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_28_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O;
endmodule

module ConfigRegister_2_8_32_27 (output [1:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [1:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O;
wire [7:0] const_27_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O));
coreir_const #(.value(8'h1b), .width(8)) const_27_8(.out(const_27_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_27_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O;
endmodule

module ConfigRegister_2_8_32_26 (output [1:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [1:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O;
wire [7:0] const_26_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O));
coreir_const #(.value(8'h1a), .width(8)) const_26_8(.out(const_26_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_26_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O;
endmodule

module ConfigRegister_2_8_32_25 (output [1:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [1:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O;
wire [7:0] const_25_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O));
coreir_const #(.value(8'h19), .width(8)) const_25_8(.out(const_25_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_25_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O;
endmodule

module ConfigRegister_2_8_32_24 (output [1:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [1:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O;
wire [7:0] const_24_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O));
coreir_const #(.value(8'h18), .width(8)) const_24_8(.out(const_24_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_24_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O;
endmodule

module ConfigRegister_2_8_32_23 (output [1:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [1:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O;
wire [7:0] const_23_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O));
coreir_const #(.value(8'h17), .width(8)) const_23_8(.out(const_23_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_23_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O;
endmodule

module ConfigRegister_2_8_32_22 (output [1:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [1:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O;
wire [7:0] const_22_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O));
coreir_const #(.value(8'h16), .width(8)) const_22_8(.out(const_22_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_22_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O;
endmodule

module ConfigRegister_2_8_32_21 (output [1:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [1:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O;
wire [7:0] const_21_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O));
coreir_const #(.value(8'h15), .width(8)) const_21_8(.out(const_21_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_21_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O;
endmodule

module ConfigRegister_2_8_32_20 (output [1:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [1:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O;
wire [7:0] const_20_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O));
coreir_const #(.value(8'h14), .width(8)) const_20_8(.out(const_20_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_20_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O;
endmodule

module ConfigRegister_2_8_32_12 (output [1:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [1:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O;
wire [7:0] const_12_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O));
coreir_const #(.value(8'h0c), .width(8)) const_12_8(.out(const_12_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_12_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_2_inst0_O;
endmodule

module ConfigRegister_1_8_32_9 (output [0:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [0:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O;
wire [7:0] const_9_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I(config_data[0]), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O));
coreir_const #(.value(8'h09), .width(8)) const_9_8(.out(const_9_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_9_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O;
endmodule

module ConfigRegister_1_8_32_8 (output [0:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [0:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O;
wire [7:0] const_8_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I(config_data[0]), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O));
coreir_const #(.value(8'h08), .width(8)) const_8_8(.out(const_8_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_8_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O;
endmodule

module ConfigRegister_1_8_32_7 (output [0:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [0:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O;
wire [7:0] const_7_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I(config_data[0]), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O));
coreir_const #(.value(8'h07), .width(8)) const_7_8(.out(const_7_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_7_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O;
endmodule

module ConfigRegister_1_8_32_6 (output [0:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [0:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O;
wire [7:0] const_6_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I(config_data[0]), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O));
coreir_const #(.value(8'h06), .width(8)) const_6_8(.out(const_6_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_6_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O;
endmodule

module ConfigRegister_1_8_32_5 (output [0:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [0:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O;
wire [7:0] const_5_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I(config_data[0]), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O));
coreir_const #(.value(8'h05), .width(8)) const_5_8(.out(const_5_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_5_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O;
endmodule

module ConfigRegister_1_8_32_4 (output [0:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [0:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O;
wire [7:0] const_4_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I(config_data[0]), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O));
coreir_const #(.value(8'h04), .width(8)) const_4_8(.out(const_4_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_4_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O;
endmodule

module ConfigRegister_1_8_32_34 (output [0:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [0:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O;
wire [7:0] const_34_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I(config_data[0]), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O));
coreir_const #(.value(8'h22), .width(8)) const_34_8(.out(const_34_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_34_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O;
endmodule

module ConfigRegister_1_8_32_33 (output [0:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [0:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O;
wire [7:0] const_33_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I(config_data[0]), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O));
coreir_const #(.value(8'h21), .width(8)) const_33_8(.out(const_33_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_33_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O;
endmodule

module ConfigRegister_1_8_32_32 (output [0:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [0:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O;
wire [7:0] const_32_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I(config_data[0]), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O));
coreir_const #(.value(8'h20), .width(8)) const_32_8(.out(const_32_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_32_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O;
endmodule

module ConfigRegister_1_8_32_31 (output [0:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [0:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O;
wire [7:0] const_31_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I(config_data[0]), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O));
coreir_const #(.value(8'h1f), .width(8)) const_31_8(.out(const_31_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_31_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O;
endmodule

module ConfigRegister_1_8_32_30 (output [0:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [0:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O;
wire [7:0] const_30_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I(config_data[0]), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O));
coreir_const #(.value(8'h1e), .width(8)) const_30_8(.out(const_30_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_30_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O;
endmodule

module ConfigRegister_1_8_32_3 (output [0:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [0:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O;
wire [7:0] const_3_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I(config_data[0]), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O));
coreir_const #(.value(8'h03), .width(8)) const_3_8(.out(const_3_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_3_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O;
endmodule

module ConfigRegister_1_8_32_21 (output [0:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [0:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O;
wire [7:0] const_21_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I(config_data[0]), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O));
coreir_const #(.value(8'h15), .width(8)) const_21_8(.out(const_21_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_21_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O;
endmodule

module ConfigRegister_1_8_32_20 (output [0:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [0:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O;
wire [7:0] const_20_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I(config_data[0]), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O));
coreir_const #(.value(8'h14), .width(8)) const_20_8(.out(const_20_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_20_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O;
endmodule

module ConfigRegister_1_8_32_2 (output [0:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [0:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O;
wire [7:0] const_2_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I(config_data[0]), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O));
coreir_const #(.value(8'h02), .width(8)) const_2_8(.out(const_2_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_2_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O;
endmodule

module ConfigRegister_1_8_32_19 (output [0:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [0:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O;
wire [7:0] const_19_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I(config_data[0]), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O));
coreir_const #(.value(8'h13), .width(8)) const_19_8(.out(const_19_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_19_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O;
endmodule

module ConfigRegister_1_8_32_18 (output [0:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [0:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O;
wire [7:0] const_18_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I(config_data[0]), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O));
coreir_const #(.value(8'h12), .width(8)) const_18_8(.out(const_18_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_18_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O;
endmodule

module ConfigRegister_1_8_32_17 (output [0:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [0:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O;
wire [7:0] const_17_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I(config_data[0]), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O));
coreir_const #(.value(8'h11), .width(8)) const_17_8(.out(const_17_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_17_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O;
endmodule

module ConfigRegister_1_8_32_16 (output [0:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [0:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O;
wire [7:0] const_16_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I(config_data[0]), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O));
coreir_const #(.value(8'h10), .width(8)) const_16_8(.out(const_16_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_16_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O;
endmodule

module ConfigRegister_1_8_32_15 (output [0:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [0:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O;
wire [7:0] const_15_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I(config_data[0]), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O));
coreir_const #(.value(8'h0f), .width(8)) const_15_8(.out(const_15_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_15_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O;
endmodule

module ConfigRegister_1_8_32_14 (output [0:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [0:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O;
wire [7:0] const_14_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I(config_data[0]), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O));
coreir_const #(.value(8'h0e), .width(8)) const_14_8(.out(const_14_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_14_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O;
endmodule

module ConfigRegister_1_8_32_13 (output [0:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [0:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O;
wire [7:0] const_13_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I(config_data[0]), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O));
coreir_const #(.value(8'h0d), .width(8)) const_13_8(.out(const_13_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_13_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O;
endmodule

module ConfigRegister_1_8_32_12 (output [0:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [0:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O;
wire [7:0] const_12_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I(config_data[0]), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O));
coreir_const #(.value(8'h0c), .width(8)) const_12_8(.out(const_12_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_12_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O;
endmodule

module ConfigRegister_1_8_32_11 (output [0:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [0:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O;
wire [7:0] const_11_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I(config_data[0]), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O));
coreir_const #(.value(8'h0b), .width(8)) const_11_8(.out(const_11_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_11_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O;
endmodule

module ConfigRegister_1_8_32_10 (output [0:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [0:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O;
wire [7:0] const_10_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I(config_data[0]), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O));
coreir_const #(.value(8'h0a), .width(8)) const_10_8(.out(const_10_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_10_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O;
endmodule

module ConfigRegister_1_8_32_1 (output [0:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [0:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O;
wire [7:0] const_1_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I(config_data[0]), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O));
coreir_const #(.value(8'h01), .width(8)) const_1_8(.out(const_1_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_1_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O;
endmodule

module ConfigRegister_1_8_32_0 (output [0:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [0:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O;
wire [7:0] const_0_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I(config_data[0]), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O));
coreir_const #(.value(8'h00), .width(8)) const_0_8(.out(const_0_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_0_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_1_inst0_O;
endmodule

module SB_ID0_5TRACKS_B1_PE (input [0:0] SB_T0_EAST_SB_IN_B1_0, output [0:0] SB_T0_EAST_SB_OUT_B1, input [0:0] SB_T0_NORTH_SB_IN_B1_0, output [0:0] SB_T0_NORTH_SB_OUT_B1, input [0:0] SB_T0_SOUTH_SB_IN_B1_0, output [0:0] SB_T0_SOUTH_SB_OUT_B1, input [0:0] SB_T0_WEST_SB_IN_B1_0, output [0:0] SB_T0_WEST_SB_OUT_B1, input [0:0] SB_T1_EAST_SB_IN_B1_0, output [0:0] SB_T1_EAST_SB_OUT_B1, input [0:0] SB_T1_NORTH_SB_IN_B1_0, output [0:0] SB_T1_NORTH_SB_OUT_B1, input [0:0] SB_T1_SOUTH_SB_IN_B1_0, output [0:0] SB_T1_SOUTH_SB_OUT_B1, input [0:0] SB_T1_WEST_SB_IN_B1_0, output [0:0] SB_T1_WEST_SB_OUT_B1, input [0:0] SB_T2_EAST_SB_IN_B1_0, output [0:0] SB_T2_EAST_SB_OUT_B1, input [0:0] SB_T2_NORTH_SB_IN_B1_0, output [0:0] SB_T2_NORTH_SB_OUT_B1, input [0:0] SB_T2_SOUTH_SB_IN_B1_0, output [0:0] SB_T2_SOUTH_SB_OUT_B1, input [0:0] SB_T2_WEST_SB_IN_B1_0, output [0:0] SB_T2_WEST_SB_OUT_B1, input [0:0] SB_T3_EAST_SB_IN_B1_0, output [0:0] SB_T3_EAST_SB_OUT_B1, input [0:0] SB_T3_NORTH_SB_IN_B1_0, output [0:0] SB_T3_NORTH_SB_OUT_B1, input [0:0] SB_T3_SOUTH_SB_IN_B1_0, output [0:0] SB_T3_SOUTH_SB_OUT_B1, input [0:0] SB_T3_WEST_SB_IN_B1_0, output [0:0] SB_T3_WEST_SB_OUT_B1, input [0:0] SB_T4_EAST_SB_IN_B1_0, output [0:0] SB_T4_EAST_SB_OUT_B1, input [0:0] SB_T4_NORTH_SB_IN_B1_0, output [0:0] SB_T4_NORTH_SB_OUT_B1, input [0:0] SB_T4_SOUTH_SB_IN_B1_0, output [0:0] SB_T4_SOUTH_SB_OUT_B1, input [0:0] SB_T4_WEST_SB_IN_B1_0, output [0:0] SB_T4_WEST_SB_OUT_B1, input clk, input [7:0] config_config_addr, input [31:0] config_config_data, input [0:0] config_read, input [0:0] config_write, output [31:0] read_config_data, input [0:0] res_p, input reset, input [0:0] stall);
wire [0:0] Invert1_inst0_out;
wire [0:0] MUX_SB_T0_EAST_SB_OUT_B1_O;
wire [0:0] MUX_SB_T0_NORTH_SB_OUT_B1_O;
wire [0:0] MUX_SB_T0_SOUTH_SB_OUT_B1_O;
wire [0:0] MUX_SB_T0_WEST_SB_OUT_B1_O;
wire [0:0] MUX_SB_T1_EAST_SB_OUT_B1_O;
wire [0:0] MUX_SB_T1_NORTH_SB_OUT_B1_O;
wire [0:0] MUX_SB_T1_SOUTH_SB_OUT_B1_O;
wire [0:0] MUX_SB_T1_WEST_SB_OUT_B1_O;
wire [0:0] MUX_SB_T2_EAST_SB_OUT_B1_O;
wire [0:0] MUX_SB_T2_NORTH_SB_OUT_B1_O;
wire [0:0] MUX_SB_T2_SOUTH_SB_OUT_B1_O;
wire [0:0] MUX_SB_T2_WEST_SB_OUT_B1_O;
wire [0:0] MUX_SB_T3_EAST_SB_OUT_B1_O;
wire [0:0] MUX_SB_T3_NORTH_SB_OUT_B1_O;
wire [0:0] MUX_SB_T3_SOUTH_SB_OUT_B1_O;
wire [0:0] MUX_SB_T3_WEST_SB_OUT_B1_O;
wire [0:0] MUX_SB_T4_EAST_SB_OUT_B1_O;
wire [0:0] MUX_SB_T4_NORTH_SB_OUT_B1_O;
wire [0:0] MUX_SB_T4_SOUTH_SB_OUT_B1_O;
wire [0:0] MUX_SB_T4_WEST_SB_OUT_B1_O;
wire [31:0] MuxWrapper_40_32_inst0_O;
wire [0:0] REG_T0_EAST_B1_O;
wire [0:0] REG_T0_NORTH_B1_O;
wire [0:0] REG_T0_SOUTH_B1_O;
wire [0:0] REG_T0_WEST_B1_O;
wire [0:0] REG_T1_EAST_B1_O;
wire [0:0] REG_T1_NORTH_B1_O;
wire [0:0] REG_T1_SOUTH_B1_O;
wire [0:0] REG_T1_WEST_B1_O;
wire [0:0] REG_T2_EAST_B1_O;
wire [0:0] REG_T2_NORTH_B1_O;
wire [0:0] REG_T2_SOUTH_B1_O;
wire [0:0] REG_T2_WEST_B1_O;
wire [0:0] REG_T3_EAST_B1_O;
wire [0:0] REG_T3_NORTH_B1_O;
wire [0:0] REG_T3_SOUTH_B1_O;
wire [0:0] REG_T3_WEST_B1_O;
wire [0:0] REG_T4_EAST_B1_O;
wire [0:0] REG_T4_NORTH_B1_O;
wire [0:0] REG_T4_SOUTH_B1_O;
wire [0:0] REG_T4_WEST_B1_O;
wire [0:0] RMUX_T0_EAST_B1_O;
wire [0:0] RMUX_T0_EAST_B1_sel_O;
wire [0:0] RMUX_T0_NORTH_B1_O;
wire [0:0] RMUX_T0_NORTH_B1_sel_O;
wire [0:0] RMUX_T0_SOUTH_B1_O;
wire [0:0] RMUX_T0_SOUTH_B1_sel_O;
wire [0:0] RMUX_T0_WEST_B1_O;
wire [0:0] RMUX_T0_WEST_B1_sel_O;
wire [0:0] RMUX_T1_EAST_B1_O;
wire [0:0] RMUX_T1_EAST_B1_sel_O;
wire [0:0] RMUX_T1_NORTH_B1_O;
wire [0:0] RMUX_T1_NORTH_B1_sel_O;
wire [0:0] RMUX_T1_SOUTH_B1_O;
wire [0:0] RMUX_T1_SOUTH_B1_sel_O;
wire [0:0] RMUX_T1_WEST_B1_O;
wire [0:0] RMUX_T1_WEST_B1_sel_O;
wire [0:0] RMUX_T2_EAST_B1_O;
wire [0:0] RMUX_T2_EAST_B1_sel_O;
wire [0:0] RMUX_T2_NORTH_B1_O;
wire [0:0] RMUX_T2_NORTH_B1_sel_O;
wire [0:0] RMUX_T2_SOUTH_B1_O;
wire [0:0] RMUX_T2_SOUTH_B1_sel_O;
wire [0:0] RMUX_T2_WEST_B1_O;
wire [0:0] RMUX_T2_WEST_B1_sel_O;
wire [0:0] RMUX_T3_EAST_B1_O;
wire [0:0] RMUX_T3_EAST_B1_sel_O;
wire [0:0] RMUX_T3_NORTH_B1_O;
wire [0:0] RMUX_T3_NORTH_B1_sel_O;
wire [0:0] RMUX_T3_SOUTH_B1_O;
wire [0:0] RMUX_T3_SOUTH_B1_sel_O;
wire [0:0] RMUX_T3_WEST_B1_O;
wire [0:0] RMUX_T3_WEST_B1_sel_O;
wire [0:0] RMUX_T4_EAST_B1_O;
wire [0:0] RMUX_T4_EAST_B1_sel_O;
wire [0:0] RMUX_T4_NORTH_B1_O;
wire [0:0] RMUX_T4_NORTH_B1_sel_O;
wire [0:0] RMUX_T4_SOUTH_B1_O;
wire [0:0] RMUX_T4_SOUTH_B1_sel_O;
wire [0:0] RMUX_T4_WEST_B1_O;
wire [0:0] RMUX_T4_WEST_B1_sel_O;
wire [1:0] SB_T0_EAST_SB_OUT_B1_sel_O;
wire [1:0] SB_T0_NORTH_SB_OUT_B1_sel_O;
wire [1:0] SB_T0_SOUTH_SB_OUT_B1_sel_O;
wire [1:0] SB_T0_WEST_SB_OUT_B1_sel_O;
wire [1:0] SB_T1_EAST_SB_OUT_B1_sel_O;
wire [1:0] SB_T1_NORTH_SB_OUT_B1_sel_O;
wire [1:0] SB_T1_SOUTH_SB_OUT_B1_sel_O;
wire [1:0] SB_T1_WEST_SB_OUT_B1_sel_O;
wire [1:0] SB_T2_EAST_SB_OUT_B1_sel_O;
wire [1:0] SB_T2_NORTH_SB_OUT_B1_sel_O;
wire [1:0] SB_T2_SOUTH_SB_OUT_B1_sel_O;
wire [1:0] SB_T2_WEST_SB_OUT_B1_sel_O;
wire [1:0] SB_T3_EAST_SB_OUT_B1_sel_O;
wire [1:0] SB_T3_NORTH_SB_OUT_B1_sel_O;
wire [1:0] SB_T3_SOUTH_SB_OUT_B1_sel_O;
wire [1:0] SB_T3_WEST_SB_OUT_B1_sel_O;
wire [1:0] SB_T4_EAST_SB_OUT_B1_sel_O;
wire [1:0] SB_T4_NORTH_SB_OUT_B1_sel_O;
wire [1:0] SB_T4_SOUTH_SB_OUT_B1_sel_O;
wire [1:0] SB_T4_WEST_SB_OUT_B1_sel_O;
wire [0:0] WIRE_SB_T0_EAST_SB_IN_B1_O;
wire [0:0] WIRE_SB_T0_NORTH_SB_IN_B1_O;
wire [0:0] WIRE_SB_T0_SOUTH_SB_IN_B1_O;
wire [0:0] WIRE_SB_T0_WEST_SB_IN_B1_O;
wire [0:0] WIRE_SB_T1_EAST_SB_IN_B1_O;
wire [0:0] WIRE_SB_T1_NORTH_SB_IN_B1_O;
wire [0:0] WIRE_SB_T1_SOUTH_SB_IN_B1_O;
wire [0:0] WIRE_SB_T1_WEST_SB_IN_B1_O;
wire [0:0] WIRE_SB_T2_EAST_SB_IN_B1_O;
wire [0:0] WIRE_SB_T2_NORTH_SB_IN_B1_O;
wire [0:0] WIRE_SB_T2_SOUTH_SB_IN_B1_O;
wire [0:0] WIRE_SB_T2_WEST_SB_IN_B1_O;
wire [0:0] WIRE_SB_T3_EAST_SB_IN_B1_O;
wire [0:0] WIRE_SB_T3_NORTH_SB_IN_B1_O;
wire [0:0] WIRE_SB_T3_SOUTH_SB_IN_B1_O;
wire [0:0] WIRE_SB_T3_WEST_SB_IN_B1_O;
wire [0:0] WIRE_SB_T4_EAST_SB_IN_B1_O;
wire [0:0] WIRE_SB_T4_NORTH_SB_IN_B1_O;
wire [0:0] WIRE_SB_T4_SOUTH_SB_IN_B1_O;
wire [0:0] WIRE_SB_T4_WEST_SB_IN_B1_O;
wire [31:0] ZextWrapper_1_32_inst0_O;
wire [31:0] ZextWrapper_1_32_inst1_O;
wire [31:0] ZextWrapper_1_32_inst10_O;
wire [31:0] ZextWrapper_1_32_inst11_O;
wire [31:0] ZextWrapper_1_32_inst12_O;
wire [31:0] ZextWrapper_1_32_inst13_O;
wire [31:0] ZextWrapper_1_32_inst14_O;
wire [31:0] ZextWrapper_1_32_inst15_O;
wire [31:0] ZextWrapper_1_32_inst16_O;
wire [31:0] ZextWrapper_1_32_inst17_O;
wire [31:0] ZextWrapper_1_32_inst18_O;
wire [31:0] ZextWrapper_1_32_inst19_O;
wire [31:0] ZextWrapper_1_32_inst2_O;
wire [31:0] ZextWrapper_1_32_inst3_O;
wire [31:0] ZextWrapper_1_32_inst4_O;
wire [31:0] ZextWrapper_1_32_inst5_O;
wire [31:0] ZextWrapper_1_32_inst6_O;
wire [31:0] ZextWrapper_1_32_inst7_O;
wire [31:0] ZextWrapper_1_32_inst8_O;
wire [31:0] ZextWrapper_1_32_inst9_O;
wire [31:0] ZextWrapper_2_32_inst0_O;
wire [31:0] ZextWrapper_2_32_inst1_O;
wire [31:0] ZextWrapper_2_32_inst10_O;
wire [31:0] ZextWrapper_2_32_inst11_O;
wire [31:0] ZextWrapper_2_32_inst12_O;
wire [31:0] ZextWrapper_2_32_inst13_O;
wire [31:0] ZextWrapper_2_32_inst14_O;
wire [31:0] ZextWrapper_2_32_inst15_O;
wire [31:0] ZextWrapper_2_32_inst16_O;
wire [31:0] ZextWrapper_2_32_inst17_O;
wire [31:0] ZextWrapper_2_32_inst18_O;
wire [31:0] ZextWrapper_2_32_inst19_O;
wire [31:0] ZextWrapper_2_32_inst2_O;
wire [31:0] ZextWrapper_2_32_inst3_O;
wire [31:0] ZextWrapper_2_32_inst4_O;
wire [31:0] ZextWrapper_2_32_inst5_O;
wire [31:0] ZextWrapper_2_32_inst6_O;
wire [31:0] ZextWrapper_2_32_inst7_O;
wire [31:0] ZextWrapper_2_32_inst8_O;
wire [31:0] ZextWrapper_2_32_inst9_O;
coreir_not #(.width(1)) Invert1_inst0(.in(stall), .out(Invert1_inst0_out));
MuxWrapper_4_1 MUX_SB_T0_EAST_SB_OUT_B1(.I_0(WIRE_SB_T0_WEST_SB_IN_B1_O), .I_1(WIRE_SB_T3_SOUTH_SB_IN_B1_O), .I_2(WIRE_SB_T4_NORTH_SB_IN_B1_O), .I_3(res_p), .O(MUX_SB_T0_EAST_SB_OUT_B1_O), .S(SB_T0_EAST_SB_OUT_B1_sel_O));
MuxWrapper_4_1 MUX_SB_T0_NORTH_SB_OUT_B1(.I_0(WIRE_SB_T0_WEST_SB_IN_B1_O), .I_1(WIRE_SB_T1_EAST_SB_IN_B1_O), .I_2(WIRE_SB_T0_SOUTH_SB_IN_B1_O), .I_3(res_p), .O(MUX_SB_T0_NORTH_SB_OUT_B1_O), .S(SB_T0_NORTH_SB_OUT_B1_sel_O));
MuxWrapper_4_1 MUX_SB_T0_SOUTH_SB_OUT_B1(.I_0(WIRE_SB_T3_EAST_SB_IN_B1_O), .I_1(WIRE_SB_T0_NORTH_SB_IN_B1_O), .I_2(WIRE_SB_T1_WEST_SB_IN_B1_O), .I_3(res_p), .O(MUX_SB_T0_SOUTH_SB_OUT_B1_O), .S(SB_T0_SOUTH_SB_OUT_B1_sel_O));
MuxWrapper_4_1 MUX_SB_T0_WEST_SB_OUT_B1(.I_0(WIRE_SB_T0_NORTH_SB_IN_B1_O), .I_1(WIRE_SB_T4_SOUTH_SB_IN_B1_O), .I_2(WIRE_SB_T0_EAST_SB_IN_B1_O), .I_3(res_p), .O(MUX_SB_T0_WEST_SB_OUT_B1_O), .S(SB_T0_WEST_SB_OUT_B1_sel_O));
MuxWrapper_4_1 MUX_SB_T1_EAST_SB_OUT_B1(.I_0(WIRE_SB_T0_NORTH_SB_IN_B1_O), .I_1(WIRE_SB_T1_WEST_SB_IN_B1_O), .I_2(WIRE_SB_T2_SOUTH_SB_IN_B1_O), .I_3(res_p), .O(MUX_SB_T1_EAST_SB_OUT_B1_O), .S(SB_T1_EAST_SB_OUT_B1_sel_O));
MuxWrapper_4_1 MUX_SB_T1_NORTH_SB_OUT_B1(.I_0(WIRE_SB_T2_EAST_SB_IN_B1_O), .I_1(WIRE_SB_T1_SOUTH_SB_IN_B1_O), .I_2(WIRE_SB_T4_WEST_SB_IN_B1_O), .I_3(res_p), .O(MUX_SB_T1_NORTH_SB_OUT_B1_O), .S(SB_T1_NORTH_SB_OUT_B1_sel_O));
MuxWrapper_4_1 MUX_SB_T1_SOUTH_SB_OUT_B1(.I_0(WIRE_SB_T2_EAST_SB_IN_B1_O), .I_1(WIRE_SB_T1_NORTH_SB_IN_B1_O), .I_2(WIRE_SB_T2_WEST_SB_IN_B1_O), .I_3(res_p), .O(MUX_SB_T1_SOUTH_SB_OUT_B1_O), .S(SB_T1_SOUTH_SB_OUT_B1_sel_O));
MuxWrapper_4_1 MUX_SB_T1_WEST_SB_OUT_B1(.I_0(WIRE_SB_T4_NORTH_SB_IN_B1_O), .I_1(WIRE_SB_T0_SOUTH_SB_IN_B1_O), .I_2(WIRE_SB_T1_EAST_SB_IN_B1_O), .I_3(res_p), .O(MUX_SB_T1_WEST_SB_OUT_B1_O), .S(SB_T1_WEST_SB_OUT_B1_sel_O));
MuxWrapper_4_1 MUX_SB_T2_EAST_SB_OUT_B1(.I_0(WIRE_SB_T1_NORTH_SB_IN_B1_O), .I_1(WIRE_SB_T1_SOUTH_SB_IN_B1_O), .I_2(WIRE_SB_T2_WEST_SB_IN_B1_O), .I_3(res_p), .O(MUX_SB_T2_EAST_SB_OUT_B1_O), .S(SB_T2_EAST_SB_OUT_B1_sel_O));
MuxWrapper_4_1 MUX_SB_T2_NORTH_SB_OUT_B1(.I_0(WIRE_SB_T3_EAST_SB_IN_B1_O), .I_1(WIRE_SB_T2_SOUTH_SB_IN_B1_O), .I_2(WIRE_SB_T3_WEST_SB_IN_B1_O), .I_3(res_p), .O(MUX_SB_T2_NORTH_SB_OUT_B1_O), .S(SB_T2_NORTH_SB_OUT_B1_sel_O));
MuxWrapper_4_1 MUX_SB_T2_SOUTH_SB_OUT_B1(.I_0(WIRE_SB_T1_EAST_SB_IN_B1_O), .I_1(WIRE_SB_T2_NORTH_SB_IN_B1_O), .I_2(WIRE_SB_T3_WEST_SB_IN_B1_O), .I_3(res_p), .O(MUX_SB_T2_SOUTH_SB_OUT_B1_O), .S(SB_T2_SOUTH_SB_OUT_B1_sel_O));
MuxWrapper_4_1 MUX_SB_T2_WEST_SB_OUT_B1(.I_0(WIRE_SB_T3_NORTH_SB_IN_B1_O), .I_1(WIRE_SB_T1_SOUTH_SB_IN_B1_O), .I_2(WIRE_SB_T2_EAST_SB_IN_B1_O), .I_3(res_p), .O(MUX_SB_T2_WEST_SB_OUT_B1_O), .S(SB_T2_WEST_SB_OUT_B1_sel_O));
MuxWrapper_4_1 MUX_SB_T3_EAST_SB_OUT_B1(.I_0(WIRE_SB_T0_SOUTH_SB_IN_B1_O), .I_1(WIRE_SB_T2_NORTH_SB_IN_B1_O), .I_2(WIRE_SB_T3_WEST_SB_IN_B1_O), .I_3(res_p), .O(MUX_SB_T3_EAST_SB_OUT_B1_O), .S(SB_T3_EAST_SB_OUT_B1_sel_O));
MuxWrapper_4_1 MUX_SB_T3_NORTH_SB_OUT_B1(.I_0(WIRE_SB_T2_WEST_SB_IN_B1_O), .I_1(WIRE_SB_T4_EAST_SB_IN_B1_O), .I_2(WIRE_SB_T3_SOUTH_SB_IN_B1_O), .I_3(res_p), .O(MUX_SB_T3_NORTH_SB_OUT_B1_O), .S(SB_T3_NORTH_SB_OUT_B1_sel_O));
MuxWrapper_4_1 MUX_SB_T3_SOUTH_SB_OUT_B1(.I_0(WIRE_SB_T0_EAST_SB_IN_B1_O), .I_1(WIRE_SB_T3_NORTH_SB_IN_B1_O), .I_2(WIRE_SB_T4_WEST_SB_IN_B1_O), .I_3(res_p), .O(MUX_SB_T3_SOUTH_SB_OUT_B1_O), .S(SB_T3_SOUTH_SB_OUT_B1_sel_O));
MuxWrapper_4_1 MUX_SB_T3_WEST_SB_OUT_B1(.I_0(WIRE_SB_T2_NORTH_SB_IN_B1_O), .I_1(WIRE_SB_T2_SOUTH_SB_IN_B1_O), .I_2(WIRE_SB_T3_EAST_SB_IN_B1_O), .I_3(res_p), .O(MUX_SB_T3_WEST_SB_OUT_B1_O), .S(SB_T3_WEST_SB_OUT_B1_sel_O));
MuxWrapper_4_1 MUX_SB_T4_EAST_SB_OUT_B1(.I_0(WIRE_SB_T3_NORTH_SB_IN_B1_O), .I_1(WIRE_SB_T4_SOUTH_SB_IN_B1_O), .I_2(WIRE_SB_T4_WEST_SB_IN_B1_O), .I_3(res_p), .O(MUX_SB_T4_EAST_SB_OUT_B1_O), .S(SB_T4_EAST_SB_OUT_B1_sel_O));
MuxWrapper_4_1 MUX_SB_T4_NORTH_SB_OUT_B1(.I_0(WIRE_SB_T1_WEST_SB_IN_B1_O), .I_1(WIRE_SB_T0_EAST_SB_IN_B1_O), .I_2(WIRE_SB_T4_SOUTH_SB_IN_B1_O), .I_3(res_p), .O(MUX_SB_T4_NORTH_SB_OUT_B1_O), .S(SB_T4_NORTH_SB_OUT_B1_sel_O));
MuxWrapper_4_1 MUX_SB_T4_SOUTH_SB_OUT_B1(.I_0(WIRE_SB_T0_WEST_SB_IN_B1_O), .I_1(WIRE_SB_T4_EAST_SB_IN_B1_O), .I_2(WIRE_SB_T4_NORTH_SB_IN_B1_O), .I_3(res_p), .O(MUX_SB_T4_SOUTH_SB_OUT_B1_O), .S(SB_T4_SOUTH_SB_OUT_B1_sel_O));
MuxWrapper_4_1 MUX_SB_T4_WEST_SB_OUT_B1(.I_0(WIRE_SB_T1_NORTH_SB_IN_B1_O), .I_1(WIRE_SB_T3_SOUTH_SB_IN_B1_O), .I_2(WIRE_SB_T4_EAST_SB_IN_B1_O), .I_3(res_p), .O(MUX_SB_T4_WEST_SB_OUT_B1_O), .S(SB_T4_WEST_SB_OUT_B1_sel_O));
MuxWrapper_40_32 MuxWrapper_40_32_inst0(.I_0(ZextWrapper_1_32_inst0_O), .I_1(ZextWrapper_1_32_inst1_O), .I_10(ZextWrapper_1_32_inst10_O), .I_11(ZextWrapper_1_32_inst11_O), .I_12(ZextWrapper_1_32_inst12_O), .I_13(ZextWrapper_1_32_inst13_O), .I_14(ZextWrapper_1_32_inst14_O), .I_15(ZextWrapper_1_32_inst15_O), .I_16(ZextWrapper_1_32_inst16_O), .I_17(ZextWrapper_1_32_inst17_O), .I_18(ZextWrapper_1_32_inst18_O), .I_19(ZextWrapper_1_32_inst19_O), .I_2(ZextWrapper_1_32_inst2_O), .I_20(ZextWrapper_2_32_inst0_O), .I_21(ZextWrapper_2_32_inst1_O), .I_22(ZextWrapper_2_32_inst2_O), .I_23(ZextWrapper_2_32_inst3_O), .I_24(ZextWrapper_2_32_inst4_O), .I_25(ZextWrapper_2_32_inst5_O), .I_26(ZextWrapper_2_32_inst6_O), .I_27(ZextWrapper_2_32_inst7_O), .I_28(ZextWrapper_2_32_inst8_O), .I_29(ZextWrapper_2_32_inst9_O), .I_3(ZextWrapper_1_32_inst3_O), .I_30(ZextWrapper_2_32_inst10_O), .I_31(ZextWrapper_2_32_inst11_O), .I_32(ZextWrapper_2_32_inst12_O), .I_33(ZextWrapper_2_32_inst13_O), .I_34(ZextWrapper_2_32_inst14_O), .I_35(ZextWrapper_2_32_inst15_O), .I_36(ZextWrapper_2_32_inst16_O), .I_37(ZextWrapper_2_32_inst17_O), .I_38(ZextWrapper_2_32_inst18_O), .I_39(ZextWrapper_2_32_inst19_O), .I_4(ZextWrapper_1_32_inst4_O), .I_5(ZextWrapper_1_32_inst5_O), .I_6(ZextWrapper_1_32_inst6_O), .I_7(ZextWrapper_1_32_inst7_O), .I_8(ZextWrapper_1_32_inst8_O), .I_9(ZextWrapper_1_32_inst9_O), .O(MuxWrapper_40_32_inst0_O), .S({config_config_addr[5],config_config_addr[4],config_config_addr[3],config_config_addr[2],config_config_addr[1],config_config_addr[0]}));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_1 REG_T0_EAST_B1(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T0_EAST_SB_OUT_B1_O), .O(REG_T0_EAST_B1_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_1 REG_T0_NORTH_B1(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T0_NORTH_SB_OUT_B1_O), .O(REG_T0_NORTH_B1_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_1 REG_T0_SOUTH_B1(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T0_SOUTH_SB_OUT_B1_O), .O(REG_T0_SOUTH_B1_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_1 REG_T0_WEST_B1(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T0_WEST_SB_OUT_B1_O), .O(REG_T0_WEST_B1_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_1 REG_T1_EAST_B1(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T1_EAST_SB_OUT_B1_O), .O(REG_T1_EAST_B1_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_1 REG_T1_NORTH_B1(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T1_NORTH_SB_OUT_B1_O), .O(REG_T1_NORTH_B1_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_1 REG_T1_SOUTH_B1(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T1_SOUTH_SB_OUT_B1_O), .O(REG_T1_SOUTH_B1_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_1 REG_T1_WEST_B1(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T1_WEST_SB_OUT_B1_O), .O(REG_T1_WEST_B1_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_1 REG_T2_EAST_B1(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T2_EAST_SB_OUT_B1_O), .O(REG_T2_EAST_B1_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_1 REG_T2_NORTH_B1(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T2_NORTH_SB_OUT_B1_O), .O(REG_T2_NORTH_B1_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_1 REG_T2_SOUTH_B1(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T2_SOUTH_SB_OUT_B1_O), .O(REG_T2_SOUTH_B1_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_1 REG_T2_WEST_B1(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T2_WEST_SB_OUT_B1_O), .O(REG_T2_WEST_B1_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_1 REG_T3_EAST_B1(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T3_EAST_SB_OUT_B1_O), .O(REG_T3_EAST_B1_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_1 REG_T3_NORTH_B1(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T3_NORTH_SB_OUT_B1_O), .O(REG_T3_NORTH_B1_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_1 REG_T3_SOUTH_B1(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T3_SOUTH_SB_OUT_B1_O), .O(REG_T3_SOUTH_B1_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_1 REG_T3_WEST_B1(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T3_WEST_SB_OUT_B1_O), .O(REG_T3_WEST_B1_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_1 REG_T4_EAST_B1(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T4_EAST_SB_OUT_B1_O), .O(REG_T4_EAST_B1_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_1 REG_T4_NORTH_B1(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T4_NORTH_SB_OUT_B1_O), .O(REG_T4_NORTH_B1_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_1 REG_T4_SOUTH_B1(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T4_SOUTH_SB_OUT_B1_O), .O(REG_T4_SOUTH_B1_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_1 REG_T4_WEST_B1(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T4_WEST_SB_OUT_B1_O), .O(REG_T4_WEST_B1_O));
MuxWrapper_2_1 RMUX_T0_EAST_B1(.I_0(MUX_SB_T0_EAST_SB_OUT_B1_O), .I_1(REG_T0_EAST_B1_O), .O(RMUX_T0_EAST_B1_O), .S(RMUX_T0_EAST_B1_sel_O));
ConfigRegister_1_8_32_0 RMUX_T0_EAST_B1_sel(.O(RMUX_T0_EAST_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_1 RMUX_T0_NORTH_B1(.I_0(MUX_SB_T0_NORTH_SB_OUT_B1_O), .I_1(REG_T0_NORTH_B1_O), .O(RMUX_T0_NORTH_B1_O), .S(RMUX_T0_NORTH_B1_sel_O));
ConfigRegister_1_8_32_1 RMUX_T0_NORTH_B1_sel(.O(RMUX_T0_NORTH_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_1 RMUX_T0_SOUTH_B1(.I_0(MUX_SB_T0_SOUTH_SB_OUT_B1_O), .I_1(REG_T0_SOUTH_B1_O), .O(RMUX_T0_SOUTH_B1_O), .S(RMUX_T0_SOUTH_B1_sel_O));
ConfigRegister_1_8_32_2 RMUX_T0_SOUTH_B1_sel(.O(RMUX_T0_SOUTH_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_1 RMUX_T0_WEST_B1(.I_0(MUX_SB_T0_WEST_SB_OUT_B1_O), .I_1(REG_T0_WEST_B1_O), .O(RMUX_T0_WEST_B1_O), .S(RMUX_T0_WEST_B1_sel_O));
ConfigRegister_1_8_32_3 RMUX_T0_WEST_B1_sel(.O(RMUX_T0_WEST_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_1 RMUX_T1_EAST_B1(.I_0(MUX_SB_T1_EAST_SB_OUT_B1_O), .I_1(REG_T1_EAST_B1_O), .O(RMUX_T1_EAST_B1_O), .S(RMUX_T1_EAST_B1_sel_O));
ConfigRegister_1_8_32_4 RMUX_T1_EAST_B1_sel(.O(RMUX_T1_EAST_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_1 RMUX_T1_NORTH_B1(.I_0(MUX_SB_T1_NORTH_SB_OUT_B1_O), .I_1(REG_T1_NORTH_B1_O), .O(RMUX_T1_NORTH_B1_O), .S(RMUX_T1_NORTH_B1_sel_O));
ConfigRegister_1_8_32_5 RMUX_T1_NORTH_B1_sel(.O(RMUX_T1_NORTH_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_1 RMUX_T1_SOUTH_B1(.I_0(MUX_SB_T1_SOUTH_SB_OUT_B1_O), .I_1(REG_T1_SOUTH_B1_O), .O(RMUX_T1_SOUTH_B1_O), .S(RMUX_T1_SOUTH_B1_sel_O));
ConfigRegister_1_8_32_6 RMUX_T1_SOUTH_B1_sel(.O(RMUX_T1_SOUTH_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_1 RMUX_T1_WEST_B1(.I_0(MUX_SB_T1_WEST_SB_OUT_B1_O), .I_1(REG_T1_WEST_B1_O), .O(RMUX_T1_WEST_B1_O), .S(RMUX_T1_WEST_B1_sel_O));
ConfigRegister_1_8_32_7 RMUX_T1_WEST_B1_sel(.O(RMUX_T1_WEST_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_1 RMUX_T2_EAST_B1(.I_0(MUX_SB_T2_EAST_SB_OUT_B1_O), .I_1(REG_T2_EAST_B1_O), .O(RMUX_T2_EAST_B1_O), .S(RMUX_T2_EAST_B1_sel_O));
ConfigRegister_1_8_32_8 RMUX_T2_EAST_B1_sel(.O(RMUX_T2_EAST_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_1 RMUX_T2_NORTH_B1(.I_0(MUX_SB_T2_NORTH_SB_OUT_B1_O), .I_1(REG_T2_NORTH_B1_O), .O(RMUX_T2_NORTH_B1_O), .S(RMUX_T2_NORTH_B1_sel_O));
ConfigRegister_1_8_32_9 RMUX_T2_NORTH_B1_sel(.O(RMUX_T2_NORTH_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_1 RMUX_T2_SOUTH_B1(.I_0(MUX_SB_T2_SOUTH_SB_OUT_B1_O), .I_1(REG_T2_SOUTH_B1_O), .O(RMUX_T2_SOUTH_B1_O), .S(RMUX_T2_SOUTH_B1_sel_O));
ConfigRegister_1_8_32_10 RMUX_T2_SOUTH_B1_sel(.O(RMUX_T2_SOUTH_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_1 RMUX_T2_WEST_B1(.I_0(MUX_SB_T2_WEST_SB_OUT_B1_O), .I_1(REG_T2_WEST_B1_O), .O(RMUX_T2_WEST_B1_O), .S(RMUX_T2_WEST_B1_sel_O));
ConfigRegister_1_8_32_11 RMUX_T2_WEST_B1_sel(.O(RMUX_T2_WEST_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_1 RMUX_T3_EAST_B1(.I_0(MUX_SB_T3_EAST_SB_OUT_B1_O), .I_1(REG_T3_EAST_B1_O), .O(RMUX_T3_EAST_B1_O), .S(RMUX_T3_EAST_B1_sel_O));
ConfigRegister_1_8_32_12 RMUX_T3_EAST_B1_sel(.O(RMUX_T3_EAST_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_1 RMUX_T3_NORTH_B1(.I_0(MUX_SB_T3_NORTH_SB_OUT_B1_O), .I_1(REG_T3_NORTH_B1_O), .O(RMUX_T3_NORTH_B1_O), .S(RMUX_T3_NORTH_B1_sel_O));
ConfigRegister_1_8_32_13 RMUX_T3_NORTH_B1_sel(.O(RMUX_T3_NORTH_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_1 RMUX_T3_SOUTH_B1(.I_0(MUX_SB_T3_SOUTH_SB_OUT_B1_O), .I_1(REG_T3_SOUTH_B1_O), .O(RMUX_T3_SOUTH_B1_O), .S(RMUX_T3_SOUTH_B1_sel_O));
ConfigRegister_1_8_32_14 RMUX_T3_SOUTH_B1_sel(.O(RMUX_T3_SOUTH_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_1 RMUX_T3_WEST_B1(.I_0(MUX_SB_T3_WEST_SB_OUT_B1_O), .I_1(REG_T3_WEST_B1_O), .O(RMUX_T3_WEST_B1_O), .S(RMUX_T3_WEST_B1_sel_O));
ConfigRegister_1_8_32_15 RMUX_T3_WEST_B1_sel(.O(RMUX_T3_WEST_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_1 RMUX_T4_EAST_B1(.I_0(MUX_SB_T4_EAST_SB_OUT_B1_O), .I_1(REG_T4_EAST_B1_O), .O(RMUX_T4_EAST_B1_O), .S(RMUX_T4_EAST_B1_sel_O));
ConfigRegister_1_8_32_16 RMUX_T4_EAST_B1_sel(.O(RMUX_T4_EAST_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_1 RMUX_T4_NORTH_B1(.I_0(MUX_SB_T4_NORTH_SB_OUT_B1_O), .I_1(REG_T4_NORTH_B1_O), .O(RMUX_T4_NORTH_B1_O), .S(RMUX_T4_NORTH_B1_sel_O));
ConfigRegister_1_8_32_17 RMUX_T4_NORTH_B1_sel(.O(RMUX_T4_NORTH_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_1 RMUX_T4_SOUTH_B1(.I_0(MUX_SB_T4_SOUTH_SB_OUT_B1_O), .I_1(REG_T4_SOUTH_B1_O), .O(RMUX_T4_SOUTH_B1_O), .S(RMUX_T4_SOUTH_B1_sel_O));
ConfigRegister_1_8_32_18 RMUX_T4_SOUTH_B1_sel(.O(RMUX_T4_SOUTH_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_1 RMUX_T4_WEST_B1(.I_0(MUX_SB_T4_WEST_SB_OUT_B1_O), .I_1(REG_T4_WEST_B1_O), .O(RMUX_T4_WEST_B1_O), .S(RMUX_T4_WEST_B1_sel_O));
ConfigRegister_1_8_32_19 RMUX_T4_WEST_B1_sel(.O(RMUX_T4_WEST_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_2_8_32_20 SB_T0_EAST_SB_OUT_B1_sel(.O(SB_T0_EAST_SB_OUT_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_2_8_32_21 SB_T0_NORTH_SB_OUT_B1_sel(.O(SB_T0_NORTH_SB_OUT_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_2_8_32_22 SB_T0_SOUTH_SB_OUT_B1_sel(.O(SB_T0_SOUTH_SB_OUT_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_2_8_32_23 SB_T0_WEST_SB_OUT_B1_sel(.O(SB_T0_WEST_SB_OUT_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_2_8_32_24 SB_T1_EAST_SB_OUT_B1_sel(.O(SB_T1_EAST_SB_OUT_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_2_8_32_25 SB_T1_NORTH_SB_OUT_B1_sel(.O(SB_T1_NORTH_SB_OUT_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_2_8_32_26 SB_T1_SOUTH_SB_OUT_B1_sel(.O(SB_T1_SOUTH_SB_OUT_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_2_8_32_27 SB_T1_WEST_SB_OUT_B1_sel(.O(SB_T1_WEST_SB_OUT_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_2_8_32_28 SB_T2_EAST_SB_OUT_B1_sel(.O(SB_T2_EAST_SB_OUT_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_2_8_32_29 SB_T2_NORTH_SB_OUT_B1_sel(.O(SB_T2_NORTH_SB_OUT_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_2_8_32_30 SB_T2_SOUTH_SB_OUT_B1_sel(.O(SB_T2_SOUTH_SB_OUT_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_2_8_32_31 SB_T2_WEST_SB_OUT_B1_sel(.O(SB_T2_WEST_SB_OUT_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_2_8_32_32 SB_T3_EAST_SB_OUT_B1_sel(.O(SB_T3_EAST_SB_OUT_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_2_8_32_33 SB_T3_NORTH_SB_OUT_B1_sel(.O(SB_T3_NORTH_SB_OUT_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_2_8_32_34 SB_T3_SOUTH_SB_OUT_B1_sel(.O(SB_T3_SOUTH_SB_OUT_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_2_8_32_35 SB_T3_WEST_SB_OUT_B1_sel(.O(SB_T3_WEST_SB_OUT_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_2_8_32_36 SB_T4_EAST_SB_OUT_B1_sel(.O(SB_T4_EAST_SB_OUT_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_2_8_32_37 SB_T4_NORTH_SB_OUT_B1_sel(.O(SB_T4_NORTH_SB_OUT_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_2_8_32_38 SB_T4_SOUTH_SB_OUT_B1_sel(.O(SB_T4_SOUTH_SB_OUT_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_2_8_32_39 SB_T4_WEST_SB_OUT_B1_sel(.O(SB_T4_WEST_SB_OUT_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_1_1 WIRE_SB_T0_EAST_SB_IN_B1(.I_0(SB_T0_EAST_SB_IN_B1_0), .O(WIRE_SB_T0_EAST_SB_IN_B1_O));
MuxWrapper_1_1 WIRE_SB_T0_NORTH_SB_IN_B1(.I_0(SB_T0_NORTH_SB_IN_B1_0), .O(WIRE_SB_T0_NORTH_SB_IN_B1_O));
MuxWrapper_1_1 WIRE_SB_T0_SOUTH_SB_IN_B1(.I_0(SB_T0_SOUTH_SB_IN_B1_0), .O(WIRE_SB_T0_SOUTH_SB_IN_B1_O));
MuxWrapper_1_1 WIRE_SB_T0_WEST_SB_IN_B1(.I_0(SB_T0_WEST_SB_IN_B1_0), .O(WIRE_SB_T0_WEST_SB_IN_B1_O));
MuxWrapper_1_1 WIRE_SB_T1_EAST_SB_IN_B1(.I_0(SB_T1_EAST_SB_IN_B1_0), .O(WIRE_SB_T1_EAST_SB_IN_B1_O));
MuxWrapper_1_1 WIRE_SB_T1_NORTH_SB_IN_B1(.I_0(SB_T1_NORTH_SB_IN_B1_0), .O(WIRE_SB_T1_NORTH_SB_IN_B1_O));
MuxWrapper_1_1 WIRE_SB_T1_SOUTH_SB_IN_B1(.I_0(SB_T1_SOUTH_SB_IN_B1_0), .O(WIRE_SB_T1_SOUTH_SB_IN_B1_O));
MuxWrapper_1_1 WIRE_SB_T1_WEST_SB_IN_B1(.I_0(SB_T1_WEST_SB_IN_B1_0), .O(WIRE_SB_T1_WEST_SB_IN_B1_O));
MuxWrapper_1_1 WIRE_SB_T2_EAST_SB_IN_B1(.I_0(SB_T2_EAST_SB_IN_B1_0), .O(WIRE_SB_T2_EAST_SB_IN_B1_O));
MuxWrapper_1_1 WIRE_SB_T2_NORTH_SB_IN_B1(.I_0(SB_T2_NORTH_SB_IN_B1_0), .O(WIRE_SB_T2_NORTH_SB_IN_B1_O));
MuxWrapper_1_1 WIRE_SB_T2_SOUTH_SB_IN_B1(.I_0(SB_T2_SOUTH_SB_IN_B1_0), .O(WIRE_SB_T2_SOUTH_SB_IN_B1_O));
MuxWrapper_1_1 WIRE_SB_T2_WEST_SB_IN_B1(.I_0(SB_T2_WEST_SB_IN_B1_0), .O(WIRE_SB_T2_WEST_SB_IN_B1_O));
MuxWrapper_1_1 WIRE_SB_T3_EAST_SB_IN_B1(.I_0(SB_T3_EAST_SB_IN_B1_0), .O(WIRE_SB_T3_EAST_SB_IN_B1_O));
MuxWrapper_1_1 WIRE_SB_T3_NORTH_SB_IN_B1(.I_0(SB_T3_NORTH_SB_IN_B1_0), .O(WIRE_SB_T3_NORTH_SB_IN_B1_O));
MuxWrapper_1_1 WIRE_SB_T3_SOUTH_SB_IN_B1(.I_0(SB_T3_SOUTH_SB_IN_B1_0), .O(WIRE_SB_T3_SOUTH_SB_IN_B1_O));
MuxWrapper_1_1 WIRE_SB_T3_WEST_SB_IN_B1(.I_0(SB_T3_WEST_SB_IN_B1_0), .O(WIRE_SB_T3_WEST_SB_IN_B1_O));
MuxWrapper_1_1 WIRE_SB_T4_EAST_SB_IN_B1(.I_0(SB_T4_EAST_SB_IN_B1_0), .O(WIRE_SB_T4_EAST_SB_IN_B1_O));
MuxWrapper_1_1 WIRE_SB_T4_NORTH_SB_IN_B1(.I_0(SB_T4_NORTH_SB_IN_B1_0), .O(WIRE_SB_T4_NORTH_SB_IN_B1_O));
MuxWrapper_1_1 WIRE_SB_T4_SOUTH_SB_IN_B1(.I_0(SB_T4_SOUTH_SB_IN_B1_0), .O(WIRE_SB_T4_SOUTH_SB_IN_B1_O));
MuxWrapper_1_1 WIRE_SB_T4_WEST_SB_IN_B1(.I_0(SB_T4_WEST_SB_IN_B1_0), .O(WIRE_SB_T4_WEST_SB_IN_B1_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst0(.I(RMUX_T0_EAST_B1_sel_O), .O(ZextWrapper_1_32_inst0_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst1(.I(RMUX_T0_NORTH_B1_sel_O), .O(ZextWrapper_1_32_inst1_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst10(.I(RMUX_T2_SOUTH_B1_sel_O), .O(ZextWrapper_1_32_inst10_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst11(.I(RMUX_T2_WEST_B1_sel_O), .O(ZextWrapper_1_32_inst11_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst12(.I(RMUX_T3_EAST_B1_sel_O), .O(ZextWrapper_1_32_inst12_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst13(.I(RMUX_T3_NORTH_B1_sel_O), .O(ZextWrapper_1_32_inst13_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst14(.I(RMUX_T3_SOUTH_B1_sel_O), .O(ZextWrapper_1_32_inst14_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst15(.I(RMUX_T3_WEST_B1_sel_O), .O(ZextWrapper_1_32_inst15_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst16(.I(RMUX_T4_EAST_B1_sel_O), .O(ZextWrapper_1_32_inst16_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst17(.I(RMUX_T4_NORTH_B1_sel_O), .O(ZextWrapper_1_32_inst17_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst18(.I(RMUX_T4_SOUTH_B1_sel_O), .O(ZextWrapper_1_32_inst18_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst19(.I(RMUX_T4_WEST_B1_sel_O), .O(ZextWrapper_1_32_inst19_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst2(.I(RMUX_T0_SOUTH_B1_sel_O), .O(ZextWrapper_1_32_inst2_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst3(.I(RMUX_T0_WEST_B1_sel_O), .O(ZextWrapper_1_32_inst3_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst4(.I(RMUX_T1_EAST_B1_sel_O), .O(ZextWrapper_1_32_inst4_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst5(.I(RMUX_T1_NORTH_B1_sel_O), .O(ZextWrapper_1_32_inst5_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst6(.I(RMUX_T1_SOUTH_B1_sel_O), .O(ZextWrapper_1_32_inst6_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst7(.I(RMUX_T1_WEST_B1_sel_O), .O(ZextWrapper_1_32_inst7_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst8(.I(RMUX_T2_EAST_B1_sel_O), .O(ZextWrapper_1_32_inst8_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst9(.I(RMUX_T2_NORTH_B1_sel_O), .O(ZextWrapper_1_32_inst9_O));
ZextWrapper_2_32 ZextWrapper_2_32_inst0(.I(SB_T0_EAST_SB_OUT_B1_sel_O), .O(ZextWrapper_2_32_inst0_O));
ZextWrapper_2_32 ZextWrapper_2_32_inst1(.I(SB_T0_NORTH_SB_OUT_B1_sel_O), .O(ZextWrapper_2_32_inst1_O));
ZextWrapper_2_32 ZextWrapper_2_32_inst10(.I(SB_T2_SOUTH_SB_OUT_B1_sel_O), .O(ZextWrapper_2_32_inst10_O));
ZextWrapper_2_32 ZextWrapper_2_32_inst11(.I(SB_T2_WEST_SB_OUT_B1_sel_O), .O(ZextWrapper_2_32_inst11_O));
ZextWrapper_2_32 ZextWrapper_2_32_inst12(.I(SB_T3_EAST_SB_OUT_B1_sel_O), .O(ZextWrapper_2_32_inst12_O));
ZextWrapper_2_32 ZextWrapper_2_32_inst13(.I(SB_T3_NORTH_SB_OUT_B1_sel_O), .O(ZextWrapper_2_32_inst13_O));
ZextWrapper_2_32 ZextWrapper_2_32_inst14(.I(SB_T3_SOUTH_SB_OUT_B1_sel_O), .O(ZextWrapper_2_32_inst14_O));
ZextWrapper_2_32 ZextWrapper_2_32_inst15(.I(SB_T3_WEST_SB_OUT_B1_sel_O), .O(ZextWrapper_2_32_inst15_O));
ZextWrapper_2_32 ZextWrapper_2_32_inst16(.I(SB_T4_EAST_SB_OUT_B1_sel_O), .O(ZextWrapper_2_32_inst16_O));
ZextWrapper_2_32 ZextWrapper_2_32_inst17(.I(SB_T4_NORTH_SB_OUT_B1_sel_O), .O(ZextWrapper_2_32_inst17_O));
ZextWrapper_2_32 ZextWrapper_2_32_inst18(.I(SB_T4_SOUTH_SB_OUT_B1_sel_O), .O(ZextWrapper_2_32_inst18_O));
ZextWrapper_2_32 ZextWrapper_2_32_inst19(.I(SB_T4_WEST_SB_OUT_B1_sel_O), .O(ZextWrapper_2_32_inst19_O));
ZextWrapper_2_32 ZextWrapper_2_32_inst2(.I(SB_T0_SOUTH_SB_OUT_B1_sel_O), .O(ZextWrapper_2_32_inst2_O));
ZextWrapper_2_32 ZextWrapper_2_32_inst3(.I(SB_T0_WEST_SB_OUT_B1_sel_O), .O(ZextWrapper_2_32_inst3_O));
ZextWrapper_2_32 ZextWrapper_2_32_inst4(.I(SB_T1_EAST_SB_OUT_B1_sel_O), .O(ZextWrapper_2_32_inst4_O));
ZextWrapper_2_32 ZextWrapper_2_32_inst5(.I(SB_T1_NORTH_SB_OUT_B1_sel_O), .O(ZextWrapper_2_32_inst5_O));
ZextWrapper_2_32 ZextWrapper_2_32_inst6(.I(SB_T1_SOUTH_SB_OUT_B1_sel_O), .O(ZextWrapper_2_32_inst6_O));
ZextWrapper_2_32 ZextWrapper_2_32_inst7(.I(SB_T1_WEST_SB_OUT_B1_sel_O), .O(ZextWrapper_2_32_inst7_O));
ZextWrapper_2_32 ZextWrapper_2_32_inst8(.I(SB_T2_EAST_SB_OUT_B1_sel_O), .O(ZextWrapper_2_32_inst8_O));
ZextWrapper_2_32 ZextWrapper_2_32_inst9(.I(SB_T2_NORTH_SB_OUT_B1_sel_O), .O(ZextWrapper_2_32_inst9_O));
assign SB_T0_EAST_SB_OUT_B1 = RMUX_T0_EAST_B1_O;
assign SB_T0_NORTH_SB_OUT_B1 = RMUX_T0_NORTH_B1_O;
assign SB_T0_SOUTH_SB_OUT_B1 = RMUX_T0_SOUTH_B1_O;
assign SB_T0_WEST_SB_OUT_B1 = RMUX_T0_WEST_B1_O;
assign SB_T1_EAST_SB_OUT_B1 = RMUX_T1_EAST_B1_O;
assign SB_T1_NORTH_SB_OUT_B1 = RMUX_T1_NORTH_B1_O;
assign SB_T1_SOUTH_SB_OUT_B1 = RMUX_T1_SOUTH_B1_O;
assign SB_T1_WEST_SB_OUT_B1 = RMUX_T1_WEST_B1_O;
assign SB_T2_EAST_SB_OUT_B1 = RMUX_T2_EAST_B1_O;
assign SB_T2_NORTH_SB_OUT_B1 = RMUX_T2_NORTH_B1_O;
assign SB_T2_SOUTH_SB_OUT_B1 = RMUX_T2_SOUTH_B1_O;
assign SB_T2_WEST_SB_OUT_B1 = RMUX_T2_WEST_B1_O;
assign SB_T3_EAST_SB_OUT_B1 = RMUX_T3_EAST_B1_O;
assign SB_T3_NORTH_SB_OUT_B1 = RMUX_T3_NORTH_B1_O;
assign SB_T3_SOUTH_SB_OUT_B1 = RMUX_T3_SOUTH_B1_O;
assign SB_T3_WEST_SB_OUT_B1 = RMUX_T3_WEST_B1_O;
assign SB_T4_EAST_SB_OUT_B1 = RMUX_T4_EAST_B1_O;
assign SB_T4_NORTH_SB_OUT_B1 = RMUX_T4_NORTH_B1_O;
assign SB_T4_SOUTH_SB_OUT_B1 = RMUX_T4_SOUTH_B1_O;
assign SB_T4_WEST_SB_OUT_B1 = RMUX_T4_WEST_B1_O;
assign read_config_data = MuxWrapper_40_32_inst0_O;
endmodule

module SB_ID0_5TRACKS_B1_MemCore (input [0:0] SB_T0_EAST_SB_IN_B1_0, output [0:0] SB_T0_EAST_SB_OUT_B1, input [0:0] SB_T0_NORTH_SB_IN_B1_0, output [0:0] SB_T0_NORTH_SB_OUT_B1, input [0:0] SB_T0_SOUTH_SB_IN_B1_0, output [0:0] SB_T0_SOUTH_SB_OUT_B1, input [0:0] SB_T0_WEST_SB_IN_B1_0, output [0:0] SB_T0_WEST_SB_OUT_B1, input [0:0] SB_T1_EAST_SB_IN_B1_0, output [0:0] SB_T1_EAST_SB_OUT_B1, input [0:0] SB_T1_NORTH_SB_IN_B1_0, output [0:0] SB_T1_NORTH_SB_OUT_B1, input [0:0] SB_T1_SOUTH_SB_IN_B1_0, output [0:0] SB_T1_SOUTH_SB_OUT_B1, input [0:0] SB_T1_WEST_SB_IN_B1_0, output [0:0] SB_T1_WEST_SB_OUT_B1, input [0:0] SB_T2_EAST_SB_IN_B1_0, output [0:0] SB_T2_EAST_SB_OUT_B1, input [0:0] SB_T2_NORTH_SB_IN_B1_0, output [0:0] SB_T2_NORTH_SB_OUT_B1, input [0:0] SB_T2_SOUTH_SB_IN_B1_0, output [0:0] SB_T2_SOUTH_SB_OUT_B1, input [0:0] SB_T2_WEST_SB_IN_B1_0, output [0:0] SB_T2_WEST_SB_OUT_B1, input [0:0] SB_T3_EAST_SB_IN_B1_0, output [0:0] SB_T3_EAST_SB_OUT_B1, input [0:0] SB_T3_NORTH_SB_IN_B1_0, output [0:0] SB_T3_NORTH_SB_OUT_B1, input [0:0] SB_T3_SOUTH_SB_IN_B1_0, output [0:0] SB_T3_SOUTH_SB_OUT_B1, input [0:0] SB_T3_WEST_SB_IN_B1_0, output [0:0] SB_T3_WEST_SB_OUT_B1, input [0:0] SB_T4_EAST_SB_IN_B1_0, output [0:0] SB_T4_EAST_SB_OUT_B1, input [0:0] SB_T4_NORTH_SB_IN_B1_0, output [0:0] SB_T4_NORTH_SB_OUT_B1, input [0:0] SB_T4_SOUTH_SB_IN_B1_0, output [0:0] SB_T4_SOUTH_SB_OUT_B1, input [0:0] SB_T4_WEST_SB_IN_B1_0, output [0:0] SB_T4_WEST_SB_OUT_B1, input [0:0] almost_empty, input [0:0] almost_full, input [0:0] chain_valid_out, input clk, input [7:0] config_config_addr, input [31:0] config_config_data, input [0:0] config_read, input [0:0] config_write, input [0:0] empty, input [0:0] full, output [31:0] read_config_data, input reset, input [0:0] stall, input [0:0] valid_out);
wire [0:0] Invert1_inst0_out;
wire [0:0] MUX_SB_T0_EAST_SB_OUT_B1_O;
wire [0:0] MUX_SB_T0_NORTH_SB_OUT_B1_O;
wire [0:0] MUX_SB_T0_SOUTH_SB_OUT_B1_O;
wire [0:0] MUX_SB_T0_WEST_SB_OUT_B1_O;
wire [0:0] MUX_SB_T1_EAST_SB_OUT_B1_O;
wire [0:0] MUX_SB_T1_NORTH_SB_OUT_B1_O;
wire [0:0] MUX_SB_T1_SOUTH_SB_OUT_B1_O;
wire [0:0] MUX_SB_T1_WEST_SB_OUT_B1_O;
wire [0:0] MUX_SB_T2_EAST_SB_OUT_B1_O;
wire [0:0] MUX_SB_T2_NORTH_SB_OUT_B1_O;
wire [0:0] MUX_SB_T2_SOUTH_SB_OUT_B1_O;
wire [0:0] MUX_SB_T2_WEST_SB_OUT_B1_O;
wire [0:0] MUX_SB_T3_EAST_SB_OUT_B1_O;
wire [0:0] MUX_SB_T3_NORTH_SB_OUT_B1_O;
wire [0:0] MUX_SB_T3_SOUTH_SB_OUT_B1_O;
wire [0:0] MUX_SB_T3_WEST_SB_OUT_B1_O;
wire [0:0] MUX_SB_T4_EAST_SB_OUT_B1_O;
wire [0:0] MUX_SB_T4_NORTH_SB_OUT_B1_O;
wire [0:0] MUX_SB_T4_SOUTH_SB_OUT_B1_O;
wire [0:0] MUX_SB_T4_WEST_SB_OUT_B1_O;
wire [31:0] MuxWrapper_40_32_inst0_O;
wire [0:0] REG_T0_EAST_B1_O;
wire [0:0] REG_T0_NORTH_B1_O;
wire [0:0] REG_T0_SOUTH_B1_O;
wire [0:0] REG_T0_WEST_B1_O;
wire [0:0] REG_T1_EAST_B1_O;
wire [0:0] REG_T1_NORTH_B1_O;
wire [0:0] REG_T1_SOUTH_B1_O;
wire [0:0] REG_T1_WEST_B1_O;
wire [0:0] REG_T2_EAST_B1_O;
wire [0:0] REG_T2_NORTH_B1_O;
wire [0:0] REG_T2_SOUTH_B1_O;
wire [0:0] REG_T2_WEST_B1_O;
wire [0:0] REG_T3_EAST_B1_O;
wire [0:0] REG_T3_NORTH_B1_O;
wire [0:0] REG_T3_SOUTH_B1_O;
wire [0:0] REG_T3_WEST_B1_O;
wire [0:0] REG_T4_EAST_B1_O;
wire [0:0] REG_T4_NORTH_B1_O;
wire [0:0] REG_T4_SOUTH_B1_O;
wire [0:0] REG_T4_WEST_B1_O;
wire [0:0] RMUX_T0_EAST_B1_O;
wire [0:0] RMUX_T0_EAST_B1_sel_O;
wire [0:0] RMUX_T0_NORTH_B1_O;
wire [0:0] RMUX_T0_NORTH_B1_sel_O;
wire [0:0] RMUX_T0_SOUTH_B1_O;
wire [0:0] RMUX_T0_SOUTH_B1_sel_O;
wire [0:0] RMUX_T0_WEST_B1_O;
wire [0:0] RMUX_T0_WEST_B1_sel_O;
wire [0:0] RMUX_T1_EAST_B1_O;
wire [0:0] RMUX_T1_EAST_B1_sel_O;
wire [0:0] RMUX_T1_NORTH_B1_O;
wire [0:0] RMUX_T1_NORTH_B1_sel_O;
wire [0:0] RMUX_T1_SOUTH_B1_O;
wire [0:0] RMUX_T1_SOUTH_B1_sel_O;
wire [0:0] RMUX_T1_WEST_B1_O;
wire [0:0] RMUX_T1_WEST_B1_sel_O;
wire [0:0] RMUX_T2_EAST_B1_O;
wire [0:0] RMUX_T2_EAST_B1_sel_O;
wire [0:0] RMUX_T2_NORTH_B1_O;
wire [0:0] RMUX_T2_NORTH_B1_sel_O;
wire [0:0] RMUX_T2_SOUTH_B1_O;
wire [0:0] RMUX_T2_SOUTH_B1_sel_O;
wire [0:0] RMUX_T2_WEST_B1_O;
wire [0:0] RMUX_T2_WEST_B1_sel_O;
wire [0:0] RMUX_T3_EAST_B1_O;
wire [0:0] RMUX_T3_EAST_B1_sel_O;
wire [0:0] RMUX_T3_NORTH_B1_O;
wire [0:0] RMUX_T3_NORTH_B1_sel_O;
wire [0:0] RMUX_T3_SOUTH_B1_O;
wire [0:0] RMUX_T3_SOUTH_B1_sel_O;
wire [0:0] RMUX_T3_WEST_B1_O;
wire [0:0] RMUX_T3_WEST_B1_sel_O;
wire [0:0] RMUX_T4_EAST_B1_O;
wire [0:0] RMUX_T4_EAST_B1_sel_O;
wire [0:0] RMUX_T4_NORTH_B1_O;
wire [0:0] RMUX_T4_NORTH_B1_sel_O;
wire [0:0] RMUX_T4_SOUTH_B1_O;
wire [0:0] RMUX_T4_SOUTH_B1_sel_O;
wire [0:0] RMUX_T4_WEST_B1_O;
wire [0:0] RMUX_T4_WEST_B1_sel_O;
wire [3:0] SB_T0_EAST_SB_OUT_B1_sel_O;
wire [3:0] SB_T0_NORTH_SB_OUT_B1_sel_O;
wire [3:0] SB_T0_SOUTH_SB_OUT_B1_sel_O;
wire [3:0] SB_T0_WEST_SB_OUT_B1_sel_O;
wire [3:0] SB_T1_EAST_SB_OUT_B1_sel_O;
wire [3:0] SB_T1_NORTH_SB_OUT_B1_sel_O;
wire [3:0] SB_T1_SOUTH_SB_OUT_B1_sel_O;
wire [3:0] SB_T1_WEST_SB_OUT_B1_sel_O;
wire [3:0] SB_T2_EAST_SB_OUT_B1_sel_O;
wire [3:0] SB_T2_NORTH_SB_OUT_B1_sel_O;
wire [3:0] SB_T2_SOUTH_SB_OUT_B1_sel_O;
wire [3:0] SB_T2_WEST_SB_OUT_B1_sel_O;
wire [3:0] SB_T3_EAST_SB_OUT_B1_sel_O;
wire [3:0] SB_T3_NORTH_SB_OUT_B1_sel_O;
wire [3:0] SB_T3_SOUTH_SB_OUT_B1_sel_O;
wire [3:0] SB_T3_WEST_SB_OUT_B1_sel_O;
wire [3:0] SB_T4_EAST_SB_OUT_B1_sel_O;
wire [3:0] SB_T4_NORTH_SB_OUT_B1_sel_O;
wire [3:0] SB_T4_SOUTH_SB_OUT_B1_sel_O;
wire [3:0] SB_T4_WEST_SB_OUT_B1_sel_O;
wire [0:0] WIRE_SB_T0_EAST_SB_IN_B1_O;
wire [0:0] WIRE_SB_T0_NORTH_SB_IN_B1_O;
wire [0:0] WIRE_SB_T0_SOUTH_SB_IN_B1_O;
wire [0:0] WIRE_SB_T0_WEST_SB_IN_B1_O;
wire [0:0] WIRE_SB_T1_EAST_SB_IN_B1_O;
wire [0:0] WIRE_SB_T1_NORTH_SB_IN_B1_O;
wire [0:0] WIRE_SB_T1_SOUTH_SB_IN_B1_O;
wire [0:0] WIRE_SB_T1_WEST_SB_IN_B1_O;
wire [0:0] WIRE_SB_T2_EAST_SB_IN_B1_O;
wire [0:0] WIRE_SB_T2_NORTH_SB_IN_B1_O;
wire [0:0] WIRE_SB_T2_SOUTH_SB_IN_B1_O;
wire [0:0] WIRE_SB_T2_WEST_SB_IN_B1_O;
wire [0:0] WIRE_SB_T3_EAST_SB_IN_B1_O;
wire [0:0] WIRE_SB_T3_NORTH_SB_IN_B1_O;
wire [0:0] WIRE_SB_T3_SOUTH_SB_IN_B1_O;
wire [0:0] WIRE_SB_T3_WEST_SB_IN_B1_O;
wire [0:0] WIRE_SB_T4_EAST_SB_IN_B1_O;
wire [0:0] WIRE_SB_T4_NORTH_SB_IN_B1_O;
wire [0:0] WIRE_SB_T4_SOUTH_SB_IN_B1_O;
wire [0:0] WIRE_SB_T4_WEST_SB_IN_B1_O;
wire [31:0] ZextWrapper_1_32_inst0_O;
wire [31:0] ZextWrapper_1_32_inst1_O;
wire [31:0] ZextWrapper_1_32_inst10_O;
wire [31:0] ZextWrapper_1_32_inst11_O;
wire [31:0] ZextWrapper_1_32_inst12_O;
wire [31:0] ZextWrapper_1_32_inst13_O;
wire [31:0] ZextWrapper_1_32_inst14_O;
wire [31:0] ZextWrapper_1_32_inst15_O;
wire [31:0] ZextWrapper_1_32_inst16_O;
wire [31:0] ZextWrapper_1_32_inst17_O;
wire [31:0] ZextWrapper_1_32_inst18_O;
wire [31:0] ZextWrapper_1_32_inst19_O;
wire [31:0] ZextWrapper_1_32_inst2_O;
wire [31:0] ZextWrapper_1_32_inst3_O;
wire [31:0] ZextWrapper_1_32_inst4_O;
wire [31:0] ZextWrapper_1_32_inst5_O;
wire [31:0] ZextWrapper_1_32_inst6_O;
wire [31:0] ZextWrapper_1_32_inst7_O;
wire [31:0] ZextWrapper_1_32_inst8_O;
wire [31:0] ZextWrapper_1_32_inst9_O;
wire [31:0] ZextWrapper_4_32_inst0_O;
wire [31:0] ZextWrapper_4_32_inst1_O;
wire [31:0] ZextWrapper_4_32_inst10_O;
wire [31:0] ZextWrapper_4_32_inst11_O;
wire [31:0] ZextWrapper_4_32_inst12_O;
wire [31:0] ZextWrapper_4_32_inst13_O;
wire [31:0] ZextWrapper_4_32_inst14_O;
wire [31:0] ZextWrapper_4_32_inst15_O;
wire [31:0] ZextWrapper_4_32_inst16_O;
wire [31:0] ZextWrapper_4_32_inst17_O;
wire [31:0] ZextWrapper_4_32_inst18_O;
wire [31:0] ZextWrapper_4_32_inst19_O;
wire [31:0] ZextWrapper_4_32_inst2_O;
wire [31:0] ZextWrapper_4_32_inst3_O;
wire [31:0] ZextWrapper_4_32_inst4_O;
wire [31:0] ZextWrapper_4_32_inst5_O;
wire [31:0] ZextWrapper_4_32_inst6_O;
wire [31:0] ZextWrapper_4_32_inst7_O;
wire [31:0] ZextWrapper_4_32_inst8_O;
wire [31:0] ZextWrapper_4_32_inst9_O;
coreir_not #(.width(1)) Invert1_inst0(.in(stall), .out(Invert1_inst0_out));
MuxWrapper_9_1 MUX_SB_T0_EAST_SB_OUT_B1(.I_0(WIRE_SB_T0_WEST_SB_IN_B1_O), .I_1(WIRE_SB_T3_SOUTH_SB_IN_B1_O), .I_2(WIRE_SB_T4_NORTH_SB_IN_B1_O), .I_3(almost_empty), .I_4(almost_full), .I_5(chain_valid_out), .I_6(empty), .I_7(full), .I_8(valid_out), .O(MUX_SB_T0_EAST_SB_OUT_B1_O), .S(SB_T0_EAST_SB_OUT_B1_sel_O));
MuxWrapper_9_1 MUX_SB_T0_NORTH_SB_OUT_B1(.I_0(WIRE_SB_T0_WEST_SB_IN_B1_O), .I_1(WIRE_SB_T1_EAST_SB_IN_B1_O), .I_2(WIRE_SB_T0_SOUTH_SB_IN_B1_O), .I_3(almost_empty), .I_4(almost_full), .I_5(chain_valid_out), .I_6(empty), .I_7(full), .I_8(valid_out), .O(MUX_SB_T0_NORTH_SB_OUT_B1_O), .S(SB_T0_NORTH_SB_OUT_B1_sel_O));
MuxWrapper_9_1 MUX_SB_T0_SOUTH_SB_OUT_B1(.I_0(WIRE_SB_T3_EAST_SB_IN_B1_O), .I_1(WIRE_SB_T0_NORTH_SB_IN_B1_O), .I_2(WIRE_SB_T1_WEST_SB_IN_B1_O), .I_3(almost_empty), .I_4(almost_full), .I_5(chain_valid_out), .I_6(empty), .I_7(full), .I_8(valid_out), .O(MUX_SB_T0_SOUTH_SB_OUT_B1_O), .S(SB_T0_SOUTH_SB_OUT_B1_sel_O));
MuxWrapper_9_1 MUX_SB_T0_WEST_SB_OUT_B1(.I_0(WIRE_SB_T0_NORTH_SB_IN_B1_O), .I_1(WIRE_SB_T4_SOUTH_SB_IN_B1_O), .I_2(WIRE_SB_T0_EAST_SB_IN_B1_O), .I_3(almost_empty), .I_4(almost_full), .I_5(chain_valid_out), .I_6(empty), .I_7(full), .I_8(valid_out), .O(MUX_SB_T0_WEST_SB_OUT_B1_O), .S(SB_T0_WEST_SB_OUT_B1_sel_O));
MuxWrapper_9_1 MUX_SB_T1_EAST_SB_OUT_B1(.I_0(WIRE_SB_T0_NORTH_SB_IN_B1_O), .I_1(WIRE_SB_T1_WEST_SB_IN_B1_O), .I_2(WIRE_SB_T2_SOUTH_SB_IN_B1_O), .I_3(almost_empty), .I_4(almost_full), .I_5(chain_valid_out), .I_6(empty), .I_7(full), .I_8(valid_out), .O(MUX_SB_T1_EAST_SB_OUT_B1_O), .S(SB_T1_EAST_SB_OUT_B1_sel_O));
MuxWrapper_9_1 MUX_SB_T1_NORTH_SB_OUT_B1(.I_0(WIRE_SB_T2_EAST_SB_IN_B1_O), .I_1(WIRE_SB_T1_SOUTH_SB_IN_B1_O), .I_2(WIRE_SB_T4_WEST_SB_IN_B1_O), .I_3(almost_empty), .I_4(almost_full), .I_5(chain_valid_out), .I_6(empty), .I_7(full), .I_8(valid_out), .O(MUX_SB_T1_NORTH_SB_OUT_B1_O), .S(SB_T1_NORTH_SB_OUT_B1_sel_O));
MuxWrapper_9_1 MUX_SB_T1_SOUTH_SB_OUT_B1(.I_0(WIRE_SB_T2_EAST_SB_IN_B1_O), .I_1(WIRE_SB_T1_NORTH_SB_IN_B1_O), .I_2(WIRE_SB_T2_WEST_SB_IN_B1_O), .I_3(almost_empty), .I_4(almost_full), .I_5(chain_valid_out), .I_6(empty), .I_7(full), .I_8(valid_out), .O(MUX_SB_T1_SOUTH_SB_OUT_B1_O), .S(SB_T1_SOUTH_SB_OUT_B1_sel_O));
MuxWrapper_9_1 MUX_SB_T1_WEST_SB_OUT_B1(.I_0(WIRE_SB_T4_NORTH_SB_IN_B1_O), .I_1(WIRE_SB_T0_SOUTH_SB_IN_B1_O), .I_2(WIRE_SB_T1_EAST_SB_IN_B1_O), .I_3(almost_empty), .I_4(almost_full), .I_5(chain_valid_out), .I_6(empty), .I_7(full), .I_8(valid_out), .O(MUX_SB_T1_WEST_SB_OUT_B1_O), .S(SB_T1_WEST_SB_OUT_B1_sel_O));
MuxWrapper_9_1 MUX_SB_T2_EAST_SB_OUT_B1(.I_0(WIRE_SB_T1_NORTH_SB_IN_B1_O), .I_1(WIRE_SB_T1_SOUTH_SB_IN_B1_O), .I_2(WIRE_SB_T2_WEST_SB_IN_B1_O), .I_3(almost_empty), .I_4(almost_full), .I_5(chain_valid_out), .I_6(empty), .I_7(full), .I_8(valid_out), .O(MUX_SB_T2_EAST_SB_OUT_B1_O), .S(SB_T2_EAST_SB_OUT_B1_sel_O));
MuxWrapper_9_1 MUX_SB_T2_NORTH_SB_OUT_B1(.I_0(WIRE_SB_T3_EAST_SB_IN_B1_O), .I_1(WIRE_SB_T2_SOUTH_SB_IN_B1_O), .I_2(WIRE_SB_T3_WEST_SB_IN_B1_O), .I_3(almost_empty), .I_4(almost_full), .I_5(chain_valid_out), .I_6(empty), .I_7(full), .I_8(valid_out), .O(MUX_SB_T2_NORTH_SB_OUT_B1_O), .S(SB_T2_NORTH_SB_OUT_B1_sel_O));
MuxWrapper_9_1 MUX_SB_T2_SOUTH_SB_OUT_B1(.I_0(WIRE_SB_T1_EAST_SB_IN_B1_O), .I_1(WIRE_SB_T2_NORTH_SB_IN_B1_O), .I_2(WIRE_SB_T3_WEST_SB_IN_B1_O), .I_3(almost_empty), .I_4(almost_full), .I_5(chain_valid_out), .I_6(empty), .I_7(full), .I_8(valid_out), .O(MUX_SB_T2_SOUTH_SB_OUT_B1_O), .S(SB_T2_SOUTH_SB_OUT_B1_sel_O));
MuxWrapper_9_1 MUX_SB_T2_WEST_SB_OUT_B1(.I_0(WIRE_SB_T3_NORTH_SB_IN_B1_O), .I_1(WIRE_SB_T1_SOUTH_SB_IN_B1_O), .I_2(WIRE_SB_T2_EAST_SB_IN_B1_O), .I_3(almost_empty), .I_4(almost_full), .I_5(chain_valid_out), .I_6(empty), .I_7(full), .I_8(valid_out), .O(MUX_SB_T2_WEST_SB_OUT_B1_O), .S(SB_T2_WEST_SB_OUT_B1_sel_O));
MuxWrapper_9_1 MUX_SB_T3_EAST_SB_OUT_B1(.I_0(WIRE_SB_T0_SOUTH_SB_IN_B1_O), .I_1(WIRE_SB_T2_NORTH_SB_IN_B1_O), .I_2(WIRE_SB_T3_WEST_SB_IN_B1_O), .I_3(almost_empty), .I_4(almost_full), .I_5(chain_valid_out), .I_6(empty), .I_7(full), .I_8(valid_out), .O(MUX_SB_T3_EAST_SB_OUT_B1_O), .S(SB_T3_EAST_SB_OUT_B1_sel_O));
MuxWrapper_9_1 MUX_SB_T3_NORTH_SB_OUT_B1(.I_0(WIRE_SB_T2_WEST_SB_IN_B1_O), .I_1(WIRE_SB_T4_EAST_SB_IN_B1_O), .I_2(WIRE_SB_T3_SOUTH_SB_IN_B1_O), .I_3(almost_empty), .I_4(almost_full), .I_5(chain_valid_out), .I_6(empty), .I_7(full), .I_8(valid_out), .O(MUX_SB_T3_NORTH_SB_OUT_B1_O), .S(SB_T3_NORTH_SB_OUT_B1_sel_O));
MuxWrapper_9_1 MUX_SB_T3_SOUTH_SB_OUT_B1(.I_0(WIRE_SB_T0_EAST_SB_IN_B1_O), .I_1(WIRE_SB_T3_NORTH_SB_IN_B1_O), .I_2(WIRE_SB_T4_WEST_SB_IN_B1_O), .I_3(almost_empty), .I_4(almost_full), .I_5(chain_valid_out), .I_6(empty), .I_7(full), .I_8(valid_out), .O(MUX_SB_T3_SOUTH_SB_OUT_B1_O), .S(SB_T3_SOUTH_SB_OUT_B1_sel_O));
MuxWrapper_9_1 MUX_SB_T3_WEST_SB_OUT_B1(.I_0(WIRE_SB_T2_NORTH_SB_IN_B1_O), .I_1(WIRE_SB_T2_SOUTH_SB_IN_B1_O), .I_2(WIRE_SB_T3_EAST_SB_IN_B1_O), .I_3(almost_empty), .I_4(almost_full), .I_5(chain_valid_out), .I_6(empty), .I_7(full), .I_8(valid_out), .O(MUX_SB_T3_WEST_SB_OUT_B1_O), .S(SB_T3_WEST_SB_OUT_B1_sel_O));
MuxWrapper_9_1 MUX_SB_T4_EAST_SB_OUT_B1(.I_0(WIRE_SB_T3_NORTH_SB_IN_B1_O), .I_1(WIRE_SB_T4_SOUTH_SB_IN_B1_O), .I_2(WIRE_SB_T4_WEST_SB_IN_B1_O), .I_3(almost_empty), .I_4(almost_full), .I_5(chain_valid_out), .I_6(empty), .I_7(full), .I_8(valid_out), .O(MUX_SB_T4_EAST_SB_OUT_B1_O), .S(SB_T4_EAST_SB_OUT_B1_sel_O));
MuxWrapper_9_1 MUX_SB_T4_NORTH_SB_OUT_B1(.I_0(WIRE_SB_T1_WEST_SB_IN_B1_O), .I_1(WIRE_SB_T0_EAST_SB_IN_B1_O), .I_2(WIRE_SB_T4_SOUTH_SB_IN_B1_O), .I_3(almost_empty), .I_4(almost_full), .I_5(chain_valid_out), .I_6(empty), .I_7(full), .I_8(valid_out), .O(MUX_SB_T4_NORTH_SB_OUT_B1_O), .S(SB_T4_NORTH_SB_OUT_B1_sel_O));
MuxWrapper_9_1 MUX_SB_T4_SOUTH_SB_OUT_B1(.I_0(WIRE_SB_T0_WEST_SB_IN_B1_O), .I_1(WIRE_SB_T4_EAST_SB_IN_B1_O), .I_2(WIRE_SB_T4_NORTH_SB_IN_B1_O), .I_3(almost_empty), .I_4(almost_full), .I_5(chain_valid_out), .I_6(empty), .I_7(full), .I_8(valid_out), .O(MUX_SB_T4_SOUTH_SB_OUT_B1_O), .S(SB_T4_SOUTH_SB_OUT_B1_sel_O));
MuxWrapper_9_1 MUX_SB_T4_WEST_SB_OUT_B1(.I_0(WIRE_SB_T1_NORTH_SB_IN_B1_O), .I_1(WIRE_SB_T3_SOUTH_SB_IN_B1_O), .I_2(WIRE_SB_T4_EAST_SB_IN_B1_O), .I_3(almost_empty), .I_4(almost_full), .I_5(chain_valid_out), .I_6(empty), .I_7(full), .I_8(valid_out), .O(MUX_SB_T4_WEST_SB_OUT_B1_O), .S(SB_T4_WEST_SB_OUT_B1_sel_O));
MuxWrapper_40_32 MuxWrapper_40_32_inst0(.I_0(ZextWrapper_1_32_inst0_O), .I_1(ZextWrapper_1_32_inst1_O), .I_10(ZextWrapper_1_32_inst10_O), .I_11(ZextWrapper_1_32_inst11_O), .I_12(ZextWrapper_1_32_inst12_O), .I_13(ZextWrapper_1_32_inst13_O), .I_14(ZextWrapper_1_32_inst14_O), .I_15(ZextWrapper_1_32_inst15_O), .I_16(ZextWrapper_1_32_inst16_O), .I_17(ZextWrapper_1_32_inst17_O), .I_18(ZextWrapper_1_32_inst18_O), .I_19(ZextWrapper_1_32_inst19_O), .I_2(ZextWrapper_1_32_inst2_O), .I_20(ZextWrapper_4_32_inst0_O), .I_21(ZextWrapper_4_32_inst1_O), .I_22(ZextWrapper_4_32_inst2_O), .I_23(ZextWrapper_4_32_inst3_O), .I_24(ZextWrapper_4_32_inst4_O), .I_25(ZextWrapper_4_32_inst5_O), .I_26(ZextWrapper_4_32_inst6_O), .I_27(ZextWrapper_4_32_inst7_O), .I_28(ZextWrapper_4_32_inst8_O), .I_29(ZextWrapper_4_32_inst9_O), .I_3(ZextWrapper_1_32_inst3_O), .I_30(ZextWrapper_4_32_inst10_O), .I_31(ZextWrapper_4_32_inst11_O), .I_32(ZextWrapper_4_32_inst12_O), .I_33(ZextWrapper_4_32_inst13_O), .I_34(ZextWrapper_4_32_inst14_O), .I_35(ZextWrapper_4_32_inst15_O), .I_36(ZextWrapper_4_32_inst16_O), .I_37(ZextWrapper_4_32_inst17_O), .I_38(ZextWrapper_4_32_inst18_O), .I_39(ZextWrapper_4_32_inst19_O), .I_4(ZextWrapper_1_32_inst4_O), .I_5(ZextWrapper_1_32_inst5_O), .I_6(ZextWrapper_1_32_inst6_O), .I_7(ZextWrapper_1_32_inst7_O), .I_8(ZextWrapper_1_32_inst8_O), .I_9(ZextWrapper_1_32_inst9_O), .O(MuxWrapper_40_32_inst0_O), .S({config_config_addr[5],config_config_addr[4],config_config_addr[3],config_config_addr[2],config_config_addr[1],config_config_addr[0]}));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_1 REG_T0_EAST_B1(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T0_EAST_SB_OUT_B1_O), .O(REG_T0_EAST_B1_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_1 REG_T0_NORTH_B1(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T0_NORTH_SB_OUT_B1_O), .O(REG_T0_NORTH_B1_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_1 REG_T0_SOUTH_B1(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T0_SOUTH_SB_OUT_B1_O), .O(REG_T0_SOUTH_B1_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_1 REG_T0_WEST_B1(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T0_WEST_SB_OUT_B1_O), .O(REG_T0_WEST_B1_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_1 REG_T1_EAST_B1(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T1_EAST_SB_OUT_B1_O), .O(REG_T1_EAST_B1_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_1 REG_T1_NORTH_B1(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T1_NORTH_SB_OUT_B1_O), .O(REG_T1_NORTH_B1_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_1 REG_T1_SOUTH_B1(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T1_SOUTH_SB_OUT_B1_O), .O(REG_T1_SOUTH_B1_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_1 REG_T1_WEST_B1(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T1_WEST_SB_OUT_B1_O), .O(REG_T1_WEST_B1_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_1 REG_T2_EAST_B1(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T2_EAST_SB_OUT_B1_O), .O(REG_T2_EAST_B1_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_1 REG_T2_NORTH_B1(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T2_NORTH_SB_OUT_B1_O), .O(REG_T2_NORTH_B1_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_1 REG_T2_SOUTH_B1(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T2_SOUTH_SB_OUT_B1_O), .O(REG_T2_SOUTH_B1_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_1 REG_T2_WEST_B1(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T2_WEST_SB_OUT_B1_O), .O(REG_T2_WEST_B1_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_1 REG_T3_EAST_B1(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T3_EAST_SB_OUT_B1_O), .O(REG_T3_EAST_B1_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_1 REG_T3_NORTH_B1(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T3_NORTH_SB_OUT_B1_O), .O(REG_T3_NORTH_B1_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_1 REG_T3_SOUTH_B1(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T3_SOUTH_SB_OUT_B1_O), .O(REG_T3_SOUTH_B1_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_1 REG_T3_WEST_B1(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T3_WEST_SB_OUT_B1_O), .O(REG_T3_WEST_B1_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_1 REG_T4_EAST_B1(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T4_EAST_SB_OUT_B1_O), .O(REG_T4_EAST_B1_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_1 REG_T4_NORTH_B1(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T4_NORTH_SB_OUT_B1_O), .O(REG_T4_NORTH_B1_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_1 REG_T4_SOUTH_B1(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T4_SOUTH_SB_OUT_B1_O), .O(REG_T4_SOUTH_B1_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_1 REG_T4_WEST_B1(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T4_WEST_SB_OUT_B1_O), .O(REG_T4_WEST_B1_O));
MuxWrapper_2_1 RMUX_T0_EAST_B1(.I_0(MUX_SB_T0_EAST_SB_OUT_B1_O), .I_1(REG_T0_EAST_B1_O), .O(RMUX_T0_EAST_B1_O), .S(RMUX_T0_EAST_B1_sel_O));
ConfigRegister_1_8_32_0 RMUX_T0_EAST_B1_sel(.O(RMUX_T0_EAST_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_1 RMUX_T0_NORTH_B1(.I_0(MUX_SB_T0_NORTH_SB_OUT_B1_O), .I_1(REG_T0_NORTH_B1_O), .O(RMUX_T0_NORTH_B1_O), .S(RMUX_T0_NORTH_B1_sel_O));
ConfigRegister_1_8_32_1 RMUX_T0_NORTH_B1_sel(.O(RMUX_T0_NORTH_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_1 RMUX_T0_SOUTH_B1(.I_0(MUX_SB_T0_SOUTH_SB_OUT_B1_O), .I_1(REG_T0_SOUTH_B1_O), .O(RMUX_T0_SOUTH_B1_O), .S(RMUX_T0_SOUTH_B1_sel_O));
ConfigRegister_1_8_32_2 RMUX_T0_SOUTH_B1_sel(.O(RMUX_T0_SOUTH_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_1 RMUX_T0_WEST_B1(.I_0(MUX_SB_T0_WEST_SB_OUT_B1_O), .I_1(REG_T0_WEST_B1_O), .O(RMUX_T0_WEST_B1_O), .S(RMUX_T0_WEST_B1_sel_O));
ConfigRegister_1_8_32_3 RMUX_T0_WEST_B1_sel(.O(RMUX_T0_WEST_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_1 RMUX_T1_EAST_B1(.I_0(MUX_SB_T1_EAST_SB_OUT_B1_O), .I_1(REG_T1_EAST_B1_O), .O(RMUX_T1_EAST_B1_O), .S(RMUX_T1_EAST_B1_sel_O));
ConfigRegister_1_8_32_4 RMUX_T1_EAST_B1_sel(.O(RMUX_T1_EAST_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_1 RMUX_T1_NORTH_B1(.I_0(MUX_SB_T1_NORTH_SB_OUT_B1_O), .I_1(REG_T1_NORTH_B1_O), .O(RMUX_T1_NORTH_B1_O), .S(RMUX_T1_NORTH_B1_sel_O));
ConfigRegister_1_8_32_5 RMUX_T1_NORTH_B1_sel(.O(RMUX_T1_NORTH_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_1 RMUX_T1_SOUTH_B1(.I_0(MUX_SB_T1_SOUTH_SB_OUT_B1_O), .I_1(REG_T1_SOUTH_B1_O), .O(RMUX_T1_SOUTH_B1_O), .S(RMUX_T1_SOUTH_B1_sel_O));
ConfigRegister_1_8_32_6 RMUX_T1_SOUTH_B1_sel(.O(RMUX_T1_SOUTH_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_1 RMUX_T1_WEST_B1(.I_0(MUX_SB_T1_WEST_SB_OUT_B1_O), .I_1(REG_T1_WEST_B1_O), .O(RMUX_T1_WEST_B1_O), .S(RMUX_T1_WEST_B1_sel_O));
ConfigRegister_1_8_32_7 RMUX_T1_WEST_B1_sel(.O(RMUX_T1_WEST_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_1 RMUX_T2_EAST_B1(.I_0(MUX_SB_T2_EAST_SB_OUT_B1_O), .I_1(REG_T2_EAST_B1_O), .O(RMUX_T2_EAST_B1_O), .S(RMUX_T2_EAST_B1_sel_O));
ConfigRegister_1_8_32_8 RMUX_T2_EAST_B1_sel(.O(RMUX_T2_EAST_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_1 RMUX_T2_NORTH_B1(.I_0(MUX_SB_T2_NORTH_SB_OUT_B1_O), .I_1(REG_T2_NORTH_B1_O), .O(RMUX_T2_NORTH_B1_O), .S(RMUX_T2_NORTH_B1_sel_O));
ConfigRegister_1_8_32_9 RMUX_T2_NORTH_B1_sel(.O(RMUX_T2_NORTH_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_1 RMUX_T2_SOUTH_B1(.I_0(MUX_SB_T2_SOUTH_SB_OUT_B1_O), .I_1(REG_T2_SOUTH_B1_O), .O(RMUX_T2_SOUTH_B1_O), .S(RMUX_T2_SOUTH_B1_sel_O));
ConfigRegister_1_8_32_10 RMUX_T2_SOUTH_B1_sel(.O(RMUX_T2_SOUTH_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_1 RMUX_T2_WEST_B1(.I_0(MUX_SB_T2_WEST_SB_OUT_B1_O), .I_1(REG_T2_WEST_B1_O), .O(RMUX_T2_WEST_B1_O), .S(RMUX_T2_WEST_B1_sel_O));
ConfigRegister_1_8_32_11 RMUX_T2_WEST_B1_sel(.O(RMUX_T2_WEST_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_1 RMUX_T3_EAST_B1(.I_0(MUX_SB_T3_EAST_SB_OUT_B1_O), .I_1(REG_T3_EAST_B1_O), .O(RMUX_T3_EAST_B1_O), .S(RMUX_T3_EAST_B1_sel_O));
ConfigRegister_1_8_32_12 RMUX_T3_EAST_B1_sel(.O(RMUX_T3_EAST_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_1 RMUX_T3_NORTH_B1(.I_0(MUX_SB_T3_NORTH_SB_OUT_B1_O), .I_1(REG_T3_NORTH_B1_O), .O(RMUX_T3_NORTH_B1_O), .S(RMUX_T3_NORTH_B1_sel_O));
ConfigRegister_1_8_32_13 RMUX_T3_NORTH_B1_sel(.O(RMUX_T3_NORTH_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_1 RMUX_T3_SOUTH_B1(.I_0(MUX_SB_T3_SOUTH_SB_OUT_B1_O), .I_1(REG_T3_SOUTH_B1_O), .O(RMUX_T3_SOUTH_B1_O), .S(RMUX_T3_SOUTH_B1_sel_O));
ConfigRegister_1_8_32_14 RMUX_T3_SOUTH_B1_sel(.O(RMUX_T3_SOUTH_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_1 RMUX_T3_WEST_B1(.I_0(MUX_SB_T3_WEST_SB_OUT_B1_O), .I_1(REG_T3_WEST_B1_O), .O(RMUX_T3_WEST_B1_O), .S(RMUX_T3_WEST_B1_sel_O));
ConfigRegister_1_8_32_15 RMUX_T3_WEST_B1_sel(.O(RMUX_T3_WEST_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_1 RMUX_T4_EAST_B1(.I_0(MUX_SB_T4_EAST_SB_OUT_B1_O), .I_1(REG_T4_EAST_B1_O), .O(RMUX_T4_EAST_B1_O), .S(RMUX_T4_EAST_B1_sel_O));
ConfigRegister_1_8_32_16 RMUX_T4_EAST_B1_sel(.O(RMUX_T4_EAST_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_1 RMUX_T4_NORTH_B1(.I_0(MUX_SB_T4_NORTH_SB_OUT_B1_O), .I_1(REG_T4_NORTH_B1_O), .O(RMUX_T4_NORTH_B1_O), .S(RMUX_T4_NORTH_B1_sel_O));
ConfigRegister_1_8_32_17 RMUX_T4_NORTH_B1_sel(.O(RMUX_T4_NORTH_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_1 RMUX_T4_SOUTH_B1(.I_0(MUX_SB_T4_SOUTH_SB_OUT_B1_O), .I_1(REG_T4_SOUTH_B1_O), .O(RMUX_T4_SOUTH_B1_O), .S(RMUX_T4_SOUTH_B1_sel_O));
ConfigRegister_1_8_32_18 RMUX_T4_SOUTH_B1_sel(.O(RMUX_T4_SOUTH_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_1 RMUX_T4_WEST_B1(.I_0(MUX_SB_T4_WEST_SB_OUT_B1_O), .I_1(REG_T4_WEST_B1_O), .O(RMUX_T4_WEST_B1_O), .S(RMUX_T4_WEST_B1_sel_O));
ConfigRegister_1_8_32_19 RMUX_T4_WEST_B1_sel(.O(RMUX_T4_WEST_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_4_8_32_20 SB_T0_EAST_SB_OUT_B1_sel(.O(SB_T0_EAST_SB_OUT_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_4_8_32_21 SB_T0_NORTH_SB_OUT_B1_sel(.O(SB_T0_NORTH_SB_OUT_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_4_8_32_22 SB_T0_SOUTH_SB_OUT_B1_sel(.O(SB_T0_SOUTH_SB_OUT_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_4_8_32_23 SB_T0_WEST_SB_OUT_B1_sel(.O(SB_T0_WEST_SB_OUT_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_4_8_32_24 SB_T1_EAST_SB_OUT_B1_sel(.O(SB_T1_EAST_SB_OUT_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_4_8_32_25 SB_T1_NORTH_SB_OUT_B1_sel(.O(SB_T1_NORTH_SB_OUT_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_4_8_32_26 SB_T1_SOUTH_SB_OUT_B1_sel(.O(SB_T1_SOUTH_SB_OUT_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_4_8_32_27 SB_T1_WEST_SB_OUT_B1_sel(.O(SB_T1_WEST_SB_OUT_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_4_8_32_28 SB_T2_EAST_SB_OUT_B1_sel(.O(SB_T2_EAST_SB_OUT_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_4_8_32_29 SB_T2_NORTH_SB_OUT_B1_sel(.O(SB_T2_NORTH_SB_OUT_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_4_8_32_30 SB_T2_SOUTH_SB_OUT_B1_sel(.O(SB_T2_SOUTH_SB_OUT_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_4_8_32_31 SB_T2_WEST_SB_OUT_B1_sel(.O(SB_T2_WEST_SB_OUT_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_4_8_32_32 SB_T3_EAST_SB_OUT_B1_sel(.O(SB_T3_EAST_SB_OUT_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_4_8_32_33 SB_T3_NORTH_SB_OUT_B1_sel(.O(SB_T3_NORTH_SB_OUT_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_4_8_32_34 SB_T3_SOUTH_SB_OUT_B1_sel(.O(SB_T3_SOUTH_SB_OUT_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_4_8_32_35 SB_T3_WEST_SB_OUT_B1_sel(.O(SB_T3_WEST_SB_OUT_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_4_8_32_36 SB_T4_EAST_SB_OUT_B1_sel(.O(SB_T4_EAST_SB_OUT_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_4_8_32_37 SB_T4_NORTH_SB_OUT_B1_sel(.O(SB_T4_NORTH_SB_OUT_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_4_8_32_38 SB_T4_SOUTH_SB_OUT_B1_sel(.O(SB_T4_SOUTH_SB_OUT_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_4_8_32_39 SB_T4_WEST_SB_OUT_B1_sel(.O(SB_T4_WEST_SB_OUT_B1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_1_1 WIRE_SB_T0_EAST_SB_IN_B1(.I_0(SB_T0_EAST_SB_IN_B1_0), .O(WIRE_SB_T0_EAST_SB_IN_B1_O));
MuxWrapper_1_1 WIRE_SB_T0_NORTH_SB_IN_B1(.I_0(SB_T0_NORTH_SB_IN_B1_0), .O(WIRE_SB_T0_NORTH_SB_IN_B1_O));
MuxWrapper_1_1 WIRE_SB_T0_SOUTH_SB_IN_B1(.I_0(SB_T0_SOUTH_SB_IN_B1_0), .O(WIRE_SB_T0_SOUTH_SB_IN_B1_O));
MuxWrapper_1_1 WIRE_SB_T0_WEST_SB_IN_B1(.I_0(SB_T0_WEST_SB_IN_B1_0), .O(WIRE_SB_T0_WEST_SB_IN_B1_O));
MuxWrapper_1_1 WIRE_SB_T1_EAST_SB_IN_B1(.I_0(SB_T1_EAST_SB_IN_B1_0), .O(WIRE_SB_T1_EAST_SB_IN_B1_O));
MuxWrapper_1_1 WIRE_SB_T1_NORTH_SB_IN_B1(.I_0(SB_T1_NORTH_SB_IN_B1_0), .O(WIRE_SB_T1_NORTH_SB_IN_B1_O));
MuxWrapper_1_1 WIRE_SB_T1_SOUTH_SB_IN_B1(.I_0(SB_T1_SOUTH_SB_IN_B1_0), .O(WIRE_SB_T1_SOUTH_SB_IN_B1_O));
MuxWrapper_1_1 WIRE_SB_T1_WEST_SB_IN_B1(.I_0(SB_T1_WEST_SB_IN_B1_0), .O(WIRE_SB_T1_WEST_SB_IN_B1_O));
MuxWrapper_1_1 WIRE_SB_T2_EAST_SB_IN_B1(.I_0(SB_T2_EAST_SB_IN_B1_0), .O(WIRE_SB_T2_EAST_SB_IN_B1_O));
MuxWrapper_1_1 WIRE_SB_T2_NORTH_SB_IN_B1(.I_0(SB_T2_NORTH_SB_IN_B1_0), .O(WIRE_SB_T2_NORTH_SB_IN_B1_O));
MuxWrapper_1_1 WIRE_SB_T2_SOUTH_SB_IN_B1(.I_0(SB_T2_SOUTH_SB_IN_B1_0), .O(WIRE_SB_T2_SOUTH_SB_IN_B1_O));
MuxWrapper_1_1 WIRE_SB_T2_WEST_SB_IN_B1(.I_0(SB_T2_WEST_SB_IN_B1_0), .O(WIRE_SB_T2_WEST_SB_IN_B1_O));
MuxWrapper_1_1 WIRE_SB_T3_EAST_SB_IN_B1(.I_0(SB_T3_EAST_SB_IN_B1_0), .O(WIRE_SB_T3_EAST_SB_IN_B1_O));
MuxWrapper_1_1 WIRE_SB_T3_NORTH_SB_IN_B1(.I_0(SB_T3_NORTH_SB_IN_B1_0), .O(WIRE_SB_T3_NORTH_SB_IN_B1_O));
MuxWrapper_1_1 WIRE_SB_T3_SOUTH_SB_IN_B1(.I_0(SB_T3_SOUTH_SB_IN_B1_0), .O(WIRE_SB_T3_SOUTH_SB_IN_B1_O));
MuxWrapper_1_1 WIRE_SB_T3_WEST_SB_IN_B1(.I_0(SB_T3_WEST_SB_IN_B1_0), .O(WIRE_SB_T3_WEST_SB_IN_B1_O));
MuxWrapper_1_1 WIRE_SB_T4_EAST_SB_IN_B1(.I_0(SB_T4_EAST_SB_IN_B1_0), .O(WIRE_SB_T4_EAST_SB_IN_B1_O));
MuxWrapper_1_1 WIRE_SB_T4_NORTH_SB_IN_B1(.I_0(SB_T4_NORTH_SB_IN_B1_0), .O(WIRE_SB_T4_NORTH_SB_IN_B1_O));
MuxWrapper_1_1 WIRE_SB_T4_SOUTH_SB_IN_B1(.I_0(SB_T4_SOUTH_SB_IN_B1_0), .O(WIRE_SB_T4_SOUTH_SB_IN_B1_O));
MuxWrapper_1_1 WIRE_SB_T4_WEST_SB_IN_B1(.I_0(SB_T4_WEST_SB_IN_B1_0), .O(WIRE_SB_T4_WEST_SB_IN_B1_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst0(.I(RMUX_T0_EAST_B1_sel_O), .O(ZextWrapper_1_32_inst0_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst1(.I(RMUX_T0_NORTH_B1_sel_O), .O(ZextWrapper_1_32_inst1_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst10(.I(RMUX_T2_SOUTH_B1_sel_O), .O(ZextWrapper_1_32_inst10_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst11(.I(RMUX_T2_WEST_B1_sel_O), .O(ZextWrapper_1_32_inst11_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst12(.I(RMUX_T3_EAST_B1_sel_O), .O(ZextWrapper_1_32_inst12_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst13(.I(RMUX_T3_NORTH_B1_sel_O), .O(ZextWrapper_1_32_inst13_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst14(.I(RMUX_T3_SOUTH_B1_sel_O), .O(ZextWrapper_1_32_inst14_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst15(.I(RMUX_T3_WEST_B1_sel_O), .O(ZextWrapper_1_32_inst15_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst16(.I(RMUX_T4_EAST_B1_sel_O), .O(ZextWrapper_1_32_inst16_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst17(.I(RMUX_T4_NORTH_B1_sel_O), .O(ZextWrapper_1_32_inst17_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst18(.I(RMUX_T4_SOUTH_B1_sel_O), .O(ZextWrapper_1_32_inst18_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst19(.I(RMUX_T4_WEST_B1_sel_O), .O(ZextWrapper_1_32_inst19_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst2(.I(RMUX_T0_SOUTH_B1_sel_O), .O(ZextWrapper_1_32_inst2_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst3(.I(RMUX_T0_WEST_B1_sel_O), .O(ZextWrapper_1_32_inst3_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst4(.I(RMUX_T1_EAST_B1_sel_O), .O(ZextWrapper_1_32_inst4_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst5(.I(RMUX_T1_NORTH_B1_sel_O), .O(ZextWrapper_1_32_inst5_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst6(.I(RMUX_T1_SOUTH_B1_sel_O), .O(ZextWrapper_1_32_inst6_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst7(.I(RMUX_T1_WEST_B1_sel_O), .O(ZextWrapper_1_32_inst7_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst8(.I(RMUX_T2_EAST_B1_sel_O), .O(ZextWrapper_1_32_inst8_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst9(.I(RMUX_T2_NORTH_B1_sel_O), .O(ZextWrapper_1_32_inst9_O));
ZextWrapper_4_32 ZextWrapper_4_32_inst0(.I(SB_T0_EAST_SB_OUT_B1_sel_O), .O(ZextWrapper_4_32_inst0_O));
ZextWrapper_4_32 ZextWrapper_4_32_inst1(.I(SB_T0_NORTH_SB_OUT_B1_sel_O), .O(ZextWrapper_4_32_inst1_O));
ZextWrapper_4_32 ZextWrapper_4_32_inst10(.I(SB_T2_SOUTH_SB_OUT_B1_sel_O), .O(ZextWrapper_4_32_inst10_O));
ZextWrapper_4_32 ZextWrapper_4_32_inst11(.I(SB_T2_WEST_SB_OUT_B1_sel_O), .O(ZextWrapper_4_32_inst11_O));
ZextWrapper_4_32 ZextWrapper_4_32_inst12(.I(SB_T3_EAST_SB_OUT_B1_sel_O), .O(ZextWrapper_4_32_inst12_O));
ZextWrapper_4_32 ZextWrapper_4_32_inst13(.I(SB_T3_NORTH_SB_OUT_B1_sel_O), .O(ZextWrapper_4_32_inst13_O));
ZextWrapper_4_32 ZextWrapper_4_32_inst14(.I(SB_T3_SOUTH_SB_OUT_B1_sel_O), .O(ZextWrapper_4_32_inst14_O));
ZextWrapper_4_32 ZextWrapper_4_32_inst15(.I(SB_T3_WEST_SB_OUT_B1_sel_O), .O(ZextWrapper_4_32_inst15_O));
ZextWrapper_4_32 ZextWrapper_4_32_inst16(.I(SB_T4_EAST_SB_OUT_B1_sel_O), .O(ZextWrapper_4_32_inst16_O));
ZextWrapper_4_32 ZextWrapper_4_32_inst17(.I(SB_T4_NORTH_SB_OUT_B1_sel_O), .O(ZextWrapper_4_32_inst17_O));
ZextWrapper_4_32 ZextWrapper_4_32_inst18(.I(SB_T4_SOUTH_SB_OUT_B1_sel_O), .O(ZextWrapper_4_32_inst18_O));
ZextWrapper_4_32 ZextWrapper_4_32_inst19(.I(SB_T4_WEST_SB_OUT_B1_sel_O), .O(ZextWrapper_4_32_inst19_O));
ZextWrapper_4_32 ZextWrapper_4_32_inst2(.I(SB_T0_SOUTH_SB_OUT_B1_sel_O), .O(ZextWrapper_4_32_inst2_O));
ZextWrapper_4_32 ZextWrapper_4_32_inst3(.I(SB_T0_WEST_SB_OUT_B1_sel_O), .O(ZextWrapper_4_32_inst3_O));
ZextWrapper_4_32 ZextWrapper_4_32_inst4(.I(SB_T1_EAST_SB_OUT_B1_sel_O), .O(ZextWrapper_4_32_inst4_O));
ZextWrapper_4_32 ZextWrapper_4_32_inst5(.I(SB_T1_NORTH_SB_OUT_B1_sel_O), .O(ZextWrapper_4_32_inst5_O));
ZextWrapper_4_32 ZextWrapper_4_32_inst6(.I(SB_T1_SOUTH_SB_OUT_B1_sel_O), .O(ZextWrapper_4_32_inst6_O));
ZextWrapper_4_32 ZextWrapper_4_32_inst7(.I(SB_T1_WEST_SB_OUT_B1_sel_O), .O(ZextWrapper_4_32_inst7_O));
ZextWrapper_4_32 ZextWrapper_4_32_inst8(.I(SB_T2_EAST_SB_OUT_B1_sel_O), .O(ZextWrapper_4_32_inst8_O));
ZextWrapper_4_32 ZextWrapper_4_32_inst9(.I(SB_T2_NORTH_SB_OUT_B1_sel_O), .O(ZextWrapper_4_32_inst9_O));
assign SB_T0_EAST_SB_OUT_B1 = RMUX_T0_EAST_B1_O;
assign SB_T0_NORTH_SB_OUT_B1 = RMUX_T0_NORTH_B1_O;
assign SB_T0_SOUTH_SB_OUT_B1 = RMUX_T0_SOUTH_B1_O;
assign SB_T0_WEST_SB_OUT_B1 = RMUX_T0_WEST_B1_O;
assign SB_T1_EAST_SB_OUT_B1 = RMUX_T1_EAST_B1_O;
assign SB_T1_NORTH_SB_OUT_B1 = RMUX_T1_NORTH_B1_O;
assign SB_T1_SOUTH_SB_OUT_B1 = RMUX_T1_SOUTH_B1_O;
assign SB_T1_WEST_SB_OUT_B1 = RMUX_T1_WEST_B1_O;
assign SB_T2_EAST_SB_OUT_B1 = RMUX_T2_EAST_B1_O;
assign SB_T2_NORTH_SB_OUT_B1 = RMUX_T2_NORTH_B1_O;
assign SB_T2_SOUTH_SB_OUT_B1 = RMUX_T2_SOUTH_B1_O;
assign SB_T2_WEST_SB_OUT_B1 = RMUX_T2_WEST_B1_O;
assign SB_T3_EAST_SB_OUT_B1 = RMUX_T3_EAST_B1_O;
assign SB_T3_NORTH_SB_OUT_B1 = RMUX_T3_NORTH_B1_O;
assign SB_T3_SOUTH_SB_OUT_B1 = RMUX_T3_SOUTH_B1_O;
assign SB_T3_WEST_SB_OUT_B1 = RMUX_T3_WEST_B1_O;
assign SB_T4_EAST_SB_OUT_B1 = RMUX_T4_EAST_B1_O;
assign SB_T4_NORTH_SB_OUT_B1 = RMUX_T4_NORTH_B1_O;
assign SB_T4_SOUTH_SB_OUT_B1 = RMUX_T4_SOUTH_B1_O;
assign SB_T4_WEST_SB_OUT_B1 = RMUX_T4_WEST_B1_O;
assign read_config_data = MuxWrapper_40_32_inst0_O;
endmodule

module SB_ID0_5TRACKS_B16_PE (input [15:0] SB_T0_EAST_SB_IN_B16_0, output [15:0] SB_T0_EAST_SB_OUT_B16, input [15:0] SB_T0_NORTH_SB_IN_B16_0, output [15:0] SB_T0_NORTH_SB_OUT_B16, input [15:0] SB_T0_SOUTH_SB_IN_B16_0, output [15:0] SB_T0_SOUTH_SB_OUT_B16, input [15:0] SB_T0_WEST_SB_IN_B16_0, output [15:0] SB_T0_WEST_SB_OUT_B16, input [15:0] SB_T1_EAST_SB_IN_B16_0, output [15:0] SB_T1_EAST_SB_OUT_B16, input [15:0] SB_T1_NORTH_SB_IN_B16_0, output [15:0] SB_T1_NORTH_SB_OUT_B16, input [15:0] SB_T1_SOUTH_SB_IN_B16_0, output [15:0] SB_T1_SOUTH_SB_OUT_B16, input [15:0] SB_T1_WEST_SB_IN_B16_0, output [15:0] SB_T1_WEST_SB_OUT_B16, input [15:0] SB_T2_EAST_SB_IN_B16_0, output [15:0] SB_T2_EAST_SB_OUT_B16, input [15:0] SB_T2_NORTH_SB_IN_B16_0, output [15:0] SB_T2_NORTH_SB_OUT_B16, input [15:0] SB_T2_SOUTH_SB_IN_B16_0, output [15:0] SB_T2_SOUTH_SB_OUT_B16, input [15:0] SB_T2_WEST_SB_IN_B16_0, output [15:0] SB_T2_WEST_SB_OUT_B16, input [15:0] SB_T3_EAST_SB_IN_B16_0, output [15:0] SB_T3_EAST_SB_OUT_B16, input [15:0] SB_T3_NORTH_SB_IN_B16_0, output [15:0] SB_T3_NORTH_SB_OUT_B16, input [15:0] SB_T3_SOUTH_SB_IN_B16_0, output [15:0] SB_T3_SOUTH_SB_OUT_B16, input [15:0] SB_T3_WEST_SB_IN_B16_0, output [15:0] SB_T3_WEST_SB_OUT_B16, input [15:0] SB_T4_EAST_SB_IN_B16_0, output [15:0] SB_T4_EAST_SB_OUT_B16, input [15:0] SB_T4_NORTH_SB_IN_B16_0, output [15:0] SB_T4_NORTH_SB_OUT_B16, input [15:0] SB_T4_SOUTH_SB_IN_B16_0, output [15:0] SB_T4_SOUTH_SB_OUT_B16, input [15:0] SB_T4_WEST_SB_IN_B16_0, output [15:0] SB_T4_WEST_SB_OUT_B16, input [15:0] alu_res, input clk, input [7:0] config_config_addr, input [31:0] config_config_data, input [0:0] config_read, input [0:0] config_write, output [31:0] read_config_data, input reset, input [0:0] stall);
wire [0:0] Invert1_inst0_out;
wire [15:0] MUX_SB_T0_EAST_SB_OUT_B16_O;
wire [15:0] MUX_SB_T0_NORTH_SB_OUT_B16_O;
wire [15:0] MUX_SB_T0_SOUTH_SB_OUT_B16_O;
wire [15:0] MUX_SB_T0_WEST_SB_OUT_B16_O;
wire [15:0] MUX_SB_T1_EAST_SB_OUT_B16_O;
wire [15:0] MUX_SB_T1_NORTH_SB_OUT_B16_O;
wire [15:0] MUX_SB_T1_SOUTH_SB_OUT_B16_O;
wire [15:0] MUX_SB_T1_WEST_SB_OUT_B16_O;
wire [15:0] MUX_SB_T2_EAST_SB_OUT_B16_O;
wire [15:0] MUX_SB_T2_NORTH_SB_OUT_B16_O;
wire [15:0] MUX_SB_T2_SOUTH_SB_OUT_B16_O;
wire [15:0] MUX_SB_T2_WEST_SB_OUT_B16_O;
wire [15:0] MUX_SB_T3_EAST_SB_OUT_B16_O;
wire [15:0] MUX_SB_T3_NORTH_SB_OUT_B16_O;
wire [15:0] MUX_SB_T3_SOUTH_SB_OUT_B16_O;
wire [15:0] MUX_SB_T3_WEST_SB_OUT_B16_O;
wire [15:0] MUX_SB_T4_EAST_SB_OUT_B16_O;
wire [15:0] MUX_SB_T4_NORTH_SB_OUT_B16_O;
wire [15:0] MUX_SB_T4_SOUTH_SB_OUT_B16_O;
wire [15:0] MUX_SB_T4_WEST_SB_OUT_B16_O;
wire [31:0] MuxWrapper_40_32_inst0_O;
wire [15:0] REG_T0_EAST_B16_O;
wire [15:0] REG_T0_NORTH_B16_O;
wire [15:0] REG_T0_SOUTH_B16_O;
wire [15:0] REG_T0_WEST_B16_O;
wire [15:0] REG_T1_EAST_B16_O;
wire [15:0] REG_T1_NORTH_B16_O;
wire [15:0] REG_T1_SOUTH_B16_O;
wire [15:0] REG_T1_WEST_B16_O;
wire [15:0] REG_T2_EAST_B16_O;
wire [15:0] REG_T2_NORTH_B16_O;
wire [15:0] REG_T2_SOUTH_B16_O;
wire [15:0] REG_T2_WEST_B16_O;
wire [15:0] REG_T3_EAST_B16_O;
wire [15:0] REG_T3_NORTH_B16_O;
wire [15:0] REG_T3_SOUTH_B16_O;
wire [15:0] REG_T3_WEST_B16_O;
wire [15:0] REG_T4_EAST_B16_O;
wire [15:0] REG_T4_NORTH_B16_O;
wire [15:0] REG_T4_SOUTH_B16_O;
wire [15:0] REG_T4_WEST_B16_O;
wire [15:0] RMUX_T0_EAST_B16_O;
wire [0:0] RMUX_T0_EAST_B16_sel_O;
wire [15:0] RMUX_T0_NORTH_B16_O;
wire [0:0] RMUX_T0_NORTH_B16_sel_O;
wire [15:0] RMUX_T0_SOUTH_B16_O;
wire [0:0] RMUX_T0_SOUTH_B16_sel_O;
wire [15:0] RMUX_T0_WEST_B16_O;
wire [0:0] RMUX_T0_WEST_B16_sel_O;
wire [15:0] RMUX_T1_EAST_B16_O;
wire [0:0] RMUX_T1_EAST_B16_sel_O;
wire [15:0] RMUX_T1_NORTH_B16_O;
wire [0:0] RMUX_T1_NORTH_B16_sel_O;
wire [15:0] RMUX_T1_SOUTH_B16_O;
wire [0:0] RMUX_T1_SOUTH_B16_sel_O;
wire [15:0] RMUX_T1_WEST_B16_O;
wire [0:0] RMUX_T1_WEST_B16_sel_O;
wire [15:0] RMUX_T2_EAST_B16_O;
wire [0:0] RMUX_T2_EAST_B16_sel_O;
wire [15:0] RMUX_T2_NORTH_B16_O;
wire [0:0] RMUX_T2_NORTH_B16_sel_O;
wire [15:0] RMUX_T2_SOUTH_B16_O;
wire [0:0] RMUX_T2_SOUTH_B16_sel_O;
wire [15:0] RMUX_T2_WEST_B16_O;
wire [0:0] RMUX_T2_WEST_B16_sel_O;
wire [15:0] RMUX_T3_EAST_B16_O;
wire [0:0] RMUX_T3_EAST_B16_sel_O;
wire [15:0] RMUX_T3_NORTH_B16_O;
wire [0:0] RMUX_T3_NORTH_B16_sel_O;
wire [15:0] RMUX_T3_SOUTH_B16_O;
wire [0:0] RMUX_T3_SOUTH_B16_sel_O;
wire [15:0] RMUX_T3_WEST_B16_O;
wire [0:0] RMUX_T3_WEST_B16_sel_O;
wire [15:0] RMUX_T4_EAST_B16_O;
wire [0:0] RMUX_T4_EAST_B16_sel_O;
wire [15:0] RMUX_T4_NORTH_B16_O;
wire [0:0] RMUX_T4_NORTH_B16_sel_O;
wire [15:0] RMUX_T4_SOUTH_B16_O;
wire [0:0] RMUX_T4_SOUTH_B16_sel_O;
wire [15:0] RMUX_T4_WEST_B16_O;
wire [0:0] RMUX_T4_WEST_B16_sel_O;
wire [1:0] SB_T0_EAST_SB_OUT_B16_sel_O;
wire [1:0] SB_T0_NORTH_SB_OUT_B16_sel_O;
wire [1:0] SB_T0_SOUTH_SB_OUT_B16_sel_O;
wire [1:0] SB_T0_WEST_SB_OUT_B16_sel_O;
wire [1:0] SB_T1_EAST_SB_OUT_B16_sel_O;
wire [1:0] SB_T1_NORTH_SB_OUT_B16_sel_O;
wire [1:0] SB_T1_SOUTH_SB_OUT_B16_sel_O;
wire [1:0] SB_T1_WEST_SB_OUT_B16_sel_O;
wire [1:0] SB_T2_EAST_SB_OUT_B16_sel_O;
wire [1:0] SB_T2_NORTH_SB_OUT_B16_sel_O;
wire [1:0] SB_T2_SOUTH_SB_OUT_B16_sel_O;
wire [1:0] SB_T2_WEST_SB_OUT_B16_sel_O;
wire [1:0] SB_T3_EAST_SB_OUT_B16_sel_O;
wire [1:0] SB_T3_NORTH_SB_OUT_B16_sel_O;
wire [1:0] SB_T3_SOUTH_SB_OUT_B16_sel_O;
wire [1:0] SB_T3_WEST_SB_OUT_B16_sel_O;
wire [1:0] SB_T4_EAST_SB_OUT_B16_sel_O;
wire [1:0] SB_T4_NORTH_SB_OUT_B16_sel_O;
wire [1:0] SB_T4_SOUTH_SB_OUT_B16_sel_O;
wire [1:0] SB_T4_WEST_SB_OUT_B16_sel_O;
wire [15:0] WIRE_SB_T0_EAST_SB_IN_B16_O;
wire [15:0] WIRE_SB_T0_NORTH_SB_IN_B16_O;
wire [15:0] WIRE_SB_T0_SOUTH_SB_IN_B16_O;
wire [15:0] WIRE_SB_T0_WEST_SB_IN_B16_O;
wire [15:0] WIRE_SB_T1_EAST_SB_IN_B16_O;
wire [15:0] WIRE_SB_T1_NORTH_SB_IN_B16_O;
wire [15:0] WIRE_SB_T1_SOUTH_SB_IN_B16_O;
wire [15:0] WIRE_SB_T1_WEST_SB_IN_B16_O;
wire [15:0] WIRE_SB_T2_EAST_SB_IN_B16_O;
wire [15:0] WIRE_SB_T2_NORTH_SB_IN_B16_O;
wire [15:0] WIRE_SB_T2_SOUTH_SB_IN_B16_O;
wire [15:0] WIRE_SB_T2_WEST_SB_IN_B16_O;
wire [15:0] WIRE_SB_T3_EAST_SB_IN_B16_O;
wire [15:0] WIRE_SB_T3_NORTH_SB_IN_B16_O;
wire [15:0] WIRE_SB_T3_SOUTH_SB_IN_B16_O;
wire [15:0] WIRE_SB_T3_WEST_SB_IN_B16_O;
wire [15:0] WIRE_SB_T4_EAST_SB_IN_B16_O;
wire [15:0] WIRE_SB_T4_NORTH_SB_IN_B16_O;
wire [15:0] WIRE_SB_T4_SOUTH_SB_IN_B16_O;
wire [15:0] WIRE_SB_T4_WEST_SB_IN_B16_O;
wire [31:0] ZextWrapper_1_32_inst0_O;
wire [31:0] ZextWrapper_1_32_inst1_O;
wire [31:0] ZextWrapper_1_32_inst10_O;
wire [31:0] ZextWrapper_1_32_inst11_O;
wire [31:0] ZextWrapper_1_32_inst12_O;
wire [31:0] ZextWrapper_1_32_inst13_O;
wire [31:0] ZextWrapper_1_32_inst14_O;
wire [31:0] ZextWrapper_1_32_inst15_O;
wire [31:0] ZextWrapper_1_32_inst16_O;
wire [31:0] ZextWrapper_1_32_inst17_O;
wire [31:0] ZextWrapper_1_32_inst18_O;
wire [31:0] ZextWrapper_1_32_inst19_O;
wire [31:0] ZextWrapper_1_32_inst2_O;
wire [31:0] ZextWrapper_1_32_inst3_O;
wire [31:0] ZextWrapper_1_32_inst4_O;
wire [31:0] ZextWrapper_1_32_inst5_O;
wire [31:0] ZextWrapper_1_32_inst6_O;
wire [31:0] ZextWrapper_1_32_inst7_O;
wire [31:0] ZextWrapper_1_32_inst8_O;
wire [31:0] ZextWrapper_1_32_inst9_O;
wire [31:0] ZextWrapper_2_32_inst0_O;
wire [31:0] ZextWrapper_2_32_inst1_O;
wire [31:0] ZextWrapper_2_32_inst10_O;
wire [31:0] ZextWrapper_2_32_inst11_O;
wire [31:0] ZextWrapper_2_32_inst12_O;
wire [31:0] ZextWrapper_2_32_inst13_O;
wire [31:0] ZextWrapper_2_32_inst14_O;
wire [31:0] ZextWrapper_2_32_inst15_O;
wire [31:0] ZextWrapper_2_32_inst16_O;
wire [31:0] ZextWrapper_2_32_inst17_O;
wire [31:0] ZextWrapper_2_32_inst18_O;
wire [31:0] ZextWrapper_2_32_inst19_O;
wire [31:0] ZextWrapper_2_32_inst2_O;
wire [31:0] ZextWrapper_2_32_inst3_O;
wire [31:0] ZextWrapper_2_32_inst4_O;
wire [31:0] ZextWrapper_2_32_inst5_O;
wire [31:0] ZextWrapper_2_32_inst6_O;
wire [31:0] ZextWrapper_2_32_inst7_O;
wire [31:0] ZextWrapper_2_32_inst8_O;
wire [31:0] ZextWrapper_2_32_inst9_O;
coreir_not #(.width(1)) Invert1_inst0(.in(stall), .out(Invert1_inst0_out));
MuxWrapper_4_16 MUX_SB_T0_EAST_SB_OUT_B16(.I_0(WIRE_SB_T0_WEST_SB_IN_B16_O), .I_1(WIRE_SB_T3_SOUTH_SB_IN_B16_O), .I_2(WIRE_SB_T4_NORTH_SB_IN_B16_O), .I_3(alu_res), .O(MUX_SB_T0_EAST_SB_OUT_B16_O), .S(SB_T0_EAST_SB_OUT_B16_sel_O));
MuxWrapper_4_16 MUX_SB_T0_NORTH_SB_OUT_B16(.I_0(WIRE_SB_T0_WEST_SB_IN_B16_O), .I_1(WIRE_SB_T1_EAST_SB_IN_B16_O), .I_2(WIRE_SB_T0_SOUTH_SB_IN_B16_O), .I_3(alu_res), .O(MUX_SB_T0_NORTH_SB_OUT_B16_O), .S(SB_T0_NORTH_SB_OUT_B16_sel_O));
MuxWrapper_4_16 MUX_SB_T0_SOUTH_SB_OUT_B16(.I_0(WIRE_SB_T3_EAST_SB_IN_B16_O), .I_1(WIRE_SB_T0_NORTH_SB_IN_B16_O), .I_2(WIRE_SB_T1_WEST_SB_IN_B16_O), .I_3(alu_res), .O(MUX_SB_T0_SOUTH_SB_OUT_B16_O), .S(SB_T0_SOUTH_SB_OUT_B16_sel_O));
MuxWrapper_4_16 MUX_SB_T0_WEST_SB_OUT_B16(.I_0(WIRE_SB_T0_NORTH_SB_IN_B16_O), .I_1(WIRE_SB_T4_SOUTH_SB_IN_B16_O), .I_2(WIRE_SB_T0_EAST_SB_IN_B16_O), .I_3(alu_res), .O(MUX_SB_T0_WEST_SB_OUT_B16_O), .S(SB_T0_WEST_SB_OUT_B16_sel_O));
MuxWrapper_4_16 MUX_SB_T1_EAST_SB_OUT_B16(.I_0(WIRE_SB_T0_NORTH_SB_IN_B16_O), .I_1(WIRE_SB_T1_WEST_SB_IN_B16_O), .I_2(WIRE_SB_T2_SOUTH_SB_IN_B16_O), .I_3(alu_res), .O(MUX_SB_T1_EAST_SB_OUT_B16_O), .S(SB_T1_EAST_SB_OUT_B16_sel_O));
MuxWrapper_4_16 MUX_SB_T1_NORTH_SB_OUT_B16(.I_0(WIRE_SB_T2_EAST_SB_IN_B16_O), .I_1(WIRE_SB_T1_SOUTH_SB_IN_B16_O), .I_2(WIRE_SB_T4_WEST_SB_IN_B16_O), .I_3(alu_res), .O(MUX_SB_T1_NORTH_SB_OUT_B16_O), .S(SB_T1_NORTH_SB_OUT_B16_sel_O));
MuxWrapper_4_16 MUX_SB_T1_SOUTH_SB_OUT_B16(.I_0(WIRE_SB_T2_EAST_SB_IN_B16_O), .I_1(WIRE_SB_T1_NORTH_SB_IN_B16_O), .I_2(WIRE_SB_T2_WEST_SB_IN_B16_O), .I_3(alu_res), .O(MUX_SB_T1_SOUTH_SB_OUT_B16_O), .S(SB_T1_SOUTH_SB_OUT_B16_sel_O));
MuxWrapper_4_16 MUX_SB_T1_WEST_SB_OUT_B16(.I_0(WIRE_SB_T4_NORTH_SB_IN_B16_O), .I_1(WIRE_SB_T0_SOUTH_SB_IN_B16_O), .I_2(WIRE_SB_T1_EAST_SB_IN_B16_O), .I_3(alu_res), .O(MUX_SB_T1_WEST_SB_OUT_B16_O), .S(SB_T1_WEST_SB_OUT_B16_sel_O));
MuxWrapper_4_16 MUX_SB_T2_EAST_SB_OUT_B16(.I_0(WIRE_SB_T1_NORTH_SB_IN_B16_O), .I_1(WIRE_SB_T1_SOUTH_SB_IN_B16_O), .I_2(WIRE_SB_T2_WEST_SB_IN_B16_O), .I_3(alu_res), .O(MUX_SB_T2_EAST_SB_OUT_B16_O), .S(SB_T2_EAST_SB_OUT_B16_sel_O));
MuxWrapper_4_16 MUX_SB_T2_NORTH_SB_OUT_B16(.I_0(WIRE_SB_T3_EAST_SB_IN_B16_O), .I_1(WIRE_SB_T2_SOUTH_SB_IN_B16_O), .I_2(WIRE_SB_T3_WEST_SB_IN_B16_O), .I_3(alu_res), .O(MUX_SB_T2_NORTH_SB_OUT_B16_O), .S(SB_T2_NORTH_SB_OUT_B16_sel_O));
MuxWrapper_4_16 MUX_SB_T2_SOUTH_SB_OUT_B16(.I_0(WIRE_SB_T1_EAST_SB_IN_B16_O), .I_1(WIRE_SB_T2_NORTH_SB_IN_B16_O), .I_2(WIRE_SB_T3_WEST_SB_IN_B16_O), .I_3(alu_res), .O(MUX_SB_T2_SOUTH_SB_OUT_B16_O), .S(SB_T2_SOUTH_SB_OUT_B16_sel_O));
MuxWrapper_4_16 MUX_SB_T2_WEST_SB_OUT_B16(.I_0(WIRE_SB_T3_NORTH_SB_IN_B16_O), .I_1(WIRE_SB_T1_SOUTH_SB_IN_B16_O), .I_2(WIRE_SB_T2_EAST_SB_IN_B16_O), .I_3(alu_res), .O(MUX_SB_T2_WEST_SB_OUT_B16_O), .S(SB_T2_WEST_SB_OUT_B16_sel_O));
MuxWrapper_4_16 MUX_SB_T3_EAST_SB_OUT_B16(.I_0(WIRE_SB_T0_SOUTH_SB_IN_B16_O), .I_1(WIRE_SB_T2_NORTH_SB_IN_B16_O), .I_2(WIRE_SB_T3_WEST_SB_IN_B16_O), .I_3(alu_res), .O(MUX_SB_T3_EAST_SB_OUT_B16_O), .S(SB_T3_EAST_SB_OUT_B16_sel_O));
MuxWrapper_4_16 MUX_SB_T3_NORTH_SB_OUT_B16(.I_0(WIRE_SB_T2_WEST_SB_IN_B16_O), .I_1(WIRE_SB_T4_EAST_SB_IN_B16_O), .I_2(WIRE_SB_T3_SOUTH_SB_IN_B16_O), .I_3(alu_res), .O(MUX_SB_T3_NORTH_SB_OUT_B16_O), .S(SB_T3_NORTH_SB_OUT_B16_sel_O));
MuxWrapper_4_16 MUX_SB_T3_SOUTH_SB_OUT_B16(.I_0(WIRE_SB_T0_EAST_SB_IN_B16_O), .I_1(WIRE_SB_T3_NORTH_SB_IN_B16_O), .I_2(WIRE_SB_T4_WEST_SB_IN_B16_O), .I_3(alu_res), .O(MUX_SB_T3_SOUTH_SB_OUT_B16_O), .S(SB_T3_SOUTH_SB_OUT_B16_sel_O));
MuxWrapper_4_16 MUX_SB_T3_WEST_SB_OUT_B16(.I_0(WIRE_SB_T2_NORTH_SB_IN_B16_O), .I_1(WIRE_SB_T2_SOUTH_SB_IN_B16_O), .I_2(WIRE_SB_T3_EAST_SB_IN_B16_O), .I_3(alu_res), .O(MUX_SB_T3_WEST_SB_OUT_B16_O), .S(SB_T3_WEST_SB_OUT_B16_sel_O));
MuxWrapper_4_16 MUX_SB_T4_EAST_SB_OUT_B16(.I_0(WIRE_SB_T3_NORTH_SB_IN_B16_O), .I_1(WIRE_SB_T4_SOUTH_SB_IN_B16_O), .I_2(WIRE_SB_T4_WEST_SB_IN_B16_O), .I_3(alu_res), .O(MUX_SB_T4_EAST_SB_OUT_B16_O), .S(SB_T4_EAST_SB_OUT_B16_sel_O));
MuxWrapper_4_16 MUX_SB_T4_NORTH_SB_OUT_B16(.I_0(WIRE_SB_T1_WEST_SB_IN_B16_O), .I_1(WIRE_SB_T0_EAST_SB_IN_B16_O), .I_2(WIRE_SB_T4_SOUTH_SB_IN_B16_O), .I_3(alu_res), .O(MUX_SB_T4_NORTH_SB_OUT_B16_O), .S(SB_T4_NORTH_SB_OUT_B16_sel_O));
MuxWrapper_4_16 MUX_SB_T4_SOUTH_SB_OUT_B16(.I_0(WIRE_SB_T0_WEST_SB_IN_B16_O), .I_1(WIRE_SB_T4_EAST_SB_IN_B16_O), .I_2(WIRE_SB_T4_NORTH_SB_IN_B16_O), .I_3(alu_res), .O(MUX_SB_T4_SOUTH_SB_OUT_B16_O), .S(SB_T4_SOUTH_SB_OUT_B16_sel_O));
MuxWrapper_4_16 MUX_SB_T4_WEST_SB_OUT_B16(.I_0(WIRE_SB_T1_NORTH_SB_IN_B16_O), .I_1(WIRE_SB_T3_SOUTH_SB_IN_B16_O), .I_2(WIRE_SB_T4_EAST_SB_IN_B16_O), .I_3(alu_res), .O(MUX_SB_T4_WEST_SB_OUT_B16_O), .S(SB_T4_WEST_SB_OUT_B16_sel_O));
MuxWrapper_40_32 MuxWrapper_40_32_inst0(.I_0(ZextWrapper_1_32_inst0_O), .I_1(ZextWrapper_1_32_inst1_O), .I_10(ZextWrapper_1_32_inst10_O), .I_11(ZextWrapper_1_32_inst11_O), .I_12(ZextWrapper_1_32_inst12_O), .I_13(ZextWrapper_1_32_inst13_O), .I_14(ZextWrapper_1_32_inst14_O), .I_15(ZextWrapper_1_32_inst15_O), .I_16(ZextWrapper_1_32_inst16_O), .I_17(ZextWrapper_1_32_inst17_O), .I_18(ZextWrapper_1_32_inst18_O), .I_19(ZextWrapper_1_32_inst19_O), .I_2(ZextWrapper_1_32_inst2_O), .I_20(ZextWrapper_2_32_inst0_O), .I_21(ZextWrapper_2_32_inst1_O), .I_22(ZextWrapper_2_32_inst2_O), .I_23(ZextWrapper_2_32_inst3_O), .I_24(ZextWrapper_2_32_inst4_O), .I_25(ZextWrapper_2_32_inst5_O), .I_26(ZextWrapper_2_32_inst6_O), .I_27(ZextWrapper_2_32_inst7_O), .I_28(ZextWrapper_2_32_inst8_O), .I_29(ZextWrapper_2_32_inst9_O), .I_3(ZextWrapper_1_32_inst3_O), .I_30(ZextWrapper_2_32_inst10_O), .I_31(ZextWrapper_2_32_inst11_O), .I_32(ZextWrapper_2_32_inst12_O), .I_33(ZextWrapper_2_32_inst13_O), .I_34(ZextWrapper_2_32_inst14_O), .I_35(ZextWrapper_2_32_inst15_O), .I_36(ZextWrapper_2_32_inst16_O), .I_37(ZextWrapper_2_32_inst17_O), .I_38(ZextWrapper_2_32_inst18_O), .I_39(ZextWrapper_2_32_inst19_O), .I_4(ZextWrapper_1_32_inst4_O), .I_5(ZextWrapper_1_32_inst5_O), .I_6(ZextWrapper_1_32_inst6_O), .I_7(ZextWrapper_1_32_inst7_O), .I_8(ZextWrapper_1_32_inst8_O), .I_9(ZextWrapper_1_32_inst9_O), .O(MuxWrapper_40_32_inst0_O), .S({config_config_addr[5],config_config_addr[4],config_config_addr[3],config_config_addr[2],config_config_addr[1],config_config_addr[0]}));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_16 REG_T0_EAST_B16(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T0_EAST_SB_OUT_B16_O), .O(REG_T0_EAST_B16_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_16 REG_T0_NORTH_B16(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T0_NORTH_SB_OUT_B16_O), .O(REG_T0_NORTH_B16_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_16 REG_T0_SOUTH_B16(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T0_SOUTH_SB_OUT_B16_O), .O(REG_T0_SOUTH_B16_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_16 REG_T0_WEST_B16(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T0_WEST_SB_OUT_B16_O), .O(REG_T0_WEST_B16_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_16 REG_T1_EAST_B16(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T1_EAST_SB_OUT_B16_O), .O(REG_T1_EAST_B16_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_16 REG_T1_NORTH_B16(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T1_NORTH_SB_OUT_B16_O), .O(REG_T1_NORTH_B16_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_16 REG_T1_SOUTH_B16(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T1_SOUTH_SB_OUT_B16_O), .O(REG_T1_SOUTH_B16_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_16 REG_T1_WEST_B16(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T1_WEST_SB_OUT_B16_O), .O(REG_T1_WEST_B16_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_16 REG_T2_EAST_B16(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T2_EAST_SB_OUT_B16_O), .O(REG_T2_EAST_B16_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_16 REG_T2_NORTH_B16(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T2_NORTH_SB_OUT_B16_O), .O(REG_T2_NORTH_B16_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_16 REG_T2_SOUTH_B16(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T2_SOUTH_SB_OUT_B16_O), .O(REG_T2_SOUTH_B16_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_16 REG_T2_WEST_B16(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T2_WEST_SB_OUT_B16_O), .O(REG_T2_WEST_B16_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_16 REG_T3_EAST_B16(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T3_EAST_SB_OUT_B16_O), .O(REG_T3_EAST_B16_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_16 REG_T3_NORTH_B16(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T3_NORTH_SB_OUT_B16_O), .O(REG_T3_NORTH_B16_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_16 REG_T3_SOUTH_B16(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T3_SOUTH_SB_OUT_B16_O), .O(REG_T3_SOUTH_B16_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_16 REG_T3_WEST_B16(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T3_WEST_SB_OUT_B16_O), .O(REG_T3_WEST_B16_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_16 REG_T4_EAST_B16(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T4_EAST_SB_OUT_B16_O), .O(REG_T4_EAST_B16_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_16 REG_T4_NORTH_B16(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T4_NORTH_SB_OUT_B16_O), .O(REG_T4_NORTH_B16_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_16 REG_T4_SOUTH_B16(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T4_SOUTH_SB_OUT_B16_O), .O(REG_T4_SOUTH_B16_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_16 REG_T4_WEST_B16(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T4_WEST_SB_OUT_B16_O), .O(REG_T4_WEST_B16_O));
MuxWrapper_2_16 RMUX_T0_EAST_B16(.I_0(MUX_SB_T0_EAST_SB_OUT_B16_O), .I_1(REG_T0_EAST_B16_O), .O(RMUX_T0_EAST_B16_O), .S(RMUX_T0_EAST_B16_sel_O));
ConfigRegister_1_8_32_0 RMUX_T0_EAST_B16_sel(.O(RMUX_T0_EAST_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_16 RMUX_T0_NORTH_B16(.I_0(MUX_SB_T0_NORTH_SB_OUT_B16_O), .I_1(REG_T0_NORTH_B16_O), .O(RMUX_T0_NORTH_B16_O), .S(RMUX_T0_NORTH_B16_sel_O));
ConfigRegister_1_8_32_1 RMUX_T0_NORTH_B16_sel(.O(RMUX_T0_NORTH_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_16 RMUX_T0_SOUTH_B16(.I_0(MUX_SB_T0_SOUTH_SB_OUT_B16_O), .I_1(REG_T0_SOUTH_B16_O), .O(RMUX_T0_SOUTH_B16_O), .S(RMUX_T0_SOUTH_B16_sel_O));
ConfigRegister_1_8_32_2 RMUX_T0_SOUTH_B16_sel(.O(RMUX_T0_SOUTH_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_16 RMUX_T0_WEST_B16(.I_0(MUX_SB_T0_WEST_SB_OUT_B16_O), .I_1(REG_T0_WEST_B16_O), .O(RMUX_T0_WEST_B16_O), .S(RMUX_T0_WEST_B16_sel_O));
ConfigRegister_1_8_32_3 RMUX_T0_WEST_B16_sel(.O(RMUX_T0_WEST_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_16 RMUX_T1_EAST_B16(.I_0(MUX_SB_T1_EAST_SB_OUT_B16_O), .I_1(REG_T1_EAST_B16_O), .O(RMUX_T1_EAST_B16_O), .S(RMUX_T1_EAST_B16_sel_O));
ConfigRegister_1_8_32_4 RMUX_T1_EAST_B16_sel(.O(RMUX_T1_EAST_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_16 RMUX_T1_NORTH_B16(.I_0(MUX_SB_T1_NORTH_SB_OUT_B16_O), .I_1(REG_T1_NORTH_B16_O), .O(RMUX_T1_NORTH_B16_O), .S(RMUX_T1_NORTH_B16_sel_O));
ConfigRegister_1_8_32_5 RMUX_T1_NORTH_B16_sel(.O(RMUX_T1_NORTH_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_16 RMUX_T1_SOUTH_B16(.I_0(MUX_SB_T1_SOUTH_SB_OUT_B16_O), .I_1(REG_T1_SOUTH_B16_O), .O(RMUX_T1_SOUTH_B16_O), .S(RMUX_T1_SOUTH_B16_sel_O));
ConfigRegister_1_8_32_6 RMUX_T1_SOUTH_B16_sel(.O(RMUX_T1_SOUTH_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_16 RMUX_T1_WEST_B16(.I_0(MUX_SB_T1_WEST_SB_OUT_B16_O), .I_1(REG_T1_WEST_B16_O), .O(RMUX_T1_WEST_B16_O), .S(RMUX_T1_WEST_B16_sel_O));
ConfigRegister_1_8_32_7 RMUX_T1_WEST_B16_sel(.O(RMUX_T1_WEST_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_16 RMUX_T2_EAST_B16(.I_0(MUX_SB_T2_EAST_SB_OUT_B16_O), .I_1(REG_T2_EAST_B16_O), .O(RMUX_T2_EAST_B16_O), .S(RMUX_T2_EAST_B16_sel_O));
ConfigRegister_1_8_32_8 RMUX_T2_EAST_B16_sel(.O(RMUX_T2_EAST_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_16 RMUX_T2_NORTH_B16(.I_0(MUX_SB_T2_NORTH_SB_OUT_B16_O), .I_1(REG_T2_NORTH_B16_O), .O(RMUX_T2_NORTH_B16_O), .S(RMUX_T2_NORTH_B16_sel_O));
ConfigRegister_1_8_32_9 RMUX_T2_NORTH_B16_sel(.O(RMUX_T2_NORTH_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_16 RMUX_T2_SOUTH_B16(.I_0(MUX_SB_T2_SOUTH_SB_OUT_B16_O), .I_1(REG_T2_SOUTH_B16_O), .O(RMUX_T2_SOUTH_B16_O), .S(RMUX_T2_SOUTH_B16_sel_O));
ConfigRegister_1_8_32_10 RMUX_T2_SOUTH_B16_sel(.O(RMUX_T2_SOUTH_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_16 RMUX_T2_WEST_B16(.I_0(MUX_SB_T2_WEST_SB_OUT_B16_O), .I_1(REG_T2_WEST_B16_O), .O(RMUX_T2_WEST_B16_O), .S(RMUX_T2_WEST_B16_sel_O));
ConfigRegister_1_8_32_11 RMUX_T2_WEST_B16_sel(.O(RMUX_T2_WEST_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_16 RMUX_T3_EAST_B16(.I_0(MUX_SB_T3_EAST_SB_OUT_B16_O), .I_1(REG_T3_EAST_B16_O), .O(RMUX_T3_EAST_B16_O), .S(RMUX_T3_EAST_B16_sel_O));
ConfigRegister_1_8_32_12 RMUX_T3_EAST_B16_sel(.O(RMUX_T3_EAST_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_16 RMUX_T3_NORTH_B16(.I_0(MUX_SB_T3_NORTH_SB_OUT_B16_O), .I_1(REG_T3_NORTH_B16_O), .O(RMUX_T3_NORTH_B16_O), .S(RMUX_T3_NORTH_B16_sel_O));
ConfigRegister_1_8_32_13 RMUX_T3_NORTH_B16_sel(.O(RMUX_T3_NORTH_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_16 RMUX_T3_SOUTH_B16(.I_0(MUX_SB_T3_SOUTH_SB_OUT_B16_O), .I_1(REG_T3_SOUTH_B16_O), .O(RMUX_T3_SOUTH_B16_O), .S(RMUX_T3_SOUTH_B16_sel_O));
ConfigRegister_1_8_32_14 RMUX_T3_SOUTH_B16_sel(.O(RMUX_T3_SOUTH_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_16 RMUX_T3_WEST_B16(.I_0(MUX_SB_T3_WEST_SB_OUT_B16_O), .I_1(REG_T3_WEST_B16_O), .O(RMUX_T3_WEST_B16_O), .S(RMUX_T3_WEST_B16_sel_O));
ConfigRegister_1_8_32_15 RMUX_T3_WEST_B16_sel(.O(RMUX_T3_WEST_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_16 RMUX_T4_EAST_B16(.I_0(MUX_SB_T4_EAST_SB_OUT_B16_O), .I_1(REG_T4_EAST_B16_O), .O(RMUX_T4_EAST_B16_O), .S(RMUX_T4_EAST_B16_sel_O));
ConfigRegister_1_8_32_16 RMUX_T4_EAST_B16_sel(.O(RMUX_T4_EAST_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_16 RMUX_T4_NORTH_B16(.I_0(MUX_SB_T4_NORTH_SB_OUT_B16_O), .I_1(REG_T4_NORTH_B16_O), .O(RMUX_T4_NORTH_B16_O), .S(RMUX_T4_NORTH_B16_sel_O));
ConfigRegister_1_8_32_17 RMUX_T4_NORTH_B16_sel(.O(RMUX_T4_NORTH_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_16 RMUX_T4_SOUTH_B16(.I_0(MUX_SB_T4_SOUTH_SB_OUT_B16_O), .I_1(REG_T4_SOUTH_B16_O), .O(RMUX_T4_SOUTH_B16_O), .S(RMUX_T4_SOUTH_B16_sel_O));
ConfigRegister_1_8_32_18 RMUX_T4_SOUTH_B16_sel(.O(RMUX_T4_SOUTH_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_16 RMUX_T4_WEST_B16(.I_0(MUX_SB_T4_WEST_SB_OUT_B16_O), .I_1(REG_T4_WEST_B16_O), .O(RMUX_T4_WEST_B16_O), .S(RMUX_T4_WEST_B16_sel_O));
ConfigRegister_1_8_32_19 RMUX_T4_WEST_B16_sel(.O(RMUX_T4_WEST_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_2_8_32_20 SB_T0_EAST_SB_OUT_B16_sel(.O(SB_T0_EAST_SB_OUT_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_2_8_32_21 SB_T0_NORTH_SB_OUT_B16_sel(.O(SB_T0_NORTH_SB_OUT_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_2_8_32_22 SB_T0_SOUTH_SB_OUT_B16_sel(.O(SB_T0_SOUTH_SB_OUT_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_2_8_32_23 SB_T0_WEST_SB_OUT_B16_sel(.O(SB_T0_WEST_SB_OUT_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_2_8_32_24 SB_T1_EAST_SB_OUT_B16_sel(.O(SB_T1_EAST_SB_OUT_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_2_8_32_25 SB_T1_NORTH_SB_OUT_B16_sel(.O(SB_T1_NORTH_SB_OUT_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_2_8_32_26 SB_T1_SOUTH_SB_OUT_B16_sel(.O(SB_T1_SOUTH_SB_OUT_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_2_8_32_27 SB_T1_WEST_SB_OUT_B16_sel(.O(SB_T1_WEST_SB_OUT_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_2_8_32_28 SB_T2_EAST_SB_OUT_B16_sel(.O(SB_T2_EAST_SB_OUT_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_2_8_32_29 SB_T2_NORTH_SB_OUT_B16_sel(.O(SB_T2_NORTH_SB_OUT_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_2_8_32_30 SB_T2_SOUTH_SB_OUT_B16_sel(.O(SB_T2_SOUTH_SB_OUT_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_2_8_32_31 SB_T2_WEST_SB_OUT_B16_sel(.O(SB_T2_WEST_SB_OUT_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_2_8_32_32 SB_T3_EAST_SB_OUT_B16_sel(.O(SB_T3_EAST_SB_OUT_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_2_8_32_33 SB_T3_NORTH_SB_OUT_B16_sel(.O(SB_T3_NORTH_SB_OUT_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_2_8_32_34 SB_T3_SOUTH_SB_OUT_B16_sel(.O(SB_T3_SOUTH_SB_OUT_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_2_8_32_35 SB_T3_WEST_SB_OUT_B16_sel(.O(SB_T3_WEST_SB_OUT_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_2_8_32_36 SB_T4_EAST_SB_OUT_B16_sel(.O(SB_T4_EAST_SB_OUT_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_2_8_32_37 SB_T4_NORTH_SB_OUT_B16_sel(.O(SB_T4_NORTH_SB_OUT_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_2_8_32_38 SB_T4_SOUTH_SB_OUT_B16_sel(.O(SB_T4_SOUTH_SB_OUT_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_2_8_32_39 SB_T4_WEST_SB_OUT_B16_sel(.O(SB_T4_WEST_SB_OUT_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_1_16 WIRE_SB_T0_EAST_SB_IN_B16(.I_0(SB_T0_EAST_SB_IN_B16_0), .O(WIRE_SB_T0_EAST_SB_IN_B16_O));
MuxWrapper_1_16 WIRE_SB_T0_NORTH_SB_IN_B16(.I_0(SB_T0_NORTH_SB_IN_B16_0), .O(WIRE_SB_T0_NORTH_SB_IN_B16_O));
MuxWrapper_1_16 WIRE_SB_T0_SOUTH_SB_IN_B16(.I_0(SB_T0_SOUTH_SB_IN_B16_0), .O(WIRE_SB_T0_SOUTH_SB_IN_B16_O));
MuxWrapper_1_16 WIRE_SB_T0_WEST_SB_IN_B16(.I_0(SB_T0_WEST_SB_IN_B16_0), .O(WIRE_SB_T0_WEST_SB_IN_B16_O));
MuxWrapper_1_16 WIRE_SB_T1_EAST_SB_IN_B16(.I_0(SB_T1_EAST_SB_IN_B16_0), .O(WIRE_SB_T1_EAST_SB_IN_B16_O));
MuxWrapper_1_16 WIRE_SB_T1_NORTH_SB_IN_B16(.I_0(SB_T1_NORTH_SB_IN_B16_0), .O(WIRE_SB_T1_NORTH_SB_IN_B16_O));
MuxWrapper_1_16 WIRE_SB_T1_SOUTH_SB_IN_B16(.I_0(SB_T1_SOUTH_SB_IN_B16_0), .O(WIRE_SB_T1_SOUTH_SB_IN_B16_O));
MuxWrapper_1_16 WIRE_SB_T1_WEST_SB_IN_B16(.I_0(SB_T1_WEST_SB_IN_B16_0), .O(WIRE_SB_T1_WEST_SB_IN_B16_O));
MuxWrapper_1_16 WIRE_SB_T2_EAST_SB_IN_B16(.I_0(SB_T2_EAST_SB_IN_B16_0), .O(WIRE_SB_T2_EAST_SB_IN_B16_O));
MuxWrapper_1_16 WIRE_SB_T2_NORTH_SB_IN_B16(.I_0(SB_T2_NORTH_SB_IN_B16_0), .O(WIRE_SB_T2_NORTH_SB_IN_B16_O));
MuxWrapper_1_16 WIRE_SB_T2_SOUTH_SB_IN_B16(.I_0(SB_T2_SOUTH_SB_IN_B16_0), .O(WIRE_SB_T2_SOUTH_SB_IN_B16_O));
MuxWrapper_1_16 WIRE_SB_T2_WEST_SB_IN_B16(.I_0(SB_T2_WEST_SB_IN_B16_0), .O(WIRE_SB_T2_WEST_SB_IN_B16_O));
MuxWrapper_1_16 WIRE_SB_T3_EAST_SB_IN_B16(.I_0(SB_T3_EAST_SB_IN_B16_0), .O(WIRE_SB_T3_EAST_SB_IN_B16_O));
MuxWrapper_1_16 WIRE_SB_T3_NORTH_SB_IN_B16(.I_0(SB_T3_NORTH_SB_IN_B16_0), .O(WIRE_SB_T3_NORTH_SB_IN_B16_O));
MuxWrapper_1_16 WIRE_SB_T3_SOUTH_SB_IN_B16(.I_0(SB_T3_SOUTH_SB_IN_B16_0), .O(WIRE_SB_T3_SOUTH_SB_IN_B16_O));
MuxWrapper_1_16 WIRE_SB_T3_WEST_SB_IN_B16(.I_0(SB_T3_WEST_SB_IN_B16_0), .O(WIRE_SB_T3_WEST_SB_IN_B16_O));
MuxWrapper_1_16 WIRE_SB_T4_EAST_SB_IN_B16(.I_0(SB_T4_EAST_SB_IN_B16_0), .O(WIRE_SB_T4_EAST_SB_IN_B16_O));
MuxWrapper_1_16 WIRE_SB_T4_NORTH_SB_IN_B16(.I_0(SB_T4_NORTH_SB_IN_B16_0), .O(WIRE_SB_T4_NORTH_SB_IN_B16_O));
MuxWrapper_1_16 WIRE_SB_T4_SOUTH_SB_IN_B16(.I_0(SB_T4_SOUTH_SB_IN_B16_0), .O(WIRE_SB_T4_SOUTH_SB_IN_B16_O));
MuxWrapper_1_16 WIRE_SB_T4_WEST_SB_IN_B16(.I_0(SB_T4_WEST_SB_IN_B16_0), .O(WIRE_SB_T4_WEST_SB_IN_B16_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst0(.I(RMUX_T0_EAST_B16_sel_O), .O(ZextWrapper_1_32_inst0_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst1(.I(RMUX_T0_NORTH_B16_sel_O), .O(ZextWrapper_1_32_inst1_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst10(.I(RMUX_T2_SOUTH_B16_sel_O), .O(ZextWrapper_1_32_inst10_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst11(.I(RMUX_T2_WEST_B16_sel_O), .O(ZextWrapper_1_32_inst11_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst12(.I(RMUX_T3_EAST_B16_sel_O), .O(ZextWrapper_1_32_inst12_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst13(.I(RMUX_T3_NORTH_B16_sel_O), .O(ZextWrapper_1_32_inst13_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst14(.I(RMUX_T3_SOUTH_B16_sel_O), .O(ZextWrapper_1_32_inst14_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst15(.I(RMUX_T3_WEST_B16_sel_O), .O(ZextWrapper_1_32_inst15_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst16(.I(RMUX_T4_EAST_B16_sel_O), .O(ZextWrapper_1_32_inst16_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst17(.I(RMUX_T4_NORTH_B16_sel_O), .O(ZextWrapper_1_32_inst17_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst18(.I(RMUX_T4_SOUTH_B16_sel_O), .O(ZextWrapper_1_32_inst18_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst19(.I(RMUX_T4_WEST_B16_sel_O), .O(ZextWrapper_1_32_inst19_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst2(.I(RMUX_T0_SOUTH_B16_sel_O), .O(ZextWrapper_1_32_inst2_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst3(.I(RMUX_T0_WEST_B16_sel_O), .O(ZextWrapper_1_32_inst3_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst4(.I(RMUX_T1_EAST_B16_sel_O), .O(ZextWrapper_1_32_inst4_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst5(.I(RMUX_T1_NORTH_B16_sel_O), .O(ZextWrapper_1_32_inst5_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst6(.I(RMUX_T1_SOUTH_B16_sel_O), .O(ZextWrapper_1_32_inst6_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst7(.I(RMUX_T1_WEST_B16_sel_O), .O(ZextWrapper_1_32_inst7_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst8(.I(RMUX_T2_EAST_B16_sel_O), .O(ZextWrapper_1_32_inst8_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst9(.I(RMUX_T2_NORTH_B16_sel_O), .O(ZextWrapper_1_32_inst9_O));
ZextWrapper_2_32 ZextWrapper_2_32_inst0(.I(SB_T0_EAST_SB_OUT_B16_sel_O), .O(ZextWrapper_2_32_inst0_O));
ZextWrapper_2_32 ZextWrapper_2_32_inst1(.I(SB_T0_NORTH_SB_OUT_B16_sel_O), .O(ZextWrapper_2_32_inst1_O));
ZextWrapper_2_32 ZextWrapper_2_32_inst10(.I(SB_T2_SOUTH_SB_OUT_B16_sel_O), .O(ZextWrapper_2_32_inst10_O));
ZextWrapper_2_32 ZextWrapper_2_32_inst11(.I(SB_T2_WEST_SB_OUT_B16_sel_O), .O(ZextWrapper_2_32_inst11_O));
ZextWrapper_2_32 ZextWrapper_2_32_inst12(.I(SB_T3_EAST_SB_OUT_B16_sel_O), .O(ZextWrapper_2_32_inst12_O));
ZextWrapper_2_32 ZextWrapper_2_32_inst13(.I(SB_T3_NORTH_SB_OUT_B16_sel_O), .O(ZextWrapper_2_32_inst13_O));
ZextWrapper_2_32 ZextWrapper_2_32_inst14(.I(SB_T3_SOUTH_SB_OUT_B16_sel_O), .O(ZextWrapper_2_32_inst14_O));
ZextWrapper_2_32 ZextWrapper_2_32_inst15(.I(SB_T3_WEST_SB_OUT_B16_sel_O), .O(ZextWrapper_2_32_inst15_O));
ZextWrapper_2_32 ZextWrapper_2_32_inst16(.I(SB_T4_EAST_SB_OUT_B16_sel_O), .O(ZextWrapper_2_32_inst16_O));
ZextWrapper_2_32 ZextWrapper_2_32_inst17(.I(SB_T4_NORTH_SB_OUT_B16_sel_O), .O(ZextWrapper_2_32_inst17_O));
ZextWrapper_2_32 ZextWrapper_2_32_inst18(.I(SB_T4_SOUTH_SB_OUT_B16_sel_O), .O(ZextWrapper_2_32_inst18_O));
ZextWrapper_2_32 ZextWrapper_2_32_inst19(.I(SB_T4_WEST_SB_OUT_B16_sel_O), .O(ZextWrapper_2_32_inst19_O));
ZextWrapper_2_32 ZextWrapper_2_32_inst2(.I(SB_T0_SOUTH_SB_OUT_B16_sel_O), .O(ZextWrapper_2_32_inst2_O));
ZextWrapper_2_32 ZextWrapper_2_32_inst3(.I(SB_T0_WEST_SB_OUT_B16_sel_O), .O(ZextWrapper_2_32_inst3_O));
ZextWrapper_2_32 ZextWrapper_2_32_inst4(.I(SB_T1_EAST_SB_OUT_B16_sel_O), .O(ZextWrapper_2_32_inst4_O));
ZextWrapper_2_32 ZextWrapper_2_32_inst5(.I(SB_T1_NORTH_SB_OUT_B16_sel_O), .O(ZextWrapper_2_32_inst5_O));
ZextWrapper_2_32 ZextWrapper_2_32_inst6(.I(SB_T1_SOUTH_SB_OUT_B16_sel_O), .O(ZextWrapper_2_32_inst6_O));
ZextWrapper_2_32 ZextWrapper_2_32_inst7(.I(SB_T1_WEST_SB_OUT_B16_sel_O), .O(ZextWrapper_2_32_inst7_O));
ZextWrapper_2_32 ZextWrapper_2_32_inst8(.I(SB_T2_EAST_SB_OUT_B16_sel_O), .O(ZextWrapper_2_32_inst8_O));
ZextWrapper_2_32 ZextWrapper_2_32_inst9(.I(SB_T2_NORTH_SB_OUT_B16_sel_O), .O(ZextWrapper_2_32_inst9_O));
assign SB_T0_EAST_SB_OUT_B16 = RMUX_T0_EAST_B16_O;
assign SB_T0_NORTH_SB_OUT_B16 = RMUX_T0_NORTH_B16_O;
assign SB_T0_SOUTH_SB_OUT_B16 = RMUX_T0_SOUTH_B16_O;
assign SB_T0_WEST_SB_OUT_B16 = RMUX_T0_WEST_B16_O;
assign SB_T1_EAST_SB_OUT_B16 = RMUX_T1_EAST_B16_O;
assign SB_T1_NORTH_SB_OUT_B16 = RMUX_T1_NORTH_B16_O;
assign SB_T1_SOUTH_SB_OUT_B16 = RMUX_T1_SOUTH_B16_O;
assign SB_T1_WEST_SB_OUT_B16 = RMUX_T1_WEST_B16_O;
assign SB_T2_EAST_SB_OUT_B16 = RMUX_T2_EAST_B16_O;
assign SB_T2_NORTH_SB_OUT_B16 = RMUX_T2_NORTH_B16_O;
assign SB_T2_SOUTH_SB_OUT_B16 = RMUX_T2_SOUTH_B16_O;
assign SB_T2_WEST_SB_OUT_B16 = RMUX_T2_WEST_B16_O;
assign SB_T3_EAST_SB_OUT_B16 = RMUX_T3_EAST_B16_O;
assign SB_T3_NORTH_SB_OUT_B16 = RMUX_T3_NORTH_B16_O;
assign SB_T3_SOUTH_SB_OUT_B16 = RMUX_T3_SOUTH_B16_O;
assign SB_T3_WEST_SB_OUT_B16 = RMUX_T3_WEST_B16_O;
assign SB_T4_EAST_SB_OUT_B16 = RMUX_T4_EAST_B16_O;
assign SB_T4_NORTH_SB_OUT_B16 = RMUX_T4_NORTH_B16_O;
assign SB_T4_SOUTH_SB_OUT_B16 = RMUX_T4_SOUTH_B16_O;
assign SB_T4_WEST_SB_OUT_B16 = RMUX_T4_WEST_B16_O;
assign read_config_data = MuxWrapper_40_32_inst0_O;
endmodule

module SB_ID0_5TRACKS_B16_MemCore (input [15:0] SB_T0_EAST_SB_IN_B16_0, output [15:0] SB_T0_EAST_SB_OUT_B16, input [15:0] SB_T0_NORTH_SB_IN_B16_0, output [15:0] SB_T0_NORTH_SB_OUT_B16, input [15:0] SB_T0_SOUTH_SB_IN_B16_0, output [15:0] SB_T0_SOUTH_SB_OUT_B16, input [15:0] SB_T0_WEST_SB_IN_B16_0, output [15:0] SB_T0_WEST_SB_OUT_B16, input [15:0] SB_T1_EAST_SB_IN_B16_0, output [15:0] SB_T1_EAST_SB_OUT_B16, input [15:0] SB_T1_NORTH_SB_IN_B16_0, output [15:0] SB_T1_NORTH_SB_OUT_B16, input [15:0] SB_T1_SOUTH_SB_IN_B16_0, output [15:0] SB_T1_SOUTH_SB_OUT_B16, input [15:0] SB_T1_WEST_SB_IN_B16_0, output [15:0] SB_T1_WEST_SB_OUT_B16, input [15:0] SB_T2_EAST_SB_IN_B16_0, output [15:0] SB_T2_EAST_SB_OUT_B16, input [15:0] SB_T2_NORTH_SB_IN_B16_0, output [15:0] SB_T2_NORTH_SB_OUT_B16, input [15:0] SB_T2_SOUTH_SB_IN_B16_0, output [15:0] SB_T2_SOUTH_SB_OUT_B16, input [15:0] SB_T2_WEST_SB_IN_B16_0, output [15:0] SB_T2_WEST_SB_OUT_B16, input [15:0] SB_T3_EAST_SB_IN_B16_0, output [15:0] SB_T3_EAST_SB_OUT_B16, input [15:0] SB_T3_NORTH_SB_IN_B16_0, output [15:0] SB_T3_NORTH_SB_OUT_B16, input [15:0] SB_T3_SOUTH_SB_IN_B16_0, output [15:0] SB_T3_SOUTH_SB_OUT_B16, input [15:0] SB_T3_WEST_SB_IN_B16_0, output [15:0] SB_T3_WEST_SB_OUT_B16, input [15:0] SB_T4_EAST_SB_IN_B16_0, output [15:0] SB_T4_EAST_SB_OUT_B16, input [15:0] SB_T4_NORTH_SB_IN_B16_0, output [15:0] SB_T4_NORTH_SB_OUT_B16, input [15:0] SB_T4_SOUTH_SB_IN_B16_0, output [15:0] SB_T4_SOUTH_SB_OUT_B16, input [15:0] SB_T4_WEST_SB_IN_B16_0, output [15:0] SB_T4_WEST_SB_OUT_B16, input [15:0] chain_out, input clk, input [7:0] config_config_addr, input [31:0] config_config_data, input [0:0] config_read, input [0:0] config_write, input [15:0] data_out, output [31:0] read_config_data, input reset, input [0:0] stall);
wire [0:0] Invert1_inst0_out;
wire [15:0] MUX_SB_T0_EAST_SB_OUT_B16_O;
wire [15:0] MUX_SB_T0_NORTH_SB_OUT_B16_O;
wire [15:0] MUX_SB_T0_SOUTH_SB_OUT_B16_O;
wire [15:0] MUX_SB_T0_WEST_SB_OUT_B16_O;
wire [15:0] MUX_SB_T1_EAST_SB_OUT_B16_O;
wire [15:0] MUX_SB_T1_NORTH_SB_OUT_B16_O;
wire [15:0] MUX_SB_T1_SOUTH_SB_OUT_B16_O;
wire [15:0] MUX_SB_T1_WEST_SB_OUT_B16_O;
wire [15:0] MUX_SB_T2_EAST_SB_OUT_B16_O;
wire [15:0] MUX_SB_T2_NORTH_SB_OUT_B16_O;
wire [15:0] MUX_SB_T2_SOUTH_SB_OUT_B16_O;
wire [15:0] MUX_SB_T2_WEST_SB_OUT_B16_O;
wire [15:0] MUX_SB_T3_EAST_SB_OUT_B16_O;
wire [15:0] MUX_SB_T3_NORTH_SB_OUT_B16_O;
wire [15:0] MUX_SB_T3_SOUTH_SB_OUT_B16_O;
wire [15:0] MUX_SB_T3_WEST_SB_OUT_B16_O;
wire [15:0] MUX_SB_T4_EAST_SB_OUT_B16_O;
wire [15:0] MUX_SB_T4_NORTH_SB_OUT_B16_O;
wire [15:0] MUX_SB_T4_SOUTH_SB_OUT_B16_O;
wire [15:0] MUX_SB_T4_WEST_SB_OUT_B16_O;
wire [31:0] MuxWrapper_40_32_inst0_O;
wire [15:0] REG_T0_EAST_B16_O;
wire [15:0] REG_T0_NORTH_B16_O;
wire [15:0] REG_T0_SOUTH_B16_O;
wire [15:0] REG_T0_WEST_B16_O;
wire [15:0] REG_T1_EAST_B16_O;
wire [15:0] REG_T1_NORTH_B16_O;
wire [15:0] REG_T1_SOUTH_B16_O;
wire [15:0] REG_T1_WEST_B16_O;
wire [15:0] REG_T2_EAST_B16_O;
wire [15:0] REG_T2_NORTH_B16_O;
wire [15:0] REG_T2_SOUTH_B16_O;
wire [15:0] REG_T2_WEST_B16_O;
wire [15:0] REG_T3_EAST_B16_O;
wire [15:0] REG_T3_NORTH_B16_O;
wire [15:0] REG_T3_SOUTH_B16_O;
wire [15:0] REG_T3_WEST_B16_O;
wire [15:0] REG_T4_EAST_B16_O;
wire [15:0] REG_T4_NORTH_B16_O;
wire [15:0] REG_T4_SOUTH_B16_O;
wire [15:0] REG_T4_WEST_B16_O;
wire [15:0] RMUX_T0_EAST_B16_O;
wire [0:0] RMUX_T0_EAST_B16_sel_O;
wire [15:0] RMUX_T0_NORTH_B16_O;
wire [0:0] RMUX_T0_NORTH_B16_sel_O;
wire [15:0] RMUX_T0_SOUTH_B16_O;
wire [0:0] RMUX_T0_SOUTH_B16_sel_O;
wire [15:0] RMUX_T0_WEST_B16_O;
wire [0:0] RMUX_T0_WEST_B16_sel_O;
wire [15:0] RMUX_T1_EAST_B16_O;
wire [0:0] RMUX_T1_EAST_B16_sel_O;
wire [15:0] RMUX_T1_NORTH_B16_O;
wire [0:0] RMUX_T1_NORTH_B16_sel_O;
wire [15:0] RMUX_T1_SOUTH_B16_O;
wire [0:0] RMUX_T1_SOUTH_B16_sel_O;
wire [15:0] RMUX_T1_WEST_B16_O;
wire [0:0] RMUX_T1_WEST_B16_sel_O;
wire [15:0] RMUX_T2_EAST_B16_O;
wire [0:0] RMUX_T2_EAST_B16_sel_O;
wire [15:0] RMUX_T2_NORTH_B16_O;
wire [0:0] RMUX_T2_NORTH_B16_sel_O;
wire [15:0] RMUX_T2_SOUTH_B16_O;
wire [0:0] RMUX_T2_SOUTH_B16_sel_O;
wire [15:0] RMUX_T2_WEST_B16_O;
wire [0:0] RMUX_T2_WEST_B16_sel_O;
wire [15:0] RMUX_T3_EAST_B16_O;
wire [0:0] RMUX_T3_EAST_B16_sel_O;
wire [15:0] RMUX_T3_NORTH_B16_O;
wire [0:0] RMUX_T3_NORTH_B16_sel_O;
wire [15:0] RMUX_T3_SOUTH_B16_O;
wire [0:0] RMUX_T3_SOUTH_B16_sel_O;
wire [15:0] RMUX_T3_WEST_B16_O;
wire [0:0] RMUX_T3_WEST_B16_sel_O;
wire [15:0] RMUX_T4_EAST_B16_O;
wire [0:0] RMUX_T4_EAST_B16_sel_O;
wire [15:0] RMUX_T4_NORTH_B16_O;
wire [0:0] RMUX_T4_NORTH_B16_sel_O;
wire [15:0] RMUX_T4_SOUTH_B16_O;
wire [0:0] RMUX_T4_SOUTH_B16_sel_O;
wire [15:0] RMUX_T4_WEST_B16_O;
wire [0:0] RMUX_T4_WEST_B16_sel_O;
wire [2:0] SB_T0_EAST_SB_OUT_B16_sel_O;
wire [2:0] SB_T0_NORTH_SB_OUT_B16_sel_O;
wire [2:0] SB_T0_SOUTH_SB_OUT_B16_sel_O;
wire [2:0] SB_T0_WEST_SB_OUT_B16_sel_O;
wire [2:0] SB_T1_EAST_SB_OUT_B16_sel_O;
wire [2:0] SB_T1_NORTH_SB_OUT_B16_sel_O;
wire [2:0] SB_T1_SOUTH_SB_OUT_B16_sel_O;
wire [2:0] SB_T1_WEST_SB_OUT_B16_sel_O;
wire [2:0] SB_T2_EAST_SB_OUT_B16_sel_O;
wire [2:0] SB_T2_NORTH_SB_OUT_B16_sel_O;
wire [2:0] SB_T2_SOUTH_SB_OUT_B16_sel_O;
wire [2:0] SB_T2_WEST_SB_OUT_B16_sel_O;
wire [2:0] SB_T3_EAST_SB_OUT_B16_sel_O;
wire [2:0] SB_T3_NORTH_SB_OUT_B16_sel_O;
wire [2:0] SB_T3_SOUTH_SB_OUT_B16_sel_O;
wire [2:0] SB_T3_WEST_SB_OUT_B16_sel_O;
wire [2:0] SB_T4_EAST_SB_OUT_B16_sel_O;
wire [2:0] SB_T4_NORTH_SB_OUT_B16_sel_O;
wire [2:0] SB_T4_SOUTH_SB_OUT_B16_sel_O;
wire [2:0] SB_T4_WEST_SB_OUT_B16_sel_O;
wire [15:0] WIRE_SB_T0_EAST_SB_IN_B16_O;
wire [15:0] WIRE_SB_T0_NORTH_SB_IN_B16_O;
wire [15:0] WIRE_SB_T0_SOUTH_SB_IN_B16_O;
wire [15:0] WIRE_SB_T0_WEST_SB_IN_B16_O;
wire [15:0] WIRE_SB_T1_EAST_SB_IN_B16_O;
wire [15:0] WIRE_SB_T1_NORTH_SB_IN_B16_O;
wire [15:0] WIRE_SB_T1_SOUTH_SB_IN_B16_O;
wire [15:0] WIRE_SB_T1_WEST_SB_IN_B16_O;
wire [15:0] WIRE_SB_T2_EAST_SB_IN_B16_O;
wire [15:0] WIRE_SB_T2_NORTH_SB_IN_B16_O;
wire [15:0] WIRE_SB_T2_SOUTH_SB_IN_B16_O;
wire [15:0] WIRE_SB_T2_WEST_SB_IN_B16_O;
wire [15:0] WIRE_SB_T3_EAST_SB_IN_B16_O;
wire [15:0] WIRE_SB_T3_NORTH_SB_IN_B16_O;
wire [15:0] WIRE_SB_T3_SOUTH_SB_IN_B16_O;
wire [15:0] WIRE_SB_T3_WEST_SB_IN_B16_O;
wire [15:0] WIRE_SB_T4_EAST_SB_IN_B16_O;
wire [15:0] WIRE_SB_T4_NORTH_SB_IN_B16_O;
wire [15:0] WIRE_SB_T4_SOUTH_SB_IN_B16_O;
wire [15:0] WIRE_SB_T4_WEST_SB_IN_B16_O;
wire [31:0] ZextWrapper_1_32_inst0_O;
wire [31:0] ZextWrapper_1_32_inst1_O;
wire [31:0] ZextWrapper_1_32_inst10_O;
wire [31:0] ZextWrapper_1_32_inst11_O;
wire [31:0] ZextWrapper_1_32_inst12_O;
wire [31:0] ZextWrapper_1_32_inst13_O;
wire [31:0] ZextWrapper_1_32_inst14_O;
wire [31:0] ZextWrapper_1_32_inst15_O;
wire [31:0] ZextWrapper_1_32_inst16_O;
wire [31:0] ZextWrapper_1_32_inst17_O;
wire [31:0] ZextWrapper_1_32_inst18_O;
wire [31:0] ZextWrapper_1_32_inst19_O;
wire [31:0] ZextWrapper_1_32_inst2_O;
wire [31:0] ZextWrapper_1_32_inst3_O;
wire [31:0] ZextWrapper_1_32_inst4_O;
wire [31:0] ZextWrapper_1_32_inst5_O;
wire [31:0] ZextWrapper_1_32_inst6_O;
wire [31:0] ZextWrapper_1_32_inst7_O;
wire [31:0] ZextWrapper_1_32_inst8_O;
wire [31:0] ZextWrapper_1_32_inst9_O;
wire [31:0] ZextWrapper_3_32_inst0_O;
wire [31:0] ZextWrapper_3_32_inst1_O;
wire [31:0] ZextWrapper_3_32_inst10_O;
wire [31:0] ZextWrapper_3_32_inst11_O;
wire [31:0] ZextWrapper_3_32_inst12_O;
wire [31:0] ZextWrapper_3_32_inst13_O;
wire [31:0] ZextWrapper_3_32_inst14_O;
wire [31:0] ZextWrapper_3_32_inst15_O;
wire [31:0] ZextWrapper_3_32_inst16_O;
wire [31:0] ZextWrapper_3_32_inst17_O;
wire [31:0] ZextWrapper_3_32_inst18_O;
wire [31:0] ZextWrapper_3_32_inst19_O;
wire [31:0] ZextWrapper_3_32_inst2_O;
wire [31:0] ZextWrapper_3_32_inst3_O;
wire [31:0] ZextWrapper_3_32_inst4_O;
wire [31:0] ZextWrapper_3_32_inst5_O;
wire [31:0] ZextWrapper_3_32_inst6_O;
wire [31:0] ZextWrapper_3_32_inst7_O;
wire [31:0] ZextWrapper_3_32_inst8_O;
wire [31:0] ZextWrapper_3_32_inst9_O;
coreir_not #(.width(1)) Invert1_inst0(.in(stall), .out(Invert1_inst0_out));
MuxWrapper_5_16 MUX_SB_T0_EAST_SB_OUT_B16(.I_0(WIRE_SB_T0_WEST_SB_IN_B16_O), .I_1(WIRE_SB_T3_SOUTH_SB_IN_B16_O), .I_2(WIRE_SB_T4_NORTH_SB_IN_B16_O), .I_3(chain_out), .I_4(data_out), .O(MUX_SB_T0_EAST_SB_OUT_B16_O), .S(SB_T0_EAST_SB_OUT_B16_sel_O));
MuxWrapper_5_16 MUX_SB_T0_NORTH_SB_OUT_B16(.I_0(WIRE_SB_T0_WEST_SB_IN_B16_O), .I_1(WIRE_SB_T1_EAST_SB_IN_B16_O), .I_2(WIRE_SB_T0_SOUTH_SB_IN_B16_O), .I_3(chain_out), .I_4(data_out), .O(MUX_SB_T0_NORTH_SB_OUT_B16_O), .S(SB_T0_NORTH_SB_OUT_B16_sel_O));
MuxWrapper_5_16 MUX_SB_T0_SOUTH_SB_OUT_B16(.I_0(WIRE_SB_T3_EAST_SB_IN_B16_O), .I_1(WIRE_SB_T0_NORTH_SB_IN_B16_O), .I_2(WIRE_SB_T1_WEST_SB_IN_B16_O), .I_3(chain_out), .I_4(data_out), .O(MUX_SB_T0_SOUTH_SB_OUT_B16_O), .S(SB_T0_SOUTH_SB_OUT_B16_sel_O));
MuxWrapper_5_16 MUX_SB_T0_WEST_SB_OUT_B16(.I_0(WIRE_SB_T0_NORTH_SB_IN_B16_O), .I_1(WIRE_SB_T4_SOUTH_SB_IN_B16_O), .I_2(WIRE_SB_T0_EAST_SB_IN_B16_O), .I_3(chain_out), .I_4(data_out), .O(MUX_SB_T0_WEST_SB_OUT_B16_O), .S(SB_T0_WEST_SB_OUT_B16_sel_O));
MuxWrapper_5_16 MUX_SB_T1_EAST_SB_OUT_B16(.I_0(WIRE_SB_T0_NORTH_SB_IN_B16_O), .I_1(WIRE_SB_T1_WEST_SB_IN_B16_O), .I_2(WIRE_SB_T2_SOUTH_SB_IN_B16_O), .I_3(chain_out), .I_4(data_out), .O(MUX_SB_T1_EAST_SB_OUT_B16_O), .S(SB_T1_EAST_SB_OUT_B16_sel_O));
MuxWrapper_5_16 MUX_SB_T1_NORTH_SB_OUT_B16(.I_0(WIRE_SB_T2_EAST_SB_IN_B16_O), .I_1(WIRE_SB_T1_SOUTH_SB_IN_B16_O), .I_2(WIRE_SB_T4_WEST_SB_IN_B16_O), .I_3(chain_out), .I_4(data_out), .O(MUX_SB_T1_NORTH_SB_OUT_B16_O), .S(SB_T1_NORTH_SB_OUT_B16_sel_O));
MuxWrapper_5_16 MUX_SB_T1_SOUTH_SB_OUT_B16(.I_0(WIRE_SB_T2_EAST_SB_IN_B16_O), .I_1(WIRE_SB_T1_NORTH_SB_IN_B16_O), .I_2(WIRE_SB_T2_WEST_SB_IN_B16_O), .I_3(chain_out), .I_4(data_out), .O(MUX_SB_T1_SOUTH_SB_OUT_B16_O), .S(SB_T1_SOUTH_SB_OUT_B16_sel_O));
MuxWrapper_5_16 MUX_SB_T1_WEST_SB_OUT_B16(.I_0(WIRE_SB_T4_NORTH_SB_IN_B16_O), .I_1(WIRE_SB_T0_SOUTH_SB_IN_B16_O), .I_2(WIRE_SB_T1_EAST_SB_IN_B16_O), .I_3(chain_out), .I_4(data_out), .O(MUX_SB_T1_WEST_SB_OUT_B16_O), .S(SB_T1_WEST_SB_OUT_B16_sel_O));
MuxWrapper_5_16 MUX_SB_T2_EAST_SB_OUT_B16(.I_0(WIRE_SB_T1_NORTH_SB_IN_B16_O), .I_1(WIRE_SB_T1_SOUTH_SB_IN_B16_O), .I_2(WIRE_SB_T2_WEST_SB_IN_B16_O), .I_3(chain_out), .I_4(data_out), .O(MUX_SB_T2_EAST_SB_OUT_B16_O), .S(SB_T2_EAST_SB_OUT_B16_sel_O));
MuxWrapper_5_16 MUX_SB_T2_NORTH_SB_OUT_B16(.I_0(WIRE_SB_T3_EAST_SB_IN_B16_O), .I_1(WIRE_SB_T2_SOUTH_SB_IN_B16_O), .I_2(WIRE_SB_T3_WEST_SB_IN_B16_O), .I_3(chain_out), .I_4(data_out), .O(MUX_SB_T2_NORTH_SB_OUT_B16_O), .S(SB_T2_NORTH_SB_OUT_B16_sel_O));
MuxWrapper_5_16 MUX_SB_T2_SOUTH_SB_OUT_B16(.I_0(WIRE_SB_T1_EAST_SB_IN_B16_O), .I_1(WIRE_SB_T2_NORTH_SB_IN_B16_O), .I_2(WIRE_SB_T3_WEST_SB_IN_B16_O), .I_3(chain_out), .I_4(data_out), .O(MUX_SB_T2_SOUTH_SB_OUT_B16_O), .S(SB_T2_SOUTH_SB_OUT_B16_sel_O));
MuxWrapper_5_16 MUX_SB_T2_WEST_SB_OUT_B16(.I_0(WIRE_SB_T3_NORTH_SB_IN_B16_O), .I_1(WIRE_SB_T1_SOUTH_SB_IN_B16_O), .I_2(WIRE_SB_T2_EAST_SB_IN_B16_O), .I_3(chain_out), .I_4(data_out), .O(MUX_SB_T2_WEST_SB_OUT_B16_O), .S(SB_T2_WEST_SB_OUT_B16_sel_O));
MuxWrapper_5_16 MUX_SB_T3_EAST_SB_OUT_B16(.I_0(WIRE_SB_T0_SOUTH_SB_IN_B16_O), .I_1(WIRE_SB_T2_NORTH_SB_IN_B16_O), .I_2(WIRE_SB_T3_WEST_SB_IN_B16_O), .I_3(chain_out), .I_4(data_out), .O(MUX_SB_T3_EAST_SB_OUT_B16_O), .S(SB_T3_EAST_SB_OUT_B16_sel_O));
MuxWrapper_5_16 MUX_SB_T3_NORTH_SB_OUT_B16(.I_0(WIRE_SB_T2_WEST_SB_IN_B16_O), .I_1(WIRE_SB_T4_EAST_SB_IN_B16_O), .I_2(WIRE_SB_T3_SOUTH_SB_IN_B16_O), .I_3(chain_out), .I_4(data_out), .O(MUX_SB_T3_NORTH_SB_OUT_B16_O), .S(SB_T3_NORTH_SB_OUT_B16_sel_O));
MuxWrapper_5_16 MUX_SB_T3_SOUTH_SB_OUT_B16(.I_0(WIRE_SB_T0_EAST_SB_IN_B16_O), .I_1(WIRE_SB_T3_NORTH_SB_IN_B16_O), .I_2(WIRE_SB_T4_WEST_SB_IN_B16_O), .I_3(chain_out), .I_4(data_out), .O(MUX_SB_T3_SOUTH_SB_OUT_B16_O), .S(SB_T3_SOUTH_SB_OUT_B16_sel_O));
MuxWrapper_5_16 MUX_SB_T3_WEST_SB_OUT_B16(.I_0(WIRE_SB_T2_NORTH_SB_IN_B16_O), .I_1(WIRE_SB_T2_SOUTH_SB_IN_B16_O), .I_2(WIRE_SB_T3_EAST_SB_IN_B16_O), .I_3(chain_out), .I_4(data_out), .O(MUX_SB_T3_WEST_SB_OUT_B16_O), .S(SB_T3_WEST_SB_OUT_B16_sel_O));
MuxWrapper_5_16 MUX_SB_T4_EAST_SB_OUT_B16(.I_0(WIRE_SB_T3_NORTH_SB_IN_B16_O), .I_1(WIRE_SB_T4_SOUTH_SB_IN_B16_O), .I_2(WIRE_SB_T4_WEST_SB_IN_B16_O), .I_3(chain_out), .I_4(data_out), .O(MUX_SB_T4_EAST_SB_OUT_B16_O), .S(SB_T4_EAST_SB_OUT_B16_sel_O));
MuxWrapper_5_16 MUX_SB_T4_NORTH_SB_OUT_B16(.I_0(WIRE_SB_T1_WEST_SB_IN_B16_O), .I_1(WIRE_SB_T0_EAST_SB_IN_B16_O), .I_2(WIRE_SB_T4_SOUTH_SB_IN_B16_O), .I_3(chain_out), .I_4(data_out), .O(MUX_SB_T4_NORTH_SB_OUT_B16_O), .S(SB_T4_NORTH_SB_OUT_B16_sel_O));
MuxWrapper_5_16 MUX_SB_T4_SOUTH_SB_OUT_B16(.I_0(WIRE_SB_T0_WEST_SB_IN_B16_O), .I_1(WIRE_SB_T4_EAST_SB_IN_B16_O), .I_2(WIRE_SB_T4_NORTH_SB_IN_B16_O), .I_3(chain_out), .I_4(data_out), .O(MUX_SB_T4_SOUTH_SB_OUT_B16_O), .S(SB_T4_SOUTH_SB_OUT_B16_sel_O));
MuxWrapper_5_16 MUX_SB_T4_WEST_SB_OUT_B16(.I_0(WIRE_SB_T1_NORTH_SB_IN_B16_O), .I_1(WIRE_SB_T3_SOUTH_SB_IN_B16_O), .I_2(WIRE_SB_T4_EAST_SB_IN_B16_O), .I_3(chain_out), .I_4(data_out), .O(MUX_SB_T4_WEST_SB_OUT_B16_O), .S(SB_T4_WEST_SB_OUT_B16_sel_O));
MuxWrapper_40_32 MuxWrapper_40_32_inst0(.I_0(ZextWrapper_1_32_inst0_O), .I_1(ZextWrapper_1_32_inst1_O), .I_10(ZextWrapper_1_32_inst10_O), .I_11(ZextWrapper_1_32_inst11_O), .I_12(ZextWrapper_1_32_inst12_O), .I_13(ZextWrapper_1_32_inst13_O), .I_14(ZextWrapper_1_32_inst14_O), .I_15(ZextWrapper_1_32_inst15_O), .I_16(ZextWrapper_1_32_inst16_O), .I_17(ZextWrapper_1_32_inst17_O), .I_18(ZextWrapper_1_32_inst18_O), .I_19(ZextWrapper_1_32_inst19_O), .I_2(ZextWrapper_1_32_inst2_O), .I_20(ZextWrapper_3_32_inst0_O), .I_21(ZextWrapper_3_32_inst1_O), .I_22(ZextWrapper_3_32_inst2_O), .I_23(ZextWrapper_3_32_inst3_O), .I_24(ZextWrapper_3_32_inst4_O), .I_25(ZextWrapper_3_32_inst5_O), .I_26(ZextWrapper_3_32_inst6_O), .I_27(ZextWrapper_3_32_inst7_O), .I_28(ZextWrapper_3_32_inst8_O), .I_29(ZextWrapper_3_32_inst9_O), .I_3(ZextWrapper_1_32_inst3_O), .I_30(ZextWrapper_3_32_inst10_O), .I_31(ZextWrapper_3_32_inst11_O), .I_32(ZextWrapper_3_32_inst12_O), .I_33(ZextWrapper_3_32_inst13_O), .I_34(ZextWrapper_3_32_inst14_O), .I_35(ZextWrapper_3_32_inst15_O), .I_36(ZextWrapper_3_32_inst16_O), .I_37(ZextWrapper_3_32_inst17_O), .I_38(ZextWrapper_3_32_inst18_O), .I_39(ZextWrapper_3_32_inst19_O), .I_4(ZextWrapper_1_32_inst4_O), .I_5(ZextWrapper_1_32_inst5_O), .I_6(ZextWrapper_1_32_inst6_O), .I_7(ZextWrapper_1_32_inst7_O), .I_8(ZextWrapper_1_32_inst8_O), .I_9(ZextWrapper_1_32_inst9_O), .O(MuxWrapper_40_32_inst0_O), .S({config_config_addr[5],config_config_addr[4],config_config_addr[3],config_config_addr[2],config_config_addr[1],config_config_addr[0]}));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_16 REG_T0_EAST_B16(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T0_EAST_SB_OUT_B16_O), .O(REG_T0_EAST_B16_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_16 REG_T0_NORTH_B16(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T0_NORTH_SB_OUT_B16_O), .O(REG_T0_NORTH_B16_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_16 REG_T0_SOUTH_B16(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T0_SOUTH_SB_OUT_B16_O), .O(REG_T0_SOUTH_B16_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_16 REG_T0_WEST_B16(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T0_WEST_SB_OUT_B16_O), .O(REG_T0_WEST_B16_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_16 REG_T1_EAST_B16(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T1_EAST_SB_OUT_B16_O), .O(REG_T1_EAST_B16_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_16 REG_T1_NORTH_B16(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T1_NORTH_SB_OUT_B16_O), .O(REG_T1_NORTH_B16_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_16 REG_T1_SOUTH_B16(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T1_SOUTH_SB_OUT_B16_O), .O(REG_T1_SOUTH_B16_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_16 REG_T1_WEST_B16(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T1_WEST_SB_OUT_B16_O), .O(REG_T1_WEST_B16_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_16 REG_T2_EAST_B16(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T2_EAST_SB_OUT_B16_O), .O(REG_T2_EAST_B16_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_16 REG_T2_NORTH_B16(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T2_NORTH_SB_OUT_B16_O), .O(REG_T2_NORTH_B16_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_16 REG_T2_SOUTH_B16(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T2_SOUTH_SB_OUT_B16_O), .O(REG_T2_SOUTH_B16_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_16 REG_T2_WEST_B16(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T2_WEST_SB_OUT_B16_O), .O(REG_T2_WEST_B16_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_16 REG_T3_EAST_B16(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T3_EAST_SB_OUT_B16_O), .O(REG_T3_EAST_B16_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_16 REG_T3_NORTH_B16(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T3_NORTH_SB_OUT_B16_O), .O(REG_T3_NORTH_B16_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_16 REG_T3_SOUTH_B16(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T3_SOUTH_SB_OUT_B16_O), .O(REG_T3_SOUTH_B16_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_16 REG_T3_WEST_B16(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T3_WEST_SB_OUT_B16_O), .O(REG_T3_WEST_B16_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_16 REG_T4_EAST_B16(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T4_EAST_SB_OUT_B16_O), .O(REG_T4_EAST_B16_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_16 REG_T4_NORTH_B16(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T4_NORTH_SB_OUT_B16_O), .O(REG_T4_NORTH_B16_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_16 REG_T4_SOUTH_B16(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T4_SOUTH_SB_OUT_B16_O), .O(REG_T4_SOUTH_B16_O));
Register_has_ce_True_has_reset_False_has_async_reset_False_has_async_resetn_False_type_Bits_n_16 REG_T4_WEST_B16(.CE(Invert1_inst0_out[0]), .CLK(clk), .I(MUX_SB_T4_WEST_SB_OUT_B16_O), .O(REG_T4_WEST_B16_O));
MuxWrapper_2_16 RMUX_T0_EAST_B16(.I_0(MUX_SB_T0_EAST_SB_OUT_B16_O), .I_1(REG_T0_EAST_B16_O), .O(RMUX_T0_EAST_B16_O), .S(RMUX_T0_EAST_B16_sel_O));
ConfigRegister_1_8_32_0 RMUX_T0_EAST_B16_sel(.O(RMUX_T0_EAST_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_16 RMUX_T0_NORTH_B16(.I_0(MUX_SB_T0_NORTH_SB_OUT_B16_O), .I_1(REG_T0_NORTH_B16_O), .O(RMUX_T0_NORTH_B16_O), .S(RMUX_T0_NORTH_B16_sel_O));
ConfigRegister_1_8_32_1 RMUX_T0_NORTH_B16_sel(.O(RMUX_T0_NORTH_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_16 RMUX_T0_SOUTH_B16(.I_0(MUX_SB_T0_SOUTH_SB_OUT_B16_O), .I_1(REG_T0_SOUTH_B16_O), .O(RMUX_T0_SOUTH_B16_O), .S(RMUX_T0_SOUTH_B16_sel_O));
ConfigRegister_1_8_32_2 RMUX_T0_SOUTH_B16_sel(.O(RMUX_T0_SOUTH_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_16 RMUX_T0_WEST_B16(.I_0(MUX_SB_T0_WEST_SB_OUT_B16_O), .I_1(REG_T0_WEST_B16_O), .O(RMUX_T0_WEST_B16_O), .S(RMUX_T0_WEST_B16_sel_O));
ConfigRegister_1_8_32_3 RMUX_T0_WEST_B16_sel(.O(RMUX_T0_WEST_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_16 RMUX_T1_EAST_B16(.I_0(MUX_SB_T1_EAST_SB_OUT_B16_O), .I_1(REG_T1_EAST_B16_O), .O(RMUX_T1_EAST_B16_O), .S(RMUX_T1_EAST_B16_sel_O));
ConfigRegister_1_8_32_4 RMUX_T1_EAST_B16_sel(.O(RMUX_T1_EAST_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_16 RMUX_T1_NORTH_B16(.I_0(MUX_SB_T1_NORTH_SB_OUT_B16_O), .I_1(REG_T1_NORTH_B16_O), .O(RMUX_T1_NORTH_B16_O), .S(RMUX_T1_NORTH_B16_sel_O));
ConfigRegister_1_8_32_5 RMUX_T1_NORTH_B16_sel(.O(RMUX_T1_NORTH_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_16 RMUX_T1_SOUTH_B16(.I_0(MUX_SB_T1_SOUTH_SB_OUT_B16_O), .I_1(REG_T1_SOUTH_B16_O), .O(RMUX_T1_SOUTH_B16_O), .S(RMUX_T1_SOUTH_B16_sel_O));
ConfigRegister_1_8_32_6 RMUX_T1_SOUTH_B16_sel(.O(RMUX_T1_SOUTH_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_16 RMUX_T1_WEST_B16(.I_0(MUX_SB_T1_WEST_SB_OUT_B16_O), .I_1(REG_T1_WEST_B16_O), .O(RMUX_T1_WEST_B16_O), .S(RMUX_T1_WEST_B16_sel_O));
ConfigRegister_1_8_32_7 RMUX_T1_WEST_B16_sel(.O(RMUX_T1_WEST_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_16 RMUX_T2_EAST_B16(.I_0(MUX_SB_T2_EAST_SB_OUT_B16_O), .I_1(REG_T2_EAST_B16_O), .O(RMUX_T2_EAST_B16_O), .S(RMUX_T2_EAST_B16_sel_O));
ConfigRegister_1_8_32_8 RMUX_T2_EAST_B16_sel(.O(RMUX_T2_EAST_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_16 RMUX_T2_NORTH_B16(.I_0(MUX_SB_T2_NORTH_SB_OUT_B16_O), .I_1(REG_T2_NORTH_B16_O), .O(RMUX_T2_NORTH_B16_O), .S(RMUX_T2_NORTH_B16_sel_O));
ConfigRegister_1_8_32_9 RMUX_T2_NORTH_B16_sel(.O(RMUX_T2_NORTH_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_16 RMUX_T2_SOUTH_B16(.I_0(MUX_SB_T2_SOUTH_SB_OUT_B16_O), .I_1(REG_T2_SOUTH_B16_O), .O(RMUX_T2_SOUTH_B16_O), .S(RMUX_T2_SOUTH_B16_sel_O));
ConfigRegister_1_8_32_10 RMUX_T2_SOUTH_B16_sel(.O(RMUX_T2_SOUTH_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_16 RMUX_T2_WEST_B16(.I_0(MUX_SB_T2_WEST_SB_OUT_B16_O), .I_1(REG_T2_WEST_B16_O), .O(RMUX_T2_WEST_B16_O), .S(RMUX_T2_WEST_B16_sel_O));
ConfigRegister_1_8_32_11 RMUX_T2_WEST_B16_sel(.O(RMUX_T2_WEST_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_16 RMUX_T3_EAST_B16(.I_0(MUX_SB_T3_EAST_SB_OUT_B16_O), .I_1(REG_T3_EAST_B16_O), .O(RMUX_T3_EAST_B16_O), .S(RMUX_T3_EAST_B16_sel_O));
ConfigRegister_1_8_32_12 RMUX_T3_EAST_B16_sel(.O(RMUX_T3_EAST_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_16 RMUX_T3_NORTH_B16(.I_0(MUX_SB_T3_NORTH_SB_OUT_B16_O), .I_1(REG_T3_NORTH_B16_O), .O(RMUX_T3_NORTH_B16_O), .S(RMUX_T3_NORTH_B16_sel_O));
ConfigRegister_1_8_32_13 RMUX_T3_NORTH_B16_sel(.O(RMUX_T3_NORTH_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_16 RMUX_T3_SOUTH_B16(.I_0(MUX_SB_T3_SOUTH_SB_OUT_B16_O), .I_1(REG_T3_SOUTH_B16_O), .O(RMUX_T3_SOUTH_B16_O), .S(RMUX_T3_SOUTH_B16_sel_O));
ConfigRegister_1_8_32_14 RMUX_T3_SOUTH_B16_sel(.O(RMUX_T3_SOUTH_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_16 RMUX_T3_WEST_B16(.I_0(MUX_SB_T3_WEST_SB_OUT_B16_O), .I_1(REG_T3_WEST_B16_O), .O(RMUX_T3_WEST_B16_O), .S(RMUX_T3_WEST_B16_sel_O));
ConfigRegister_1_8_32_15 RMUX_T3_WEST_B16_sel(.O(RMUX_T3_WEST_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_16 RMUX_T4_EAST_B16(.I_0(MUX_SB_T4_EAST_SB_OUT_B16_O), .I_1(REG_T4_EAST_B16_O), .O(RMUX_T4_EAST_B16_O), .S(RMUX_T4_EAST_B16_sel_O));
ConfigRegister_1_8_32_16 RMUX_T4_EAST_B16_sel(.O(RMUX_T4_EAST_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_16 RMUX_T4_NORTH_B16(.I_0(MUX_SB_T4_NORTH_SB_OUT_B16_O), .I_1(REG_T4_NORTH_B16_O), .O(RMUX_T4_NORTH_B16_O), .S(RMUX_T4_NORTH_B16_sel_O));
ConfigRegister_1_8_32_17 RMUX_T4_NORTH_B16_sel(.O(RMUX_T4_NORTH_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_16 RMUX_T4_SOUTH_B16(.I_0(MUX_SB_T4_SOUTH_SB_OUT_B16_O), .I_1(REG_T4_SOUTH_B16_O), .O(RMUX_T4_SOUTH_B16_O), .S(RMUX_T4_SOUTH_B16_sel_O));
ConfigRegister_1_8_32_18 RMUX_T4_SOUTH_B16_sel(.O(RMUX_T4_SOUTH_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_16 RMUX_T4_WEST_B16(.I_0(MUX_SB_T4_WEST_SB_OUT_B16_O), .I_1(REG_T4_WEST_B16_O), .O(RMUX_T4_WEST_B16_O), .S(RMUX_T4_WEST_B16_sel_O));
ConfigRegister_1_8_32_19 RMUX_T4_WEST_B16_sel(.O(RMUX_T4_WEST_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_3_8_32_20 SB_T0_EAST_SB_OUT_B16_sel(.O(SB_T0_EAST_SB_OUT_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_3_8_32_21 SB_T0_NORTH_SB_OUT_B16_sel(.O(SB_T0_NORTH_SB_OUT_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_3_8_32_22 SB_T0_SOUTH_SB_OUT_B16_sel(.O(SB_T0_SOUTH_SB_OUT_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_3_8_32_23 SB_T0_WEST_SB_OUT_B16_sel(.O(SB_T0_WEST_SB_OUT_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_3_8_32_24 SB_T1_EAST_SB_OUT_B16_sel(.O(SB_T1_EAST_SB_OUT_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_3_8_32_25 SB_T1_NORTH_SB_OUT_B16_sel(.O(SB_T1_NORTH_SB_OUT_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_3_8_32_26 SB_T1_SOUTH_SB_OUT_B16_sel(.O(SB_T1_SOUTH_SB_OUT_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_3_8_32_27 SB_T1_WEST_SB_OUT_B16_sel(.O(SB_T1_WEST_SB_OUT_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_3_8_32_28 SB_T2_EAST_SB_OUT_B16_sel(.O(SB_T2_EAST_SB_OUT_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_3_8_32_29 SB_T2_NORTH_SB_OUT_B16_sel(.O(SB_T2_NORTH_SB_OUT_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_3_8_32_30 SB_T2_SOUTH_SB_OUT_B16_sel(.O(SB_T2_SOUTH_SB_OUT_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_3_8_32_31 SB_T2_WEST_SB_OUT_B16_sel(.O(SB_T2_WEST_SB_OUT_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_3_8_32_32 SB_T3_EAST_SB_OUT_B16_sel(.O(SB_T3_EAST_SB_OUT_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_3_8_32_33 SB_T3_NORTH_SB_OUT_B16_sel(.O(SB_T3_NORTH_SB_OUT_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_3_8_32_34 SB_T3_SOUTH_SB_OUT_B16_sel(.O(SB_T3_SOUTH_SB_OUT_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_3_8_32_35 SB_T3_WEST_SB_OUT_B16_sel(.O(SB_T3_WEST_SB_OUT_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_3_8_32_36 SB_T4_EAST_SB_OUT_B16_sel(.O(SB_T4_EAST_SB_OUT_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_3_8_32_37 SB_T4_NORTH_SB_OUT_B16_sel(.O(SB_T4_NORTH_SB_OUT_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_3_8_32_38 SB_T4_SOUTH_SB_OUT_B16_sel(.O(SB_T4_SOUTH_SB_OUT_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_3_8_32_39 SB_T4_WEST_SB_OUT_B16_sel(.O(SB_T4_WEST_SB_OUT_B16_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_1_16 WIRE_SB_T0_EAST_SB_IN_B16(.I_0(SB_T0_EAST_SB_IN_B16_0), .O(WIRE_SB_T0_EAST_SB_IN_B16_O));
MuxWrapper_1_16 WIRE_SB_T0_NORTH_SB_IN_B16(.I_0(SB_T0_NORTH_SB_IN_B16_0), .O(WIRE_SB_T0_NORTH_SB_IN_B16_O));
MuxWrapper_1_16 WIRE_SB_T0_SOUTH_SB_IN_B16(.I_0(SB_T0_SOUTH_SB_IN_B16_0), .O(WIRE_SB_T0_SOUTH_SB_IN_B16_O));
MuxWrapper_1_16 WIRE_SB_T0_WEST_SB_IN_B16(.I_0(SB_T0_WEST_SB_IN_B16_0), .O(WIRE_SB_T0_WEST_SB_IN_B16_O));
MuxWrapper_1_16 WIRE_SB_T1_EAST_SB_IN_B16(.I_0(SB_T1_EAST_SB_IN_B16_0), .O(WIRE_SB_T1_EAST_SB_IN_B16_O));
MuxWrapper_1_16 WIRE_SB_T1_NORTH_SB_IN_B16(.I_0(SB_T1_NORTH_SB_IN_B16_0), .O(WIRE_SB_T1_NORTH_SB_IN_B16_O));
MuxWrapper_1_16 WIRE_SB_T1_SOUTH_SB_IN_B16(.I_0(SB_T1_SOUTH_SB_IN_B16_0), .O(WIRE_SB_T1_SOUTH_SB_IN_B16_O));
MuxWrapper_1_16 WIRE_SB_T1_WEST_SB_IN_B16(.I_0(SB_T1_WEST_SB_IN_B16_0), .O(WIRE_SB_T1_WEST_SB_IN_B16_O));
MuxWrapper_1_16 WIRE_SB_T2_EAST_SB_IN_B16(.I_0(SB_T2_EAST_SB_IN_B16_0), .O(WIRE_SB_T2_EAST_SB_IN_B16_O));
MuxWrapper_1_16 WIRE_SB_T2_NORTH_SB_IN_B16(.I_0(SB_T2_NORTH_SB_IN_B16_0), .O(WIRE_SB_T2_NORTH_SB_IN_B16_O));
MuxWrapper_1_16 WIRE_SB_T2_SOUTH_SB_IN_B16(.I_0(SB_T2_SOUTH_SB_IN_B16_0), .O(WIRE_SB_T2_SOUTH_SB_IN_B16_O));
MuxWrapper_1_16 WIRE_SB_T2_WEST_SB_IN_B16(.I_0(SB_T2_WEST_SB_IN_B16_0), .O(WIRE_SB_T2_WEST_SB_IN_B16_O));
MuxWrapper_1_16 WIRE_SB_T3_EAST_SB_IN_B16(.I_0(SB_T3_EAST_SB_IN_B16_0), .O(WIRE_SB_T3_EAST_SB_IN_B16_O));
MuxWrapper_1_16 WIRE_SB_T3_NORTH_SB_IN_B16(.I_0(SB_T3_NORTH_SB_IN_B16_0), .O(WIRE_SB_T3_NORTH_SB_IN_B16_O));
MuxWrapper_1_16 WIRE_SB_T3_SOUTH_SB_IN_B16(.I_0(SB_T3_SOUTH_SB_IN_B16_0), .O(WIRE_SB_T3_SOUTH_SB_IN_B16_O));
MuxWrapper_1_16 WIRE_SB_T3_WEST_SB_IN_B16(.I_0(SB_T3_WEST_SB_IN_B16_0), .O(WIRE_SB_T3_WEST_SB_IN_B16_O));
MuxWrapper_1_16 WIRE_SB_T4_EAST_SB_IN_B16(.I_0(SB_T4_EAST_SB_IN_B16_0), .O(WIRE_SB_T4_EAST_SB_IN_B16_O));
MuxWrapper_1_16 WIRE_SB_T4_NORTH_SB_IN_B16(.I_0(SB_T4_NORTH_SB_IN_B16_0), .O(WIRE_SB_T4_NORTH_SB_IN_B16_O));
MuxWrapper_1_16 WIRE_SB_T4_SOUTH_SB_IN_B16(.I_0(SB_T4_SOUTH_SB_IN_B16_0), .O(WIRE_SB_T4_SOUTH_SB_IN_B16_O));
MuxWrapper_1_16 WIRE_SB_T4_WEST_SB_IN_B16(.I_0(SB_T4_WEST_SB_IN_B16_0), .O(WIRE_SB_T4_WEST_SB_IN_B16_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst0(.I(RMUX_T0_EAST_B16_sel_O), .O(ZextWrapper_1_32_inst0_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst1(.I(RMUX_T0_NORTH_B16_sel_O), .O(ZextWrapper_1_32_inst1_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst10(.I(RMUX_T2_SOUTH_B16_sel_O), .O(ZextWrapper_1_32_inst10_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst11(.I(RMUX_T2_WEST_B16_sel_O), .O(ZextWrapper_1_32_inst11_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst12(.I(RMUX_T3_EAST_B16_sel_O), .O(ZextWrapper_1_32_inst12_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst13(.I(RMUX_T3_NORTH_B16_sel_O), .O(ZextWrapper_1_32_inst13_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst14(.I(RMUX_T3_SOUTH_B16_sel_O), .O(ZextWrapper_1_32_inst14_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst15(.I(RMUX_T3_WEST_B16_sel_O), .O(ZextWrapper_1_32_inst15_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst16(.I(RMUX_T4_EAST_B16_sel_O), .O(ZextWrapper_1_32_inst16_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst17(.I(RMUX_T4_NORTH_B16_sel_O), .O(ZextWrapper_1_32_inst17_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst18(.I(RMUX_T4_SOUTH_B16_sel_O), .O(ZextWrapper_1_32_inst18_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst19(.I(RMUX_T4_WEST_B16_sel_O), .O(ZextWrapper_1_32_inst19_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst2(.I(RMUX_T0_SOUTH_B16_sel_O), .O(ZextWrapper_1_32_inst2_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst3(.I(RMUX_T0_WEST_B16_sel_O), .O(ZextWrapper_1_32_inst3_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst4(.I(RMUX_T1_EAST_B16_sel_O), .O(ZextWrapper_1_32_inst4_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst5(.I(RMUX_T1_NORTH_B16_sel_O), .O(ZextWrapper_1_32_inst5_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst6(.I(RMUX_T1_SOUTH_B16_sel_O), .O(ZextWrapper_1_32_inst6_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst7(.I(RMUX_T1_WEST_B16_sel_O), .O(ZextWrapper_1_32_inst7_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst8(.I(RMUX_T2_EAST_B16_sel_O), .O(ZextWrapper_1_32_inst8_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst9(.I(RMUX_T2_NORTH_B16_sel_O), .O(ZextWrapper_1_32_inst9_O));
ZextWrapper_3_32 ZextWrapper_3_32_inst0(.I(SB_T0_EAST_SB_OUT_B16_sel_O), .O(ZextWrapper_3_32_inst0_O));
ZextWrapper_3_32 ZextWrapper_3_32_inst1(.I(SB_T0_NORTH_SB_OUT_B16_sel_O), .O(ZextWrapper_3_32_inst1_O));
ZextWrapper_3_32 ZextWrapper_3_32_inst10(.I(SB_T2_SOUTH_SB_OUT_B16_sel_O), .O(ZextWrapper_3_32_inst10_O));
ZextWrapper_3_32 ZextWrapper_3_32_inst11(.I(SB_T2_WEST_SB_OUT_B16_sel_O), .O(ZextWrapper_3_32_inst11_O));
ZextWrapper_3_32 ZextWrapper_3_32_inst12(.I(SB_T3_EAST_SB_OUT_B16_sel_O), .O(ZextWrapper_3_32_inst12_O));
ZextWrapper_3_32 ZextWrapper_3_32_inst13(.I(SB_T3_NORTH_SB_OUT_B16_sel_O), .O(ZextWrapper_3_32_inst13_O));
ZextWrapper_3_32 ZextWrapper_3_32_inst14(.I(SB_T3_SOUTH_SB_OUT_B16_sel_O), .O(ZextWrapper_3_32_inst14_O));
ZextWrapper_3_32 ZextWrapper_3_32_inst15(.I(SB_T3_WEST_SB_OUT_B16_sel_O), .O(ZextWrapper_3_32_inst15_O));
ZextWrapper_3_32 ZextWrapper_3_32_inst16(.I(SB_T4_EAST_SB_OUT_B16_sel_O), .O(ZextWrapper_3_32_inst16_O));
ZextWrapper_3_32 ZextWrapper_3_32_inst17(.I(SB_T4_NORTH_SB_OUT_B16_sel_O), .O(ZextWrapper_3_32_inst17_O));
ZextWrapper_3_32 ZextWrapper_3_32_inst18(.I(SB_T4_SOUTH_SB_OUT_B16_sel_O), .O(ZextWrapper_3_32_inst18_O));
ZextWrapper_3_32 ZextWrapper_3_32_inst19(.I(SB_T4_WEST_SB_OUT_B16_sel_O), .O(ZextWrapper_3_32_inst19_O));
ZextWrapper_3_32 ZextWrapper_3_32_inst2(.I(SB_T0_SOUTH_SB_OUT_B16_sel_O), .O(ZextWrapper_3_32_inst2_O));
ZextWrapper_3_32 ZextWrapper_3_32_inst3(.I(SB_T0_WEST_SB_OUT_B16_sel_O), .O(ZextWrapper_3_32_inst3_O));
ZextWrapper_3_32 ZextWrapper_3_32_inst4(.I(SB_T1_EAST_SB_OUT_B16_sel_O), .O(ZextWrapper_3_32_inst4_O));
ZextWrapper_3_32 ZextWrapper_3_32_inst5(.I(SB_T1_NORTH_SB_OUT_B16_sel_O), .O(ZextWrapper_3_32_inst5_O));
ZextWrapper_3_32 ZextWrapper_3_32_inst6(.I(SB_T1_SOUTH_SB_OUT_B16_sel_O), .O(ZextWrapper_3_32_inst6_O));
ZextWrapper_3_32 ZextWrapper_3_32_inst7(.I(SB_T1_WEST_SB_OUT_B16_sel_O), .O(ZextWrapper_3_32_inst7_O));
ZextWrapper_3_32 ZextWrapper_3_32_inst8(.I(SB_T2_EAST_SB_OUT_B16_sel_O), .O(ZextWrapper_3_32_inst8_O));
ZextWrapper_3_32 ZextWrapper_3_32_inst9(.I(SB_T2_NORTH_SB_OUT_B16_sel_O), .O(ZextWrapper_3_32_inst9_O));
assign SB_T0_EAST_SB_OUT_B16 = RMUX_T0_EAST_B16_O;
assign SB_T0_NORTH_SB_OUT_B16 = RMUX_T0_NORTH_B16_O;
assign SB_T0_SOUTH_SB_OUT_B16 = RMUX_T0_SOUTH_B16_O;
assign SB_T0_WEST_SB_OUT_B16 = RMUX_T0_WEST_B16_O;
assign SB_T1_EAST_SB_OUT_B16 = RMUX_T1_EAST_B16_O;
assign SB_T1_NORTH_SB_OUT_B16 = RMUX_T1_NORTH_B16_O;
assign SB_T1_SOUTH_SB_OUT_B16 = RMUX_T1_SOUTH_B16_O;
assign SB_T1_WEST_SB_OUT_B16 = RMUX_T1_WEST_B16_O;
assign SB_T2_EAST_SB_OUT_B16 = RMUX_T2_EAST_B16_O;
assign SB_T2_NORTH_SB_OUT_B16 = RMUX_T2_NORTH_B16_O;
assign SB_T2_SOUTH_SB_OUT_B16 = RMUX_T2_SOUTH_B16_O;
assign SB_T2_WEST_SB_OUT_B16 = RMUX_T2_WEST_B16_O;
assign SB_T3_EAST_SB_OUT_B16 = RMUX_T3_EAST_B16_O;
assign SB_T3_NORTH_SB_OUT_B16 = RMUX_T3_NORTH_B16_O;
assign SB_T3_SOUTH_SB_OUT_B16 = RMUX_T3_SOUTH_B16_O;
assign SB_T3_WEST_SB_OUT_B16 = RMUX_T3_WEST_B16_O;
assign SB_T4_EAST_SB_OUT_B16 = RMUX_T4_EAST_B16_O;
assign SB_T4_NORTH_SB_OUT_B16 = RMUX_T4_NORTH_B16_O;
assign SB_T4_SOUTH_SB_OUT_B16 = RMUX_T4_SOUTH_B16_O;
assign SB_T4_WEST_SB_OUT_B16 = RMUX_T4_WEST_B16_O;
assign read_config_data = MuxWrapper_40_32_inst0_O;
endmodule

module ConfigRegister_16_8_32_6 (output [15:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [15:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_16_inst0_O;
wire [7:0] const_6_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_16 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_16_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[15],config_data[14],config_data[13],config_data[12],config_data[11],config_data[10],config_data[9],config_data[8],config_data[7],config_data[6],config_data[5],config_data[4],config_data[3],config_data[2],config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_16_inst0_O));
coreir_const #(.value(8'h06), .width(8)) const_6_8(.out(const_6_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_6_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_16_inst0_O;
endmodule

module ConfigRegister_16_8_32_29 (output [15:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [15:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_16_inst0_O;
wire [7:0] const_29_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_16 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_16_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[15],config_data[14],config_data[13],config_data[12],config_data[11],config_data[10],config_data[9],config_data[8],config_data[7],config_data[6],config_data[5],config_data[4],config_data[3],config_data[2],config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_16_inst0_O));
coreir_const #(.value(8'h1d), .width(8)) const_29_8(.out(const_29_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_29_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_16_inst0_O;
endmodule

module ConfigRegister_16_8_32_28 (output [15:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [15:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_16_inst0_O;
wire [7:0] const_28_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_16 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_16_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[15],config_data[14],config_data[13],config_data[12],config_data[11],config_data[10],config_data[9],config_data[8],config_data[7],config_data[6],config_data[5],config_data[4],config_data[3],config_data[2],config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_16_inst0_O));
coreir_const #(.value(8'h1c), .width(8)) const_28_8(.out(const_28_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_28_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_16_inst0_O;
endmodule

module ConfigRegister_16_8_32_27 (output [15:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [15:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_16_inst0_O;
wire [7:0] const_27_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_16 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_16_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[15],config_data[14],config_data[13],config_data[12],config_data[11],config_data[10],config_data[9],config_data[8],config_data[7],config_data[6],config_data[5],config_data[4],config_data[3],config_data[2],config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_16_inst0_O));
coreir_const #(.value(8'h1b), .width(8)) const_27_8(.out(const_27_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_27_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_16_inst0_O;
endmodule

module ConfigRegister_16_8_32_26 (output [15:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [15:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_16_inst0_O;
wire [7:0] const_26_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_16 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_16_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[15],config_data[14],config_data[13],config_data[12],config_data[11],config_data[10],config_data[9],config_data[8],config_data[7],config_data[6],config_data[5],config_data[4],config_data[3],config_data[2],config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_16_inst0_O));
coreir_const #(.value(8'h1a), .width(8)) const_26_8(.out(const_26_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_26_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_16_inst0_O;
endmodule

module ConfigRegister_16_8_32_25 (output [15:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [15:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_16_inst0_O;
wire [7:0] const_25_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_16 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_16_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[15],config_data[14],config_data[13],config_data[12],config_data[11],config_data[10],config_data[9],config_data[8],config_data[7],config_data[6],config_data[5],config_data[4],config_data[3],config_data[2],config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_16_inst0_O));
coreir_const #(.value(8'h19), .width(8)) const_25_8(.out(const_25_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_25_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_16_inst0_O;
endmodule

module ConfigRegister_16_8_32_24 (output [15:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [15:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_16_inst0_O;
wire [7:0] const_24_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_16 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_16_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[15],config_data[14],config_data[13],config_data[12],config_data[11],config_data[10],config_data[9],config_data[8],config_data[7],config_data[6],config_data[5],config_data[4],config_data[3],config_data[2],config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_16_inst0_O));
coreir_const #(.value(8'h18), .width(8)) const_24_8(.out(const_24_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_24_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_16_inst0_O;
endmodule

module ConfigRegister_16_8_32_23 (output [15:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [15:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_16_inst0_O;
wire [7:0] const_23_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_16 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_16_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[15],config_data[14],config_data[13],config_data[12],config_data[11],config_data[10],config_data[9],config_data[8],config_data[7],config_data[6],config_data[5],config_data[4],config_data[3],config_data[2],config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_16_inst0_O));
coreir_const #(.value(8'h17), .width(8)) const_23_8(.out(const_23_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_23_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_16_inst0_O;
endmodule

module ConfigRegister_16_8_32_22 (output [15:0] O, input clk, input [7:0] config_addr, input [31:0] config_data, input config_en, input reset);
wire [15:0] Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_16_inst0_O;
wire [7:0] const_22_8_out;
wire magma_Bit_and_inst0_out;
wire magma_Bits_8_eq_inst0_out;
Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_16 Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_16_inst0(.ASYNCRESET(reset), .CE(magma_Bit_and_inst0_out), .CLK(clk), .I({config_data[15],config_data[14],config_data[13],config_data[12],config_data[11],config_data[10],config_data[9],config_data[8],config_data[7],config_data[6],config_data[5],config_data[4],config_data[3],config_data[2],config_data[1],config_data[0]}), .O(Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_16_inst0_O));
coreir_const #(.value(8'h16), .width(8)) const_22_8(.out(const_22_8_out));
corebit_and magma_Bit_and_inst0(.in0(magma_Bits_8_eq_inst0_out), .in1(config_en), .out(magma_Bit_and_inst0_out));
coreir_eq #(.width(8)) magma_Bits_8_eq_inst0(.in0(config_addr), .in1(const_22_8_out), .out(magma_Bits_8_eq_inst0_out));
assign O = Register_has_ce_True_has_reset_False_has_async_reset_True_has_async_resetn_False_type_Bits_n_16_inst0_O;
endmodule

module MemCore (input [15:0] addr_in, output [0:0] almost_empty, output [0:0] almost_full, input [15:0] chain_in, output [15:0] chain_out, output [0:0] chain_valid_out, input [0:0] chain_wen_in, input clk, input [7:0] config_1_config_addr, input [31:0] config_1_config_data, input [0:0] config_1_read, input [0:0] config_1_write, input [7:0] config_2_config_addr, input [31:0] config_2_config_data, input [0:0] config_2_read, input [0:0] config_2_write, input [7:0] config_3_config_addr, input [31:0] config_3_config_data, input [0:0] config_3_read, input [0:0] config_3_write, input [7:0] config_4_config_addr, input [31:0] config_4_config_data, input [0:0] config_4_read, input [0:0] config_4_write, input [7:0] config_config_addr, input [31:0] config_config_data, input config_en_0, input config_en_1, input config_en_2, input config_en_3, input [0:0] config_read, input [0:0] config_write, input [15:0] data_in, output [15:0] data_out, output [0:0] empty, input [0:0] flush, output [0:0] full, output [31:0] read_config_data, output [31:0] read_config_data_1, output [31:0] read_config_data_2, output [31:0] read_config_data_3, output [31:0] read_config_data_4, input [0:0] ren_in, input reset, input [0:0] stall, input [0:0] switch_db, output [0:0] valid_out, input [0:0] wen_in);
wire [0:0] Invert1_inst0_out;
wire [31:0] MuxWrapper_35_32_inst0_O;
wire [0:0] OR_CONFIG_EN_SRAM_0_out;
wire [0:0] OR_CONFIG_EN_SRAM_1_out;
wire [0:0] OR_CONFIG_EN_SRAM_2_out;
wire [0:0] OR_CONFIG_EN_SRAM_3_out;
wire [0:0] OR_CONFIG_RD_SRAM_O;
wire [0:0] OR_CONFIG_WR_SRAM_O;
wire [7:0] OR_config_addr_FEATURE_O;
wire [31:0] OR_config_data_FEATURE_O;
wire [31:0] ZextWrapper_16_32_inst0_O;
wire [31:0] ZextWrapper_16_32_inst1_O;
wire [31:0] ZextWrapper_16_32_inst2_O;
wire [31:0] ZextWrapper_16_32_inst3_O;
wire [31:0] ZextWrapper_16_32_inst4_O;
wire [31:0] ZextWrapper_16_32_inst5_O;
wire [31:0] ZextWrapper_16_32_inst6_O;
wire [31:0] ZextWrapper_16_32_inst7_O;
wire [31:0] ZextWrapper_16_32_inst8_O;
wire [31:0] ZextWrapper_1_32_inst0_O;
wire [31:0] ZextWrapper_1_32_inst1_O;
wire [31:0] ZextWrapper_1_32_inst10_O;
wire [31:0] ZextWrapper_1_32_inst11_O;
wire [31:0] ZextWrapper_1_32_inst12_O;
wire [31:0] ZextWrapper_1_32_inst13_O;
wire [31:0] ZextWrapper_1_32_inst14_O;
wire [31:0] ZextWrapper_1_32_inst2_O;
wire [31:0] ZextWrapper_1_32_inst3_O;
wire [31:0] ZextWrapper_1_32_inst4_O;
wire [31:0] ZextWrapper_1_32_inst5_O;
wire [31:0] ZextWrapper_1_32_inst6_O;
wire [31:0] ZextWrapper_1_32_inst7_O;
wire [31:0] ZextWrapper_1_32_inst8_O;
wire [31:0] ZextWrapper_1_32_inst9_O;
wire [31:0] ZextWrapper_2_32_inst0_O;
wire [31:0] ZextWrapper_4_32_inst0_O;
wire [31:0] ZextWrapper_4_32_inst1_O;
wire [31:0] ZextWrapper_4_32_inst2_O;
wire [3:0] almost_count_O;
wire [0:0] arbitrary_addr_O;
wire bit_const_0_None_out;
wire [3:0] chain_idx_O;
wire [0:0] chain_wen_in_reg_sel_O;
wire [0:0] chain_wen_in_reg_value_O;
wire [0:0] chain_wen_in_sel_O;
wire [0:0] circular_en_O;
wire [15:0] depth_O;
wire [3:0] dimensionality_O;
wire [0:0] enable_chain_O;
wire [0:0] flush_reg_sel_O;
wire [0:0] flush_reg_value_O;
wire [0:0] flush_sel_O;
wire [31:0] iter_cnt_O;
wire memory_core_inst0_almost_empty;
wire memory_core_inst0_almost_full;
wire [15:0] memory_core_inst0_chain_out;
wire memory_core_inst0_chain_valid_out;
wire [15:0] memory_core_inst0_data_out;
wire memory_core_inst0_empty;
wire memory_core_inst0_full;
wire [31:0] memory_core_inst0_read_config_data;
wire [31:0] memory_core_inst0_read_data_sram_0;
wire [31:0] memory_core_inst0_read_data_sram_1;
wire [31:0] memory_core_inst0_read_data_sram_2;
wire [31:0] memory_core_inst0_read_data_sram_3;
wire memory_core_inst0_valid_out;
wire [1:0] mode_O;
wire [31:0] range_0_O;
wire [31:0] range_1_O;
wire [31:0] range_2_O;
wire [31:0] range_3_O;
wire [31:0] range_4_O;
wire [31:0] range_5_O;
wire [0:0] rate_matched_O;
wire [0:0] ren_in_reg_sel_O;
wire [0:0] ren_in_reg_value_O;
wire [0:0] ren_in_sel_O;
wire [15:0] starting_addr_O;
wire [15:0] stencil_width_O;
wire [15:0] stride_0_O;
wire [15:0] stride_1_O;
wire [15:0] stride_2_O;
wire [15:0] stride_3_O;
wire [15:0] stride_4_O;
wire [15:0] stride_5_O;
wire [0:0] switch_db_reg_sel_O;
wire [0:0] switch_db_reg_value_O;
wire [0:0] switch_db_sel_O;
wire [0:0] tile_en_O;
wire [0:0] wen_in_reg_sel_O;
wire [0:0] wen_in_reg_value_O;
wire [0:0] wen_in_sel_O;
coreir_not #(.width(1)) Invert1_inst0(.in(stall), .out(Invert1_inst0_out));
MuxWrapper_35_32 MuxWrapper_35_32_inst0(.I_0(ZextWrapper_4_32_inst0_O), .I_1(ZextWrapper_1_32_inst0_O), .I_10(ZextWrapper_1_32_inst6_O), .I_11(iter_cnt_O), .I_12(ZextWrapper_2_32_inst0_O), .I_13(range_0_O), .I_14(range_1_O), .I_15(range_2_O), .I_16(range_3_O), .I_17(range_4_O), .I_18(range_5_O), .I_19(ZextWrapper_1_32_inst7_O), .I_2(ZextWrapper_4_32_inst1_O), .I_20(ZextWrapper_1_32_inst8_O), .I_21(ZextWrapper_1_32_inst9_O), .I_22(ZextWrapper_16_32_inst1_O), .I_23(ZextWrapper_16_32_inst2_O), .I_24(ZextWrapper_16_32_inst3_O), .I_25(ZextWrapper_16_32_inst4_O), .I_26(ZextWrapper_16_32_inst5_O), .I_27(ZextWrapper_16_32_inst6_O), .I_28(ZextWrapper_16_32_inst7_O), .I_29(ZextWrapper_16_32_inst8_O), .I_3(ZextWrapper_1_32_inst1_O), .I_30(ZextWrapper_1_32_inst10_O), .I_31(ZextWrapper_1_32_inst11_O), .I_32(ZextWrapper_1_32_inst12_O), .I_33(ZextWrapper_1_32_inst13_O), .I_34(ZextWrapper_1_32_inst14_O), .I_4(ZextWrapper_1_32_inst2_O), .I_5(ZextWrapper_1_32_inst3_O), .I_6(ZextWrapper_16_32_inst0_O), .I_7(ZextWrapper_4_32_inst2_O), .I_8(ZextWrapper_1_32_inst4_O), .I_9(ZextWrapper_1_32_inst5_O), .O(MuxWrapper_35_32_inst0_O), .S({config_config_addr[5],config_config_addr[4],config_config_addr[3],config_config_addr[2],config_config_addr[1],config_config_addr[0]}));
coreir_or #(.width(1)) OR_CONFIG_EN_SRAM_0(.in0(config_1_write), .in1(config_1_read), .out(OR_CONFIG_EN_SRAM_0_out));
coreir_or #(.width(1)) OR_CONFIG_EN_SRAM_1(.in0(config_2_write), .in1(config_2_read), .out(OR_CONFIG_EN_SRAM_1_out));
coreir_or #(.width(1)) OR_CONFIG_EN_SRAM_2(.in0(config_3_write), .in1(config_3_read), .out(OR_CONFIG_EN_SRAM_2_out));
coreir_or #(.width(1)) OR_CONFIG_EN_SRAM_3(.in0(config_4_write), .in1(config_4_read), .out(OR_CONFIG_EN_SRAM_3_out));
Or4x1 OR_CONFIG_RD_SRAM(.I0(config_1_write), .I1(config_2_write), .I2(config_3_write), .I3(config_4_write), .O(OR_CONFIG_RD_SRAM_O));
Or4x1 OR_CONFIG_WR_SRAM(.I0(config_1_read), .I1(config_2_read), .I2(config_3_read), .I3(config_4_read), .O(OR_CONFIG_WR_SRAM_O));
Or5x8 OR_config_addr_FEATURE(.I0(config_config_addr), .I1(config_1_config_addr), .I2(config_2_config_addr), .I3(config_3_config_addr), .I4(config_4_config_addr), .O(OR_config_addr_FEATURE_O));
Or5x32 OR_config_data_FEATURE(.I0(config_config_data), .I1(config_1_config_data), .I2(config_2_config_data), .I3(config_3_config_data), .I4(config_4_config_data), .O(OR_config_data_FEATURE_O));
ZextWrapper_16_32 ZextWrapper_16_32_inst0(.I(depth_O), .O(ZextWrapper_16_32_inst0_O));
ZextWrapper_16_32 ZextWrapper_16_32_inst1(.I(starting_addr_O), .O(ZextWrapper_16_32_inst1_O));
ZextWrapper_16_32 ZextWrapper_16_32_inst2(.I(stencil_width_O), .O(ZextWrapper_16_32_inst2_O));
ZextWrapper_16_32 ZextWrapper_16_32_inst3(.I(stride_0_O), .O(ZextWrapper_16_32_inst3_O));
ZextWrapper_16_32 ZextWrapper_16_32_inst4(.I(stride_1_O), .O(ZextWrapper_16_32_inst4_O));
ZextWrapper_16_32 ZextWrapper_16_32_inst5(.I(stride_2_O), .O(ZextWrapper_16_32_inst5_O));
ZextWrapper_16_32 ZextWrapper_16_32_inst6(.I(stride_3_O), .O(ZextWrapper_16_32_inst6_O));
ZextWrapper_16_32 ZextWrapper_16_32_inst7(.I(stride_4_O), .O(ZextWrapper_16_32_inst7_O));
ZextWrapper_16_32 ZextWrapper_16_32_inst8(.I(stride_5_O), .O(ZextWrapper_16_32_inst8_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst0(.I(arbitrary_addr_O), .O(ZextWrapper_1_32_inst0_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst1(.I(chain_wen_in_reg_sel_O), .O(ZextWrapper_1_32_inst1_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst10(.I(switch_db_reg_sel_O), .O(ZextWrapper_1_32_inst10_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst11(.I(switch_db_reg_value_O), .O(ZextWrapper_1_32_inst11_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst12(.I(tile_en_O), .O(ZextWrapper_1_32_inst12_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst13(.I(wen_in_reg_sel_O), .O(ZextWrapper_1_32_inst13_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst14(.I(wen_in_reg_value_O), .O(ZextWrapper_1_32_inst14_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst2(.I(chain_wen_in_reg_value_O), .O(ZextWrapper_1_32_inst2_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst3(.I(circular_en_O), .O(ZextWrapper_1_32_inst3_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst4(.I(enable_chain_O), .O(ZextWrapper_1_32_inst4_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst5(.I(flush_reg_sel_O), .O(ZextWrapper_1_32_inst5_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst6(.I(flush_reg_value_O), .O(ZextWrapper_1_32_inst6_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst7(.I(rate_matched_O), .O(ZextWrapper_1_32_inst7_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst8(.I(ren_in_reg_sel_O), .O(ZextWrapper_1_32_inst8_O));
ZextWrapper_1_32 ZextWrapper_1_32_inst9(.I(ren_in_reg_value_O), .O(ZextWrapper_1_32_inst9_O));
ZextWrapper_2_32 ZextWrapper_2_32_inst0(.I(mode_O), .O(ZextWrapper_2_32_inst0_O));
ZextWrapper_4_32 ZextWrapper_4_32_inst0(.I(almost_count_O), .O(ZextWrapper_4_32_inst0_O));
ZextWrapper_4_32 ZextWrapper_4_32_inst1(.I(chain_idx_O), .O(ZextWrapper_4_32_inst1_O));
ZextWrapper_4_32 ZextWrapper_4_32_inst2(.I(dimensionality_O), .O(ZextWrapper_4_32_inst2_O));
ConfigRegister_4_8_32_0 almost_count(.O(almost_count_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_1_8_32_1 arbitrary_addr(.O(arbitrary_addr_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
corebit_const #(.value(1'b0)) bit_const_0_None(.out(bit_const_0_None_out));
ConfigRegister_4_8_32_2 chain_idx(.O(chain_idx_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_1_8_32_3 chain_wen_in_reg_sel(.O(chain_wen_in_reg_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_1_8_32_4 chain_wen_in_reg_value(.O(chain_wen_in_reg_value_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_1 chain_wen_in_sel(.I_0(chain_wen_in), .I_1(chain_wen_in_reg_value_O), .O(chain_wen_in_sel_O), .S(chain_wen_in_reg_sel_O));
ConfigRegister_1_8_32_5 circular_en(.O(circular_en_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_16_8_32_6 depth(.O(depth_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_4_8_32_7 dimensionality(.O(dimensionality_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_1_8_32_8 enable_chain(.O(enable_chain_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_1_8_32_9 flush_reg_sel(.O(flush_reg_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_1_8_32_10 flush_reg_value(.O(flush_reg_value_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_1 flush_sel(.I_0(flush), .I_1(flush_reg_value_O), .O(flush_sel_O), .S(flush_reg_sel_O));
ConfigRegister_32_8_32_11 iter_cnt(.O(iter_cnt_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
memory_core memory_core_inst0(.addr_in(addr_in), .almost_count(almost_count_O), .almost_empty(memory_core_inst0_almost_empty), .almost_full(memory_core_inst0_almost_full), .arbitrary_addr(arbitrary_addr_O[0]), .chain_idx(chain_idx_O), .chain_in(chain_in), .chain_out(memory_core_inst0_chain_out), .chain_valid_out(memory_core_inst0_chain_valid_out), .chain_wen_in(chain_wen_in_sel_O[0]), .circular_en(circular_en_O[0]), .clk(clk), .clk_en(Invert1_inst0_out[0]), .config_addr({OR_config_addr_FEATURE_O[7],OR_config_addr_FEATURE_O[6],OR_config_addr_FEATURE_O[5],OR_config_addr_FEATURE_O[4],OR_config_addr_FEATURE_O[3],OR_config_addr_FEATURE_O[2],OR_config_addr_FEATURE_O[1],OR_config_addr_FEATURE_O[0],bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out,bit_const_0_None_out}), .config_data(OR_config_data_FEATURE_O), .config_en_sram({config_en_3,config_en_2,config_en_1,config_en_0}), .config_read(OR_CONFIG_WR_SRAM_O[0]), .config_write(OR_CONFIG_RD_SRAM_O[0]), .data_in(data_in), .data_out(memory_core_inst0_data_out), .depth(depth_O), .dimensionality(dimensionality_O), .empty(memory_core_inst0_empty), .enable_chain(enable_chain_O[0]), .flush(flush_sel_O[0]), .full(memory_core_inst0_full), .iter_cnt(iter_cnt_O), .mode(mode_O), .range_0(range_0_O), .range_1(range_1_O), .range_2(range_2_O), .range_3(range_3_O), .range_4(range_4_O), .range_5(range_5_O), .rate_matched(rate_matched_O[0]), .read_config_data(memory_core_inst0_read_config_data), .read_data_sram_0(memory_core_inst0_read_data_sram_0), .read_data_sram_1(memory_core_inst0_read_data_sram_1), .read_data_sram_2(memory_core_inst0_read_data_sram_2), .read_data_sram_3(memory_core_inst0_read_data_sram_3), .ren_in(ren_in_sel_O[0]), .reset(reset), .starting_addr(starting_addr_O), .stencil_width(stencil_width_O), .stride_0(stride_0_O), .stride_1(stride_1_O), .stride_2(stride_2_O), .stride_3(stride_3_O), .stride_4(stride_4_O), .stride_5(stride_5_O), .switch_db(switch_db_sel_O[0]), .tile_en(tile_en_O[0]), .valid_out(memory_core_inst0_valid_out), .wen_in(wen_in_sel_O[0]));
ConfigRegister_2_8_32_12 mode(.O(mode_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_32_8_32_13 range_0(.O(range_0_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_32_8_32_14 range_1(.O(range_1_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_32_8_32_15 range_2(.O(range_2_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_32_8_32_16 range_3(.O(range_3_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_32_8_32_17 range_4(.O(range_4_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_32_8_32_18 range_5(.O(range_5_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_1_8_32_19 rate_matched(.O(rate_matched_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_1_8_32_20 ren_in_reg_sel(.O(ren_in_reg_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_1_8_32_21 ren_in_reg_value(.O(ren_in_reg_value_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_1 ren_in_sel(.I_0(ren_in), .I_1(ren_in_reg_value_O), .O(ren_in_sel_O), .S(ren_in_reg_sel_O));
ConfigRegister_16_8_32_22 starting_addr(.O(starting_addr_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_16_8_32_23 stencil_width(.O(stencil_width_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_16_8_32_24 stride_0(.O(stride_0_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_16_8_32_25 stride_1(.O(stride_1_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_16_8_32_26 stride_2(.O(stride_2_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_16_8_32_27 stride_3(.O(stride_3_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_16_8_32_28 stride_4(.O(stride_4_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_16_8_32_29 stride_5(.O(stride_5_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_1_8_32_30 switch_db_reg_sel(.O(switch_db_reg_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_1_8_32_31 switch_db_reg_value(.O(switch_db_reg_value_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_1 switch_db_sel(.I_0(switch_db), .I_1(switch_db_reg_value_O), .O(switch_db_sel_O), .S(switch_db_reg_sel_O));
ConfigRegister_1_8_32_32 tile_en(.O(tile_en_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_1_8_32_33 wen_in_reg_sel(.O(wen_in_reg_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
ConfigRegister_1_8_32_34 wen_in_reg_value(.O(wen_in_reg_value_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_2_1 wen_in_sel(.I_0(wen_in), .I_1(wen_in_reg_value_O), .O(wen_in_sel_O), .S(wen_in_reg_sel_O));
assign almost_empty = memory_core_inst0_almost_empty;
assign almost_full = memory_core_inst0_almost_full;
assign chain_out = memory_core_inst0_chain_out;
assign chain_valid_out = memory_core_inst0_chain_valid_out;
assign data_out = memory_core_inst0_data_out;
assign empty = memory_core_inst0_empty;
assign full = memory_core_inst0_full;
assign read_config_data = MuxWrapper_35_32_inst0_O;
assign read_config_data_1 = memory_core_inst0_read_data_sram_0;
assign read_config_data_2 = memory_core_inst0_read_data_sram_1;
assign read_config_data_3 = memory_core_inst0_read_data_sram_2;
assign read_config_data_4 = memory_core_inst0_read_data_sram_3;
assign valid_out = memory_core_inst0_valid_out;
endmodule

module CB_wen_in (input [0:0] I_0, input [0:0] I_1, input [0:0] I_10, input [0:0] I_11, input [0:0] I_12, input [0:0] I_13, input [0:0] I_14, input [0:0] I_15, input [0:0] I_16, input [0:0] I_17, input [0:0] I_18, input [0:0] I_19, input [0:0] I_2, input [0:0] I_3, input [0:0] I_4, input [0:0] I_5, input [0:0] I_6, input [0:0] I_7, input [0:0] I_8, input [0:0] I_9, output [0:0] O, input clk, input [7:0] config_config_addr, input [31:0] config_config_data, input [0:0] config_read, input [0:0] config_write, output [31:0] read_config_data, input reset);
wire [4:0] CB_wen_in_sel_O;
wire [0:0] MUX_CB_wen_in_O;
wire [31:0] ZextWrapper_5_32_inst0_O;
ConfigRegister_5_8_32_0 CB_wen_in_sel(.O(CB_wen_in_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_20_1 MUX_CB_wen_in(.I_0(I_0), .I_1(I_1), .I_10(I_10), .I_11(I_11), .I_12(I_12), .I_13(I_13), .I_14(I_14), .I_15(I_15), .I_16(I_16), .I_17(I_17), .I_18(I_18), .I_19(I_19), .I_2(I_2), .I_3(I_3), .I_4(I_4), .I_5(I_5), .I_6(I_6), .I_7(I_7), .I_8(I_8), .I_9(I_9), .O(MUX_CB_wen_in_O), .S(CB_wen_in_sel_O));
ZextWrapper_5_32 ZextWrapper_5_32_inst0(.I(CB_wen_in_sel_O), .O(ZextWrapper_5_32_inst0_O));
assign O = MUX_CB_wen_in_O;
assign read_config_data = ZextWrapper_5_32_inst0_O;
endmodule

module CB_switch_db (input [0:0] I_0, input [0:0] I_1, input [0:0] I_10, input [0:0] I_11, input [0:0] I_12, input [0:0] I_13, input [0:0] I_14, input [0:0] I_15, input [0:0] I_16, input [0:0] I_17, input [0:0] I_18, input [0:0] I_19, input [0:0] I_2, input [0:0] I_3, input [0:0] I_4, input [0:0] I_5, input [0:0] I_6, input [0:0] I_7, input [0:0] I_8, input [0:0] I_9, output [0:0] O, input clk, input [7:0] config_config_addr, input [31:0] config_config_data, input [0:0] config_read, input [0:0] config_write, output [31:0] read_config_data, input reset);
wire [4:0] CB_switch_db_sel_O;
wire [0:0] MUX_CB_switch_db_O;
wire [31:0] ZextWrapper_5_32_inst0_O;
ConfigRegister_5_8_32_0 CB_switch_db_sel(.O(CB_switch_db_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_20_1 MUX_CB_switch_db(.I_0(I_0), .I_1(I_1), .I_10(I_10), .I_11(I_11), .I_12(I_12), .I_13(I_13), .I_14(I_14), .I_15(I_15), .I_16(I_16), .I_17(I_17), .I_18(I_18), .I_19(I_19), .I_2(I_2), .I_3(I_3), .I_4(I_4), .I_5(I_5), .I_6(I_6), .I_7(I_7), .I_8(I_8), .I_9(I_9), .O(MUX_CB_switch_db_O), .S(CB_switch_db_sel_O));
ZextWrapper_5_32 ZextWrapper_5_32_inst0(.I(CB_switch_db_sel_O), .O(ZextWrapper_5_32_inst0_O));
assign O = MUX_CB_switch_db_O;
assign read_config_data = ZextWrapper_5_32_inst0_O;
endmodule

module CB_ren_in (input [0:0] I_0, input [0:0] I_1, input [0:0] I_10, input [0:0] I_11, input [0:0] I_12, input [0:0] I_13, input [0:0] I_14, input [0:0] I_15, input [0:0] I_16, input [0:0] I_17, input [0:0] I_18, input [0:0] I_19, input [0:0] I_2, input [0:0] I_3, input [0:0] I_4, input [0:0] I_5, input [0:0] I_6, input [0:0] I_7, input [0:0] I_8, input [0:0] I_9, output [0:0] O, input clk, input [7:0] config_config_addr, input [31:0] config_config_data, input [0:0] config_read, input [0:0] config_write, output [31:0] read_config_data, input reset);
wire [4:0] CB_ren_in_sel_O;
wire [0:0] MUX_CB_ren_in_O;
wire [31:0] ZextWrapper_5_32_inst0_O;
ConfigRegister_5_8_32_0 CB_ren_in_sel(.O(CB_ren_in_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_20_1 MUX_CB_ren_in(.I_0(I_0), .I_1(I_1), .I_10(I_10), .I_11(I_11), .I_12(I_12), .I_13(I_13), .I_14(I_14), .I_15(I_15), .I_16(I_16), .I_17(I_17), .I_18(I_18), .I_19(I_19), .I_2(I_2), .I_3(I_3), .I_4(I_4), .I_5(I_5), .I_6(I_6), .I_7(I_7), .I_8(I_8), .I_9(I_9), .O(MUX_CB_ren_in_O), .S(CB_ren_in_sel_O));
ZextWrapper_5_32 ZextWrapper_5_32_inst0(.I(CB_ren_in_sel_O), .O(ZextWrapper_5_32_inst0_O));
assign O = MUX_CB_ren_in_O;
assign read_config_data = ZextWrapper_5_32_inst0_O;
endmodule

module CB_flush (input [0:0] I_0, input [0:0] I_1, input [0:0] I_10, input [0:0] I_11, input [0:0] I_12, input [0:0] I_13, input [0:0] I_14, input [0:0] I_15, input [0:0] I_16, input [0:0] I_17, input [0:0] I_18, input [0:0] I_19, input [0:0] I_2, input [0:0] I_3, input [0:0] I_4, input [0:0] I_5, input [0:0] I_6, input [0:0] I_7, input [0:0] I_8, input [0:0] I_9, output [0:0] O, input clk, input [7:0] config_config_addr, input [31:0] config_config_data, input [0:0] config_read, input [0:0] config_write, output [31:0] read_config_data, input reset);
wire [4:0] CB_flush_sel_O;
wire [0:0] MUX_CB_flush_O;
wire [31:0] ZextWrapper_5_32_inst0_O;
ConfigRegister_5_8_32_0 CB_flush_sel(.O(CB_flush_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_20_1 MUX_CB_flush(.I_0(I_0), .I_1(I_1), .I_10(I_10), .I_11(I_11), .I_12(I_12), .I_13(I_13), .I_14(I_14), .I_15(I_15), .I_16(I_16), .I_17(I_17), .I_18(I_18), .I_19(I_19), .I_2(I_2), .I_3(I_3), .I_4(I_4), .I_5(I_5), .I_6(I_6), .I_7(I_7), .I_8(I_8), .I_9(I_9), .O(MUX_CB_flush_O), .S(CB_flush_sel_O));
ZextWrapper_5_32 ZextWrapper_5_32_inst0(.I(CB_flush_sel_O), .O(ZextWrapper_5_32_inst0_O));
assign O = MUX_CB_flush_O;
assign read_config_data = ZextWrapper_5_32_inst0_O;
endmodule

module CB_f2io_16 (input [15:0] I_0, output [15:0] O);
wire [15:0] WIRE_CB_f2io_16_O;
MuxWrapper_1_16 WIRE_CB_f2io_16(.I_0(I_0), .O(WIRE_CB_f2io_16_O));
assign O = WIRE_CB_f2io_16_O;
endmodule

module CB_f2io_1 (input [0:0] I_0, output [0:0] O);
wire [0:0] WIRE_CB_f2io_1_O;
MuxWrapper_1_1 WIRE_CB_f2io_1(.I_0(I_0), .O(WIRE_CB_f2io_1_O));
assign O = WIRE_CB_f2io_1_O;
endmodule

module Tile_io_core (input [15:0] f2io_16_0, input [0:0] f2io_1_0, input [0:0] glb2io_1, input [15:0] glb2io_16, output [0:0] io2f_1, output [15:0] io2f_16, output [0:0] io2glb_1, output [15:0] io2glb_16, input [15:0] tile_id);
wire [0:0] CB_f2io_1_O;
wire [15:0] CB_f2io_16_O;
wire [0:0] io_core_inst0_io2f_1;
wire [15:0] io_core_inst0_io2f_16;
wire [0:0] io_core_inst0_io2glb_1;
wire [15:0] io_core_inst0_io2glb_16;
CB_f2io_1 CB_f2io_1(.I_0(f2io_1_0), .O(CB_f2io_1_O));
CB_f2io_16 CB_f2io_16(.I_0(f2io_16_0), .O(CB_f2io_16_O));
io_core io_core_inst0(.f2io_1(CB_f2io_1_O), .f2io_16(CB_f2io_16_O), .glb2io_1(glb2io_1), .glb2io_16(glb2io_16), .io2f_1(io_core_inst0_io2f_1), .io2f_16(io_core_inst0_io2f_16), .io2glb_1(io_core_inst0_io2glb_1), .io2glb_16(io_core_inst0_io2glb_16));
assign io2f_1 = io_core_inst0_io2f_1;
assign io2f_16 = io_core_inst0_io2f_16;
assign io2glb_1 = io_core_inst0_io2glb_1;
assign io2glb_16 = io_core_inst0_io2glb_16;
endmodule

module CB_data_in (input [15:0] I_0, input [15:0] I_1, input [15:0] I_10, input [15:0] I_11, input [15:0] I_12, input [15:0] I_13, input [15:0] I_14, input [15:0] I_15, input [15:0] I_16, input [15:0] I_17, input [15:0] I_18, input [15:0] I_19, input [15:0] I_2, input [15:0] I_3, input [15:0] I_4, input [15:0] I_5, input [15:0] I_6, input [15:0] I_7, input [15:0] I_8, input [15:0] I_9, output [15:0] O, input clk, input [7:0] config_config_addr, input [31:0] config_config_data, input [0:0] config_read, input [0:0] config_write, output [31:0] read_config_data, input reset);
wire [4:0] CB_data_in_sel_O;
wire [15:0] MUX_CB_data_in_O;
wire [31:0] ZextWrapper_5_32_inst0_O;
ConfigRegister_5_8_32_0 CB_data_in_sel(.O(CB_data_in_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_20_16 MUX_CB_data_in(.I_0(I_0), .I_1(I_1), .I_10(I_10), .I_11(I_11), .I_12(I_12), .I_13(I_13), .I_14(I_14), .I_15(I_15), .I_16(I_16), .I_17(I_17), .I_18(I_18), .I_19(I_19), .I_2(I_2), .I_3(I_3), .I_4(I_4), .I_5(I_5), .I_6(I_6), .I_7(I_7), .I_8(I_8), .I_9(I_9), .O(MUX_CB_data_in_O), .S(CB_data_in_sel_O));
ZextWrapper_5_32 ZextWrapper_5_32_inst0(.I(CB_data_in_sel_O), .O(ZextWrapper_5_32_inst0_O));
assign O = MUX_CB_data_in_O;
assign read_config_data = ZextWrapper_5_32_inst0_O;
endmodule

module CB_data1 (input [15:0] I_0, input [15:0] I_1, input [15:0] I_10, input [15:0] I_11, input [15:0] I_12, input [15:0] I_13, input [15:0] I_14, input [15:0] I_15, input [15:0] I_16, input [15:0] I_17, input [15:0] I_18, input [15:0] I_19, input [15:0] I_2, input [15:0] I_3, input [15:0] I_4, input [15:0] I_5, input [15:0] I_6, input [15:0] I_7, input [15:0] I_8, input [15:0] I_9, output [15:0] O, input clk, input [7:0] config_config_addr, input [31:0] config_config_data, input [0:0] config_read, input [0:0] config_write, output [31:0] read_config_data, input reset);
wire [4:0] CB_data1_sel_O;
wire [15:0] MUX_CB_data1_O;
wire [31:0] ZextWrapper_5_32_inst0_O;
ConfigRegister_5_8_32_0 CB_data1_sel(.O(CB_data1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_20_16 MUX_CB_data1(.I_0(I_0), .I_1(I_1), .I_10(I_10), .I_11(I_11), .I_12(I_12), .I_13(I_13), .I_14(I_14), .I_15(I_15), .I_16(I_16), .I_17(I_17), .I_18(I_18), .I_19(I_19), .I_2(I_2), .I_3(I_3), .I_4(I_4), .I_5(I_5), .I_6(I_6), .I_7(I_7), .I_8(I_8), .I_9(I_9), .O(MUX_CB_data1_O), .S(CB_data1_sel_O));
ZextWrapper_5_32 ZextWrapper_5_32_inst0(.I(CB_data1_sel_O), .O(ZextWrapper_5_32_inst0_O));
assign O = MUX_CB_data1_O;
assign read_config_data = ZextWrapper_5_32_inst0_O;
endmodule

module CB_data0 (input [15:0] I_0, input [15:0] I_1, input [15:0] I_10, input [15:0] I_11, input [15:0] I_12, input [15:0] I_13, input [15:0] I_14, input [15:0] I_15, input [15:0] I_16, input [15:0] I_17, input [15:0] I_18, input [15:0] I_19, input [15:0] I_2, input [15:0] I_3, input [15:0] I_4, input [15:0] I_5, input [15:0] I_6, input [15:0] I_7, input [15:0] I_8, input [15:0] I_9, output [15:0] O, input clk, input [7:0] config_config_addr, input [31:0] config_config_data, input [0:0] config_read, input [0:0] config_write, output [31:0] read_config_data, input reset);
wire [4:0] CB_data0_sel_O;
wire [15:0] MUX_CB_data0_O;
wire [31:0] ZextWrapper_5_32_inst0_O;
ConfigRegister_5_8_32_0 CB_data0_sel(.O(CB_data0_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_20_16 MUX_CB_data0(.I_0(I_0), .I_1(I_1), .I_10(I_10), .I_11(I_11), .I_12(I_12), .I_13(I_13), .I_14(I_14), .I_15(I_15), .I_16(I_16), .I_17(I_17), .I_18(I_18), .I_19(I_19), .I_2(I_2), .I_3(I_3), .I_4(I_4), .I_5(I_5), .I_6(I_6), .I_7(I_7), .I_8(I_8), .I_9(I_9), .O(MUX_CB_data0_O), .S(CB_data0_sel_O));
ZextWrapper_5_32 ZextWrapper_5_32_inst0(.I(CB_data0_sel_O), .O(ZextWrapper_5_32_inst0_O));
assign O = MUX_CB_data0_O;
assign read_config_data = ZextWrapper_5_32_inst0_O;
endmodule

module CB_chain_wen_in (input [0:0] I_0, input [0:0] I_1, input [0:0] I_10, input [0:0] I_11, input [0:0] I_12, input [0:0] I_13, input [0:0] I_14, input [0:0] I_15, input [0:0] I_16, input [0:0] I_17, input [0:0] I_18, input [0:0] I_19, input [0:0] I_2, input [0:0] I_3, input [0:0] I_4, input [0:0] I_5, input [0:0] I_6, input [0:0] I_7, input [0:0] I_8, input [0:0] I_9, output [0:0] O, input clk, input [7:0] config_config_addr, input [31:0] config_config_data, input [0:0] config_read, input [0:0] config_write, output [31:0] read_config_data, input reset);
wire [4:0] CB_chain_wen_in_sel_O;
wire [0:0] MUX_CB_chain_wen_in_O;
wire [31:0] ZextWrapper_5_32_inst0_O;
ConfigRegister_5_8_32_0 CB_chain_wen_in_sel(.O(CB_chain_wen_in_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_20_1 MUX_CB_chain_wen_in(.I_0(I_0), .I_1(I_1), .I_10(I_10), .I_11(I_11), .I_12(I_12), .I_13(I_13), .I_14(I_14), .I_15(I_15), .I_16(I_16), .I_17(I_17), .I_18(I_18), .I_19(I_19), .I_2(I_2), .I_3(I_3), .I_4(I_4), .I_5(I_5), .I_6(I_6), .I_7(I_7), .I_8(I_8), .I_9(I_9), .O(MUX_CB_chain_wen_in_O), .S(CB_chain_wen_in_sel_O));
ZextWrapper_5_32 ZextWrapper_5_32_inst0(.I(CB_chain_wen_in_sel_O), .O(ZextWrapper_5_32_inst0_O));
assign O = MUX_CB_chain_wen_in_O;
assign read_config_data = ZextWrapper_5_32_inst0_O;
endmodule

module CB_chain_in (input [15:0] I_0, input [15:0] I_1, input [15:0] I_10, input [15:0] I_11, input [15:0] I_12, input [15:0] I_13, input [15:0] I_14, input [15:0] I_15, input [15:0] I_16, input [15:0] I_17, input [15:0] I_18, input [15:0] I_19, input [15:0] I_2, input [15:0] I_3, input [15:0] I_4, input [15:0] I_5, input [15:0] I_6, input [15:0] I_7, input [15:0] I_8, input [15:0] I_9, output [15:0] O, input clk, input [7:0] config_config_addr, input [31:0] config_config_data, input [0:0] config_read, input [0:0] config_write, output [31:0] read_config_data, input reset);
wire [4:0] CB_chain_in_sel_O;
wire [15:0] MUX_CB_chain_in_O;
wire [31:0] ZextWrapper_5_32_inst0_O;
ConfigRegister_5_8_32_0 CB_chain_in_sel(.O(CB_chain_in_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_20_16 MUX_CB_chain_in(.I_0(I_0), .I_1(I_1), .I_10(I_10), .I_11(I_11), .I_12(I_12), .I_13(I_13), .I_14(I_14), .I_15(I_15), .I_16(I_16), .I_17(I_17), .I_18(I_18), .I_19(I_19), .I_2(I_2), .I_3(I_3), .I_4(I_4), .I_5(I_5), .I_6(I_6), .I_7(I_7), .I_8(I_8), .I_9(I_9), .O(MUX_CB_chain_in_O), .S(CB_chain_in_sel_O));
ZextWrapper_5_32 ZextWrapper_5_32_inst0(.I(CB_chain_in_sel_O), .O(ZextWrapper_5_32_inst0_O));
assign O = MUX_CB_chain_in_O;
assign read_config_data = ZextWrapper_5_32_inst0_O;
endmodule

module CB_bit2 (input [0:0] I_0, input [0:0] I_1, input [0:0] I_10, input [0:0] I_11, input [0:0] I_12, input [0:0] I_13, input [0:0] I_14, input [0:0] I_15, input [0:0] I_16, input [0:0] I_17, input [0:0] I_18, input [0:0] I_19, input [0:0] I_2, input [0:0] I_3, input [0:0] I_4, input [0:0] I_5, input [0:0] I_6, input [0:0] I_7, input [0:0] I_8, input [0:0] I_9, output [0:0] O, input clk, input [7:0] config_config_addr, input [31:0] config_config_data, input [0:0] config_read, input [0:0] config_write, output [31:0] read_config_data, input reset);
wire [4:0] CB_bit2_sel_O;
wire [0:0] MUX_CB_bit2_O;
wire [31:0] ZextWrapper_5_32_inst0_O;
ConfigRegister_5_8_32_0 CB_bit2_sel(.O(CB_bit2_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_20_1 MUX_CB_bit2(.I_0(I_0), .I_1(I_1), .I_10(I_10), .I_11(I_11), .I_12(I_12), .I_13(I_13), .I_14(I_14), .I_15(I_15), .I_16(I_16), .I_17(I_17), .I_18(I_18), .I_19(I_19), .I_2(I_2), .I_3(I_3), .I_4(I_4), .I_5(I_5), .I_6(I_6), .I_7(I_7), .I_8(I_8), .I_9(I_9), .O(MUX_CB_bit2_O), .S(CB_bit2_sel_O));
ZextWrapper_5_32 ZextWrapper_5_32_inst0(.I(CB_bit2_sel_O), .O(ZextWrapper_5_32_inst0_O));
assign O = MUX_CB_bit2_O;
assign read_config_data = ZextWrapper_5_32_inst0_O;
endmodule

module CB_bit1 (input [0:0] I_0, input [0:0] I_1, input [0:0] I_10, input [0:0] I_11, input [0:0] I_12, input [0:0] I_13, input [0:0] I_14, input [0:0] I_15, input [0:0] I_16, input [0:0] I_17, input [0:0] I_18, input [0:0] I_19, input [0:0] I_2, input [0:0] I_3, input [0:0] I_4, input [0:0] I_5, input [0:0] I_6, input [0:0] I_7, input [0:0] I_8, input [0:0] I_9, output [0:0] O, input clk, input [7:0] config_config_addr, input [31:0] config_config_data, input [0:0] config_read, input [0:0] config_write, output [31:0] read_config_data, input reset);
wire [4:0] CB_bit1_sel_O;
wire [0:0] MUX_CB_bit1_O;
wire [31:0] ZextWrapper_5_32_inst0_O;
ConfigRegister_5_8_32_0 CB_bit1_sel(.O(CB_bit1_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_20_1 MUX_CB_bit1(.I_0(I_0), .I_1(I_1), .I_10(I_10), .I_11(I_11), .I_12(I_12), .I_13(I_13), .I_14(I_14), .I_15(I_15), .I_16(I_16), .I_17(I_17), .I_18(I_18), .I_19(I_19), .I_2(I_2), .I_3(I_3), .I_4(I_4), .I_5(I_5), .I_6(I_6), .I_7(I_7), .I_8(I_8), .I_9(I_9), .O(MUX_CB_bit1_O), .S(CB_bit1_sel_O));
ZextWrapper_5_32 ZextWrapper_5_32_inst0(.I(CB_bit1_sel_O), .O(ZextWrapper_5_32_inst0_O));
assign O = MUX_CB_bit1_O;
assign read_config_data = ZextWrapper_5_32_inst0_O;
endmodule

module CB_bit0 (input [0:0] I_0, input [0:0] I_1, input [0:0] I_10, input [0:0] I_11, input [0:0] I_12, input [0:0] I_13, input [0:0] I_14, input [0:0] I_15, input [0:0] I_16, input [0:0] I_17, input [0:0] I_18, input [0:0] I_19, input [0:0] I_2, input [0:0] I_3, input [0:0] I_4, input [0:0] I_5, input [0:0] I_6, input [0:0] I_7, input [0:0] I_8, input [0:0] I_9, output [0:0] O, input clk, input [7:0] config_config_addr, input [31:0] config_config_data, input [0:0] config_read, input [0:0] config_write, output [31:0] read_config_data, input reset);
wire [4:0] CB_bit0_sel_O;
wire [0:0] MUX_CB_bit0_O;
wire [31:0] ZextWrapper_5_32_inst0_O;
ConfigRegister_5_8_32_0 CB_bit0_sel(.O(CB_bit0_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_20_1 MUX_CB_bit0(.I_0(I_0), .I_1(I_1), .I_10(I_10), .I_11(I_11), .I_12(I_12), .I_13(I_13), .I_14(I_14), .I_15(I_15), .I_16(I_16), .I_17(I_17), .I_18(I_18), .I_19(I_19), .I_2(I_2), .I_3(I_3), .I_4(I_4), .I_5(I_5), .I_6(I_6), .I_7(I_7), .I_8(I_8), .I_9(I_9), .O(MUX_CB_bit0_O), .S(CB_bit0_sel_O));
ZextWrapper_5_32 ZextWrapper_5_32_inst0(.I(CB_bit0_sel_O), .O(ZextWrapper_5_32_inst0_O));
assign O = MUX_CB_bit0_O;
assign read_config_data = ZextWrapper_5_32_inst0_O;
endmodule

module Tile_PE (input [15:0] SB_T0_EAST_SB_IN_B16_0, input [0:0] SB_T0_EAST_SB_IN_B1_0, output [0:0] SB_T0_EAST_SB_OUT_B1, output [15:0] SB_T0_EAST_SB_OUT_B16, input [15:0] SB_T0_NORTH_SB_IN_B16_0, input [0:0] SB_T0_NORTH_SB_IN_B1_0, output [0:0] SB_T0_NORTH_SB_OUT_B1, output [15:0] SB_T0_NORTH_SB_OUT_B16, input [15:0] SB_T0_SOUTH_SB_IN_B16_0, input [0:0] SB_T0_SOUTH_SB_IN_B1_0, output [0:0] SB_T0_SOUTH_SB_OUT_B1, output [15:0] SB_T0_SOUTH_SB_OUT_B16, input [15:0] SB_T0_WEST_SB_IN_B16_0, input [0:0] SB_T0_WEST_SB_IN_B1_0, output [0:0] SB_T0_WEST_SB_OUT_B1, output [15:0] SB_T0_WEST_SB_OUT_B16, input [15:0] SB_T1_EAST_SB_IN_B16_0, input [0:0] SB_T1_EAST_SB_IN_B1_0, output [0:0] SB_T1_EAST_SB_OUT_B1, output [15:0] SB_T1_EAST_SB_OUT_B16, input [15:0] SB_T1_NORTH_SB_IN_B16_0, input [0:0] SB_T1_NORTH_SB_IN_B1_0, output [0:0] SB_T1_NORTH_SB_OUT_B1, output [15:0] SB_T1_NORTH_SB_OUT_B16, input [15:0] SB_T1_SOUTH_SB_IN_B16_0, input [0:0] SB_T1_SOUTH_SB_IN_B1_0, output [0:0] SB_T1_SOUTH_SB_OUT_B1, output [15:0] SB_T1_SOUTH_SB_OUT_B16, input [15:0] SB_T1_WEST_SB_IN_B16_0, input [0:0] SB_T1_WEST_SB_IN_B1_0, output [0:0] SB_T1_WEST_SB_OUT_B1, output [15:0] SB_T1_WEST_SB_OUT_B16, input [15:0] SB_T2_EAST_SB_IN_B16_0, input [0:0] SB_T2_EAST_SB_IN_B1_0, output [0:0] SB_T2_EAST_SB_OUT_B1, output [15:0] SB_T2_EAST_SB_OUT_B16, input [15:0] SB_T2_NORTH_SB_IN_B16_0, input [0:0] SB_T2_NORTH_SB_IN_B1_0, output [0:0] SB_T2_NORTH_SB_OUT_B1, output [15:0] SB_T2_NORTH_SB_OUT_B16, input [15:0] SB_T2_SOUTH_SB_IN_B16_0, input [0:0] SB_T2_SOUTH_SB_IN_B1_0, output [0:0] SB_T2_SOUTH_SB_OUT_B1, output [15:0] SB_T2_SOUTH_SB_OUT_B16, input [15:0] SB_T2_WEST_SB_IN_B16_0, input [0:0] SB_T2_WEST_SB_IN_B1_0, output [0:0] SB_T2_WEST_SB_OUT_B1, output [15:0] SB_T2_WEST_SB_OUT_B16, input [15:0] SB_T3_EAST_SB_IN_B16_0, input [0:0] SB_T3_EAST_SB_IN_B1_0, output [0:0] SB_T3_EAST_SB_OUT_B1, output [15:0] SB_T3_EAST_SB_OUT_B16, input [15:0] SB_T3_NORTH_SB_IN_B16_0, input [0:0] SB_T3_NORTH_SB_IN_B1_0, output [0:0] SB_T3_NORTH_SB_OUT_B1, output [15:0] SB_T3_NORTH_SB_OUT_B16, input [15:0] SB_T3_SOUTH_SB_IN_B16_0, input [0:0] SB_T3_SOUTH_SB_IN_B1_0, output [0:0] SB_T3_SOUTH_SB_OUT_B1, output [15:0] SB_T3_SOUTH_SB_OUT_B16, input [15:0] SB_T3_WEST_SB_IN_B16_0, input [0:0] SB_T3_WEST_SB_IN_B1_0, output [0:0] SB_T3_WEST_SB_OUT_B1, output [15:0] SB_T3_WEST_SB_OUT_B16, input [15:0] SB_T4_EAST_SB_IN_B16_0, input [0:0] SB_T4_EAST_SB_IN_B1_0, output [0:0] SB_T4_EAST_SB_OUT_B1, output [15:0] SB_T4_EAST_SB_OUT_B16, input [15:0] SB_T4_NORTH_SB_IN_B16_0, input [0:0] SB_T4_NORTH_SB_IN_B1_0, output [0:0] SB_T4_NORTH_SB_OUT_B1, output [15:0] SB_T4_NORTH_SB_OUT_B16, input [15:0] SB_T4_SOUTH_SB_IN_B16_0, input [0:0] SB_T4_SOUTH_SB_IN_B1_0, output [0:0] SB_T4_SOUTH_SB_OUT_B1, output [15:0] SB_T4_SOUTH_SB_OUT_B16, input [15:0] SB_T4_WEST_SB_IN_B16_0, input [0:0] SB_T4_WEST_SB_IN_B1_0, output [0:0] SB_T4_WEST_SB_OUT_B1, output [15:0] SB_T4_WEST_SB_OUT_B16, input clk, output clk_out, input clk_pass_through, output clk_pass_through_out, input [31:0] config_config_addr, input [31:0] config_config_data, output [31:0] config_out_config_addr, output [31:0] config_out_config_data, output [0:0] config_out_read, output [0:0] config_out_write, input [0:0] config_read, input [0:0] config_write, output [8:0] hi, output [7:0] lo, output [31:0] read_config_data, input [31:0] read_config_data_in, input reset, output reset_out, input [0:0] stall, output [0:0] stall_out, input [15:0] tile_id);
wire [0:0] CB_bit0_O;
wire [31:0] CB_bit0_read_config_data;
wire [0:0] CB_bit1_O;
wire [31:0] CB_bit1_read_config_data;
wire [0:0] CB_bit2_O;
wire [31:0] CB_bit2_read_config_data;
wire [15:0] CB_data0_O;
wire [31:0] CB_data0_read_config_data;
wire [15:0] CB_data1_O;
wire [31:0] CB_data1_read_config_data;
wire DECODE_FEATURE_0_O;
wire DECODE_FEATURE_1_O;
wire DECODE_FEATURE_2_O;
wire DECODE_FEATURE_3_O;
wire DECODE_FEATURE_4_O;
wire DECODE_FEATURE_5_O;
wire DECODE_FEATURE_6_O;
wire DECODE_FEATURE_7_O;
wire FEATURE_AND_0_out;
wire FEATURE_AND_1_out;
wire FEATURE_AND_2_out;
wire FEATURE_AND_3_out;
wire FEATURE_AND_4_out;
wire FEATURE_AND_5_out;
wire FEATURE_AND_6_out;
wire FEATURE_AND_7_out;
wire [15:0] PE_inst0_alu_res;
wire [31:0] PE_inst0_read_config_data;
wire [0:0] PE_inst0_res_p;
wire [15:0] SB_ID0_5TRACKS_B16_PE_SB_T0_EAST_SB_OUT_B16;
wire [15:0] SB_ID0_5TRACKS_B16_PE_SB_T0_NORTH_SB_OUT_B16;
wire [15:0] SB_ID0_5TRACKS_B16_PE_SB_T0_SOUTH_SB_OUT_B16;
wire [15:0] SB_ID0_5TRACKS_B16_PE_SB_T0_WEST_SB_OUT_B16;
wire [15:0] SB_ID0_5TRACKS_B16_PE_SB_T1_EAST_SB_OUT_B16;
wire [15:0] SB_ID0_5TRACKS_B16_PE_SB_T1_NORTH_SB_OUT_B16;
wire [15:0] SB_ID0_5TRACKS_B16_PE_SB_T1_SOUTH_SB_OUT_B16;
wire [15:0] SB_ID0_5TRACKS_B16_PE_SB_T1_WEST_SB_OUT_B16;
wire [15:0] SB_ID0_5TRACKS_B16_PE_SB_T2_EAST_SB_OUT_B16;
wire [15:0] SB_ID0_5TRACKS_B16_PE_SB_T2_NORTH_SB_OUT_B16;
wire [15:0] SB_ID0_5TRACKS_B16_PE_SB_T2_SOUTH_SB_OUT_B16;
wire [15:0] SB_ID0_5TRACKS_B16_PE_SB_T2_WEST_SB_OUT_B16;
wire [15:0] SB_ID0_5TRACKS_B16_PE_SB_T3_EAST_SB_OUT_B16;
wire [15:0] SB_ID0_5TRACKS_B16_PE_SB_T3_NORTH_SB_OUT_B16;
wire [15:0] SB_ID0_5TRACKS_B16_PE_SB_T3_SOUTH_SB_OUT_B16;
wire [15:0] SB_ID0_5TRACKS_B16_PE_SB_T3_WEST_SB_OUT_B16;
wire [15:0] SB_ID0_5TRACKS_B16_PE_SB_T4_EAST_SB_OUT_B16;
wire [15:0] SB_ID0_5TRACKS_B16_PE_SB_T4_NORTH_SB_OUT_B16;
wire [15:0] SB_ID0_5TRACKS_B16_PE_SB_T4_SOUTH_SB_OUT_B16;
wire [15:0] SB_ID0_5TRACKS_B16_PE_SB_T4_WEST_SB_OUT_B16;
wire [31:0] SB_ID0_5TRACKS_B16_PE_read_config_data;
wire [0:0] SB_ID0_5TRACKS_B1_PE_SB_T0_EAST_SB_OUT_B1;
wire [0:0] SB_ID0_5TRACKS_B1_PE_SB_T0_NORTH_SB_OUT_B1;
wire [0:0] SB_ID0_5TRACKS_B1_PE_SB_T0_SOUTH_SB_OUT_B1;
wire [0:0] SB_ID0_5TRACKS_B1_PE_SB_T0_WEST_SB_OUT_B1;
wire [0:0] SB_ID0_5TRACKS_B1_PE_SB_T1_EAST_SB_OUT_B1;
wire [0:0] SB_ID0_5TRACKS_B1_PE_SB_T1_NORTH_SB_OUT_B1;
wire [0:0] SB_ID0_5TRACKS_B1_PE_SB_T1_SOUTH_SB_OUT_B1;
wire [0:0] SB_ID0_5TRACKS_B1_PE_SB_T1_WEST_SB_OUT_B1;
wire [0:0] SB_ID0_5TRACKS_B1_PE_SB_T2_EAST_SB_OUT_B1;
wire [0:0] SB_ID0_5TRACKS_B1_PE_SB_T2_NORTH_SB_OUT_B1;
wire [0:0] SB_ID0_5TRACKS_B1_PE_SB_T2_SOUTH_SB_OUT_B1;
wire [0:0] SB_ID0_5TRACKS_B1_PE_SB_T2_WEST_SB_OUT_B1;
wire [0:0] SB_ID0_5TRACKS_B1_PE_SB_T3_EAST_SB_OUT_B1;
wire [0:0] SB_ID0_5TRACKS_B1_PE_SB_T3_NORTH_SB_OUT_B1;
wire [0:0] SB_ID0_5TRACKS_B1_PE_SB_T3_SOUTH_SB_OUT_B1;
wire [0:0] SB_ID0_5TRACKS_B1_PE_SB_T3_WEST_SB_OUT_B1;
wire [0:0] SB_ID0_5TRACKS_B1_PE_SB_T4_EAST_SB_OUT_B1;
wire [0:0] SB_ID0_5TRACKS_B1_PE_SB_T4_NORTH_SB_OUT_B1;
wire [0:0] SB_ID0_5TRACKS_B1_PE_SB_T4_SOUTH_SB_OUT_B1;
wire [0:0] SB_ID0_5TRACKS_B1_PE_SB_T4_WEST_SB_OUT_B1;
wire [31:0] SB_ID0_5TRACKS_B1_PE_read_config_data;
wire [0:0] WIRE_SB_T0_EAST_SB_IN_B1_O;
wire [15:0] WIRE_SB_T0_EAST_SB_IN_B16_O;
wire [0:0] WIRE_SB_T0_NORTH_SB_IN_B1_O;
wire [15:0] WIRE_SB_T0_NORTH_SB_IN_B16_O;
wire [0:0] WIRE_SB_T0_SOUTH_SB_IN_B1_O;
wire [15:0] WIRE_SB_T0_SOUTH_SB_IN_B16_O;
wire [0:0] WIRE_SB_T0_WEST_SB_IN_B1_O;
wire [15:0] WIRE_SB_T0_WEST_SB_IN_B16_O;
wire [0:0] WIRE_SB_T1_EAST_SB_IN_B1_O;
wire [15:0] WIRE_SB_T1_EAST_SB_IN_B16_O;
wire [0:0] WIRE_SB_T1_NORTH_SB_IN_B1_O;
wire [15:0] WIRE_SB_T1_NORTH_SB_IN_B16_O;
wire [0:0] WIRE_SB_T1_SOUTH_SB_IN_B1_O;
wire [15:0] WIRE_SB_T1_SOUTH_SB_IN_B16_O;
wire [0:0] WIRE_SB_T1_WEST_SB_IN_B1_O;
wire [15:0] WIRE_SB_T1_WEST_SB_IN_B16_O;
wire [0:0] WIRE_SB_T2_EAST_SB_IN_B1_O;
wire [15:0] WIRE_SB_T2_EAST_SB_IN_B16_O;
wire [0:0] WIRE_SB_T2_NORTH_SB_IN_B1_O;
wire [15:0] WIRE_SB_T2_NORTH_SB_IN_B16_O;
wire [0:0] WIRE_SB_T2_SOUTH_SB_IN_B1_O;
wire [15:0] WIRE_SB_T2_SOUTH_SB_IN_B16_O;
wire [0:0] WIRE_SB_T2_WEST_SB_IN_B1_O;
wire [15:0] WIRE_SB_T2_WEST_SB_IN_B16_O;
wire [0:0] WIRE_SB_T3_EAST_SB_IN_B1_O;
wire [15:0] WIRE_SB_T3_EAST_SB_IN_B16_O;
wire [0:0] WIRE_SB_T3_NORTH_SB_IN_B1_O;
wire [15:0] WIRE_SB_T3_NORTH_SB_IN_B16_O;
wire [0:0] WIRE_SB_T3_SOUTH_SB_IN_B1_O;
wire [15:0] WIRE_SB_T3_SOUTH_SB_IN_B16_O;
wire [0:0] WIRE_SB_T3_WEST_SB_IN_B1_O;
wire [15:0] WIRE_SB_T3_WEST_SB_IN_B16_O;
wire [0:0] WIRE_SB_T4_EAST_SB_IN_B1_O;
wire [15:0] WIRE_SB_T4_EAST_SB_IN_B16_O;
wire [0:0] WIRE_SB_T4_NORTH_SB_IN_B1_O;
wire [15:0] WIRE_SB_T4_NORTH_SB_IN_B16_O;
wire [0:0] WIRE_SB_T4_SOUTH_SB_IN_B1_O;
wire [15:0] WIRE_SB_T4_SOUTH_SB_IN_B16_O;
wire [0:0] WIRE_SB_T4_WEST_SB_IN_B1_O;
wire [15:0] WIRE_SB_T4_WEST_SB_IN_B16_O;
wire and_inst0_out;
wire and_inst1_out;
wire [7:0] const_0_8_out;
wire [8:0] const_511_9_out;
wire coreir_eq_16_inst0_out;
wire [31:0] read_config_data_or_inst0_out;
wire [31:0] read_data_mux_O;
CB_bit0 CB_bit0(.I_0(WIRE_SB_T0_NORTH_SB_IN_B1_O), .I_1(WIRE_SB_T0_SOUTH_SB_IN_B1_O), .I_10(WIRE_SB_T2_EAST_SB_IN_B1_O), .I_11(WIRE_SB_T2_WEST_SB_IN_B1_O), .I_12(WIRE_SB_T3_NORTH_SB_IN_B1_O), .I_13(WIRE_SB_T3_SOUTH_SB_IN_B1_O), .I_14(WIRE_SB_T3_EAST_SB_IN_B1_O), .I_15(WIRE_SB_T3_WEST_SB_IN_B1_O), .I_16(WIRE_SB_T4_NORTH_SB_IN_B1_O), .I_17(WIRE_SB_T4_SOUTH_SB_IN_B1_O), .I_18(WIRE_SB_T4_EAST_SB_IN_B1_O), .I_19(WIRE_SB_T4_WEST_SB_IN_B1_O), .I_2(WIRE_SB_T0_EAST_SB_IN_B1_O), .I_3(WIRE_SB_T0_WEST_SB_IN_B1_O), .I_4(WIRE_SB_T1_NORTH_SB_IN_B1_O), .I_5(WIRE_SB_T1_SOUTH_SB_IN_B1_O), .I_6(WIRE_SB_T1_EAST_SB_IN_B1_O), .I_7(WIRE_SB_T1_WEST_SB_IN_B1_O), .I_8(WIRE_SB_T2_NORTH_SB_IN_B1_O), .I_9(WIRE_SB_T2_SOUTH_SB_IN_B1_O), .O(CB_bit0_O), .clk(clk), .config_config_addr({config_config_addr[31],config_config_addr[30],config_config_addr[29],config_config_addr[28],config_config_addr[27],config_config_addr[26],config_config_addr[25],config_config_addr[24]}), .config_config_data(config_config_data), .config_read(config_read), .config_write(FEATURE_AND_1_out), .read_config_data(CB_bit0_read_config_data), .reset(reset));
CB_bit1 CB_bit1(.I_0(WIRE_SB_T0_NORTH_SB_IN_B1_O), .I_1(WIRE_SB_T0_SOUTH_SB_IN_B1_O), .I_10(WIRE_SB_T2_EAST_SB_IN_B1_O), .I_11(WIRE_SB_T2_WEST_SB_IN_B1_O), .I_12(WIRE_SB_T3_NORTH_SB_IN_B1_O), .I_13(WIRE_SB_T3_SOUTH_SB_IN_B1_O), .I_14(WIRE_SB_T3_EAST_SB_IN_B1_O), .I_15(WIRE_SB_T3_WEST_SB_IN_B1_O), .I_16(WIRE_SB_T4_NORTH_SB_IN_B1_O), .I_17(WIRE_SB_T4_SOUTH_SB_IN_B1_O), .I_18(WIRE_SB_T4_EAST_SB_IN_B1_O), .I_19(WIRE_SB_T4_WEST_SB_IN_B1_O), .I_2(WIRE_SB_T0_EAST_SB_IN_B1_O), .I_3(WIRE_SB_T0_WEST_SB_IN_B1_O), .I_4(WIRE_SB_T1_NORTH_SB_IN_B1_O), .I_5(WIRE_SB_T1_SOUTH_SB_IN_B1_O), .I_6(WIRE_SB_T1_EAST_SB_IN_B1_O), .I_7(WIRE_SB_T1_WEST_SB_IN_B1_O), .I_8(WIRE_SB_T2_NORTH_SB_IN_B1_O), .I_9(WIRE_SB_T2_SOUTH_SB_IN_B1_O), .O(CB_bit1_O), .clk(clk), .config_config_addr({config_config_addr[31],config_config_addr[30],config_config_addr[29],config_config_addr[28],config_config_addr[27],config_config_addr[26],config_config_addr[25],config_config_addr[24]}), .config_config_data(config_config_data), .config_read(config_read), .config_write(FEATURE_AND_2_out), .read_config_data(CB_bit1_read_config_data), .reset(reset));
CB_bit2 CB_bit2(.I_0(WIRE_SB_T0_NORTH_SB_IN_B1_O), .I_1(WIRE_SB_T0_SOUTH_SB_IN_B1_O), .I_10(WIRE_SB_T2_EAST_SB_IN_B1_O), .I_11(WIRE_SB_T2_WEST_SB_IN_B1_O), .I_12(WIRE_SB_T3_NORTH_SB_IN_B1_O), .I_13(WIRE_SB_T3_SOUTH_SB_IN_B1_O), .I_14(WIRE_SB_T3_EAST_SB_IN_B1_O), .I_15(WIRE_SB_T3_WEST_SB_IN_B1_O), .I_16(WIRE_SB_T4_NORTH_SB_IN_B1_O), .I_17(WIRE_SB_T4_SOUTH_SB_IN_B1_O), .I_18(WIRE_SB_T4_EAST_SB_IN_B1_O), .I_19(WIRE_SB_T4_WEST_SB_IN_B1_O), .I_2(WIRE_SB_T0_EAST_SB_IN_B1_O), .I_3(WIRE_SB_T0_WEST_SB_IN_B1_O), .I_4(WIRE_SB_T1_NORTH_SB_IN_B1_O), .I_5(WIRE_SB_T1_SOUTH_SB_IN_B1_O), .I_6(WIRE_SB_T1_EAST_SB_IN_B1_O), .I_7(WIRE_SB_T1_WEST_SB_IN_B1_O), .I_8(WIRE_SB_T2_NORTH_SB_IN_B1_O), .I_9(WIRE_SB_T2_SOUTH_SB_IN_B1_O), .O(CB_bit2_O), .clk(clk), .config_config_addr({config_config_addr[31],config_config_addr[30],config_config_addr[29],config_config_addr[28],config_config_addr[27],config_config_addr[26],config_config_addr[25],config_config_addr[24]}), .config_config_data(config_config_data), .config_read(config_read), .config_write(FEATURE_AND_3_out), .read_config_data(CB_bit2_read_config_data), .reset(reset));
CB_data0 CB_data0(.I_0(WIRE_SB_T0_NORTH_SB_IN_B16_O), .I_1(WIRE_SB_T0_SOUTH_SB_IN_B16_O), .I_10(WIRE_SB_T2_EAST_SB_IN_B16_O), .I_11(WIRE_SB_T2_WEST_SB_IN_B16_O), .I_12(WIRE_SB_T3_NORTH_SB_IN_B16_O), .I_13(WIRE_SB_T3_SOUTH_SB_IN_B16_O), .I_14(WIRE_SB_T3_EAST_SB_IN_B16_O), .I_15(WIRE_SB_T3_WEST_SB_IN_B16_O), .I_16(WIRE_SB_T4_NORTH_SB_IN_B16_O), .I_17(WIRE_SB_T4_SOUTH_SB_IN_B16_O), .I_18(WIRE_SB_T4_EAST_SB_IN_B16_O), .I_19(WIRE_SB_T4_WEST_SB_IN_B16_O), .I_2(WIRE_SB_T0_EAST_SB_IN_B16_O), .I_3(WIRE_SB_T0_WEST_SB_IN_B16_O), .I_4(WIRE_SB_T1_NORTH_SB_IN_B16_O), .I_5(WIRE_SB_T1_SOUTH_SB_IN_B16_O), .I_6(WIRE_SB_T1_EAST_SB_IN_B16_O), .I_7(WIRE_SB_T1_WEST_SB_IN_B16_O), .I_8(WIRE_SB_T2_NORTH_SB_IN_B16_O), .I_9(WIRE_SB_T2_SOUTH_SB_IN_B16_O), .O(CB_data0_O), .clk(clk), .config_config_addr({config_config_addr[31],config_config_addr[30],config_config_addr[29],config_config_addr[28],config_config_addr[27],config_config_addr[26],config_config_addr[25],config_config_addr[24]}), .config_config_data(config_config_data), .config_read(config_read), .config_write(FEATURE_AND_4_out), .read_config_data(CB_data0_read_config_data), .reset(reset));
CB_data1 CB_data1(.I_0(WIRE_SB_T0_NORTH_SB_IN_B16_O), .I_1(WIRE_SB_T0_SOUTH_SB_IN_B16_O), .I_10(WIRE_SB_T2_EAST_SB_IN_B16_O), .I_11(WIRE_SB_T2_WEST_SB_IN_B16_O), .I_12(WIRE_SB_T3_NORTH_SB_IN_B16_O), .I_13(WIRE_SB_T3_SOUTH_SB_IN_B16_O), .I_14(WIRE_SB_T3_EAST_SB_IN_B16_O), .I_15(WIRE_SB_T3_WEST_SB_IN_B16_O), .I_16(WIRE_SB_T4_NORTH_SB_IN_B16_O), .I_17(WIRE_SB_T4_SOUTH_SB_IN_B16_O), .I_18(WIRE_SB_T4_EAST_SB_IN_B16_O), .I_19(WIRE_SB_T4_WEST_SB_IN_B16_O), .I_2(WIRE_SB_T0_EAST_SB_IN_B16_O), .I_3(WIRE_SB_T0_WEST_SB_IN_B16_O), .I_4(WIRE_SB_T1_NORTH_SB_IN_B16_O), .I_5(WIRE_SB_T1_SOUTH_SB_IN_B16_O), .I_6(WIRE_SB_T1_EAST_SB_IN_B16_O), .I_7(WIRE_SB_T1_WEST_SB_IN_B16_O), .I_8(WIRE_SB_T2_NORTH_SB_IN_B16_O), .I_9(WIRE_SB_T2_SOUTH_SB_IN_B16_O), .O(CB_data1_O), .clk(clk), .config_config_addr({config_config_addr[31],config_config_addr[30],config_config_addr[29],config_config_addr[28],config_config_addr[27],config_config_addr[26],config_config_addr[25],config_config_addr[24]}), .config_config_data(config_config_data), .config_read(config_read), .config_write(FEATURE_AND_5_out), .read_config_data(CB_data1_read_config_data), .reset(reset));
Decode08 DECODE_FEATURE_0(.I({config_config_addr[23],config_config_addr[22],config_config_addr[21],config_config_addr[20],config_config_addr[19],config_config_addr[18],config_config_addr[17],config_config_addr[16]}), .O(DECODE_FEATURE_0_O));
Decode18 DECODE_FEATURE_1(.I({config_config_addr[23],config_config_addr[22],config_config_addr[21],config_config_addr[20],config_config_addr[19],config_config_addr[18],config_config_addr[17],config_config_addr[16]}), .O(DECODE_FEATURE_1_O));
Decode28 DECODE_FEATURE_2(.I({config_config_addr[23],config_config_addr[22],config_config_addr[21],config_config_addr[20],config_config_addr[19],config_config_addr[18],config_config_addr[17],config_config_addr[16]}), .O(DECODE_FEATURE_2_O));
Decode38 DECODE_FEATURE_3(.I({config_config_addr[23],config_config_addr[22],config_config_addr[21],config_config_addr[20],config_config_addr[19],config_config_addr[18],config_config_addr[17],config_config_addr[16]}), .O(DECODE_FEATURE_3_O));
Decode48 DECODE_FEATURE_4(.I({config_config_addr[23],config_config_addr[22],config_config_addr[21],config_config_addr[20],config_config_addr[19],config_config_addr[18],config_config_addr[17],config_config_addr[16]}), .O(DECODE_FEATURE_4_O));
Decode58 DECODE_FEATURE_5(.I({config_config_addr[23],config_config_addr[22],config_config_addr[21],config_config_addr[20],config_config_addr[19],config_config_addr[18],config_config_addr[17],config_config_addr[16]}), .O(DECODE_FEATURE_5_O));
Decode68 DECODE_FEATURE_6(.I({config_config_addr[23],config_config_addr[22],config_config_addr[21],config_config_addr[20],config_config_addr[19],config_config_addr[18],config_config_addr[17],config_config_addr[16]}), .O(DECODE_FEATURE_6_O));
Decode78 DECODE_FEATURE_7(.I({config_config_addr[23],config_config_addr[22],config_config_addr[21],config_config_addr[20],config_config_addr[19],config_config_addr[18],config_config_addr[17],config_config_addr[16]}), .O(DECODE_FEATURE_7_O));
corebit_and FEATURE_AND_0(.in0(DECODE_FEATURE_0_O), .in1(and_inst1_out), .out(FEATURE_AND_0_out));
corebit_and FEATURE_AND_1(.in0(DECODE_FEATURE_1_O), .in1(and_inst1_out), .out(FEATURE_AND_1_out));
corebit_and FEATURE_AND_2(.in0(DECODE_FEATURE_2_O), .in1(and_inst1_out), .out(FEATURE_AND_2_out));
corebit_and FEATURE_AND_3(.in0(DECODE_FEATURE_3_O), .in1(and_inst1_out), .out(FEATURE_AND_3_out));
corebit_and FEATURE_AND_4(.in0(DECODE_FEATURE_4_O), .in1(and_inst1_out), .out(FEATURE_AND_4_out));
corebit_and FEATURE_AND_5(.in0(DECODE_FEATURE_5_O), .in1(and_inst1_out), .out(FEATURE_AND_5_out));
corebit_and FEATURE_AND_6(.in0(DECODE_FEATURE_6_O), .in1(and_inst1_out), .out(FEATURE_AND_6_out));
corebit_and FEATURE_AND_7(.in0(DECODE_FEATURE_7_O), .in1(and_inst1_out), .out(FEATURE_AND_7_out));
PE_unq1 PE_inst0(.alu_res(PE_inst0_alu_res), .bit0(CB_bit0_O), .bit1(CB_bit1_O), .bit2(CB_bit2_O), .clk(clk), .config_config_addr({config_config_addr[31],config_config_addr[30],config_config_addr[29],config_config_addr[28],config_config_addr[27],config_config_addr[26],config_config_addr[25],config_config_addr[24]}), .config_config_data(config_config_data), .config_read(config_read), .config_write(FEATURE_AND_0_out), .data0(CB_data0_O), .data1(CB_data1_O), .read_config_data(PE_inst0_read_config_data), .res_p(PE_inst0_res_p), .reset(reset), .stall(stall));
SB_ID0_5TRACKS_B16_PE SB_ID0_5TRACKS_B16_PE(.SB_T0_EAST_SB_IN_B16_0(SB_T0_EAST_SB_IN_B16_0), .SB_T0_EAST_SB_OUT_B16(SB_ID0_5TRACKS_B16_PE_SB_T0_EAST_SB_OUT_B16), .SB_T0_NORTH_SB_IN_B16_0(SB_T0_NORTH_SB_IN_B16_0), .SB_T0_NORTH_SB_OUT_B16(SB_ID0_5TRACKS_B16_PE_SB_T0_NORTH_SB_OUT_B16), .SB_T0_SOUTH_SB_IN_B16_0(SB_T0_SOUTH_SB_IN_B16_0), .SB_T0_SOUTH_SB_OUT_B16(SB_ID0_5TRACKS_B16_PE_SB_T0_SOUTH_SB_OUT_B16), .SB_T0_WEST_SB_IN_B16_0(SB_T0_WEST_SB_IN_B16_0), .SB_T0_WEST_SB_OUT_B16(SB_ID0_5TRACKS_B16_PE_SB_T0_WEST_SB_OUT_B16), .SB_T1_EAST_SB_IN_B16_0(SB_T1_EAST_SB_IN_B16_0), .SB_T1_EAST_SB_OUT_B16(SB_ID0_5TRACKS_B16_PE_SB_T1_EAST_SB_OUT_B16), .SB_T1_NORTH_SB_IN_B16_0(SB_T1_NORTH_SB_IN_B16_0), .SB_T1_NORTH_SB_OUT_B16(SB_ID0_5TRACKS_B16_PE_SB_T1_NORTH_SB_OUT_B16), .SB_T1_SOUTH_SB_IN_B16_0(SB_T1_SOUTH_SB_IN_B16_0), .SB_T1_SOUTH_SB_OUT_B16(SB_ID0_5TRACKS_B16_PE_SB_T1_SOUTH_SB_OUT_B16), .SB_T1_WEST_SB_IN_B16_0(SB_T1_WEST_SB_IN_B16_0), .SB_T1_WEST_SB_OUT_B16(SB_ID0_5TRACKS_B16_PE_SB_T1_WEST_SB_OUT_B16), .SB_T2_EAST_SB_IN_B16_0(SB_T2_EAST_SB_IN_B16_0), .SB_T2_EAST_SB_OUT_B16(SB_ID0_5TRACKS_B16_PE_SB_T2_EAST_SB_OUT_B16), .SB_T2_NORTH_SB_IN_B16_0(SB_T2_NORTH_SB_IN_B16_0), .SB_T2_NORTH_SB_OUT_B16(SB_ID0_5TRACKS_B16_PE_SB_T2_NORTH_SB_OUT_B16), .SB_T2_SOUTH_SB_IN_B16_0(SB_T2_SOUTH_SB_IN_B16_0), .SB_T2_SOUTH_SB_OUT_B16(SB_ID0_5TRACKS_B16_PE_SB_T2_SOUTH_SB_OUT_B16), .SB_T2_WEST_SB_IN_B16_0(SB_T2_WEST_SB_IN_B16_0), .SB_T2_WEST_SB_OUT_B16(SB_ID0_5TRACKS_B16_PE_SB_T2_WEST_SB_OUT_B16), .SB_T3_EAST_SB_IN_B16_0(SB_T3_EAST_SB_IN_B16_0), .SB_T3_EAST_SB_OUT_B16(SB_ID0_5TRACKS_B16_PE_SB_T3_EAST_SB_OUT_B16), .SB_T3_NORTH_SB_IN_B16_0(SB_T3_NORTH_SB_IN_B16_0), .SB_T3_NORTH_SB_OUT_B16(SB_ID0_5TRACKS_B16_PE_SB_T3_NORTH_SB_OUT_B16), .SB_T3_SOUTH_SB_IN_B16_0(SB_T3_SOUTH_SB_IN_B16_0), .SB_T3_SOUTH_SB_OUT_B16(SB_ID0_5TRACKS_B16_PE_SB_T3_SOUTH_SB_OUT_B16), .SB_T3_WEST_SB_IN_B16_0(SB_T3_WEST_SB_IN_B16_0), .SB_T3_WEST_SB_OUT_B16(SB_ID0_5TRACKS_B16_PE_SB_T3_WEST_SB_OUT_B16), .SB_T4_EAST_SB_IN_B16_0(SB_T4_EAST_SB_IN_B16_0), .SB_T4_EAST_SB_OUT_B16(SB_ID0_5TRACKS_B16_PE_SB_T4_EAST_SB_OUT_B16), .SB_T4_NORTH_SB_IN_B16_0(SB_T4_NORTH_SB_IN_B16_0), .SB_T4_NORTH_SB_OUT_B16(SB_ID0_5TRACKS_B16_PE_SB_T4_NORTH_SB_OUT_B16), .SB_T4_SOUTH_SB_IN_B16_0(SB_T4_SOUTH_SB_IN_B16_0), .SB_T4_SOUTH_SB_OUT_B16(SB_ID0_5TRACKS_B16_PE_SB_T4_SOUTH_SB_OUT_B16), .SB_T4_WEST_SB_IN_B16_0(SB_T4_WEST_SB_IN_B16_0), .SB_T4_WEST_SB_OUT_B16(SB_ID0_5TRACKS_B16_PE_SB_T4_WEST_SB_OUT_B16), .alu_res(PE_inst0_alu_res), .clk(clk), .config_config_addr({config_config_addr[31],config_config_addr[30],config_config_addr[29],config_config_addr[28],config_config_addr[27],config_config_addr[26],config_config_addr[25],config_config_addr[24]}), .config_config_data(config_config_data), .config_read(config_read), .config_write(FEATURE_AND_7_out), .read_config_data(SB_ID0_5TRACKS_B16_PE_read_config_data), .reset(reset), .stall(stall));
SB_ID0_5TRACKS_B1_PE SB_ID0_5TRACKS_B1_PE(.SB_T0_EAST_SB_IN_B1_0(SB_T0_EAST_SB_IN_B1_0), .SB_T0_EAST_SB_OUT_B1(SB_ID0_5TRACKS_B1_PE_SB_T0_EAST_SB_OUT_B1), .SB_T0_NORTH_SB_IN_B1_0(SB_T0_NORTH_SB_IN_B1_0), .SB_T0_NORTH_SB_OUT_B1(SB_ID0_5TRACKS_B1_PE_SB_T0_NORTH_SB_OUT_B1), .SB_T0_SOUTH_SB_IN_B1_0(SB_T0_SOUTH_SB_IN_B1_0), .SB_T0_SOUTH_SB_OUT_B1(SB_ID0_5TRACKS_B1_PE_SB_T0_SOUTH_SB_OUT_B1), .SB_T0_WEST_SB_IN_B1_0(SB_T0_WEST_SB_IN_B1_0), .SB_T0_WEST_SB_OUT_B1(SB_ID0_5TRACKS_B1_PE_SB_T0_WEST_SB_OUT_B1), .SB_T1_EAST_SB_IN_B1_0(SB_T1_EAST_SB_IN_B1_0), .SB_T1_EAST_SB_OUT_B1(SB_ID0_5TRACKS_B1_PE_SB_T1_EAST_SB_OUT_B1), .SB_T1_NORTH_SB_IN_B1_0(SB_T1_NORTH_SB_IN_B1_0), .SB_T1_NORTH_SB_OUT_B1(SB_ID0_5TRACKS_B1_PE_SB_T1_NORTH_SB_OUT_B1), .SB_T1_SOUTH_SB_IN_B1_0(SB_T1_SOUTH_SB_IN_B1_0), .SB_T1_SOUTH_SB_OUT_B1(SB_ID0_5TRACKS_B1_PE_SB_T1_SOUTH_SB_OUT_B1), .SB_T1_WEST_SB_IN_B1_0(SB_T1_WEST_SB_IN_B1_0), .SB_T1_WEST_SB_OUT_B1(SB_ID0_5TRACKS_B1_PE_SB_T1_WEST_SB_OUT_B1), .SB_T2_EAST_SB_IN_B1_0(SB_T2_EAST_SB_IN_B1_0), .SB_T2_EAST_SB_OUT_B1(SB_ID0_5TRACKS_B1_PE_SB_T2_EAST_SB_OUT_B1), .SB_T2_NORTH_SB_IN_B1_0(SB_T2_NORTH_SB_IN_B1_0), .SB_T2_NORTH_SB_OUT_B1(SB_ID0_5TRACKS_B1_PE_SB_T2_NORTH_SB_OUT_B1), .SB_T2_SOUTH_SB_IN_B1_0(SB_T2_SOUTH_SB_IN_B1_0), .SB_T2_SOUTH_SB_OUT_B1(SB_ID0_5TRACKS_B1_PE_SB_T2_SOUTH_SB_OUT_B1), .SB_T2_WEST_SB_IN_B1_0(SB_T2_WEST_SB_IN_B1_0), .SB_T2_WEST_SB_OUT_B1(SB_ID0_5TRACKS_B1_PE_SB_T2_WEST_SB_OUT_B1), .SB_T3_EAST_SB_IN_B1_0(SB_T3_EAST_SB_IN_B1_0), .SB_T3_EAST_SB_OUT_B1(SB_ID0_5TRACKS_B1_PE_SB_T3_EAST_SB_OUT_B1), .SB_T3_NORTH_SB_IN_B1_0(SB_T3_NORTH_SB_IN_B1_0), .SB_T3_NORTH_SB_OUT_B1(SB_ID0_5TRACKS_B1_PE_SB_T3_NORTH_SB_OUT_B1), .SB_T3_SOUTH_SB_IN_B1_0(SB_T3_SOUTH_SB_IN_B1_0), .SB_T3_SOUTH_SB_OUT_B1(SB_ID0_5TRACKS_B1_PE_SB_T3_SOUTH_SB_OUT_B1), .SB_T3_WEST_SB_IN_B1_0(SB_T3_WEST_SB_IN_B1_0), .SB_T3_WEST_SB_OUT_B1(SB_ID0_5TRACKS_B1_PE_SB_T3_WEST_SB_OUT_B1), .SB_T4_EAST_SB_IN_B1_0(SB_T4_EAST_SB_IN_B1_0), .SB_T4_EAST_SB_OUT_B1(SB_ID0_5TRACKS_B1_PE_SB_T4_EAST_SB_OUT_B1), .SB_T4_NORTH_SB_IN_B1_0(SB_T4_NORTH_SB_IN_B1_0), .SB_T4_NORTH_SB_OUT_B1(SB_ID0_5TRACKS_B1_PE_SB_T4_NORTH_SB_OUT_B1), .SB_T4_SOUTH_SB_IN_B1_0(SB_T4_SOUTH_SB_IN_B1_0), .SB_T4_SOUTH_SB_OUT_B1(SB_ID0_5TRACKS_B1_PE_SB_T4_SOUTH_SB_OUT_B1), .SB_T4_WEST_SB_IN_B1_0(SB_T4_WEST_SB_IN_B1_0), .SB_T4_WEST_SB_OUT_B1(SB_ID0_5TRACKS_B1_PE_SB_T4_WEST_SB_OUT_B1), .clk(clk), .config_config_addr({config_config_addr[31],config_config_addr[30],config_config_addr[29],config_config_addr[28],config_config_addr[27],config_config_addr[26],config_config_addr[25],config_config_addr[24]}), .config_config_data(config_config_data), .config_read(config_read), .config_write(FEATURE_AND_6_out), .read_config_data(SB_ID0_5TRACKS_B1_PE_read_config_data), .res_p(PE_inst0_res_p), .reset(reset), .stall(stall));
MuxWrapper_1_1 WIRE_SB_T0_EAST_SB_IN_B1(.I_0(SB_T0_EAST_SB_IN_B1_0), .O(WIRE_SB_T0_EAST_SB_IN_B1_O));
MuxWrapper_1_16 WIRE_SB_T0_EAST_SB_IN_B16(.I_0(SB_T0_EAST_SB_IN_B16_0), .O(WIRE_SB_T0_EAST_SB_IN_B16_O));
MuxWrapper_1_1 WIRE_SB_T0_NORTH_SB_IN_B1(.I_0(SB_T0_NORTH_SB_IN_B1_0), .O(WIRE_SB_T0_NORTH_SB_IN_B1_O));
MuxWrapper_1_16 WIRE_SB_T0_NORTH_SB_IN_B16(.I_0(SB_T0_NORTH_SB_IN_B16_0), .O(WIRE_SB_T0_NORTH_SB_IN_B16_O));
MuxWrapper_1_1 WIRE_SB_T0_SOUTH_SB_IN_B1(.I_0(SB_T0_SOUTH_SB_IN_B1_0), .O(WIRE_SB_T0_SOUTH_SB_IN_B1_O));
MuxWrapper_1_16 WIRE_SB_T0_SOUTH_SB_IN_B16(.I_0(SB_T0_SOUTH_SB_IN_B16_0), .O(WIRE_SB_T0_SOUTH_SB_IN_B16_O));
MuxWrapper_1_1 WIRE_SB_T0_WEST_SB_IN_B1(.I_0(SB_T0_WEST_SB_IN_B1_0), .O(WIRE_SB_T0_WEST_SB_IN_B1_O));
MuxWrapper_1_16 WIRE_SB_T0_WEST_SB_IN_B16(.I_0(SB_T0_WEST_SB_IN_B16_0), .O(WIRE_SB_T0_WEST_SB_IN_B16_O));
MuxWrapper_1_1 WIRE_SB_T1_EAST_SB_IN_B1(.I_0(SB_T1_EAST_SB_IN_B1_0), .O(WIRE_SB_T1_EAST_SB_IN_B1_O));
MuxWrapper_1_16 WIRE_SB_T1_EAST_SB_IN_B16(.I_0(SB_T1_EAST_SB_IN_B16_0), .O(WIRE_SB_T1_EAST_SB_IN_B16_O));
MuxWrapper_1_1 WIRE_SB_T1_NORTH_SB_IN_B1(.I_0(SB_T1_NORTH_SB_IN_B1_0), .O(WIRE_SB_T1_NORTH_SB_IN_B1_O));
MuxWrapper_1_16 WIRE_SB_T1_NORTH_SB_IN_B16(.I_0(SB_T1_NORTH_SB_IN_B16_0), .O(WIRE_SB_T1_NORTH_SB_IN_B16_O));
MuxWrapper_1_1 WIRE_SB_T1_SOUTH_SB_IN_B1(.I_0(SB_T1_SOUTH_SB_IN_B1_0), .O(WIRE_SB_T1_SOUTH_SB_IN_B1_O));
MuxWrapper_1_16 WIRE_SB_T1_SOUTH_SB_IN_B16(.I_0(SB_T1_SOUTH_SB_IN_B16_0), .O(WIRE_SB_T1_SOUTH_SB_IN_B16_O));
MuxWrapper_1_1 WIRE_SB_T1_WEST_SB_IN_B1(.I_0(SB_T1_WEST_SB_IN_B1_0), .O(WIRE_SB_T1_WEST_SB_IN_B1_O));
MuxWrapper_1_16 WIRE_SB_T1_WEST_SB_IN_B16(.I_0(SB_T1_WEST_SB_IN_B16_0), .O(WIRE_SB_T1_WEST_SB_IN_B16_O));
MuxWrapper_1_1 WIRE_SB_T2_EAST_SB_IN_B1(.I_0(SB_T2_EAST_SB_IN_B1_0), .O(WIRE_SB_T2_EAST_SB_IN_B1_O));
MuxWrapper_1_16 WIRE_SB_T2_EAST_SB_IN_B16(.I_0(SB_T2_EAST_SB_IN_B16_0), .O(WIRE_SB_T2_EAST_SB_IN_B16_O));
MuxWrapper_1_1 WIRE_SB_T2_NORTH_SB_IN_B1(.I_0(SB_T2_NORTH_SB_IN_B1_0), .O(WIRE_SB_T2_NORTH_SB_IN_B1_O));
MuxWrapper_1_16 WIRE_SB_T2_NORTH_SB_IN_B16(.I_0(SB_T2_NORTH_SB_IN_B16_0), .O(WIRE_SB_T2_NORTH_SB_IN_B16_O));
MuxWrapper_1_1 WIRE_SB_T2_SOUTH_SB_IN_B1(.I_0(SB_T2_SOUTH_SB_IN_B1_0), .O(WIRE_SB_T2_SOUTH_SB_IN_B1_O));
MuxWrapper_1_16 WIRE_SB_T2_SOUTH_SB_IN_B16(.I_0(SB_T2_SOUTH_SB_IN_B16_0), .O(WIRE_SB_T2_SOUTH_SB_IN_B16_O));
MuxWrapper_1_1 WIRE_SB_T2_WEST_SB_IN_B1(.I_0(SB_T2_WEST_SB_IN_B1_0), .O(WIRE_SB_T2_WEST_SB_IN_B1_O));
MuxWrapper_1_16 WIRE_SB_T2_WEST_SB_IN_B16(.I_0(SB_T2_WEST_SB_IN_B16_0), .O(WIRE_SB_T2_WEST_SB_IN_B16_O));
MuxWrapper_1_1 WIRE_SB_T3_EAST_SB_IN_B1(.I_0(SB_T3_EAST_SB_IN_B1_0), .O(WIRE_SB_T3_EAST_SB_IN_B1_O));
MuxWrapper_1_16 WIRE_SB_T3_EAST_SB_IN_B16(.I_0(SB_T3_EAST_SB_IN_B16_0), .O(WIRE_SB_T3_EAST_SB_IN_B16_O));
MuxWrapper_1_1 WIRE_SB_T3_NORTH_SB_IN_B1(.I_0(SB_T3_NORTH_SB_IN_B1_0), .O(WIRE_SB_T3_NORTH_SB_IN_B1_O));
MuxWrapper_1_16 WIRE_SB_T3_NORTH_SB_IN_B16(.I_0(SB_T3_NORTH_SB_IN_B16_0), .O(WIRE_SB_T3_NORTH_SB_IN_B16_O));
MuxWrapper_1_1 WIRE_SB_T3_SOUTH_SB_IN_B1(.I_0(SB_T3_SOUTH_SB_IN_B1_0), .O(WIRE_SB_T3_SOUTH_SB_IN_B1_O));
MuxWrapper_1_16 WIRE_SB_T3_SOUTH_SB_IN_B16(.I_0(SB_T3_SOUTH_SB_IN_B16_0), .O(WIRE_SB_T3_SOUTH_SB_IN_B16_O));
MuxWrapper_1_1 WIRE_SB_T3_WEST_SB_IN_B1(.I_0(SB_T3_WEST_SB_IN_B1_0), .O(WIRE_SB_T3_WEST_SB_IN_B1_O));
MuxWrapper_1_16 WIRE_SB_T3_WEST_SB_IN_B16(.I_0(SB_T3_WEST_SB_IN_B16_0), .O(WIRE_SB_T3_WEST_SB_IN_B16_O));
MuxWrapper_1_1 WIRE_SB_T4_EAST_SB_IN_B1(.I_0(SB_T4_EAST_SB_IN_B1_0), .O(WIRE_SB_T4_EAST_SB_IN_B1_O));
MuxWrapper_1_16 WIRE_SB_T4_EAST_SB_IN_B16(.I_0(SB_T4_EAST_SB_IN_B16_0), .O(WIRE_SB_T4_EAST_SB_IN_B16_O));
MuxWrapper_1_1 WIRE_SB_T4_NORTH_SB_IN_B1(.I_0(SB_T4_NORTH_SB_IN_B1_0), .O(WIRE_SB_T4_NORTH_SB_IN_B1_O));
MuxWrapper_1_16 WIRE_SB_T4_NORTH_SB_IN_B16(.I_0(SB_T4_NORTH_SB_IN_B16_0), .O(WIRE_SB_T4_NORTH_SB_IN_B16_O));
MuxWrapper_1_1 WIRE_SB_T4_SOUTH_SB_IN_B1(.I_0(SB_T4_SOUTH_SB_IN_B1_0), .O(WIRE_SB_T4_SOUTH_SB_IN_B1_O));
MuxWrapper_1_16 WIRE_SB_T4_SOUTH_SB_IN_B16(.I_0(SB_T4_SOUTH_SB_IN_B16_0), .O(WIRE_SB_T4_SOUTH_SB_IN_B16_O));
MuxWrapper_1_1 WIRE_SB_T4_WEST_SB_IN_B1(.I_0(SB_T4_WEST_SB_IN_B1_0), .O(WIRE_SB_T4_WEST_SB_IN_B1_O));
MuxWrapper_1_16 WIRE_SB_T4_WEST_SB_IN_B16(.I_0(SB_T4_WEST_SB_IN_B16_0), .O(WIRE_SB_T4_WEST_SB_IN_B16_O));
corebit_and and_inst0(.in0(coreir_eq_16_inst0_out), .in1(config_read[0]), .out(and_inst0_out));
corebit_and and_inst1(.in0(coreir_eq_16_inst0_out), .in1(config_write[0]), .out(and_inst1_out));
coreir_const #(.value(8'h00), .width(8)) const_0_8(.out(const_0_8_out));
coreir_const #(.value(9'h1ff), .width(9)) const_511_9(.out(const_511_9_out));
coreir_eq #(.width(16)) coreir_eq_16_inst0(.in0(tile_id), .in1({config_config_addr[15],config_config_addr[14],config_config_addr[13],config_config_addr[12],config_config_addr[11],config_config_addr[10],config_config_addr[9],config_config_addr[8],config_config_addr[7],config_config_addr[6],config_config_addr[5],config_config_addr[4],config_config_addr[3],config_config_addr[2],config_config_addr[1],config_config_addr[0]}), .out(coreir_eq_16_inst0_out));
coreir_or #(.width(32)) read_config_data_or_inst0(.in0(read_data_mux_O), .in1(read_config_data_in), .out(read_config_data_or_inst0_out));
MuxWithDefaultWrapper_8_32_8_0 read_data_mux(.EN(and_inst0_out), .I_0(PE_inst0_read_config_data), .I_1(CB_bit0_read_config_data), .I_2(CB_bit1_read_config_data), .I_3(CB_bit2_read_config_data), .I_4(CB_data0_read_config_data), .I_5(CB_data1_read_config_data), .I_6(SB_ID0_5TRACKS_B1_PE_read_config_data), .I_7(SB_ID0_5TRACKS_B16_PE_read_config_data), .O(read_data_mux_O), .S({config_config_addr[23],config_config_addr[22],config_config_addr[21],config_config_addr[20],config_config_addr[19],config_config_addr[18],config_config_addr[17],config_config_addr[16]}));
assign SB_T0_EAST_SB_OUT_B1 = SB_ID0_5TRACKS_B1_PE_SB_T0_EAST_SB_OUT_B1;
assign SB_T0_EAST_SB_OUT_B16 = SB_ID0_5TRACKS_B16_PE_SB_T0_EAST_SB_OUT_B16;
assign SB_T0_NORTH_SB_OUT_B1 = SB_ID0_5TRACKS_B1_PE_SB_T0_NORTH_SB_OUT_B1;
assign SB_T0_NORTH_SB_OUT_B16 = SB_ID0_5TRACKS_B16_PE_SB_T0_NORTH_SB_OUT_B16;
assign SB_T0_SOUTH_SB_OUT_B1 = SB_ID0_5TRACKS_B1_PE_SB_T0_SOUTH_SB_OUT_B1;
assign SB_T0_SOUTH_SB_OUT_B16 = SB_ID0_5TRACKS_B16_PE_SB_T0_SOUTH_SB_OUT_B16;
assign SB_T0_WEST_SB_OUT_B1 = SB_ID0_5TRACKS_B1_PE_SB_T0_WEST_SB_OUT_B1;
assign SB_T0_WEST_SB_OUT_B16 = SB_ID0_5TRACKS_B16_PE_SB_T0_WEST_SB_OUT_B16;
assign SB_T1_EAST_SB_OUT_B1 = SB_ID0_5TRACKS_B1_PE_SB_T1_EAST_SB_OUT_B1;
assign SB_T1_EAST_SB_OUT_B16 = SB_ID0_5TRACKS_B16_PE_SB_T1_EAST_SB_OUT_B16;
assign SB_T1_NORTH_SB_OUT_B1 = SB_ID0_5TRACKS_B1_PE_SB_T1_NORTH_SB_OUT_B1;
assign SB_T1_NORTH_SB_OUT_B16 = SB_ID0_5TRACKS_B16_PE_SB_T1_NORTH_SB_OUT_B16;
assign SB_T1_SOUTH_SB_OUT_B1 = SB_ID0_5TRACKS_B1_PE_SB_T1_SOUTH_SB_OUT_B1;
assign SB_T1_SOUTH_SB_OUT_B16 = SB_ID0_5TRACKS_B16_PE_SB_T1_SOUTH_SB_OUT_B16;
assign SB_T1_WEST_SB_OUT_B1 = SB_ID0_5TRACKS_B1_PE_SB_T1_WEST_SB_OUT_B1;
assign SB_T1_WEST_SB_OUT_B16 = SB_ID0_5TRACKS_B16_PE_SB_T1_WEST_SB_OUT_B16;
assign SB_T2_EAST_SB_OUT_B1 = SB_ID0_5TRACKS_B1_PE_SB_T2_EAST_SB_OUT_B1;
assign SB_T2_EAST_SB_OUT_B16 = SB_ID0_5TRACKS_B16_PE_SB_T2_EAST_SB_OUT_B16;
assign SB_T2_NORTH_SB_OUT_B1 = SB_ID0_5TRACKS_B1_PE_SB_T2_NORTH_SB_OUT_B1;
assign SB_T2_NORTH_SB_OUT_B16 = SB_ID0_5TRACKS_B16_PE_SB_T2_NORTH_SB_OUT_B16;
assign SB_T2_SOUTH_SB_OUT_B1 = SB_ID0_5TRACKS_B1_PE_SB_T2_SOUTH_SB_OUT_B1;
assign SB_T2_SOUTH_SB_OUT_B16 = SB_ID0_5TRACKS_B16_PE_SB_T2_SOUTH_SB_OUT_B16;
assign SB_T2_WEST_SB_OUT_B1 = SB_ID0_5TRACKS_B1_PE_SB_T2_WEST_SB_OUT_B1;
assign SB_T2_WEST_SB_OUT_B16 = SB_ID0_5TRACKS_B16_PE_SB_T2_WEST_SB_OUT_B16;
assign SB_T3_EAST_SB_OUT_B1 = SB_ID0_5TRACKS_B1_PE_SB_T3_EAST_SB_OUT_B1;
assign SB_T3_EAST_SB_OUT_B16 = SB_ID0_5TRACKS_B16_PE_SB_T3_EAST_SB_OUT_B16;
assign SB_T3_NORTH_SB_OUT_B1 = SB_ID0_5TRACKS_B1_PE_SB_T3_NORTH_SB_OUT_B1;
assign SB_T3_NORTH_SB_OUT_B16 = SB_ID0_5TRACKS_B16_PE_SB_T3_NORTH_SB_OUT_B16;
assign SB_T3_SOUTH_SB_OUT_B1 = SB_ID0_5TRACKS_B1_PE_SB_T3_SOUTH_SB_OUT_B1;
assign SB_T3_SOUTH_SB_OUT_B16 = SB_ID0_5TRACKS_B16_PE_SB_T3_SOUTH_SB_OUT_B16;
assign SB_T3_WEST_SB_OUT_B1 = SB_ID0_5TRACKS_B1_PE_SB_T3_WEST_SB_OUT_B1;
assign SB_T3_WEST_SB_OUT_B16 = SB_ID0_5TRACKS_B16_PE_SB_T3_WEST_SB_OUT_B16;
assign SB_T4_EAST_SB_OUT_B1 = SB_ID0_5TRACKS_B1_PE_SB_T4_EAST_SB_OUT_B1;
assign SB_T4_EAST_SB_OUT_B16 = SB_ID0_5TRACKS_B16_PE_SB_T4_EAST_SB_OUT_B16;
assign SB_T4_NORTH_SB_OUT_B1 = SB_ID0_5TRACKS_B1_PE_SB_T4_NORTH_SB_OUT_B1;
assign SB_T4_NORTH_SB_OUT_B16 = SB_ID0_5TRACKS_B16_PE_SB_T4_NORTH_SB_OUT_B16;
assign SB_T4_SOUTH_SB_OUT_B1 = SB_ID0_5TRACKS_B1_PE_SB_T4_SOUTH_SB_OUT_B1;
assign SB_T4_SOUTH_SB_OUT_B16 = SB_ID0_5TRACKS_B16_PE_SB_T4_SOUTH_SB_OUT_B16;
assign SB_T4_WEST_SB_OUT_B1 = SB_ID0_5TRACKS_B1_PE_SB_T4_WEST_SB_OUT_B1;
assign SB_T4_WEST_SB_OUT_B16 = SB_ID0_5TRACKS_B16_PE_SB_T4_WEST_SB_OUT_B16;
assign clk_out = clk_pass_through;
assign clk_pass_through_out = clk_pass_through;
assign config_out_config_addr = config_config_addr;
assign config_out_config_data = config_config_data;
assign config_out_read = config_read;
assign config_out_write = config_write;
assign hi = const_511_9_out;
assign lo = const_0_8_out;
assign read_config_data = read_config_data_or_inst0_out;
assign reset_out = reset;
assign stall_out = stall;
endmodule

module CB_addr_in (input [15:0] I_0, input [15:0] I_1, input [15:0] I_10, input [15:0] I_11, input [15:0] I_12, input [15:0] I_13, input [15:0] I_14, input [15:0] I_15, input [15:0] I_16, input [15:0] I_17, input [15:0] I_18, input [15:0] I_19, input [15:0] I_2, input [15:0] I_3, input [15:0] I_4, input [15:0] I_5, input [15:0] I_6, input [15:0] I_7, input [15:0] I_8, input [15:0] I_9, output [15:0] O, input clk, input [7:0] config_config_addr, input [31:0] config_config_data, input [0:0] config_read, input [0:0] config_write, output [31:0] read_config_data, input reset);
wire [4:0] CB_addr_in_sel_O;
wire [15:0] MUX_CB_addr_in_O;
wire [31:0] ZextWrapper_5_32_inst0_O;
ConfigRegister_5_8_32_0 CB_addr_in_sel(.O(CB_addr_in_sel_O), .clk(clk), .config_addr(config_config_addr), .config_data(config_config_data), .config_en(config_write[0]), .reset(reset));
MuxWrapper_20_16 MUX_CB_addr_in(.I_0(I_0), .I_1(I_1), .I_10(I_10), .I_11(I_11), .I_12(I_12), .I_13(I_13), .I_14(I_14), .I_15(I_15), .I_16(I_16), .I_17(I_17), .I_18(I_18), .I_19(I_19), .I_2(I_2), .I_3(I_3), .I_4(I_4), .I_5(I_5), .I_6(I_6), .I_7(I_7), .I_8(I_8), .I_9(I_9), .O(MUX_CB_addr_in_O), .S(CB_addr_in_sel_O));
ZextWrapper_5_32 ZextWrapper_5_32_inst0(.I(CB_addr_in_sel_O), .O(ZextWrapper_5_32_inst0_O));
assign O = MUX_CB_addr_in_O;
assign read_config_data = ZextWrapper_5_32_inst0_O;
endmodule

module Tile_MemCore (input [15:0] SB_T0_EAST_SB_IN_B16_0, input [0:0] SB_T0_EAST_SB_IN_B1_0, output [0:0] SB_T0_EAST_SB_OUT_B1, output [15:0] SB_T0_EAST_SB_OUT_B16, input [15:0] SB_T0_NORTH_SB_IN_B16_0, input [0:0] SB_T0_NORTH_SB_IN_B1_0, output [0:0] SB_T0_NORTH_SB_OUT_B1, output [15:0] SB_T0_NORTH_SB_OUT_B16, input [15:0] SB_T0_SOUTH_SB_IN_B16_0, input [0:0] SB_T0_SOUTH_SB_IN_B1_0, output [0:0] SB_T0_SOUTH_SB_OUT_B1, output [15:0] SB_T0_SOUTH_SB_OUT_B16, input [15:0] SB_T0_WEST_SB_IN_B16_0, input [0:0] SB_T0_WEST_SB_IN_B1_0, output [0:0] SB_T0_WEST_SB_OUT_B1, output [15:0] SB_T0_WEST_SB_OUT_B16, input [15:0] SB_T1_EAST_SB_IN_B16_0, input [0:0] SB_T1_EAST_SB_IN_B1_0, output [0:0] SB_T1_EAST_SB_OUT_B1, output [15:0] SB_T1_EAST_SB_OUT_B16, input [15:0] SB_T1_NORTH_SB_IN_B16_0, input [0:0] SB_T1_NORTH_SB_IN_B1_0, output [0:0] SB_T1_NORTH_SB_OUT_B1, output [15:0] SB_T1_NORTH_SB_OUT_B16, input [15:0] SB_T1_SOUTH_SB_IN_B16_0, input [0:0] SB_T1_SOUTH_SB_IN_B1_0, output [0:0] SB_T1_SOUTH_SB_OUT_B1, output [15:0] SB_T1_SOUTH_SB_OUT_B16, input [15:0] SB_T1_WEST_SB_IN_B16_0, input [0:0] SB_T1_WEST_SB_IN_B1_0, output [0:0] SB_T1_WEST_SB_OUT_B1, output [15:0] SB_T1_WEST_SB_OUT_B16, input [15:0] SB_T2_EAST_SB_IN_B16_0, input [0:0] SB_T2_EAST_SB_IN_B1_0, output [0:0] SB_T2_EAST_SB_OUT_B1, output [15:0] SB_T2_EAST_SB_OUT_B16, input [15:0] SB_T2_NORTH_SB_IN_B16_0, input [0:0] SB_T2_NORTH_SB_IN_B1_0, output [0:0] SB_T2_NORTH_SB_OUT_B1, output [15:0] SB_T2_NORTH_SB_OUT_B16, input [15:0] SB_T2_SOUTH_SB_IN_B16_0, input [0:0] SB_T2_SOUTH_SB_IN_B1_0, output [0:0] SB_T2_SOUTH_SB_OUT_B1, output [15:0] SB_T2_SOUTH_SB_OUT_B16, input [15:0] SB_T2_WEST_SB_IN_B16_0, input [0:0] SB_T2_WEST_SB_IN_B1_0, output [0:0] SB_T2_WEST_SB_OUT_B1, output [15:0] SB_T2_WEST_SB_OUT_B16, input [15:0] SB_T3_EAST_SB_IN_B16_0, input [0:0] SB_T3_EAST_SB_IN_B1_0, output [0:0] SB_T3_EAST_SB_OUT_B1, output [15:0] SB_T3_EAST_SB_OUT_B16, input [15:0] SB_T3_NORTH_SB_IN_B16_0, input [0:0] SB_T3_NORTH_SB_IN_B1_0, output [0:0] SB_T3_NORTH_SB_OUT_B1, output [15:0] SB_T3_NORTH_SB_OUT_B16, input [15:0] SB_T3_SOUTH_SB_IN_B16_0, input [0:0] SB_T3_SOUTH_SB_IN_B1_0, output [0:0] SB_T3_SOUTH_SB_OUT_B1, output [15:0] SB_T3_SOUTH_SB_OUT_B16, input [15:0] SB_T3_WEST_SB_IN_B16_0, input [0:0] SB_T3_WEST_SB_IN_B1_0, output [0:0] SB_T3_WEST_SB_OUT_B1, output [15:0] SB_T3_WEST_SB_OUT_B16, input [15:0] SB_T4_EAST_SB_IN_B16_0, input [0:0] SB_T4_EAST_SB_IN_B1_0, output [0:0] SB_T4_EAST_SB_OUT_B1, output [15:0] SB_T4_EAST_SB_OUT_B16, input [15:0] SB_T4_NORTH_SB_IN_B16_0, input [0:0] SB_T4_NORTH_SB_IN_B1_0, output [0:0] SB_T4_NORTH_SB_OUT_B1, output [15:0] SB_T4_NORTH_SB_OUT_B16, input [15:0] SB_T4_SOUTH_SB_IN_B16_0, input [0:0] SB_T4_SOUTH_SB_IN_B1_0, output [0:0] SB_T4_SOUTH_SB_OUT_B1, output [15:0] SB_T4_SOUTH_SB_OUT_B16, input [15:0] SB_T4_WEST_SB_IN_B16_0, input [0:0] SB_T4_WEST_SB_IN_B1_0, output [0:0] SB_T4_WEST_SB_OUT_B1, output [15:0] SB_T4_WEST_SB_OUT_B16, input clk, output clk_out, input clk_pass_through, output clk_pass_through_out, input [31:0] config_config_addr, input [31:0] config_config_data, output [31:0] config_out_config_addr, output [31:0] config_out_config_data, output [0:0] config_out_read, output [0:0] config_out_write, input [0:0] config_read, input [0:0] config_write, output [8:0] hi, output [7:0] lo, output [31:0] read_config_data, input [31:0] read_config_data_in, input reset, output reset_out, input [0:0] stall, output [0:0] stall_out, input [15:0] tile_id);
wire [15:0] CB_addr_in_O;
wire [31:0] CB_addr_in_read_config_data;
wire [15:0] CB_chain_in_O;
wire [31:0] CB_chain_in_read_config_data;
wire [0:0] CB_chain_wen_in_O;
wire [31:0] CB_chain_wen_in_read_config_data;
wire [15:0] CB_data_in_O;
wire [31:0] CB_data_in_read_config_data;
wire [0:0] CB_flush_O;
wire [31:0] CB_flush_read_config_data;
wire [0:0] CB_ren_in_O;
wire [31:0] CB_ren_in_read_config_data;
wire [0:0] CB_switch_db_O;
wire [31:0] CB_switch_db_read_config_data;
wire [0:0] CB_wen_in_O;
wire [31:0] CB_wen_in_read_config_data;
wire DECODE_FEATURE_0_O;
wire DECODE_FEATURE_1_O;
wire DECODE_FEATURE_10_O;
wire DECODE_FEATURE_11_O;
wire DECODE_FEATURE_12_O;
wire DECODE_FEATURE_13_O;
wire DECODE_FEATURE_14_O;
wire DECODE_FEATURE_2_O;
wire DECODE_FEATURE_3_O;
wire DECODE_FEATURE_4_O;
wire DECODE_FEATURE_5_O;
wire DECODE_FEATURE_6_O;
wire DECODE_FEATURE_7_O;
wire DECODE_FEATURE_8_O;
wire DECODE_FEATURE_9_O;
wire FEATURE_AND_0_out;
wire FEATURE_AND_1_out;
wire FEATURE_AND_10_out;
wire FEATURE_AND_11_out;
wire FEATURE_AND_12_out;
wire FEATURE_AND_13_out;
wire FEATURE_AND_14_out;
wire FEATURE_AND_2_out;
wire FEATURE_AND_3_out;
wire FEATURE_AND_4_out;
wire FEATURE_AND_5_out;
wire FEATURE_AND_6_out;
wire FEATURE_AND_7_out;
wire FEATURE_AND_8_out;
wire FEATURE_AND_9_out;
wire [0:0] MemCore_inst0_almost_empty;
wire [0:0] MemCore_inst0_almost_full;
wire [15:0] MemCore_inst0_chain_out;
wire [0:0] MemCore_inst0_chain_valid_out;
wire [15:0] MemCore_inst0_data_out;
wire [0:0] MemCore_inst0_empty;
wire [0:0] MemCore_inst0_full;
wire [31:0] MemCore_inst0_read_config_data;
wire [31:0] MemCore_inst0_read_config_data_1;
wire [31:0] MemCore_inst0_read_config_data_2;
wire [31:0] MemCore_inst0_read_config_data_3;
wire [31:0] MemCore_inst0_read_config_data_4;
wire [0:0] MemCore_inst0_valid_out;
wire [15:0] SB_ID0_5TRACKS_B16_MemCore_SB_T0_EAST_SB_OUT_B16;
wire [15:0] SB_ID0_5TRACKS_B16_MemCore_SB_T0_NORTH_SB_OUT_B16;
wire [15:0] SB_ID0_5TRACKS_B16_MemCore_SB_T0_SOUTH_SB_OUT_B16;
wire [15:0] SB_ID0_5TRACKS_B16_MemCore_SB_T0_WEST_SB_OUT_B16;
wire [15:0] SB_ID0_5TRACKS_B16_MemCore_SB_T1_EAST_SB_OUT_B16;
wire [15:0] SB_ID0_5TRACKS_B16_MemCore_SB_T1_NORTH_SB_OUT_B16;
wire [15:0] SB_ID0_5TRACKS_B16_MemCore_SB_T1_SOUTH_SB_OUT_B16;
wire [15:0] SB_ID0_5TRACKS_B16_MemCore_SB_T1_WEST_SB_OUT_B16;
wire [15:0] SB_ID0_5TRACKS_B16_MemCore_SB_T2_EAST_SB_OUT_B16;
wire [15:0] SB_ID0_5TRACKS_B16_MemCore_SB_T2_NORTH_SB_OUT_B16;
wire [15:0] SB_ID0_5TRACKS_B16_MemCore_SB_T2_SOUTH_SB_OUT_B16;
wire [15:0] SB_ID0_5TRACKS_B16_MemCore_SB_T2_WEST_SB_OUT_B16;
wire [15:0] SB_ID0_5TRACKS_B16_MemCore_SB_T3_EAST_SB_OUT_B16;
wire [15:0] SB_ID0_5TRACKS_B16_MemCore_SB_T3_NORTH_SB_OUT_B16;
wire [15:0] SB_ID0_5TRACKS_B16_MemCore_SB_T3_SOUTH_SB_OUT_B16;
wire [15:0] SB_ID0_5TRACKS_B16_MemCore_SB_T3_WEST_SB_OUT_B16;
wire [15:0] SB_ID0_5TRACKS_B16_MemCore_SB_T4_EAST_SB_OUT_B16;
wire [15:0] SB_ID0_5TRACKS_B16_MemCore_SB_T4_NORTH_SB_OUT_B16;
wire [15:0] SB_ID0_5TRACKS_B16_MemCore_SB_T4_SOUTH_SB_OUT_B16;
wire [15:0] SB_ID0_5TRACKS_B16_MemCore_SB_T4_WEST_SB_OUT_B16;
wire [31:0] SB_ID0_5TRACKS_B16_MemCore_read_config_data;
wire [0:0] SB_ID0_5TRACKS_B1_MemCore_SB_T0_EAST_SB_OUT_B1;
wire [0:0] SB_ID0_5TRACKS_B1_MemCore_SB_T0_NORTH_SB_OUT_B1;
wire [0:0] SB_ID0_5TRACKS_B1_MemCore_SB_T0_SOUTH_SB_OUT_B1;
wire [0:0] SB_ID0_5TRACKS_B1_MemCore_SB_T0_WEST_SB_OUT_B1;
wire [0:0] SB_ID0_5TRACKS_B1_MemCore_SB_T1_EAST_SB_OUT_B1;
wire [0:0] SB_ID0_5TRACKS_B1_MemCore_SB_T1_NORTH_SB_OUT_B1;
wire [0:0] SB_ID0_5TRACKS_B1_MemCore_SB_T1_SOUTH_SB_OUT_B1;
wire [0:0] SB_ID0_5TRACKS_B1_MemCore_SB_T1_WEST_SB_OUT_B1;
wire [0:0] SB_ID0_5TRACKS_B1_MemCore_SB_T2_EAST_SB_OUT_B1;
wire [0:0] SB_ID0_5TRACKS_B1_MemCore_SB_T2_NORTH_SB_OUT_B1;
wire [0:0] SB_ID0_5TRACKS_B1_MemCore_SB_T2_SOUTH_SB_OUT_B1;
wire [0:0] SB_ID0_5TRACKS_B1_MemCore_SB_T2_WEST_SB_OUT_B1;
wire [0:0] SB_ID0_5TRACKS_B1_MemCore_SB_T3_EAST_SB_OUT_B1;
wire [0:0] SB_ID0_5TRACKS_B1_MemCore_SB_T3_NORTH_SB_OUT_B1;
wire [0:0] SB_ID0_5TRACKS_B1_MemCore_SB_T3_SOUTH_SB_OUT_B1;
wire [0:0] SB_ID0_5TRACKS_B1_MemCore_SB_T3_WEST_SB_OUT_B1;
wire [0:0] SB_ID0_5TRACKS_B1_MemCore_SB_T4_EAST_SB_OUT_B1;
wire [0:0] SB_ID0_5TRACKS_B1_MemCore_SB_T4_NORTH_SB_OUT_B1;
wire [0:0] SB_ID0_5TRACKS_B1_MemCore_SB_T4_SOUTH_SB_OUT_B1;
wire [0:0] SB_ID0_5TRACKS_B1_MemCore_SB_T4_WEST_SB_OUT_B1;
wire [31:0] SB_ID0_5TRACKS_B1_MemCore_read_config_data;
wire [0:0] WIRE_SB_T0_EAST_SB_IN_B1_O;
wire [15:0] WIRE_SB_T0_EAST_SB_IN_B16_O;
wire [0:0] WIRE_SB_T0_NORTH_SB_IN_B1_O;
wire [15:0] WIRE_SB_T0_NORTH_SB_IN_B16_O;
wire [0:0] WIRE_SB_T0_SOUTH_SB_IN_B1_O;
wire [15:0] WIRE_SB_T0_SOUTH_SB_IN_B16_O;
wire [0:0] WIRE_SB_T0_WEST_SB_IN_B1_O;
wire [15:0] WIRE_SB_T0_WEST_SB_IN_B16_O;
wire [0:0] WIRE_SB_T1_EAST_SB_IN_B1_O;
wire [15:0] WIRE_SB_T1_EAST_SB_IN_B16_O;
wire [0:0] WIRE_SB_T1_NORTH_SB_IN_B1_O;
wire [15:0] WIRE_SB_T1_NORTH_SB_IN_B16_O;
wire [0:0] WIRE_SB_T1_SOUTH_SB_IN_B1_O;
wire [15:0] WIRE_SB_T1_SOUTH_SB_IN_B16_O;
wire [0:0] WIRE_SB_T1_WEST_SB_IN_B1_O;
wire [15:0] WIRE_SB_T1_WEST_SB_IN_B16_O;
wire [0:0] WIRE_SB_T2_EAST_SB_IN_B1_O;
wire [15:0] WIRE_SB_T2_EAST_SB_IN_B16_O;
wire [0:0] WIRE_SB_T2_NORTH_SB_IN_B1_O;
wire [15:0] WIRE_SB_T2_NORTH_SB_IN_B16_O;
wire [0:0] WIRE_SB_T2_SOUTH_SB_IN_B1_O;
wire [15:0] WIRE_SB_T2_SOUTH_SB_IN_B16_O;
wire [0:0] WIRE_SB_T2_WEST_SB_IN_B1_O;
wire [15:0] WIRE_SB_T2_WEST_SB_IN_B16_O;
wire [0:0] WIRE_SB_T3_EAST_SB_IN_B1_O;
wire [15:0] WIRE_SB_T3_EAST_SB_IN_B16_O;
wire [0:0] WIRE_SB_T3_NORTH_SB_IN_B1_O;
wire [15:0] WIRE_SB_T3_NORTH_SB_IN_B16_O;
wire [0:0] WIRE_SB_T3_SOUTH_SB_IN_B1_O;
wire [15:0] WIRE_SB_T3_SOUTH_SB_IN_B16_O;
wire [0:0] WIRE_SB_T3_WEST_SB_IN_B1_O;
wire [15:0] WIRE_SB_T3_WEST_SB_IN_B16_O;
wire [0:0] WIRE_SB_T4_EAST_SB_IN_B1_O;
wire [15:0] WIRE_SB_T4_EAST_SB_IN_B16_O;
wire [0:0] WIRE_SB_T4_NORTH_SB_IN_B1_O;
wire [15:0] WIRE_SB_T4_NORTH_SB_IN_B16_O;
wire [0:0] WIRE_SB_T4_SOUTH_SB_IN_B1_O;
wire [15:0] WIRE_SB_T4_SOUTH_SB_IN_B16_O;
wire [0:0] WIRE_SB_T4_WEST_SB_IN_B1_O;
wire [15:0] WIRE_SB_T4_WEST_SB_IN_B16_O;
wire and_inst0_out;
wire and_inst1_out;
wire [7:0] const_0_8_out;
wire [8:0] const_511_9_out;
wire coreir_eq_16_inst0_out;
wire [31:0] read_config_data_or_inst0_out;
wire [31:0] read_data_mux_O;
CB_addr_in CB_addr_in(.I_0(WIRE_SB_T0_NORTH_SB_IN_B16_O), .I_1(WIRE_SB_T0_SOUTH_SB_IN_B16_O), .I_10(WIRE_SB_T2_EAST_SB_IN_B16_O), .I_11(WIRE_SB_T2_WEST_SB_IN_B16_O), .I_12(WIRE_SB_T3_NORTH_SB_IN_B16_O), .I_13(WIRE_SB_T3_SOUTH_SB_IN_B16_O), .I_14(WIRE_SB_T3_EAST_SB_IN_B16_O), .I_15(WIRE_SB_T3_WEST_SB_IN_B16_O), .I_16(WIRE_SB_T4_NORTH_SB_IN_B16_O), .I_17(WIRE_SB_T4_SOUTH_SB_IN_B16_O), .I_18(WIRE_SB_T4_EAST_SB_IN_B16_O), .I_19(WIRE_SB_T4_WEST_SB_IN_B16_O), .I_2(WIRE_SB_T0_EAST_SB_IN_B16_O), .I_3(WIRE_SB_T0_WEST_SB_IN_B16_O), .I_4(WIRE_SB_T1_NORTH_SB_IN_B16_O), .I_5(WIRE_SB_T1_SOUTH_SB_IN_B16_O), .I_6(WIRE_SB_T1_EAST_SB_IN_B16_O), .I_7(WIRE_SB_T1_WEST_SB_IN_B16_O), .I_8(WIRE_SB_T2_NORTH_SB_IN_B16_O), .I_9(WIRE_SB_T2_SOUTH_SB_IN_B16_O), .O(CB_addr_in_O), .clk(clk), .config_config_addr({config_config_addr[31],config_config_addr[30],config_config_addr[29],config_config_addr[28],config_config_addr[27],config_config_addr[26],config_config_addr[25],config_config_addr[24]}), .config_config_data(config_config_data), .config_read(config_read), .config_write(FEATURE_AND_5_out), .read_config_data(CB_addr_in_read_config_data), .reset(reset));
CB_chain_in CB_chain_in(.I_0(WIRE_SB_T0_NORTH_SB_IN_B16_O), .I_1(WIRE_SB_T0_SOUTH_SB_IN_B16_O), .I_10(WIRE_SB_T2_EAST_SB_IN_B16_O), .I_11(WIRE_SB_T2_WEST_SB_IN_B16_O), .I_12(WIRE_SB_T3_NORTH_SB_IN_B16_O), .I_13(WIRE_SB_T3_SOUTH_SB_IN_B16_O), .I_14(WIRE_SB_T3_EAST_SB_IN_B16_O), .I_15(WIRE_SB_T3_WEST_SB_IN_B16_O), .I_16(WIRE_SB_T4_NORTH_SB_IN_B16_O), .I_17(WIRE_SB_T4_SOUTH_SB_IN_B16_O), .I_18(WIRE_SB_T4_EAST_SB_IN_B16_O), .I_19(WIRE_SB_T4_WEST_SB_IN_B16_O), .I_2(WIRE_SB_T0_EAST_SB_IN_B16_O), .I_3(WIRE_SB_T0_WEST_SB_IN_B16_O), .I_4(WIRE_SB_T1_NORTH_SB_IN_B16_O), .I_5(WIRE_SB_T1_SOUTH_SB_IN_B16_O), .I_6(WIRE_SB_T1_EAST_SB_IN_B16_O), .I_7(WIRE_SB_T1_WEST_SB_IN_B16_O), .I_8(WIRE_SB_T2_NORTH_SB_IN_B16_O), .I_9(WIRE_SB_T2_SOUTH_SB_IN_B16_O), .O(CB_chain_in_O), .clk(clk), .config_config_addr({config_config_addr[31],config_config_addr[30],config_config_addr[29],config_config_addr[28],config_config_addr[27],config_config_addr[26],config_config_addr[25],config_config_addr[24]}), .config_config_data(config_config_data), .config_read(config_read), .config_write(FEATURE_AND_6_out), .read_config_data(CB_chain_in_read_config_data), .reset(reset));
CB_chain_wen_in CB_chain_wen_in(.I_0(WIRE_SB_T0_NORTH_SB_IN_B1_O), .I_1(WIRE_SB_T0_SOUTH_SB_IN_B1_O), .I_10(WIRE_SB_T2_EAST_SB_IN_B1_O), .I_11(WIRE_SB_T2_WEST_SB_IN_B1_O), .I_12(WIRE_SB_T3_NORTH_SB_IN_B1_O), .I_13(WIRE_SB_T3_SOUTH_SB_IN_B1_O), .I_14(WIRE_SB_T3_EAST_SB_IN_B1_O), .I_15(WIRE_SB_T3_WEST_SB_IN_B1_O), .I_16(WIRE_SB_T4_NORTH_SB_IN_B1_O), .I_17(WIRE_SB_T4_SOUTH_SB_IN_B1_O), .I_18(WIRE_SB_T4_EAST_SB_IN_B1_O), .I_19(WIRE_SB_T4_WEST_SB_IN_B1_O), .I_2(WIRE_SB_T0_EAST_SB_IN_B1_O), .I_3(WIRE_SB_T0_WEST_SB_IN_B1_O), .I_4(WIRE_SB_T1_NORTH_SB_IN_B1_O), .I_5(WIRE_SB_T1_SOUTH_SB_IN_B1_O), .I_6(WIRE_SB_T1_EAST_SB_IN_B1_O), .I_7(WIRE_SB_T1_WEST_SB_IN_B1_O), .I_8(WIRE_SB_T2_NORTH_SB_IN_B1_O), .I_9(WIRE_SB_T2_SOUTH_SB_IN_B1_O), .O(CB_chain_wen_in_O), .clk(clk), .config_config_addr({config_config_addr[31],config_config_addr[30],config_config_addr[29],config_config_addr[28],config_config_addr[27],config_config_addr[26],config_config_addr[25],config_config_addr[24]}), .config_config_data(config_config_data), .config_read(config_read), .config_write(FEATURE_AND_7_out), .read_config_data(CB_chain_wen_in_read_config_data), .reset(reset));
CB_data_in CB_data_in(.I_0(WIRE_SB_T0_NORTH_SB_IN_B16_O), .I_1(WIRE_SB_T0_SOUTH_SB_IN_B16_O), .I_10(WIRE_SB_T2_EAST_SB_IN_B16_O), .I_11(WIRE_SB_T2_WEST_SB_IN_B16_O), .I_12(WIRE_SB_T3_NORTH_SB_IN_B16_O), .I_13(WIRE_SB_T3_SOUTH_SB_IN_B16_O), .I_14(WIRE_SB_T3_EAST_SB_IN_B16_O), .I_15(WIRE_SB_T3_WEST_SB_IN_B16_O), .I_16(WIRE_SB_T4_NORTH_SB_IN_B16_O), .I_17(WIRE_SB_T4_SOUTH_SB_IN_B16_O), .I_18(WIRE_SB_T4_EAST_SB_IN_B16_O), .I_19(WIRE_SB_T4_WEST_SB_IN_B16_O), .I_2(WIRE_SB_T0_EAST_SB_IN_B16_O), .I_3(WIRE_SB_T0_WEST_SB_IN_B16_O), .I_4(WIRE_SB_T1_NORTH_SB_IN_B16_O), .I_5(WIRE_SB_T1_SOUTH_SB_IN_B16_O), .I_6(WIRE_SB_T1_EAST_SB_IN_B16_O), .I_7(WIRE_SB_T1_WEST_SB_IN_B16_O), .I_8(WIRE_SB_T2_NORTH_SB_IN_B16_O), .I_9(WIRE_SB_T2_SOUTH_SB_IN_B16_O), .O(CB_data_in_O), .clk(clk), .config_config_addr({config_config_addr[31],config_config_addr[30],config_config_addr[29],config_config_addr[28],config_config_addr[27],config_config_addr[26],config_config_addr[25],config_config_addr[24]}), .config_config_data(config_config_data), .config_read(config_read), .config_write(FEATURE_AND_8_out), .read_config_data(CB_data_in_read_config_data), .reset(reset));
CB_flush CB_flush(.I_0(WIRE_SB_T0_NORTH_SB_IN_B1_O), .I_1(WIRE_SB_T0_SOUTH_SB_IN_B1_O), .I_10(WIRE_SB_T2_EAST_SB_IN_B1_O), .I_11(WIRE_SB_T2_WEST_SB_IN_B1_O), .I_12(WIRE_SB_T3_NORTH_SB_IN_B1_O), .I_13(WIRE_SB_T3_SOUTH_SB_IN_B1_O), .I_14(WIRE_SB_T3_EAST_SB_IN_B1_O), .I_15(WIRE_SB_T3_WEST_SB_IN_B1_O), .I_16(WIRE_SB_T4_NORTH_SB_IN_B1_O), .I_17(WIRE_SB_T4_SOUTH_SB_IN_B1_O), .I_18(WIRE_SB_T4_EAST_SB_IN_B1_O), .I_19(WIRE_SB_T4_WEST_SB_IN_B1_O), .I_2(WIRE_SB_T0_EAST_SB_IN_B1_O), .I_3(WIRE_SB_T0_WEST_SB_IN_B1_O), .I_4(WIRE_SB_T1_NORTH_SB_IN_B1_O), .I_5(WIRE_SB_T1_SOUTH_SB_IN_B1_O), .I_6(WIRE_SB_T1_EAST_SB_IN_B1_O), .I_7(WIRE_SB_T1_WEST_SB_IN_B1_O), .I_8(WIRE_SB_T2_NORTH_SB_IN_B1_O), .I_9(WIRE_SB_T2_SOUTH_SB_IN_B1_O), .O(CB_flush_O), .clk(clk), .config_config_addr({config_config_addr[31],config_config_addr[30],config_config_addr[29],config_config_addr[28],config_config_addr[27],config_config_addr[26],config_config_addr[25],config_config_addr[24]}), .config_config_data(config_config_data), .config_read(config_read), .config_write(FEATURE_AND_9_out), .read_config_data(CB_flush_read_config_data), .reset(reset));
CB_ren_in CB_ren_in(.I_0(WIRE_SB_T0_NORTH_SB_IN_B1_O), .I_1(WIRE_SB_T0_SOUTH_SB_IN_B1_O), .I_10(WIRE_SB_T2_EAST_SB_IN_B1_O), .I_11(WIRE_SB_T2_WEST_SB_IN_B1_O), .I_12(WIRE_SB_T3_NORTH_SB_IN_B1_O), .I_13(WIRE_SB_T3_SOUTH_SB_IN_B1_O), .I_14(WIRE_SB_T3_EAST_SB_IN_B1_O), .I_15(WIRE_SB_T3_WEST_SB_IN_B1_O), .I_16(WIRE_SB_T4_NORTH_SB_IN_B1_O), .I_17(WIRE_SB_T4_SOUTH_SB_IN_B1_O), .I_18(WIRE_SB_T4_EAST_SB_IN_B1_O), .I_19(WIRE_SB_T4_WEST_SB_IN_B1_O), .I_2(WIRE_SB_T0_EAST_SB_IN_B1_O), .I_3(WIRE_SB_T0_WEST_SB_IN_B1_O), .I_4(WIRE_SB_T1_NORTH_SB_IN_B1_O), .I_5(WIRE_SB_T1_SOUTH_SB_IN_B1_O), .I_6(WIRE_SB_T1_EAST_SB_IN_B1_O), .I_7(WIRE_SB_T1_WEST_SB_IN_B1_O), .I_8(WIRE_SB_T2_NORTH_SB_IN_B1_O), .I_9(WIRE_SB_T2_SOUTH_SB_IN_B1_O), .O(CB_ren_in_O), .clk(clk), .config_config_addr({config_config_addr[31],config_config_addr[30],config_config_addr[29],config_config_addr[28],config_config_addr[27],config_config_addr[26],config_config_addr[25],config_config_addr[24]}), .config_config_data(config_config_data), .config_read(config_read), .config_write(FEATURE_AND_10_out), .read_config_data(CB_ren_in_read_config_data), .reset(reset));
CB_switch_db CB_switch_db(.I_0(WIRE_SB_T0_NORTH_SB_IN_B1_O), .I_1(WIRE_SB_T0_SOUTH_SB_IN_B1_O), .I_10(WIRE_SB_T2_EAST_SB_IN_B1_O), .I_11(WIRE_SB_T2_WEST_SB_IN_B1_O), .I_12(WIRE_SB_T3_NORTH_SB_IN_B1_O), .I_13(WIRE_SB_T3_SOUTH_SB_IN_B1_O), .I_14(WIRE_SB_T3_EAST_SB_IN_B1_O), .I_15(WIRE_SB_T3_WEST_SB_IN_B1_O), .I_16(WIRE_SB_T4_NORTH_SB_IN_B1_O), .I_17(WIRE_SB_T4_SOUTH_SB_IN_B1_O), .I_18(WIRE_SB_T4_EAST_SB_IN_B1_O), .I_19(WIRE_SB_T4_WEST_SB_IN_B1_O), .I_2(WIRE_SB_T0_EAST_SB_IN_B1_O), .I_3(WIRE_SB_T0_WEST_SB_IN_B1_O), .I_4(WIRE_SB_T1_NORTH_SB_IN_B1_O), .I_5(WIRE_SB_T1_SOUTH_SB_IN_B1_O), .I_6(WIRE_SB_T1_EAST_SB_IN_B1_O), .I_7(WIRE_SB_T1_WEST_SB_IN_B1_O), .I_8(WIRE_SB_T2_NORTH_SB_IN_B1_O), .I_9(WIRE_SB_T2_SOUTH_SB_IN_B1_O), .O(CB_switch_db_O), .clk(clk), .config_config_addr({config_config_addr[31],config_config_addr[30],config_config_addr[29],config_config_addr[28],config_config_addr[27],config_config_addr[26],config_config_addr[25],config_config_addr[24]}), .config_config_data(config_config_data), .config_read(config_read), .config_write(FEATURE_AND_11_out), .read_config_data(CB_switch_db_read_config_data), .reset(reset));
CB_wen_in CB_wen_in(.I_0(WIRE_SB_T0_NORTH_SB_IN_B1_O), .I_1(WIRE_SB_T0_SOUTH_SB_IN_B1_O), .I_10(WIRE_SB_T2_EAST_SB_IN_B1_O), .I_11(WIRE_SB_T2_WEST_SB_IN_B1_O), .I_12(WIRE_SB_T3_NORTH_SB_IN_B1_O), .I_13(WIRE_SB_T3_SOUTH_SB_IN_B1_O), .I_14(WIRE_SB_T3_EAST_SB_IN_B1_O), .I_15(WIRE_SB_T3_WEST_SB_IN_B1_O), .I_16(WIRE_SB_T4_NORTH_SB_IN_B1_O), .I_17(WIRE_SB_T4_SOUTH_SB_IN_B1_O), .I_18(WIRE_SB_T4_EAST_SB_IN_B1_O), .I_19(WIRE_SB_T4_WEST_SB_IN_B1_O), .I_2(WIRE_SB_T0_EAST_SB_IN_B1_O), .I_3(WIRE_SB_T0_WEST_SB_IN_B1_O), .I_4(WIRE_SB_T1_NORTH_SB_IN_B1_O), .I_5(WIRE_SB_T1_SOUTH_SB_IN_B1_O), .I_6(WIRE_SB_T1_EAST_SB_IN_B1_O), .I_7(WIRE_SB_T1_WEST_SB_IN_B1_O), .I_8(WIRE_SB_T2_NORTH_SB_IN_B1_O), .I_9(WIRE_SB_T2_SOUTH_SB_IN_B1_O), .O(CB_wen_in_O), .clk(clk), .config_config_addr({config_config_addr[31],config_config_addr[30],config_config_addr[29],config_config_addr[28],config_config_addr[27],config_config_addr[26],config_config_addr[25],config_config_addr[24]}), .config_config_data(config_config_data), .config_read(config_read), .config_write(FEATURE_AND_12_out), .read_config_data(CB_wen_in_read_config_data), .reset(reset));
Decode08 DECODE_FEATURE_0(.I({config_config_addr[23],config_config_addr[22],config_config_addr[21],config_config_addr[20],config_config_addr[19],config_config_addr[18],config_config_addr[17],config_config_addr[16]}), .O(DECODE_FEATURE_0_O));
Decode18 DECODE_FEATURE_1(.I({config_config_addr[23],config_config_addr[22],config_config_addr[21],config_config_addr[20],config_config_addr[19],config_config_addr[18],config_config_addr[17],config_config_addr[16]}), .O(DECODE_FEATURE_1_O));
Decode108 DECODE_FEATURE_10(.I({config_config_addr[23],config_config_addr[22],config_config_addr[21],config_config_addr[20],config_config_addr[19],config_config_addr[18],config_config_addr[17],config_config_addr[16]}), .O(DECODE_FEATURE_10_O));
Decode118 DECODE_FEATURE_11(.I({config_config_addr[23],config_config_addr[22],config_config_addr[21],config_config_addr[20],config_config_addr[19],config_config_addr[18],config_config_addr[17],config_config_addr[16]}), .O(DECODE_FEATURE_11_O));
Decode128 DECODE_FEATURE_12(.I({config_config_addr[23],config_config_addr[22],config_config_addr[21],config_config_addr[20],config_config_addr[19],config_config_addr[18],config_config_addr[17],config_config_addr[16]}), .O(DECODE_FEATURE_12_O));
Decode138 DECODE_FEATURE_13(.I({config_config_addr[23],config_config_addr[22],config_config_addr[21],config_config_addr[20],config_config_addr[19],config_config_addr[18],config_config_addr[17],config_config_addr[16]}), .O(DECODE_FEATURE_13_O));
Decode148 DECODE_FEATURE_14(.I({config_config_addr[23],config_config_addr[22],config_config_addr[21],config_config_addr[20],config_config_addr[19],config_config_addr[18],config_config_addr[17],config_config_addr[16]}), .O(DECODE_FEATURE_14_O));
Decode28 DECODE_FEATURE_2(.I({config_config_addr[23],config_config_addr[22],config_config_addr[21],config_config_addr[20],config_config_addr[19],config_config_addr[18],config_config_addr[17],config_config_addr[16]}), .O(DECODE_FEATURE_2_O));
Decode38 DECODE_FEATURE_3(.I({config_config_addr[23],config_config_addr[22],config_config_addr[21],config_config_addr[20],config_config_addr[19],config_config_addr[18],config_config_addr[17],config_config_addr[16]}), .O(DECODE_FEATURE_3_O));
Decode48 DECODE_FEATURE_4(.I({config_config_addr[23],config_config_addr[22],config_config_addr[21],config_config_addr[20],config_config_addr[19],config_config_addr[18],config_config_addr[17],config_config_addr[16]}), .O(DECODE_FEATURE_4_O));
Decode58 DECODE_FEATURE_5(.I({config_config_addr[23],config_config_addr[22],config_config_addr[21],config_config_addr[20],config_config_addr[19],config_config_addr[18],config_config_addr[17],config_config_addr[16]}), .O(DECODE_FEATURE_5_O));
Decode68 DECODE_FEATURE_6(.I({config_config_addr[23],config_config_addr[22],config_config_addr[21],config_config_addr[20],config_config_addr[19],config_config_addr[18],config_config_addr[17],config_config_addr[16]}), .O(DECODE_FEATURE_6_O));
Decode78 DECODE_FEATURE_7(.I({config_config_addr[23],config_config_addr[22],config_config_addr[21],config_config_addr[20],config_config_addr[19],config_config_addr[18],config_config_addr[17],config_config_addr[16]}), .O(DECODE_FEATURE_7_O));
Decode88 DECODE_FEATURE_8(.I({config_config_addr[23],config_config_addr[22],config_config_addr[21],config_config_addr[20],config_config_addr[19],config_config_addr[18],config_config_addr[17],config_config_addr[16]}), .O(DECODE_FEATURE_8_O));
Decode98 DECODE_FEATURE_9(.I({config_config_addr[23],config_config_addr[22],config_config_addr[21],config_config_addr[20],config_config_addr[19],config_config_addr[18],config_config_addr[17],config_config_addr[16]}), .O(DECODE_FEATURE_9_O));
corebit_and FEATURE_AND_0(.in0(DECODE_FEATURE_0_O), .in1(and_inst1_out), .out(FEATURE_AND_0_out));
corebit_and FEATURE_AND_1(.in0(DECODE_FEATURE_1_O), .in1(and_inst1_out), .out(FEATURE_AND_1_out));
corebit_and FEATURE_AND_10(.in0(DECODE_FEATURE_10_O), .in1(and_inst1_out), .out(FEATURE_AND_10_out));
corebit_and FEATURE_AND_11(.in0(DECODE_FEATURE_11_O), .in1(and_inst1_out), .out(FEATURE_AND_11_out));
corebit_and FEATURE_AND_12(.in0(DECODE_FEATURE_12_O), .in1(and_inst1_out), .out(FEATURE_AND_12_out));
corebit_and FEATURE_AND_13(.in0(DECODE_FEATURE_13_O), .in1(and_inst1_out), .out(FEATURE_AND_13_out));
corebit_and FEATURE_AND_14(.in0(DECODE_FEATURE_14_O), .in1(and_inst1_out), .out(FEATURE_AND_14_out));
corebit_and FEATURE_AND_2(.in0(DECODE_FEATURE_2_O), .in1(and_inst1_out), .out(FEATURE_AND_2_out));
corebit_and FEATURE_AND_3(.in0(DECODE_FEATURE_3_O), .in1(and_inst1_out), .out(FEATURE_AND_3_out));
corebit_and FEATURE_AND_4(.in0(DECODE_FEATURE_4_O), .in1(and_inst1_out), .out(FEATURE_AND_4_out));
corebit_and FEATURE_AND_5(.in0(DECODE_FEATURE_5_O), .in1(and_inst1_out), .out(FEATURE_AND_5_out));
corebit_and FEATURE_AND_6(.in0(DECODE_FEATURE_6_O), .in1(and_inst1_out), .out(FEATURE_AND_6_out));
corebit_and FEATURE_AND_7(.in0(DECODE_FEATURE_7_O), .in1(and_inst1_out), .out(FEATURE_AND_7_out));
corebit_and FEATURE_AND_8(.in0(DECODE_FEATURE_8_O), .in1(and_inst1_out), .out(FEATURE_AND_8_out));
corebit_and FEATURE_AND_9(.in0(DECODE_FEATURE_9_O), .in1(and_inst1_out), .out(FEATURE_AND_9_out));
MemCore MemCore_inst0(.addr_in(CB_addr_in_O), .almost_empty(MemCore_inst0_almost_empty), .almost_full(MemCore_inst0_almost_full), .chain_in(CB_chain_in_O), .chain_out(MemCore_inst0_chain_out), .chain_valid_out(MemCore_inst0_chain_valid_out), .chain_wen_in(CB_chain_wen_in_O), .clk(clk), .config_1_config_addr({config_config_addr[31],config_config_addr[30],config_config_addr[29],config_config_addr[28],config_config_addr[27],config_config_addr[26],config_config_addr[25],config_config_addr[24]}), .config_1_config_data(config_config_data), .config_1_read(config_read), .config_1_write(FEATURE_AND_1_out), .config_2_config_addr({config_config_addr[31],config_config_addr[30],config_config_addr[29],config_config_addr[28],config_config_addr[27],config_config_addr[26],config_config_addr[25],config_config_addr[24]}), .config_2_config_data(config_config_data), .config_2_read(config_read), .config_2_write(FEATURE_AND_2_out), .config_3_config_addr({config_config_addr[31],config_config_addr[30],config_config_addr[29],config_config_addr[28],config_config_addr[27],config_config_addr[26],config_config_addr[25],config_config_addr[24]}), .config_3_config_data(config_config_data), .config_3_read(config_read), .config_3_write(FEATURE_AND_3_out), .config_4_config_addr({config_config_addr[31],config_config_addr[30],config_config_addr[29],config_config_addr[28],config_config_addr[27],config_config_addr[26],config_config_addr[25],config_config_addr[24]}), .config_4_config_data(config_config_data), .config_4_read(config_read), .config_4_write(FEATURE_AND_4_out), .config_config_addr({config_config_addr[31],config_config_addr[30],config_config_addr[29],config_config_addr[28],config_config_addr[27],config_config_addr[26],config_config_addr[25],config_config_addr[24]}), .config_config_data(config_config_data), .config_en_0(DECODE_FEATURE_1_O), .config_en_1(DECODE_FEATURE_2_O), .config_en_2(DECODE_FEATURE_3_O), .config_en_3(DECODE_FEATURE_4_O), .config_read(config_read), .config_write(FEATURE_AND_0_out), .data_in(CB_data_in_O), .data_out(MemCore_inst0_data_out), .empty(MemCore_inst0_empty), .flush(CB_flush_O), .full(MemCore_inst0_full), .read_config_data(MemCore_inst0_read_config_data), .read_config_data_1(MemCore_inst0_read_config_data_1), .read_config_data_2(MemCore_inst0_read_config_data_2), .read_config_data_3(MemCore_inst0_read_config_data_3), .read_config_data_4(MemCore_inst0_read_config_data_4), .ren_in(CB_ren_in_O), .reset(reset), .stall(stall), .switch_db(CB_switch_db_O), .valid_out(MemCore_inst0_valid_out), .wen_in(CB_wen_in_O));
SB_ID0_5TRACKS_B16_MemCore SB_ID0_5TRACKS_B16_MemCore(.SB_T0_EAST_SB_IN_B16_0(SB_T0_EAST_SB_IN_B16_0), .SB_T0_EAST_SB_OUT_B16(SB_ID0_5TRACKS_B16_MemCore_SB_T0_EAST_SB_OUT_B16), .SB_T0_NORTH_SB_IN_B16_0(SB_T0_NORTH_SB_IN_B16_0), .SB_T0_NORTH_SB_OUT_B16(SB_ID0_5TRACKS_B16_MemCore_SB_T0_NORTH_SB_OUT_B16), .SB_T0_SOUTH_SB_IN_B16_0(SB_T0_SOUTH_SB_IN_B16_0), .SB_T0_SOUTH_SB_OUT_B16(SB_ID0_5TRACKS_B16_MemCore_SB_T0_SOUTH_SB_OUT_B16), .SB_T0_WEST_SB_IN_B16_0(SB_T0_WEST_SB_IN_B16_0), .SB_T0_WEST_SB_OUT_B16(SB_ID0_5TRACKS_B16_MemCore_SB_T0_WEST_SB_OUT_B16), .SB_T1_EAST_SB_IN_B16_0(SB_T1_EAST_SB_IN_B16_0), .SB_T1_EAST_SB_OUT_B16(SB_ID0_5TRACKS_B16_MemCore_SB_T1_EAST_SB_OUT_B16), .SB_T1_NORTH_SB_IN_B16_0(SB_T1_NORTH_SB_IN_B16_0), .SB_T1_NORTH_SB_OUT_B16(SB_ID0_5TRACKS_B16_MemCore_SB_T1_NORTH_SB_OUT_B16), .SB_T1_SOUTH_SB_IN_B16_0(SB_T1_SOUTH_SB_IN_B16_0), .SB_T1_SOUTH_SB_OUT_B16(SB_ID0_5TRACKS_B16_MemCore_SB_T1_SOUTH_SB_OUT_B16), .SB_T1_WEST_SB_IN_B16_0(SB_T1_WEST_SB_IN_B16_0), .SB_T1_WEST_SB_OUT_B16(SB_ID0_5TRACKS_B16_MemCore_SB_T1_WEST_SB_OUT_B16), .SB_T2_EAST_SB_IN_B16_0(SB_T2_EAST_SB_IN_B16_0), .SB_T2_EAST_SB_OUT_B16(SB_ID0_5TRACKS_B16_MemCore_SB_T2_EAST_SB_OUT_B16), .SB_T2_NORTH_SB_IN_B16_0(SB_T2_NORTH_SB_IN_B16_0), .SB_T2_NORTH_SB_OUT_B16(SB_ID0_5TRACKS_B16_MemCore_SB_T2_NORTH_SB_OUT_B16), .SB_T2_SOUTH_SB_IN_B16_0(SB_T2_SOUTH_SB_IN_B16_0), .SB_T2_SOUTH_SB_OUT_B16(SB_ID0_5TRACKS_B16_MemCore_SB_T2_SOUTH_SB_OUT_B16), .SB_T2_WEST_SB_IN_B16_0(SB_T2_WEST_SB_IN_B16_0), .SB_T2_WEST_SB_OUT_B16(SB_ID0_5TRACKS_B16_MemCore_SB_T2_WEST_SB_OUT_B16), .SB_T3_EAST_SB_IN_B16_0(SB_T3_EAST_SB_IN_B16_0), .SB_T3_EAST_SB_OUT_B16(SB_ID0_5TRACKS_B16_MemCore_SB_T3_EAST_SB_OUT_B16), .SB_T3_NORTH_SB_IN_B16_0(SB_T3_NORTH_SB_IN_B16_0), .SB_T3_NORTH_SB_OUT_B16(SB_ID0_5TRACKS_B16_MemCore_SB_T3_NORTH_SB_OUT_B16), .SB_T3_SOUTH_SB_IN_B16_0(SB_T3_SOUTH_SB_IN_B16_0), .SB_T3_SOUTH_SB_OUT_B16(SB_ID0_5TRACKS_B16_MemCore_SB_T3_SOUTH_SB_OUT_B16), .SB_T3_WEST_SB_IN_B16_0(SB_T3_WEST_SB_IN_B16_0), .SB_T3_WEST_SB_OUT_B16(SB_ID0_5TRACKS_B16_MemCore_SB_T3_WEST_SB_OUT_B16), .SB_T4_EAST_SB_IN_B16_0(SB_T4_EAST_SB_IN_B16_0), .SB_T4_EAST_SB_OUT_B16(SB_ID0_5TRACKS_B16_MemCore_SB_T4_EAST_SB_OUT_B16), .SB_T4_NORTH_SB_IN_B16_0(SB_T4_NORTH_SB_IN_B16_0), .SB_T4_NORTH_SB_OUT_B16(SB_ID0_5TRACKS_B16_MemCore_SB_T4_NORTH_SB_OUT_B16), .SB_T4_SOUTH_SB_IN_B16_0(SB_T4_SOUTH_SB_IN_B16_0), .SB_T4_SOUTH_SB_OUT_B16(SB_ID0_5TRACKS_B16_MemCore_SB_T4_SOUTH_SB_OUT_B16), .SB_T4_WEST_SB_IN_B16_0(SB_T4_WEST_SB_IN_B16_0), .SB_T4_WEST_SB_OUT_B16(SB_ID0_5TRACKS_B16_MemCore_SB_T4_WEST_SB_OUT_B16), .chain_out(MemCore_inst0_chain_out), .clk(clk), .config_config_addr({config_config_addr[31],config_config_addr[30],config_config_addr[29],config_config_addr[28],config_config_addr[27],config_config_addr[26],config_config_addr[25],config_config_addr[24]}), .config_config_data(config_config_data), .config_read(config_read), .config_write(FEATURE_AND_14_out), .data_out(MemCore_inst0_data_out), .read_config_data(SB_ID0_5TRACKS_B16_MemCore_read_config_data), .reset(reset), .stall(stall));
SB_ID0_5TRACKS_B1_MemCore SB_ID0_5TRACKS_B1_MemCore(.SB_T0_EAST_SB_IN_B1_0(SB_T0_EAST_SB_IN_B1_0), .SB_T0_EAST_SB_OUT_B1(SB_ID0_5TRACKS_B1_MemCore_SB_T0_EAST_SB_OUT_B1), .SB_T0_NORTH_SB_IN_B1_0(SB_T0_NORTH_SB_IN_B1_0), .SB_T0_NORTH_SB_OUT_B1(SB_ID0_5TRACKS_B1_MemCore_SB_T0_NORTH_SB_OUT_B1), .SB_T0_SOUTH_SB_IN_B1_0(SB_T0_SOUTH_SB_IN_B1_0), .SB_T0_SOUTH_SB_OUT_B1(SB_ID0_5TRACKS_B1_MemCore_SB_T0_SOUTH_SB_OUT_B1), .SB_T0_WEST_SB_IN_B1_0(SB_T0_WEST_SB_IN_B1_0), .SB_T0_WEST_SB_OUT_B1(SB_ID0_5TRACKS_B1_MemCore_SB_T0_WEST_SB_OUT_B1), .SB_T1_EAST_SB_IN_B1_0(SB_T1_EAST_SB_IN_B1_0), .SB_T1_EAST_SB_OUT_B1(SB_ID0_5TRACKS_B1_MemCore_SB_T1_EAST_SB_OUT_B1), .SB_T1_NORTH_SB_IN_B1_0(SB_T1_NORTH_SB_IN_B1_0), .SB_T1_NORTH_SB_OUT_B1(SB_ID0_5TRACKS_B1_MemCore_SB_T1_NORTH_SB_OUT_B1), .SB_T1_SOUTH_SB_IN_B1_0(SB_T1_SOUTH_SB_IN_B1_0), .SB_T1_SOUTH_SB_OUT_B1(SB_ID0_5TRACKS_B1_MemCore_SB_T1_SOUTH_SB_OUT_B1), .SB_T1_WEST_SB_IN_B1_0(SB_T1_WEST_SB_IN_B1_0), .SB_T1_WEST_SB_OUT_B1(SB_ID0_5TRACKS_B1_MemCore_SB_T1_WEST_SB_OUT_B1), .SB_T2_EAST_SB_IN_B1_0(SB_T2_EAST_SB_IN_B1_0), .SB_T2_EAST_SB_OUT_B1(SB_ID0_5TRACKS_B1_MemCore_SB_T2_EAST_SB_OUT_B1), .SB_T2_NORTH_SB_IN_B1_0(SB_T2_NORTH_SB_IN_B1_0), .SB_T2_NORTH_SB_OUT_B1(SB_ID0_5TRACKS_B1_MemCore_SB_T2_NORTH_SB_OUT_B1), .SB_T2_SOUTH_SB_IN_B1_0(SB_T2_SOUTH_SB_IN_B1_0), .SB_T2_SOUTH_SB_OUT_B1(SB_ID0_5TRACKS_B1_MemCore_SB_T2_SOUTH_SB_OUT_B1), .SB_T2_WEST_SB_IN_B1_0(SB_T2_WEST_SB_IN_B1_0), .SB_T2_WEST_SB_OUT_B1(SB_ID0_5TRACKS_B1_MemCore_SB_T2_WEST_SB_OUT_B1), .SB_T3_EAST_SB_IN_B1_0(SB_T3_EAST_SB_IN_B1_0), .SB_T3_EAST_SB_OUT_B1(SB_ID0_5TRACKS_B1_MemCore_SB_T3_EAST_SB_OUT_B1), .SB_T3_NORTH_SB_IN_B1_0(SB_T3_NORTH_SB_IN_B1_0), .SB_T3_NORTH_SB_OUT_B1(SB_ID0_5TRACKS_B1_MemCore_SB_T3_NORTH_SB_OUT_B1), .SB_T3_SOUTH_SB_IN_B1_0(SB_T3_SOUTH_SB_IN_B1_0), .SB_T3_SOUTH_SB_OUT_B1(SB_ID0_5TRACKS_B1_MemCore_SB_T3_SOUTH_SB_OUT_B1), .SB_T3_WEST_SB_IN_B1_0(SB_T3_WEST_SB_IN_B1_0), .SB_T3_WEST_SB_OUT_B1(SB_ID0_5TRACKS_B1_MemCore_SB_T3_WEST_SB_OUT_B1), .SB_T4_EAST_SB_IN_B1_0(SB_T4_EAST_SB_IN_B1_0), .SB_T4_EAST_SB_OUT_B1(SB_ID0_5TRACKS_B1_MemCore_SB_T4_EAST_SB_OUT_B1), .SB_T4_NORTH_SB_IN_B1_0(SB_T4_NORTH_SB_IN_B1_0), .SB_T4_NORTH_SB_OUT_B1(SB_ID0_5TRACKS_B1_MemCore_SB_T4_NORTH_SB_OUT_B1), .SB_T4_SOUTH_SB_IN_B1_0(SB_T4_SOUTH_SB_IN_B1_0), .SB_T4_SOUTH_SB_OUT_B1(SB_ID0_5TRACKS_B1_MemCore_SB_T4_SOUTH_SB_OUT_B1), .SB_T4_WEST_SB_IN_B1_0(SB_T4_WEST_SB_IN_B1_0), .SB_T4_WEST_SB_OUT_B1(SB_ID0_5TRACKS_B1_MemCore_SB_T4_WEST_SB_OUT_B1), .almost_empty(MemCore_inst0_almost_empty), .almost_full(MemCore_inst0_almost_full), .chain_valid_out(MemCore_inst0_chain_valid_out), .clk(clk), .config_config_addr({config_config_addr[31],config_config_addr[30],config_config_addr[29],config_config_addr[28],config_config_addr[27],config_config_addr[26],config_config_addr[25],config_config_addr[24]}), .config_config_data(config_config_data), .config_read(config_read), .config_write(FEATURE_AND_13_out), .empty(MemCore_inst0_empty), .full(MemCore_inst0_full), .read_config_data(SB_ID0_5TRACKS_B1_MemCore_read_config_data), .reset(reset), .stall(stall), .valid_out(MemCore_inst0_valid_out));
MuxWrapper_1_1 WIRE_SB_T0_EAST_SB_IN_B1(.I_0(SB_T0_EAST_SB_IN_B1_0), .O(WIRE_SB_T0_EAST_SB_IN_B1_O));
MuxWrapper_1_16 WIRE_SB_T0_EAST_SB_IN_B16(.I_0(SB_T0_EAST_SB_IN_B16_0), .O(WIRE_SB_T0_EAST_SB_IN_B16_O));
MuxWrapper_1_1 WIRE_SB_T0_NORTH_SB_IN_B1(.I_0(SB_T0_NORTH_SB_IN_B1_0), .O(WIRE_SB_T0_NORTH_SB_IN_B1_O));
MuxWrapper_1_16 WIRE_SB_T0_NORTH_SB_IN_B16(.I_0(SB_T0_NORTH_SB_IN_B16_0), .O(WIRE_SB_T0_NORTH_SB_IN_B16_O));
MuxWrapper_1_1 WIRE_SB_T0_SOUTH_SB_IN_B1(.I_0(SB_T0_SOUTH_SB_IN_B1_0), .O(WIRE_SB_T0_SOUTH_SB_IN_B1_O));
MuxWrapper_1_16 WIRE_SB_T0_SOUTH_SB_IN_B16(.I_0(SB_T0_SOUTH_SB_IN_B16_0), .O(WIRE_SB_T0_SOUTH_SB_IN_B16_O));
MuxWrapper_1_1 WIRE_SB_T0_WEST_SB_IN_B1(.I_0(SB_T0_WEST_SB_IN_B1_0), .O(WIRE_SB_T0_WEST_SB_IN_B1_O));
MuxWrapper_1_16 WIRE_SB_T0_WEST_SB_IN_B16(.I_0(SB_T0_WEST_SB_IN_B16_0), .O(WIRE_SB_T0_WEST_SB_IN_B16_O));
MuxWrapper_1_1 WIRE_SB_T1_EAST_SB_IN_B1(.I_0(SB_T1_EAST_SB_IN_B1_0), .O(WIRE_SB_T1_EAST_SB_IN_B1_O));
MuxWrapper_1_16 WIRE_SB_T1_EAST_SB_IN_B16(.I_0(SB_T1_EAST_SB_IN_B16_0), .O(WIRE_SB_T1_EAST_SB_IN_B16_O));
MuxWrapper_1_1 WIRE_SB_T1_NORTH_SB_IN_B1(.I_0(SB_T1_NORTH_SB_IN_B1_0), .O(WIRE_SB_T1_NORTH_SB_IN_B1_O));
MuxWrapper_1_16 WIRE_SB_T1_NORTH_SB_IN_B16(.I_0(SB_T1_NORTH_SB_IN_B16_0), .O(WIRE_SB_T1_NORTH_SB_IN_B16_O));
MuxWrapper_1_1 WIRE_SB_T1_SOUTH_SB_IN_B1(.I_0(SB_T1_SOUTH_SB_IN_B1_0), .O(WIRE_SB_T1_SOUTH_SB_IN_B1_O));
MuxWrapper_1_16 WIRE_SB_T1_SOUTH_SB_IN_B16(.I_0(SB_T1_SOUTH_SB_IN_B16_0), .O(WIRE_SB_T1_SOUTH_SB_IN_B16_O));
MuxWrapper_1_1 WIRE_SB_T1_WEST_SB_IN_B1(.I_0(SB_T1_WEST_SB_IN_B1_0), .O(WIRE_SB_T1_WEST_SB_IN_B1_O));
MuxWrapper_1_16 WIRE_SB_T1_WEST_SB_IN_B16(.I_0(SB_T1_WEST_SB_IN_B16_0), .O(WIRE_SB_T1_WEST_SB_IN_B16_O));
MuxWrapper_1_1 WIRE_SB_T2_EAST_SB_IN_B1(.I_0(SB_T2_EAST_SB_IN_B1_0), .O(WIRE_SB_T2_EAST_SB_IN_B1_O));
MuxWrapper_1_16 WIRE_SB_T2_EAST_SB_IN_B16(.I_0(SB_T2_EAST_SB_IN_B16_0), .O(WIRE_SB_T2_EAST_SB_IN_B16_O));
MuxWrapper_1_1 WIRE_SB_T2_NORTH_SB_IN_B1(.I_0(SB_T2_NORTH_SB_IN_B1_0), .O(WIRE_SB_T2_NORTH_SB_IN_B1_O));
MuxWrapper_1_16 WIRE_SB_T2_NORTH_SB_IN_B16(.I_0(SB_T2_NORTH_SB_IN_B16_0), .O(WIRE_SB_T2_NORTH_SB_IN_B16_O));
MuxWrapper_1_1 WIRE_SB_T2_SOUTH_SB_IN_B1(.I_0(SB_T2_SOUTH_SB_IN_B1_0), .O(WIRE_SB_T2_SOUTH_SB_IN_B1_O));
MuxWrapper_1_16 WIRE_SB_T2_SOUTH_SB_IN_B16(.I_0(SB_T2_SOUTH_SB_IN_B16_0), .O(WIRE_SB_T2_SOUTH_SB_IN_B16_O));
MuxWrapper_1_1 WIRE_SB_T2_WEST_SB_IN_B1(.I_0(SB_T2_WEST_SB_IN_B1_0), .O(WIRE_SB_T2_WEST_SB_IN_B1_O));
MuxWrapper_1_16 WIRE_SB_T2_WEST_SB_IN_B16(.I_0(SB_T2_WEST_SB_IN_B16_0), .O(WIRE_SB_T2_WEST_SB_IN_B16_O));
MuxWrapper_1_1 WIRE_SB_T3_EAST_SB_IN_B1(.I_0(SB_T3_EAST_SB_IN_B1_0), .O(WIRE_SB_T3_EAST_SB_IN_B1_O));
MuxWrapper_1_16 WIRE_SB_T3_EAST_SB_IN_B16(.I_0(SB_T3_EAST_SB_IN_B16_0), .O(WIRE_SB_T3_EAST_SB_IN_B16_O));
MuxWrapper_1_1 WIRE_SB_T3_NORTH_SB_IN_B1(.I_0(SB_T3_NORTH_SB_IN_B1_0), .O(WIRE_SB_T3_NORTH_SB_IN_B1_O));
MuxWrapper_1_16 WIRE_SB_T3_NORTH_SB_IN_B16(.I_0(SB_T3_NORTH_SB_IN_B16_0), .O(WIRE_SB_T3_NORTH_SB_IN_B16_O));
MuxWrapper_1_1 WIRE_SB_T3_SOUTH_SB_IN_B1(.I_0(SB_T3_SOUTH_SB_IN_B1_0), .O(WIRE_SB_T3_SOUTH_SB_IN_B1_O));
MuxWrapper_1_16 WIRE_SB_T3_SOUTH_SB_IN_B16(.I_0(SB_T3_SOUTH_SB_IN_B16_0), .O(WIRE_SB_T3_SOUTH_SB_IN_B16_O));
MuxWrapper_1_1 WIRE_SB_T3_WEST_SB_IN_B1(.I_0(SB_T3_WEST_SB_IN_B1_0), .O(WIRE_SB_T3_WEST_SB_IN_B1_O));
MuxWrapper_1_16 WIRE_SB_T3_WEST_SB_IN_B16(.I_0(SB_T3_WEST_SB_IN_B16_0), .O(WIRE_SB_T3_WEST_SB_IN_B16_O));
MuxWrapper_1_1 WIRE_SB_T4_EAST_SB_IN_B1(.I_0(SB_T4_EAST_SB_IN_B1_0), .O(WIRE_SB_T4_EAST_SB_IN_B1_O));
MuxWrapper_1_16 WIRE_SB_T4_EAST_SB_IN_B16(.I_0(SB_T4_EAST_SB_IN_B16_0), .O(WIRE_SB_T4_EAST_SB_IN_B16_O));
MuxWrapper_1_1 WIRE_SB_T4_NORTH_SB_IN_B1(.I_0(SB_T4_NORTH_SB_IN_B1_0), .O(WIRE_SB_T4_NORTH_SB_IN_B1_O));
MuxWrapper_1_16 WIRE_SB_T4_NORTH_SB_IN_B16(.I_0(SB_T4_NORTH_SB_IN_B16_0), .O(WIRE_SB_T4_NORTH_SB_IN_B16_O));
MuxWrapper_1_1 WIRE_SB_T4_SOUTH_SB_IN_B1(.I_0(SB_T4_SOUTH_SB_IN_B1_0), .O(WIRE_SB_T4_SOUTH_SB_IN_B1_O));
MuxWrapper_1_16 WIRE_SB_T4_SOUTH_SB_IN_B16(.I_0(SB_T4_SOUTH_SB_IN_B16_0), .O(WIRE_SB_T4_SOUTH_SB_IN_B16_O));
MuxWrapper_1_1 WIRE_SB_T4_WEST_SB_IN_B1(.I_0(SB_T4_WEST_SB_IN_B1_0), .O(WIRE_SB_T4_WEST_SB_IN_B1_O));
MuxWrapper_1_16 WIRE_SB_T4_WEST_SB_IN_B16(.I_0(SB_T4_WEST_SB_IN_B16_0), .O(WIRE_SB_T4_WEST_SB_IN_B16_O));
corebit_and and_inst0(.in0(coreir_eq_16_inst0_out), .in1(config_read[0]), .out(and_inst0_out));
corebit_and and_inst1(.in0(coreir_eq_16_inst0_out), .in1(config_write[0]), .out(and_inst1_out));
coreir_const #(.value(8'h00), .width(8)) const_0_8(.out(const_0_8_out));
coreir_const #(.value(9'h1ff), .width(9)) const_511_9(.out(const_511_9_out));
coreir_eq #(.width(16)) coreir_eq_16_inst0(.in0(tile_id), .in1({config_config_addr[15],config_config_addr[14],config_config_addr[13],config_config_addr[12],config_config_addr[11],config_config_addr[10],config_config_addr[9],config_config_addr[8],config_config_addr[7],config_config_addr[6],config_config_addr[5],config_config_addr[4],config_config_addr[3],config_config_addr[2],config_config_addr[1],config_config_addr[0]}), .out(coreir_eq_16_inst0_out));
coreir_or #(.width(32)) read_config_data_or_inst0(.in0(read_data_mux_O), .in1(read_config_data_in), .out(read_config_data_or_inst0_out));
MuxWithDefaultWrapper_15_32_8_0 read_data_mux(.EN(and_inst0_out), .I_0(MemCore_inst0_read_config_data), .I_1(MemCore_inst0_read_config_data_1), .I_10(CB_ren_in_read_config_data), .I_11(CB_switch_db_read_config_data), .I_12(CB_wen_in_read_config_data), .I_13(SB_ID0_5TRACKS_B1_MemCore_read_config_data), .I_14(SB_ID0_5TRACKS_B16_MemCore_read_config_data), .I_2(MemCore_inst0_read_config_data_2), .I_3(MemCore_inst0_read_config_data_3), .I_4(MemCore_inst0_read_config_data_4), .I_5(CB_addr_in_read_config_data), .I_6(CB_chain_in_read_config_data), .I_7(CB_chain_wen_in_read_config_data), .I_8(CB_data_in_read_config_data), .I_9(CB_flush_read_config_data), .O(read_data_mux_O), .S({config_config_addr[23],config_config_addr[22],config_config_addr[21],config_config_addr[20],config_config_addr[19],config_config_addr[18],config_config_addr[17],config_config_addr[16]}));
assign SB_T0_EAST_SB_OUT_B1 = SB_ID0_5TRACKS_B1_MemCore_SB_T0_EAST_SB_OUT_B1;
assign SB_T0_EAST_SB_OUT_B16 = SB_ID0_5TRACKS_B16_MemCore_SB_T0_EAST_SB_OUT_B16;
assign SB_T0_NORTH_SB_OUT_B1 = SB_ID0_5TRACKS_B1_MemCore_SB_T0_NORTH_SB_OUT_B1;
assign SB_T0_NORTH_SB_OUT_B16 = SB_ID0_5TRACKS_B16_MemCore_SB_T0_NORTH_SB_OUT_B16;
assign SB_T0_SOUTH_SB_OUT_B1 = SB_ID0_5TRACKS_B1_MemCore_SB_T0_SOUTH_SB_OUT_B1;
assign SB_T0_SOUTH_SB_OUT_B16 = SB_ID0_5TRACKS_B16_MemCore_SB_T0_SOUTH_SB_OUT_B16;
assign SB_T0_WEST_SB_OUT_B1 = SB_ID0_5TRACKS_B1_MemCore_SB_T0_WEST_SB_OUT_B1;
assign SB_T0_WEST_SB_OUT_B16 = SB_ID0_5TRACKS_B16_MemCore_SB_T0_WEST_SB_OUT_B16;
assign SB_T1_EAST_SB_OUT_B1 = SB_ID0_5TRACKS_B1_MemCore_SB_T1_EAST_SB_OUT_B1;
assign SB_T1_EAST_SB_OUT_B16 = SB_ID0_5TRACKS_B16_MemCore_SB_T1_EAST_SB_OUT_B16;
assign SB_T1_NORTH_SB_OUT_B1 = SB_ID0_5TRACKS_B1_MemCore_SB_T1_NORTH_SB_OUT_B1;
assign SB_T1_NORTH_SB_OUT_B16 = SB_ID0_5TRACKS_B16_MemCore_SB_T1_NORTH_SB_OUT_B16;
assign SB_T1_SOUTH_SB_OUT_B1 = SB_ID0_5TRACKS_B1_MemCore_SB_T1_SOUTH_SB_OUT_B1;
assign SB_T1_SOUTH_SB_OUT_B16 = SB_ID0_5TRACKS_B16_MemCore_SB_T1_SOUTH_SB_OUT_B16;
assign SB_T1_WEST_SB_OUT_B1 = SB_ID0_5TRACKS_B1_MemCore_SB_T1_WEST_SB_OUT_B1;
assign SB_T1_WEST_SB_OUT_B16 = SB_ID0_5TRACKS_B16_MemCore_SB_T1_WEST_SB_OUT_B16;
assign SB_T2_EAST_SB_OUT_B1 = SB_ID0_5TRACKS_B1_MemCore_SB_T2_EAST_SB_OUT_B1;
assign SB_T2_EAST_SB_OUT_B16 = SB_ID0_5TRACKS_B16_MemCore_SB_T2_EAST_SB_OUT_B16;
assign SB_T2_NORTH_SB_OUT_B1 = SB_ID0_5TRACKS_B1_MemCore_SB_T2_NORTH_SB_OUT_B1;
assign SB_T2_NORTH_SB_OUT_B16 = SB_ID0_5TRACKS_B16_MemCore_SB_T2_NORTH_SB_OUT_B16;
assign SB_T2_SOUTH_SB_OUT_B1 = SB_ID0_5TRACKS_B1_MemCore_SB_T2_SOUTH_SB_OUT_B1;
assign SB_T2_SOUTH_SB_OUT_B16 = SB_ID0_5TRACKS_B16_MemCore_SB_T2_SOUTH_SB_OUT_B16;
assign SB_T2_WEST_SB_OUT_B1 = SB_ID0_5TRACKS_B1_MemCore_SB_T2_WEST_SB_OUT_B1;
assign SB_T2_WEST_SB_OUT_B16 = SB_ID0_5TRACKS_B16_MemCore_SB_T2_WEST_SB_OUT_B16;
assign SB_T3_EAST_SB_OUT_B1 = SB_ID0_5TRACKS_B1_MemCore_SB_T3_EAST_SB_OUT_B1;
assign SB_T3_EAST_SB_OUT_B16 = SB_ID0_5TRACKS_B16_MemCore_SB_T3_EAST_SB_OUT_B16;
assign SB_T3_NORTH_SB_OUT_B1 = SB_ID0_5TRACKS_B1_MemCore_SB_T3_NORTH_SB_OUT_B1;
assign SB_T3_NORTH_SB_OUT_B16 = SB_ID0_5TRACKS_B16_MemCore_SB_T3_NORTH_SB_OUT_B16;
assign SB_T3_SOUTH_SB_OUT_B1 = SB_ID0_5TRACKS_B1_MemCore_SB_T3_SOUTH_SB_OUT_B1;
assign SB_T3_SOUTH_SB_OUT_B16 = SB_ID0_5TRACKS_B16_MemCore_SB_T3_SOUTH_SB_OUT_B16;
assign SB_T3_WEST_SB_OUT_B1 = SB_ID0_5TRACKS_B1_MemCore_SB_T3_WEST_SB_OUT_B1;
assign SB_T3_WEST_SB_OUT_B16 = SB_ID0_5TRACKS_B16_MemCore_SB_T3_WEST_SB_OUT_B16;
assign SB_T4_EAST_SB_OUT_B1 = SB_ID0_5TRACKS_B1_MemCore_SB_T4_EAST_SB_OUT_B1;
assign SB_T4_EAST_SB_OUT_B16 = SB_ID0_5TRACKS_B16_MemCore_SB_T4_EAST_SB_OUT_B16;
assign SB_T4_NORTH_SB_OUT_B1 = SB_ID0_5TRACKS_B1_MemCore_SB_T4_NORTH_SB_OUT_B1;
assign SB_T4_NORTH_SB_OUT_B16 = SB_ID0_5TRACKS_B16_MemCore_SB_T4_NORTH_SB_OUT_B16;
assign SB_T4_SOUTH_SB_OUT_B1 = SB_ID0_5TRACKS_B1_MemCore_SB_T4_SOUTH_SB_OUT_B1;
assign SB_T4_SOUTH_SB_OUT_B16 = SB_ID0_5TRACKS_B16_MemCore_SB_T4_SOUTH_SB_OUT_B16;
assign SB_T4_WEST_SB_OUT_B1 = SB_ID0_5TRACKS_B1_MemCore_SB_T4_WEST_SB_OUT_B1;
assign SB_T4_WEST_SB_OUT_B16 = SB_ID0_5TRACKS_B16_MemCore_SB_T4_WEST_SB_OUT_B16;
assign clk_out = clk_pass_through;
assign clk_pass_through_out = clk_pass_through;
assign config_out_config_addr = config_config_addr;
assign config_out_config_data = config_config_data;
assign config_out_read = config_read;
assign config_out_write = config_write;
assign hi = const_511_9_out;
assign lo = const_0_8_out;
assign read_config_data = read_config_data_or_inst0_out;
assign reset_out = reset;
assign stall_out = stall;
endmodule

module Interconnect (input clk, input [31:0] config_0_config_addr, input [31:0] config_0_config_data, input [0:0] config_0_read, input [0:0] config_0_write, input [15:0] glb2io_16_X00_Y00, input [15:0] glb2io_16_X01_Y00, input [15:0] glb2io_16_X02_Y00, input [15:0] glb2io_16_X03_Y00, input [0:0] glb2io_1_X00_Y00, input [0:0] glb2io_1_X01_Y00, input [0:0] glb2io_1_X02_Y00, input [0:0] glb2io_1_X03_Y00, output [15:0] io2glb_16_X00_Y00, output [15:0] io2glb_16_X01_Y00, output [15:0] io2glb_16_X02_Y00, output [15:0] io2glb_16_X03_Y00, output [0:0] io2glb_1_X00_Y00, output [0:0] io2glb_1_X01_Y00, output [0:0] io2glb_1_X02_Y00, output [0:0] io2glb_1_X03_Y00, output [31:0] read_config_data, input reset, input [0:0] stall);
wire [0:0] Tile_X00_Y00_io2f_1;
wire [15:0] Tile_X00_Y00_io2f_16;
wire [0:0] Tile_X00_Y00_io2glb_1;
wire [15:0] Tile_X00_Y00_io2glb_16;
wire [0:0] Tile_X00_Y01_SB_T0_EAST_SB_OUT_B1;
wire [15:0] Tile_X00_Y01_SB_T0_EAST_SB_OUT_B16;
wire [0:0] Tile_X00_Y01_SB_T0_NORTH_SB_OUT_B1;
wire [15:0] Tile_X00_Y01_SB_T0_NORTH_SB_OUT_B16;
wire [0:0] Tile_X00_Y01_SB_T0_SOUTH_SB_OUT_B1;
wire [15:0] Tile_X00_Y01_SB_T0_SOUTH_SB_OUT_B16;
wire [0:0] Tile_X00_Y01_SB_T0_WEST_SB_OUT_B1;
wire [15:0] Tile_X00_Y01_SB_T0_WEST_SB_OUT_B16;
wire [0:0] Tile_X00_Y01_SB_T1_EAST_SB_OUT_B1;
wire [15:0] Tile_X00_Y01_SB_T1_EAST_SB_OUT_B16;
wire [0:0] Tile_X00_Y01_SB_T1_NORTH_SB_OUT_B1;
wire [15:0] Tile_X00_Y01_SB_T1_NORTH_SB_OUT_B16;
wire [0:0] Tile_X00_Y01_SB_T1_SOUTH_SB_OUT_B1;
wire [15:0] Tile_X00_Y01_SB_T1_SOUTH_SB_OUT_B16;
wire [0:0] Tile_X00_Y01_SB_T1_WEST_SB_OUT_B1;
wire [15:0] Tile_X00_Y01_SB_T1_WEST_SB_OUT_B16;
wire [0:0] Tile_X00_Y01_SB_T2_EAST_SB_OUT_B1;
wire [15:0] Tile_X00_Y01_SB_T2_EAST_SB_OUT_B16;
wire [0:0] Tile_X00_Y01_SB_T2_NORTH_SB_OUT_B1;
wire [15:0] Tile_X00_Y01_SB_T2_NORTH_SB_OUT_B16;
wire [0:0] Tile_X00_Y01_SB_T2_SOUTH_SB_OUT_B1;
wire [15:0] Tile_X00_Y01_SB_T2_SOUTH_SB_OUT_B16;
wire [0:0] Tile_X00_Y01_SB_T2_WEST_SB_OUT_B1;
wire [15:0] Tile_X00_Y01_SB_T2_WEST_SB_OUT_B16;
wire [0:0] Tile_X00_Y01_SB_T3_EAST_SB_OUT_B1;
wire [15:0] Tile_X00_Y01_SB_T3_EAST_SB_OUT_B16;
wire [0:0] Tile_X00_Y01_SB_T3_NORTH_SB_OUT_B1;
wire [15:0] Tile_X00_Y01_SB_T3_NORTH_SB_OUT_B16;
wire [0:0] Tile_X00_Y01_SB_T3_SOUTH_SB_OUT_B1;
wire [15:0] Tile_X00_Y01_SB_T3_SOUTH_SB_OUT_B16;
wire [0:0] Tile_X00_Y01_SB_T3_WEST_SB_OUT_B1;
wire [15:0] Tile_X00_Y01_SB_T3_WEST_SB_OUT_B16;
wire [0:0] Tile_X00_Y01_SB_T4_EAST_SB_OUT_B1;
wire [15:0] Tile_X00_Y01_SB_T4_EAST_SB_OUT_B16;
wire [0:0] Tile_X00_Y01_SB_T4_NORTH_SB_OUT_B1;
wire [15:0] Tile_X00_Y01_SB_T4_NORTH_SB_OUT_B16;
wire [0:0] Tile_X00_Y01_SB_T4_SOUTH_SB_OUT_B1;
wire [15:0] Tile_X00_Y01_SB_T4_SOUTH_SB_OUT_B16;
wire [0:0] Tile_X00_Y01_SB_T4_WEST_SB_OUT_B1;
wire [15:0] Tile_X00_Y01_SB_T4_WEST_SB_OUT_B16;
wire Tile_X00_Y01_clk_out;
wire Tile_X00_Y01_clk_pass_through_out;
wire [31:0] Tile_X00_Y01_config_out_config_addr;
wire [31:0] Tile_X00_Y01_config_out_config_data;
wire [0:0] Tile_X00_Y01_config_out_read;
wire [0:0] Tile_X00_Y01_config_out_write;
wire [8:0] Tile_X00_Y01_hi;
wire [7:0] Tile_X00_Y01_lo;
wire [31:0] Tile_X00_Y01_read_config_data;
wire Tile_X00_Y01_reset_out;
wire [0:0] Tile_X00_Y01_stall_out;
wire [0:0] Tile_X00_Y02_SB_T0_EAST_SB_OUT_B1;
wire [15:0] Tile_X00_Y02_SB_T0_EAST_SB_OUT_B16;
wire [0:0] Tile_X00_Y02_SB_T0_NORTH_SB_OUT_B1;
wire [15:0] Tile_X00_Y02_SB_T0_NORTH_SB_OUT_B16;
wire [0:0] Tile_X00_Y02_SB_T0_SOUTH_SB_OUT_B1;
wire [15:0] Tile_X00_Y02_SB_T0_SOUTH_SB_OUT_B16;
wire [0:0] Tile_X00_Y02_SB_T0_WEST_SB_OUT_B1;
wire [15:0] Tile_X00_Y02_SB_T0_WEST_SB_OUT_B16;
wire [0:0] Tile_X00_Y02_SB_T1_EAST_SB_OUT_B1;
wire [15:0] Tile_X00_Y02_SB_T1_EAST_SB_OUT_B16;
wire [0:0] Tile_X00_Y02_SB_T1_NORTH_SB_OUT_B1;
wire [15:0] Tile_X00_Y02_SB_T1_NORTH_SB_OUT_B16;
wire [0:0] Tile_X00_Y02_SB_T1_SOUTH_SB_OUT_B1;
wire [15:0] Tile_X00_Y02_SB_T1_SOUTH_SB_OUT_B16;
wire [0:0] Tile_X00_Y02_SB_T1_WEST_SB_OUT_B1;
wire [15:0] Tile_X00_Y02_SB_T1_WEST_SB_OUT_B16;
wire [0:0] Tile_X00_Y02_SB_T2_EAST_SB_OUT_B1;
wire [15:0] Tile_X00_Y02_SB_T2_EAST_SB_OUT_B16;
wire [0:0] Tile_X00_Y02_SB_T2_NORTH_SB_OUT_B1;
wire [15:0] Tile_X00_Y02_SB_T2_NORTH_SB_OUT_B16;
wire [0:0] Tile_X00_Y02_SB_T2_SOUTH_SB_OUT_B1;
wire [15:0] Tile_X00_Y02_SB_T2_SOUTH_SB_OUT_B16;
wire [0:0] Tile_X00_Y02_SB_T2_WEST_SB_OUT_B1;
wire [15:0] Tile_X00_Y02_SB_T2_WEST_SB_OUT_B16;
wire [0:0] Tile_X00_Y02_SB_T3_EAST_SB_OUT_B1;
wire [15:0] Tile_X00_Y02_SB_T3_EAST_SB_OUT_B16;
wire [0:0] Tile_X00_Y02_SB_T3_NORTH_SB_OUT_B1;
wire [15:0] Tile_X00_Y02_SB_T3_NORTH_SB_OUT_B16;
wire [0:0] Tile_X00_Y02_SB_T3_SOUTH_SB_OUT_B1;
wire [15:0] Tile_X00_Y02_SB_T3_SOUTH_SB_OUT_B16;
wire [0:0] Tile_X00_Y02_SB_T3_WEST_SB_OUT_B1;
wire [15:0] Tile_X00_Y02_SB_T3_WEST_SB_OUT_B16;
wire [0:0] Tile_X00_Y02_SB_T4_EAST_SB_OUT_B1;
wire [15:0] Tile_X00_Y02_SB_T4_EAST_SB_OUT_B16;
wire [0:0] Tile_X00_Y02_SB_T4_NORTH_SB_OUT_B1;
wire [15:0] Tile_X00_Y02_SB_T4_NORTH_SB_OUT_B16;
wire [0:0] Tile_X00_Y02_SB_T4_SOUTH_SB_OUT_B1;
wire [15:0] Tile_X00_Y02_SB_T4_SOUTH_SB_OUT_B16;
wire [0:0] Tile_X00_Y02_SB_T4_WEST_SB_OUT_B1;
wire [15:0] Tile_X00_Y02_SB_T4_WEST_SB_OUT_B16;
wire Tile_X00_Y02_clk_out;
wire Tile_X00_Y02_clk_pass_through_out;
wire [31:0] Tile_X00_Y02_config_out_config_addr;
wire [31:0] Tile_X00_Y02_config_out_config_data;
wire [0:0] Tile_X00_Y02_config_out_read;
wire [0:0] Tile_X00_Y02_config_out_write;
wire [8:0] Tile_X00_Y02_hi;
wire [7:0] Tile_X00_Y02_lo;
wire [31:0] Tile_X00_Y02_read_config_data;
wire Tile_X00_Y02_reset_out;
wire [0:0] Tile_X00_Y02_stall_out;
wire [0:0] Tile_X01_Y00_io2f_1;
wire [15:0] Tile_X01_Y00_io2f_16;
wire [0:0] Tile_X01_Y00_io2glb_1;
wire [15:0] Tile_X01_Y00_io2glb_16;
wire [0:0] Tile_X01_Y01_SB_T0_EAST_SB_OUT_B1;
wire [15:0] Tile_X01_Y01_SB_T0_EAST_SB_OUT_B16;
wire [0:0] Tile_X01_Y01_SB_T0_NORTH_SB_OUT_B1;
wire [15:0] Tile_X01_Y01_SB_T0_NORTH_SB_OUT_B16;
wire [0:0] Tile_X01_Y01_SB_T0_SOUTH_SB_OUT_B1;
wire [15:0] Tile_X01_Y01_SB_T0_SOUTH_SB_OUT_B16;
wire [0:0] Tile_X01_Y01_SB_T0_WEST_SB_OUT_B1;
wire [15:0] Tile_X01_Y01_SB_T0_WEST_SB_OUT_B16;
wire [0:0] Tile_X01_Y01_SB_T1_EAST_SB_OUT_B1;
wire [15:0] Tile_X01_Y01_SB_T1_EAST_SB_OUT_B16;
wire [0:0] Tile_X01_Y01_SB_T1_NORTH_SB_OUT_B1;
wire [15:0] Tile_X01_Y01_SB_T1_NORTH_SB_OUT_B16;
wire [0:0] Tile_X01_Y01_SB_T1_SOUTH_SB_OUT_B1;
wire [15:0] Tile_X01_Y01_SB_T1_SOUTH_SB_OUT_B16;
wire [0:0] Tile_X01_Y01_SB_T1_WEST_SB_OUT_B1;
wire [15:0] Tile_X01_Y01_SB_T1_WEST_SB_OUT_B16;
wire [0:0] Tile_X01_Y01_SB_T2_EAST_SB_OUT_B1;
wire [15:0] Tile_X01_Y01_SB_T2_EAST_SB_OUT_B16;
wire [0:0] Tile_X01_Y01_SB_T2_NORTH_SB_OUT_B1;
wire [15:0] Tile_X01_Y01_SB_T2_NORTH_SB_OUT_B16;
wire [0:0] Tile_X01_Y01_SB_T2_SOUTH_SB_OUT_B1;
wire [15:0] Tile_X01_Y01_SB_T2_SOUTH_SB_OUT_B16;
wire [0:0] Tile_X01_Y01_SB_T2_WEST_SB_OUT_B1;
wire [15:0] Tile_X01_Y01_SB_T2_WEST_SB_OUT_B16;
wire [0:0] Tile_X01_Y01_SB_T3_EAST_SB_OUT_B1;
wire [15:0] Tile_X01_Y01_SB_T3_EAST_SB_OUT_B16;
wire [0:0] Tile_X01_Y01_SB_T3_NORTH_SB_OUT_B1;
wire [15:0] Tile_X01_Y01_SB_T3_NORTH_SB_OUT_B16;
wire [0:0] Tile_X01_Y01_SB_T3_SOUTH_SB_OUT_B1;
wire [15:0] Tile_X01_Y01_SB_T3_SOUTH_SB_OUT_B16;
wire [0:0] Tile_X01_Y01_SB_T3_WEST_SB_OUT_B1;
wire [15:0] Tile_X01_Y01_SB_T3_WEST_SB_OUT_B16;
wire [0:0] Tile_X01_Y01_SB_T4_EAST_SB_OUT_B1;
wire [15:0] Tile_X01_Y01_SB_T4_EAST_SB_OUT_B16;
wire [0:0] Tile_X01_Y01_SB_T4_NORTH_SB_OUT_B1;
wire [15:0] Tile_X01_Y01_SB_T4_NORTH_SB_OUT_B16;
wire [0:0] Tile_X01_Y01_SB_T4_SOUTH_SB_OUT_B1;
wire [15:0] Tile_X01_Y01_SB_T4_SOUTH_SB_OUT_B16;
wire [0:0] Tile_X01_Y01_SB_T4_WEST_SB_OUT_B1;
wire [15:0] Tile_X01_Y01_SB_T4_WEST_SB_OUT_B16;
wire Tile_X01_Y01_clk_out;
wire Tile_X01_Y01_clk_pass_through_out;
wire [31:0] Tile_X01_Y01_config_out_config_addr;
wire [31:0] Tile_X01_Y01_config_out_config_data;
wire [0:0] Tile_X01_Y01_config_out_read;
wire [0:0] Tile_X01_Y01_config_out_write;
wire [8:0] Tile_X01_Y01_hi;
wire [7:0] Tile_X01_Y01_lo;
wire [31:0] Tile_X01_Y01_read_config_data;
wire Tile_X01_Y01_reset_out;
wire [0:0] Tile_X01_Y01_stall_out;
wire [0:0] Tile_X01_Y02_SB_T0_EAST_SB_OUT_B1;
wire [15:0] Tile_X01_Y02_SB_T0_EAST_SB_OUT_B16;
wire [0:0] Tile_X01_Y02_SB_T0_NORTH_SB_OUT_B1;
wire [15:0] Tile_X01_Y02_SB_T0_NORTH_SB_OUT_B16;
wire [0:0] Tile_X01_Y02_SB_T0_SOUTH_SB_OUT_B1;
wire [15:0] Tile_X01_Y02_SB_T0_SOUTH_SB_OUT_B16;
wire [0:0] Tile_X01_Y02_SB_T0_WEST_SB_OUT_B1;
wire [15:0] Tile_X01_Y02_SB_T0_WEST_SB_OUT_B16;
wire [0:0] Tile_X01_Y02_SB_T1_EAST_SB_OUT_B1;
wire [15:0] Tile_X01_Y02_SB_T1_EAST_SB_OUT_B16;
wire [0:0] Tile_X01_Y02_SB_T1_NORTH_SB_OUT_B1;
wire [15:0] Tile_X01_Y02_SB_T1_NORTH_SB_OUT_B16;
wire [0:0] Tile_X01_Y02_SB_T1_SOUTH_SB_OUT_B1;
wire [15:0] Tile_X01_Y02_SB_T1_SOUTH_SB_OUT_B16;
wire [0:0] Tile_X01_Y02_SB_T1_WEST_SB_OUT_B1;
wire [15:0] Tile_X01_Y02_SB_T1_WEST_SB_OUT_B16;
wire [0:0] Tile_X01_Y02_SB_T2_EAST_SB_OUT_B1;
wire [15:0] Tile_X01_Y02_SB_T2_EAST_SB_OUT_B16;
wire [0:0] Tile_X01_Y02_SB_T2_NORTH_SB_OUT_B1;
wire [15:0] Tile_X01_Y02_SB_T2_NORTH_SB_OUT_B16;
wire [0:0] Tile_X01_Y02_SB_T2_SOUTH_SB_OUT_B1;
wire [15:0] Tile_X01_Y02_SB_T2_SOUTH_SB_OUT_B16;
wire [0:0] Tile_X01_Y02_SB_T2_WEST_SB_OUT_B1;
wire [15:0] Tile_X01_Y02_SB_T2_WEST_SB_OUT_B16;
wire [0:0] Tile_X01_Y02_SB_T3_EAST_SB_OUT_B1;
wire [15:0] Tile_X01_Y02_SB_T3_EAST_SB_OUT_B16;
wire [0:0] Tile_X01_Y02_SB_T3_NORTH_SB_OUT_B1;
wire [15:0] Tile_X01_Y02_SB_T3_NORTH_SB_OUT_B16;
wire [0:0] Tile_X01_Y02_SB_T3_SOUTH_SB_OUT_B1;
wire [15:0] Tile_X01_Y02_SB_T3_SOUTH_SB_OUT_B16;
wire [0:0] Tile_X01_Y02_SB_T3_WEST_SB_OUT_B1;
wire [15:0] Tile_X01_Y02_SB_T3_WEST_SB_OUT_B16;
wire [0:0] Tile_X01_Y02_SB_T4_EAST_SB_OUT_B1;
wire [15:0] Tile_X01_Y02_SB_T4_EAST_SB_OUT_B16;
wire [0:0] Tile_X01_Y02_SB_T4_NORTH_SB_OUT_B1;
wire [15:0] Tile_X01_Y02_SB_T4_NORTH_SB_OUT_B16;
wire [0:0] Tile_X01_Y02_SB_T4_SOUTH_SB_OUT_B1;
wire [15:0] Tile_X01_Y02_SB_T4_SOUTH_SB_OUT_B16;
wire [0:0] Tile_X01_Y02_SB_T4_WEST_SB_OUT_B1;
wire [15:0] Tile_X01_Y02_SB_T4_WEST_SB_OUT_B16;
wire Tile_X01_Y02_clk_out;
wire Tile_X01_Y02_clk_pass_through_out;
wire [31:0] Tile_X01_Y02_config_out_config_addr;
wire [31:0] Tile_X01_Y02_config_out_config_data;
wire [0:0] Tile_X01_Y02_config_out_read;
wire [0:0] Tile_X01_Y02_config_out_write;
wire [8:0] Tile_X01_Y02_hi;
wire [7:0] Tile_X01_Y02_lo;
wire [31:0] Tile_X01_Y02_read_config_data;
wire Tile_X01_Y02_reset_out;
wire [0:0] Tile_X01_Y02_stall_out;
wire [0:0] Tile_X02_Y00_io2f_1;
wire [15:0] Tile_X02_Y00_io2f_16;
wire [0:0] Tile_X02_Y00_io2glb_1;
wire [15:0] Tile_X02_Y00_io2glb_16;
wire [0:0] Tile_X02_Y01_SB_T0_EAST_SB_OUT_B1;
wire [15:0] Tile_X02_Y01_SB_T0_EAST_SB_OUT_B16;
wire [0:0] Tile_X02_Y01_SB_T0_NORTH_SB_OUT_B1;
wire [15:0] Tile_X02_Y01_SB_T0_NORTH_SB_OUT_B16;
wire [0:0] Tile_X02_Y01_SB_T0_SOUTH_SB_OUT_B1;
wire [15:0] Tile_X02_Y01_SB_T0_SOUTH_SB_OUT_B16;
wire [0:0] Tile_X02_Y01_SB_T0_WEST_SB_OUT_B1;
wire [15:0] Tile_X02_Y01_SB_T0_WEST_SB_OUT_B16;
wire [0:0] Tile_X02_Y01_SB_T1_EAST_SB_OUT_B1;
wire [15:0] Tile_X02_Y01_SB_T1_EAST_SB_OUT_B16;
wire [0:0] Tile_X02_Y01_SB_T1_NORTH_SB_OUT_B1;
wire [15:0] Tile_X02_Y01_SB_T1_NORTH_SB_OUT_B16;
wire [0:0] Tile_X02_Y01_SB_T1_SOUTH_SB_OUT_B1;
wire [15:0] Tile_X02_Y01_SB_T1_SOUTH_SB_OUT_B16;
wire [0:0] Tile_X02_Y01_SB_T1_WEST_SB_OUT_B1;
wire [15:0] Tile_X02_Y01_SB_T1_WEST_SB_OUT_B16;
wire [0:0] Tile_X02_Y01_SB_T2_EAST_SB_OUT_B1;
wire [15:0] Tile_X02_Y01_SB_T2_EAST_SB_OUT_B16;
wire [0:0] Tile_X02_Y01_SB_T2_NORTH_SB_OUT_B1;
wire [15:0] Tile_X02_Y01_SB_T2_NORTH_SB_OUT_B16;
wire [0:0] Tile_X02_Y01_SB_T2_SOUTH_SB_OUT_B1;
wire [15:0] Tile_X02_Y01_SB_T2_SOUTH_SB_OUT_B16;
wire [0:0] Tile_X02_Y01_SB_T2_WEST_SB_OUT_B1;
wire [15:0] Tile_X02_Y01_SB_T2_WEST_SB_OUT_B16;
wire [0:0] Tile_X02_Y01_SB_T3_EAST_SB_OUT_B1;
wire [15:0] Tile_X02_Y01_SB_T3_EAST_SB_OUT_B16;
wire [0:0] Tile_X02_Y01_SB_T3_NORTH_SB_OUT_B1;
wire [15:0] Tile_X02_Y01_SB_T3_NORTH_SB_OUT_B16;
wire [0:0] Tile_X02_Y01_SB_T3_SOUTH_SB_OUT_B1;
wire [15:0] Tile_X02_Y01_SB_T3_SOUTH_SB_OUT_B16;
wire [0:0] Tile_X02_Y01_SB_T3_WEST_SB_OUT_B1;
wire [15:0] Tile_X02_Y01_SB_T3_WEST_SB_OUT_B16;
wire [0:0] Tile_X02_Y01_SB_T4_EAST_SB_OUT_B1;
wire [15:0] Tile_X02_Y01_SB_T4_EAST_SB_OUT_B16;
wire [0:0] Tile_X02_Y01_SB_T4_NORTH_SB_OUT_B1;
wire [15:0] Tile_X02_Y01_SB_T4_NORTH_SB_OUT_B16;
wire [0:0] Tile_X02_Y01_SB_T4_SOUTH_SB_OUT_B1;
wire [15:0] Tile_X02_Y01_SB_T4_SOUTH_SB_OUT_B16;
wire [0:0] Tile_X02_Y01_SB_T4_WEST_SB_OUT_B1;
wire [15:0] Tile_X02_Y01_SB_T4_WEST_SB_OUT_B16;
wire Tile_X02_Y01_clk_out;
wire Tile_X02_Y01_clk_pass_through_out;
wire [31:0] Tile_X02_Y01_config_out_config_addr;
wire [31:0] Tile_X02_Y01_config_out_config_data;
wire [0:0] Tile_X02_Y01_config_out_read;
wire [0:0] Tile_X02_Y01_config_out_write;
wire [8:0] Tile_X02_Y01_hi;
wire [7:0] Tile_X02_Y01_lo;
wire [31:0] Tile_X02_Y01_read_config_data;
wire Tile_X02_Y01_reset_out;
wire [0:0] Tile_X02_Y01_stall_out;
wire [0:0] Tile_X02_Y02_SB_T0_EAST_SB_OUT_B1;
wire [15:0] Tile_X02_Y02_SB_T0_EAST_SB_OUT_B16;
wire [0:0] Tile_X02_Y02_SB_T0_NORTH_SB_OUT_B1;
wire [15:0] Tile_X02_Y02_SB_T0_NORTH_SB_OUT_B16;
wire [0:0] Tile_X02_Y02_SB_T0_SOUTH_SB_OUT_B1;
wire [15:0] Tile_X02_Y02_SB_T0_SOUTH_SB_OUT_B16;
wire [0:0] Tile_X02_Y02_SB_T0_WEST_SB_OUT_B1;
wire [15:0] Tile_X02_Y02_SB_T0_WEST_SB_OUT_B16;
wire [0:0] Tile_X02_Y02_SB_T1_EAST_SB_OUT_B1;
wire [15:0] Tile_X02_Y02_SB_T1_EAST_SB_OUT_B16;
wire [0:0] Tile_X02_Y02_SB_T1_NORTH_SB_OUT_B1;
wire [15:0] Tile_X02_Y02_SB_T1_NORTH_SB_OUT_B16;
wire [0:0] Tile_X02_Y02_SB_T1_SOUTH_SB_OUT_B1;
wire [15:0] Tile_X02_Y02_SB_T1_SOUTH_SB_OUT_B16;
wire [0:0] Tile_X02_Y02_SB_T1_WEST_SB_OUT_B1;
wire [15:0] Tile_X02_Y02_SB_T1_WEST_SB_OUT_B16;
wire [0:0] Tile_X02_Y02_SB_T2_EAST_SB_OUT_B1;
wire [15:0] Tile_X02_Y02_SB_T2_EAST_SB_OUT_B16;
wire [0:0] Tile_X02_Y02_SB_T2_NORTH_SB_OUT_B1;
wire [15:0] Tile_X02_Y02_SB_T2_NORTH_SB_OUT_B16;
wire [0:0] Tile_X02_Y02_SB_T2_SOUTH_SB_OUT_B1;
wire [15:0] Tile_X02_Y02_SB_T2_SOUTH_SB_OUT_B16;
wire [0:0] Tile_X02_Y02_SB_T2_WEST_SB_OUT_B1;
wire [15:0] Tile_X02_Y02_SB_T2_WEST_SB_OUT_B16;
wire [0:0] Tile_X02_Y02_SB_T3_EAST_SB_OUT_B1;
wire [15:0] Tile_X02_Y02_SB_T3_EAST_SB_OUT_B16;
wire [0:0] Tile_X02_Y02_SB_T3_NORTH_SB_OUT_B1;
wire [15:0] Tile_X02_Y02_SB_T3_NORTH_SB_OUT_B16;
wire [0:0] Tile_X02_Y02_SB_T3_SOUTH_SB_OUT_B1;
wire [15:0] Tile_X02_Y02_SB_T3_SOUTH_SB_OUT_B16;
wire [0:0] Tile_X02_Y02_SB_T3_WEST_SB_OUT_B1;
wire [15:0] Tile_X02_Y02_SB_T3_WEST_SB_OUT_B16;
wire [0:0] Tile_X02_Y02_SB_T4_EAST_SB_OUT_B1;
wire [15:0] Tile_X02_Y02_SB_T4_EAST_SB_OUT_B16;
wire [0:0] Tile_X02_Y02_SB_T4_NORTH_SB_OUT_B1;
wire [15:0] Tile_X02_Y02_SB_T4_NORTH_SB_OUT_B16;
wire [0:0] Tile_X02_Y02_SB_T4_SOUTH_SB_OUT_B1;
wire [15:0] Tile_X02_Y02_SB_T4_SOUTH_SB_OUT_B16;
wire [0:0] Tile_X02_Y02_SB_T4_WEST_SB_OUT_B1;
wire [15:0] Tile_X02_Y02_SB_T4_WEST_SB_OUT_B16;
wire Tile_X02_Y02_clk_out;
wire Tile_X02_Y02_clk_pass_through_out;
wire [31:0] Tile_X02_Y02_config_out_config_addr;
wire [31:0] Tile_X02_Y02_config_out_config_data;
wire [0:0] Tile_X02_Y02_config_out_read;
wire [0:0] Tile_X02_Y02_config_out_write;
wire [8:0] Tile_X02_Y02_hi;
wire [7:0] Tile_X02_Y02_lo;
wire [31:0] Tile_X02_Y02_read_config_data;
wire Tile_X02_Y02_reset_out;
wire [0:0] Tile_X02_Y02_stall_out;
wire [0:0] Tile_X03_Y00_io2f_1;
wire [15:0] Tile_X03_Y00_io2f_16;
wire [0:0] Tile_X03_Y00_io2glb_1;
wire [15:0] Tile_X03_Y00_io2glb_16;
wire [0:0] Tile_X03_Y01_SB_T0_EAST_SB_OUT_B1;
wire [15:0] Tile_X03_Y01_SB_T0_EAST_SB_OUT_B16;
wire [0:0] Tile_X03_Y01_SB_T0_NORTH_SB_OUT_B1;
wire [15:0] Tile_X03_Y01_SB_T0_NORTH_SB_OUT_B16;
wire [0:0] Tile_X03_Y01_SB_T0_SOUTH_SB_OUT_B1;
wire [15:0] Tile_X03_Y01_SB_T0_SOUTH_SB_OUT_B16;
wire [0:0] Tile_X03_Y01_SB_T0_WEST_SB_OUT_B1;
wire [15:0] Tile_X03_Y01_SB_T0_WEST_SB_OUT_B16;
wire [0:0] Tile_X03_Y01_SB_T1_EAST_SB_OUT_B1;
wire [15:0] Tile_X03_Y01_SB_T1_EAST_SB_OUT_B16;
wire [0:0] Tile_X03_Y01_SB_T1_NORTH_SB_OUT_B1;
wire [15:0] Tile_X03_Y01_SB_T1_NORTH_SB_OUT_B16;
wire [0:0] Tile_X03_Y01_SB_T1_SOUTH_SB_OUT_B1;
wire [15:0] Tile_X03_Y01_SB_T1_SOUTH_SB_OUT_B16;
wire [0:0] Tile_X03_Y01_SB_T1_WEST_SB_OUT_B1;
wire [15:0] Tile_X03_Y01_SB_T1_WEST_SB_OUT_B16;
wire [0:0] Tile_X03_Y01_SB_T2_EAST_SB_OUT_B1;
wire [15:0] Tile_X03_Y01_SB_T2_EAST_SB_OUT_B16;
wire [0:0] Tile_X03_Y01_SB_T2_NORTH_SB_OUT_B1;
wire [15:0] Tile_X03_Y01_SB_T2_NORTH_SB_OUT_B16;
wire [0:0] Tile_X03_Y01_SB_T2_SOUTH_SB_OUT_B1;
wire [15:0] Tile_X03_Y01_SB_T2_SOUTH_SB_OUT_B16;
wire [0:0] Tile_X03_Y01_SB_T2_WEST_SB_OUT_B1;
wire [15:0] Tile_X03_Y01_SB_T2_WEST_SB_OUT_B16;
wire [0:0] Tile_X03_Y01_SB_T3_EAST_SB_OUT_B1;
wire [15:0] Tile_X03_Y01_SB_T3_EAST_SB_OUT_B16;
wire [0:0] Tile_X03_Y01_SB_T3_NORTH_SB_OUT_B1;
wire [15:0] Tile_X03_Y01_SB_T3_NORTH_SB_OUT_B16;
wire [0:0] Tile_X03_Y01_SB_T3_SOUTH_SB_OUT_B1;
wire [15:0] Tile_X03_Y01_SB_T3_SOUTH_SB_OUT_B16;
wire [0:0] Tile_X03_Y01_SB_T3_WEST_SB_OUT_B1;
wire [15:0] Tile_X03_Y01_SB_T3_WEST_SB_OUT_B16;
wire [0:0] Tile_X03_Y01_SB_T4_EAST_SB_OUT_B1;
wire [15:0] Tile_X03_Y01_SB_T4_EAST_SB_OUT_B16;
wire [0:0] Tile_X03_Y01_SB_T4_NORTH_SB_OUT_B1;
wire [15:0] Tile_X03_Y01_SB_T4_NORTH_SB_OUT_B16;
wire [0:0] Tile_X03_Y01_SB_T4_SOUTH_SB_OUT_B1;
wire [15:0] Tile_X03_Y01_SB_T4_SOUTH_SB_OUT_B16;
wire [0:0] Tile_X03_Y01_SB_T4_WEST_SB_OUT_B1;
wire [15:0] Tile_X03_Y01_SB_T4_WEST_SB_OUT_B16;
wire Tile_X03_Y01_clk_out;
wire Tile_X03_Y01_clk_pass_through_out;
wire [31:0] Tile_X03_Y01_config_out_config_addr;
wire [31:0] Tile_X03_Y01_config_out_config_data;
wire [0:0] Tile_X03_Y01_config_out_read;
wire [0:0] Tile_X03_Y01_config_out_write;
wire [8:0] Tile_X03_Y01_hi;
wire [7:0] Tile_X03_Y01_lo;
wire [31:0] Tile_X03_Y01_read_config_data;
wire Tile_X03_Y01_reset_out;
wire [0:0] Tile_X03_Y01_stall_out;
wire [0:0] Tile_X03_Y02_SB_T0_EAST_SB_OUT_B1;
wire [15:0] Tile_X03_Y02_SB_T0_EAST_SB_OUT_B16;
wire [0:0] Tile_X03_Y02_SB_T0_NORTH_SB_OUT_B1;
wire [15:0] Tile_X03_Y02_SB_T0_NORTH_SB_OUT_B16;
wire [0:0] Tile_X03_Y02_SB_T0_SOUTH_SB_OUT_B1;
wire [15:0] Tile_X03_Y02_SB_T0_SOUTH_SB_OUT_B16;
wire [0:0] Tile_X03_Y02_SB_T0_WEST_SB_OUT_B1;
wire [15:0] Tile_X03_Y02_SB_T0_WEST_SB_OUT_B16;
wire [0:0] Tile_X03_Y02_SB_T1_EAST_SB_OUT_B1;
wire [15:0] Tile_X03_Y02_SB_T1_EAST_SB_OUT_B16;
wire [0:0] Tile_X03_Y02_SB_T1_NORTH_SB_OUT_B1;
wire [15:0] Tile_X03_Y02_SB_T1_NORTH_SB_OUT_B16;
wire [0:0] Tile_X03_Y02_SB_T1_SOUTH_SB_OUT_B1;
wire [15:0] Tile_X03_Y02_SB_T1_SOUTH_SB_OUT_B16;
wire [0:0] Tile_X03_Y02_SB_T1_WEST_SB_OUT_B1;
wire [15:0] Tile_X03_Y02_SB_T1_WEST_SB_OUT_B16;
wire [0:0] Tile_X03_Y02_SB_T2_EAST_SB_OUT_B1;
wire [15:0] Tile_X03_Y02_SB_T2_EAST_SB_OUT_B16;
wire [0:0] Tile_X03_Y02_SB_T2_NORTH_SB_OUT_B1;
wire [15:0] Tile_X03_Y02_SB_T2_NORTH_SB_OUT_B16;
wire [0:0] Tile_X03_Y02_SB_T2_SOUTH_SB_OUT_B1;
wire [15:0] Tile_X03_Y02_SB_T2_SOUTH_SB_OUT_B16;
wire [0:0] Tile_X03_Y02_SB_T2_WEST_SB_OUT_B1;
wire [15:0] Tile_X03_Y02_SB_T2_WEST_SB_OUT_B16;
wire [0:0] Tile_X03_Y02_SB_T3_EAST_SB_OUT_B1;
wire [15:0] Tile_X03_Y02_SB_T3_EAST_SB_OUT_B16;
wire [0:0] Tile_X03_Y02_SB_T3_NORTH_SB_OUT_B1;
wire [15:0] Tile_X03_Y02_SB_T3_NORTH_SB_OUT_B16;
wire [0:0] Tile_X03_Y02_SB_T3_SOUTH_SB_OUT_B1;
wire [15:0] Tile_X03_Y02_SB_T3_SOUTH_SB_OUT_B16;
wire [0:0] Tile_X03_Y02_SB_T3_WEST_SB_OUT_B1;
wire [15:0] Tile_X03_Y02_SB_T3_WEST_SB_OUT_B16;
wire [0:0] Tile_X03_Y02_SB_T4_EAST_SB_OUT_B1;
wire [15:0] Tile_X03_Y02_SB_T4_EAST_SB_OUT_B16;
wire [0:0] Tile_X03_Y02_SB_T4_NORTH_SB_OUT_B1;
wire [15:0] Tile_X03_Y02_SB_T4_NORTH_SB_OUT_B16;
wire [0:0] Tile_X03_Y02_SB_T4_SOUTH_SB_OUT_B1;
wire [15:0] Tile_X03_Y02_SB_T4_SOUTH_SB_OUT_B16;
wire [0:0] Tile_X03_Y02_SB_T4_WEST_SB_OUT_B1;
wire [15:0] Tile_X03_Y02_SB_T4_WEST_SB_OUT_B16;
wire Tile_X03_Y02_clk_out;
wire Tile_X03_Y02_clk_pass_through_out;
wire [31:0] Tile_X03_Y02_config_out_config_addr;
wire [31:0] Tile_X03_Y02_config_out_config_data;
wire [0:0] Tile_X03_Y02_config_out_read;
wire [0:0] Tile_X03_Y02_config_out_write;
wire [8:0] Tile_X03_Y02_hi;
wire [7:0] Tile_X03_Y02_lo;
wire [31:0] Tile_X03_Y02_read_config_data;
wire Tile_X03_Y02_reset_out;
wire [0:0] Tile_X03_Y02_stall_out;
wire [0:0] const_0_1_out;
wire [15:0] const_0_16_out;
wire [31:0] const_0_32_out;
wire [15:0] const_256_16_out;
wire [15:0] const_512_16_out;
wire [15:0] const_768_16_out;
wire [31:0] read_config_data_or_final_O;
Tile_io_core Tile_X00_Y00(.f2io_16_0(Tile_X00_Y01_SB_T0_NORTH_SB_OUT_B16), .f2io_1_0(Tile_X00_Y01_SB_T0_NORTH_SB_OUT_B1), .glb2io_1(glb2io_1_X00_Y00), .glb2io_16(glb2io_16_X00_Y00), .io2f_1(Tile_X00_Y00_io2f_1), .io2f_16(Tile_X00_Y00_io2f_16), .io2glb_1(Tile_X00_Y00_io2glb_1), .io2glb_16(Tile_X00_Y00_io2glb_16), .tile_id(const_0_16_out));
Tile_PE Tile_X00_Y01(.SB_T0_EAST_SB_IN_B16_0(Tile_X01_Y01_SB_T0_WEST_SB_OUT_B16), .SB_T0_EAST_SB_IN_B1_0(Tile_X01_Y01_SB_T0_WEST_SB_OUT_B1), .SB_T0_EAST_SB_OUT_B1(Tile_X00_Y01_SB_T0_EAST_SB_OUT_B1), .SB_T0_EAST_SB_OUT_B16(Tile_X00_Y01_SB_T0_EAST_SB_OUT_B16), .SB_T0_NORTH_SB_IN_B16_0(Tile_X00_Y00_io2f_16), .SB_T0_NORTH_SB_IN_B1_0(Tile_X00_Y00_io2f_1), .SB_T0_NORTH_SB_OUT_B1(Tile_X00_Y01_SB_T0_NORTH_SB_OUT_B1), .SB_T0_NORTH_SB_OUT_B16(Tile_X00_Y01_SB_T0_NORTH_SB_OUT_B16), .SB_T0_SOUTH_SB_IN_B16_0(Tile_X00_Y02_SB_T0_NORTH_SB_OUT_B16), .SB_T0_SOUTH_SB_IN_B1_0(Tile_X00_Y02_SB_T0_NORTH_SB_OUT_B1), .SB_T0_SOUTH_SB_OUT_B1(Tile_X00_Y01_SB_T0_SOUTH_SB_OUT_B1), .SB_T0_SOUTH_SB_OUT_B16(Tile_X00_Y01_SB_T0_SOUTH_SB_OUT_B16), .SB_T0_WEST_SB_IN_B16_0(const_0_16_out), .SB_T0_WEST_SB_IN_B1_0(const_0_1_out), .SB_T0_WEST_SB_OUT_B1(Tile_X00_Y01_SB_T0_WEST_SB_OUT_B1), .SB_T0_WEST_SB_OUT_B16(Tile_X00_Y01_SB_T0_WEST_SB_OUT_B16), .SB_T1_EAST_SB_IN_B16_0(Tile_X01_Y01_SB_T1_WEST_SB_OUT_B16), .SB_T1_EAST_SB_IN_B1_0(Tile_X01_Y01_SB_T1_WEST_SB_OUT_B1), .SB_T1_EAST_SB_OUT_B1(Tile_X00_Y01_SB_T1_EAST_SB_OUT_B1), .SB_T1_EAST_SB_OUT_B16(Tile_X00_Y01_SB_T1_EAST_SB_OUT_B16), .SB_T1_NORTH_SB_IN_B16_0(Tile_X00_Y00_io2f_16), .SB_T1_NORTH_SB_IN_B1_0(Tile_X00_Y00_io2f_1), .SB_T1_NORTH_SB_OUT_B1(Tile_X00_Y01_SB_T1_NORTH_SB_OUT_B1), .SB_T1_NORTH_SB_OUT_B16(Tile_X00_Y01_SB_T1_NORTH_SB_OUT_B16), .SB_T1_SOUTH_SB_IN_B16_0(Tile_X00_Y02_SB_T1_NORTH_SB_OUT_B16), .SB_T1_SOUTH_SB_IN_B1_0(Tile_X00_Y02_SB_T1_NORTH_SB_OUT_B1), .SB_T1_SOUTH_SB_OUT_B1(Tile_X00_Y01_SB_T1_SOUTH_SB_OUT_B1), .SB_T1_SOUTH_SB_OUT_B16(Tile_X00_Y01_SB_T1_SOUTH_SB_OUT_B16), .SB_T1_WEST_SB_IN_B16_0(const_0_16_out), .SB_T1_WEST_SB_IN_B1_0(const_0_1_out), .SB_T1_WEST_SB_OUT_B1(Tile_X00_Y01_SB_T1_WEST_SB_OUT_B1), .SB_T1_WEST_SB_OUT_B16(Tile_X00_Y01_SB_T1_WEST_SB_OUT_B16), .SB_T2_EAST_SB_IN_B16_0(Tile_X01_Y01_SB_T2_WEST_SB_OUT_B16), .SB_T2_EAST_SB_IN_B1_0(Tile_X01_Y01_SB_T2_WEST_SB_OUT_B1), .SB_T2_EAST_SB_OUT_B1(Tile_X00_Y01_SB_T2_EAST_SB_OUT_B1), .SB_T2_EAST_SB_OUT_B16(Tile_X00_Y01_SB_T2_EAST_SB_OUT_B16), .SB_T2_NORTH_SB_IN_B16_0(Tile_X00_Y00_io2f_16), .SB_T2_NORTH_SB_IN_B1_0(Tile_X00_Y00_io2f_1), .SB_T2_NORTH_SB_OUT_B1(Tile_X00_Y01_SB_T2_NORTH_SB_OUT_B1), .SB_T2_NORTH_SB_OUT_B16(Tile_X00_Y01_SB_T2_NORTH_SB_OUT_B16), .SB_T2_SOUTH_SB_IN_B16_0(Tile_X00_Y02_SB_T2_NORTH_SB_OUT_B16), .SB_T2_SOUTH_SB_IN_B1_0(Tile_X00_Y02_SB_T2_NORTH_SB_OUT_B1), .SB_T2_SOUTH_SB_OUT_B1(Tile_X00_Y01_SB_T2_SOUTH_SB_OUT_B1), .SB_T2_SOUTH_SB_OUT_B16(Tile_X00_Y01_SB_T2_SOUTH_SB_OUT_B16), .SB_T2_WEST_SB_IN_B16_0(const_0_16_out), .SB_T2_WEST_SB_IN_B1_0(const_0_1_out), .SB_T2_WEST_SB_OUT_B1(Tile_X00_Y01_SB_T2_WEST_SB_OUT_B1), .SB_T2_WEST_SB_OUT_B16(Tile_X00_Y01_SB_T2_WEST_SB_OUT_B16), .SB_T3_EAST_SB_IN_B16_0(Tile_X01_Y01_SB_T3_WEST_SB_OUT_B16), .SB_T3_EAST_SB_IN_B1_0(Tile_X01_Y01_SB_T3_WEST_SB_OUT_B1), .SB_T3_EAST_SB_OUT_B1(Tile_X00_Y01_SB_T3_EAST_SB_OUT_B1), .SB_T3_EAST_SB_OUT_B16(Tile_X00_Y01_SB_T3_EAST_SB_OUT_B16), .SB_T3_NORTH_SB_IN_B16_0(Tile_X00_Y00_io2f_16), .SB_T3_NORTH_SB_IN_B1_0(Tile_X00_Y00_io2f_1), .SB_T3_NORTH_SB_OUT_B1(Tile_X00_Y01_SB_T3_NORTH_SB_OUT_B1), .SB_T3_NORTH_SB_OUT_B16(Tile_X00_Y01_SB_T3_NORTH_SB_OUT_B16), .SB_T3_SOUTH_SB_IN_B16_0(Tile_X00_Y02_SB_T3_NORTH_SB_OUT_B16), .SB_T3_SOUTH_SB_IN_B1_0(Tile_X00_Y02_SB_T3_NORTH_SB_OUT_B1), .SB_T3_SOUTH_SB_OUT_B1(Tile_X00_Y01_SB_T3_SOUTH_SB_OUT_B1), .SB_T3_SOUTH_SB_OUT_B16(Tile_X00_Y01_SB_T3_SOUTH_SB_OUT_B16), .SB_T3_WEST_SB_IN_B16_0(const_0_16_out), .SB_T3_WEST_SB_IN_B1_0(const_0_1_out), .SB_T3_WEST_SB_OUT_B1(Tile_X00_Y01_SB_T3_WEST_SB_OUT_B1), .SB_T3_WEST_SB_OUT_B16(Tile_X00_Y01_SB_T3_WEST_SB_OUT_B16), .SB_T4_EAST_SB_IN_B16_0(Tile_X01_Y01_SB_T4_WEST_SB_OUT_B16), .SB_T4_EAST_SB_IN_B1_0(Tile_X01_Y01_SB_T4_WEST_SB_OUT_B1), .SB_T4_EAST_SB_OUT_B1(Tile_X00_Y01_SB_T4_EAST_SB_OUT_B1), .SB_T4_EAST_SB_OUT_B16(Tile_X00_Y01_SB_T4_EAST_SB_OUT_B16), .SB_T4_NORTH_SB_IN_B16_0(Tile_X00_Y00_io2f_16), .SB_T4_NORTH_SB_IN_B1_0(Tile_X00_Y00_io2f_1), .SB_T4_NORTH_SB_OUT_B1(Tile_X00_Y01_SB_T4_NORTH_SB_OUT_B1), .SB_T4_NORTH_SB_OUT_B16(Tile_X00_Y01_SB_T4_NORTH_SB_OUT_B16), .SB_T4_SOUTH_SB_IN_B16_0(Tile_X00_Y02_SB_T4_NORTH_SB_OUT_B16), .SB_T4_SOUTH_SB_IN_B1_0(Tile_X00_Y02_SB_T4_NORTH_SB_OUT_B1), .SB_T4_SOUTH_SB_OUT_B1(Tile_X00_Y01_SB_T4_SOUTH_SB_OUT_B1), .SB_T4_SOUTH_SB_OUT_B16(Tile_X00_Y01_SB_T4_SOUTH_SB_OUT_B16), .SB_T4_WEST_SB_IN_B16_0(const_0_16_out), .SB_T4_WEST_SB_IN_B1_0(const_0_1_out), .SB_T4_WEST_SB_OUT_B1(Tile_X00_Y01_SB_T4_WEST_SB_OUT_B1), .SB_T4_WEST_SB_OUT_B16(Tile_X00_Y01_SB_T4_WEST_SB_OUT_B16), .clk(clk), .clk_out(Tile_X00_Y01_clk_out), .clk_pass_through(clk), .clk_pass_through_out(Tile_X00_Y01_clk_pass_through_out), .config_config_addr(config_0_config_addr), .config_config_data(config_0_config_data), .config_out_config_addr(Tile_X00_Y01_config_out_config_addr), .config_out_config_data(Tile_X00_Y01_config_out_config_data), .config_out_read(Tile_X00_Y01_config_out_read), .config_out_write(Tile_X00_Y01_config_out_write), .config_read(config_0_read), .config_write(config_0_write), .hi(Tile_X00_Y01_hi), .lo(Tile_X00_Y01_lo), .read_config_data(Tile_X00_Y01_read_config_data), .read_config_data_in(const_0_32_out), .reset(reset), .reset_out(Tile_X00_Y01_reset_out), .stall(stall), .stall_out(Tile_X00_Y01_stall_out), .tile_id({Tile_X00_Y01_lo[7],Tile_X00_Y01_lo[7],Tile_X00_Y01_lo[6],Tile_X00_Y01_lo[6],Tile_X00_Y01_lo[5],Tile_X00_Y01_lo[5],Tile_X00_Y01_lo[4],Tile_X00_Y01_lo[4],Tile_X00_Y01_lo[3],Tile_X00_Y01_lo[3],Tile_X00_Y01_lo[2],Tile_X00_Y01_lo[2],Tile_X00_Y01_lo[1],Tile_X00_Y01_lo[1],Tile_X00_Y01_lo[0],Tile_X00_Y01_hi[0]}));
Tile_PE Tile_X00_Y02(.SB_T0_EAST_SB_IN_B16_0(Tile_X01_Y02_SB_T0_WEST_SB_OUT_B16), .SB_T0_EAST_SB_IN_B1_0(Tile_X01_Y02_SB_T0_WEST_SB_OUT_B1), .SB_T0_EAST_SB_OUT_B1(Tile_X00_Y02_SB_T0_EAST_SB_OUT_B1), .SB_T0_EAST_SB_OUT_B16(Tile_X00_Y02_SB_T0_EAST_SB_OUT_B16), .SB_T0_NORTH_SB_IN_B16_0(Tile_X00_Y01_SB_T0_SOUTH_SB_OUT_B16), .SB_T0_NORTH_SB_IN_B1_0(Tile_X00_Y01_SB_T0_SOUTH_SB_OUT_B1), .SB_T0_NORTH_SB_OUT_B1(Tile_X00_Y02_SB_T0_NORTH_SB_OUT_B1), .SB_T0_NORTH_SB_OUT_B16(Tile_X00_Y02_SB_T0_NORTH_SB_OUT_B16), .SB_T0_SOUTH_SB_IN_B16_0(const_0_16_out), .SB_T0_SOUTH_SB_IN_B1_0(const_0_1_out), .SB_T0_SOUTH_SB_OUT_B1(Tile_X00_Y02_SB_T0_SOUTH_SB_OUT_B1), .SB_T0_SOUTH_SB_OUT_B16(Tile_X00_Y02_SB_T0_SOUTH_SB_OUT_B16), .SB_T0_WEST_SB_IN_B16_0(const_0_16_out), .SB_T0_WEST_SB_IN_B1_0(const_0_1_out), .SB_T0_WEST_SB_OUT_B1(Tile_X00_Y02_SB_T0_WEST_SB_OUT_B1), .SB_T0_WEST_SB_OUT_B16(Tile_X00_Y02_SB_T0_WEST_SB_OUT_B16), .SB_T1_EAST_SB_IN_B16_0(Tile_X01_Y02_SB_T1_WEST_SB_OUT_B16), .SB_T1_EAST_SB_IN_B1_0(Tile_X01_Y02_SB_T1_WEST_SB_OUT_B1), .SB_T1_EAST_SB_OUT_B1(Tile_X00_Y02_SB_T1_EAST_SB_OUT_B1), .SB_T1_EAST_SB_OUT_B16(Tile_X00_Y02_SB_T1_EAST_SB_OUT_B16), .SB_T1_NORTH_SB_IN_B16_0(Tile_X00_Y01_SB_T1_SOUTH_SB_OUT_B16), .SB_T1_NORTH_SB_IN_B1_0(Tile_X00_Y01_SB_T1_SOUTH_SB_OUT_B1), .SB_T1_NORTH_SB_OUT_B1(Tile_X00_Y02_SB_T1_NORTH_SB_OUT_B1), .SB_T1_NORTH_SB_OUT_B16(Tile_X00_Y02_SB_T1_NORTH_SB_OUT_B16), .SB_T1_SOUTH_SB_IN_B16_0(const_0_16_out), .SB_T1_SOUTH_SB_IN_B1_0(const_0_1_out), .SB_T1_SOUTH_SB_OUT_B1(Tile_X00_Y02_SB_T1_SOUTH_SB_OUT_B1), .SB_T1_SOUTH_SB_OUT_B16(Tile_X00_Y02_SB_T1_SOUTH_SB_OUT_B16), .SB_T1_WEST_SB_IN_B16_0(const_0_16_out), .SB_T1_WEST_SB_IN_B1_0(const_0_1_out), .SB_T1_WEST_SB_OUT_B1(Tile_X00_Y02_SB_T1_WEST_SB_OUT_B1), .SB_T1_WEST_SB_OUT_B16(Tile_X00_Y02_SB_T1_WEST_SB_OUT_B16), .SB_T2_EAST_SB_IN_B16_0(Tile_X01_Y02_SB_T2_WEST_SB_OUT_B16), .SB_T2_EAST_SB_IN_B1_0(Tile_X01_Y02_SB_T2_WEST_SB_OUT_B1), .SB_T2_EAST_SB_OUT_B1(Tile_X00_Y02_SB_T2_EAST_SB_OUT_B1), .SB_T2_EAST_SB_OUT_B16(Tile_X00_Y02_SB_T2_EAST_SB_OUT_B16), .SB_T2_NORTH_SB_IN_B16_0(Tile_X00_Y01_SB_T2_SOUTH_SB_OUT_B16), .SB_T2_NORTH_SB_IN_B1_0(Tile_X00_Y01_SB_T2_SOUTH_SB_OUT_B1), .SB_T2_NORTH_SB_OUT_B1(Tile_X00_Y02_SB_T2_NORTH_SB_OUT_B1), .SB_T2_NORTH_SB_OUT_B16(Tile_X00_Y02_SB_T2_NORTH_SB_OUT_B16), .SB_T2_SOUTH_SB_IN_B16_0(const_0_16_out), .SB_T2_SOUTH_SB_IN_B1_0(const_0_1_out), .SB_T2_SOUTH_SB_OUT_B1(Tile_X00_Y02_SB_T2_SOUTH_SB_OUT_B1), .SB_T2_SOUTH_SB_OUT_B16(Tile_X00_Y02_SB_T2_SOUTH_SB_OUT_B16), .SB_T2_WEST_SB_IN_B16_0(const_0_16_out), .SB_T2_WEST_SB_IN_B1_0(const_0_1_out), .SB_T2_WEST_SB_OUT_B1(Tile_X00_Y02_SB_T2_WEST_SB_OUT_B1), .SB_T2_WEST_SB_OUT_B16(Tile_X00_Y02_SB_T2_WEST_SB_OUT_B16), .SB_T3_EAST_SB_IN_B16_0(Tile_X01_Y02_SB_T3_WEST_SB_OUT_B16), .SB_T3_EAST_SB_IN_B1_0(Tile_X01_Y02_SB_T3_WEST_SB_OUT_B1), .SB_T3_EAST_SB_OUT_B1(Tile_X00_Y02_SB_T3_EAST_SB_OUT_B1), .SB_T3_EAST_SB_OUT_B16(Tile_X00_Y02_SB_T3_EAST_SB_OUT_B16), .SB_T3_NORTH_SB_IN_B16_0(Tile_X00_Y01_SB_T3_SOUTH_SB_OUT_B16), .SB_T3_NORTH_SB_IN_B1_0(Tile_X00_Y01_SB_T3_SOUTH_SB_OUT_B1), .SB_T3_NORTH_SB_OUT_B1(Tile_X00_Y02_SB_T3_NORTH_SB_OUT_B1), .SB_T3_NORTH_SB_OUT_B16(Tile_X00_Y02_SB_T3_NORTH_SB_OUT_B16), .SB_T3_SOUTH_SB_IN_B16_0(const_0_16_out), .SB_T3_SOUTH_SB_IN_B1_0(const_0_1_out), .SB_T3_SOUTH_SB_OUT_B1(Tile_X00_Y02_SB_T3_SOUTH_SB_OUT_B1), .SB_T3_SOUTH_SB_OUT_B16(Tile_X00_Y02_SB_T3_SOUTH_SB_OUT_B16), .SB_T3_WEST_SB_IN_B16_0(const_0_16_out), .SB_T3_WEST_SB_IN_B1_0(const_0_1_out), .SB_T3_WEST_SB_OUT_B1(Tile_X00_Y02_SB_T3_WEST_SB_OUT_B1), .SB_T3_WEST_SB_OUT_B16(Tile_X00_Y02_SB_T3_WEST_SB_OUT_B16), .SB_T4_EAST_SB_IN_B16_0(Tile_X01_Y02_SB_T4_WEST_SB_OUT_B16), .SB_T4_EAST_SB_IN_B1_0(Tile_X01_Y02_SB_T4_WEST_SB_OUT_B1), .SB_T4_EAST_SB_OUT_B1(Tile_X00_Y02_SB_T4_EAST_SB_OUT_B1), .SB_T4_EAST_SB_OUT_B16(Tile_X00_Y02_SB_T4_EAST_SB_OUT_B16), .SB_T4_NORTH_SB_IN_B16_0(Tile_X00_Y01_SB_T4_SOUTH_SB_OUT_B16), .SB_T4_NORTH_SB_IN_B1_0(Tile_X00_Y01_SB_T4_SOUTH_SB_OUT_B1), .SB_T4_NORTH_SB_OUT_B1(Tile_X00_Y02_SB_T4_NORTH_SB_OUT_B1), .SB_T4_NORTH_SB_OUT_B16(Tile_X00_Y02_SB_T4_NORTH_SB_OUT_B16), .SB_T4_SOUTH_SB_IN_B16_0(const_0_16_out), .SB_T4_SOUTH_SB_IN_B1_0(const_0_1_out), .SB_T4_SOUTH_SB_OUT_B1(Tile_X00_Y02_SB_T4_SOUTH_SB_OUT_B1), .SB_T4_SOUTH_SB_OUT_B16(Tile_X00_Y02_SB_T4_SOUTH_SB_OUT_B16), .SB_T4_WEST_SB_IN_B16_0(const_0_16_out), .SB_T4_WEST_SB_IN_B1_0(const_0_1_out), .SB_T4_WEST_SB_OUT_B1(Tile_X00_Y02_SB_T4_WEST_SB_OUT_B1), .SB_T4_WEST_SB_OUT_B16(Tile_X00_Y02_SB_T4_WEST_SB_OUT_B16), .clk(Tile_X00_Y01_clk_out), .clk_out(Tile_X00_Y02_clk_out), .clk_pass_through(Tile_X00_Y01_clk_pass_through_out), .clk_pass_through_out(Tile_X00_Y02_clk_pass_through_out), .config_config_addr(Tile_X00_Y01_config_out_config_addr), .config_config_data(Tile_X00_Y01_config_out_config_data), .config_out_config_addr(Tile_X00_Y02_config_out_config_addr), .config_out_config_data(Tile_X00_Y02_config_out_config_data), .config_out_read(Tile_X00_Y02_config_out_read), .config_out_write(Tile_X00_Y02_config_out_write), .config_read(Tile_X00_Y01_config_out_read), .config_write(Tile_X00_Y01_config_out_write), .hi(Tile_X00_Y02_hi), .lo(Tile_X00_Y02_lo), .read_config_data(Tile_X00_Y02_read_config_data), .read_config_data_in(Tile_X00_Y01_read_config_data), .reset(Tile_X00_Y01_reset_out), .reset_out(Tile_X00_Y02_reset_out), .stall(Tile_X00_Y01_stall_out), .stall_out(Tile_X00_Y02_stall_out), .tile_id({Tile_X00_Y02_lo[7],Tile_X00_Y02_lo[7],Tile_X00_Y02_lo[6],Tile_X00_Y02_lo[6],Tile_X00_Y02_lo[5],Tile_X00_Y02_lo[5],Tile_X00_Y02_lo[4],Tile_X00_Y02_lo[4],Tile_X00_Y02_lo[3],Tile_X00_Y02_lo[3],Tile_X00_Y02_lo[2],Tile_X00_Y02_lo[2],Tile_X00_Y02_lo[1],Tile_X00_Y02_lo[1],Tile_X00_Y02_hi[1],Tile_X00_Y02_lo[0]}));
Tile_io_core Tile_X01_Y00(.f2io_16_0(Tile_X01_Y01_SB_T0_NORTH_SB_OUT_B16), .f2io_1_0(Tile_X01_Y01_SB_T0_NORTH_SB_OUT_B1), .glb2io_1(glb2io_1_X01_Y00), .glb2io_16(glb2io_16_X01_Y00), .io2f_1(Tile_X01_Y00_io2f_1), .io2f_16(Tile_X01_Y00_io2f_16), .io2glb_1(Tile_X01_Y00_io2glb_1), .io2glb_16(Tile_X01_Y00_io2glb_16), .tile_id(const_256_16_out));
Tile_PE Tile_X01_Y01(.SB_T0_EAST_SB_IN_B16_0(Tile_X02_Y01_SB_T0_WEST_SB_OUT_B16), .SB_T0_EAST_SB_IN_B1_0(Tile_X02_Y01_SB_T0_WEST_SB_OUT_B1), .SB_T0_EAST_SB_OUT_B1(Tile_X01_Y01_SB_T0_EAST_SB_OUT_B1), .SB_T0_EAST_SB_OUT_B16(Tile_X01_Y01_SB_T0_EAST_SB_OUT_B16), .SB_T0_NORTH_SB_IN_B16_0(Tile_X01_Y00_io2f_16), .SB_T0_NORTH_SB_IN_B1_0(Tile_X01_Y00_io2f_1), .SB_T0_NORTH_SB_OUT_B1(Tile_X01_Y01_SB_T0_NORTH_SB_OUT_B1), .SB_T0_NORTH_SB_OUT_B16(Tile_X01_Y01_SB_T0_NORTH_SB_OUT_B16), .SB_T0_SOUTH_SB_IN_B16_0(Tile_X01_Y02_SB_T0_NORTH_SB_OUT_B16), .SB_T0_SOUTH_SB_IN_B1_0(Tile_X01_Y02_SB_T0_NORTH_SB_OUT_B1), .SB_T0_SOUTH_SB_OUT_B1(Tile_X01_Y01_SB_T0_SOUTH_SB_OUT_B1), .SB_T0_SOUTH_SB_OUT_B16(Tile_X01_Y01_SB_T0_SOUTH_SB_OUT_B16), .SB_T0_WEST_SB_IN_B16_0(Tile_X00_Y01_SB_T0_EAST_SB_OUT_B16), .SB_T0_WEST_SB_IN_B1_0(Tile_X00_Y01_SB_T0_EAST_SB_OUT_B1), .SB_T0_WEST_SB_OUT_B1(Tile_X01_Y01_SB_T0_WEST_SB_OUT_B1), .SB_T0_WEST_SB_OUT_B16(Tile_X01_Y01_SB_T0_WEST_SB_OUT_B16), .SB_T1_EAST_SB_IN_B16_0(Tile_X02_Y01_SB_T1_WEST_SB_OUT_B16), .SB_T1_EAST_SB_IN_B1_0(Tile_X02_Y01_SB_T1_WEST_SB_OUT_B1), .SB_T1_EAST_SB_OUT_B1(Tile_X01_Y01_SB_T1_EAST_SB_OUT_B1), .SB_T1_EAST_SB_OUT_B16(Tile_X01_Y01_SB_T1_EAST_SB_OUT_B16), .SB_T1_NORTH_SB_IN_B16_0(Tile_X01_Y00_io2f_16), .SB_T1_NORTH_SB_IN_B1_0(Tile_X01_Y00_io2f_1), .SB_T1_NORTH_SB_OUT_B1(Tile_X01_Y01_SB_T1_NORTH_SB_OUT_B1), .SB_T1_NORTH_SB_OUT_B16(Tile_X01_Y01_SB_T1_NORTH_SB_OUT_B16), .SB_T1_SOUTH_SB_IN_B16_0(Tile_X01_Y02_SB_T1_NORTH_SB_OUT_B16), .SB_T1_SOUTH_SB_IN_B1_0(Tile_X01_Y02_SB_T1_NORTH_SB_OUT_B1), .SB_T1_SOUTH_SB_OUT_B1(Tile_X01_Y01_SB_T1_SOUTH_SB_OUT_B1), .SB_T1_SOUTH_SB_OUT_B16(Tile_X01_Y01_SB_T1_SOUTH_SB_OUT_B16), .SB_T1_WEST_SB_IN_B16_0(Tile_X00_Y01_SB_T1_EAST_SB_OUT_B16), .SB_T1_WEST_SB_IN_B1_0(Tile_X00_Y01_SB_T1_EAST_SB_OUT_B1), .SB_T1_WEST_SB_OUT_B1(Tile_X01_Y01_SB_T1_WEST_SB_OUT_B1), .SB_T1_WEST_SB_OUT_B16(Tile_X01_Y01_SB_T1_WEST_SB_OUT_B16), .SB_T2_EAST_SB_IN_B16_0(Tile_X02_Y01_SB_T2_WEST_SB_OUT_B16), .SB_T2_EAST_SB_IN_B1_0(Tile_X02_Y01_SB_T2_WEST_SB_OUT_B1), .SB_T2_EAST_SB_OUT_B1(Tile_X01_Y01_SB_T2_EAST_SB_OUT_B1), .SB_T2_EAST_SB_OUT_B16(Tile_X01_Y01_SB_T2_EAST_SB_OUT_B16), .SB_T2_NORTH_SB_IN_B16_0(Tile_X01_Y00_io2f_16), .SB_T2_NORTH_SB_IN_B1_0(Tile_X01_Y00_io2f_1), .SB_T2_NORTH_SB_OUT_B1(Tile_X01_Y01_SB_T2_NORTH_SB_OUT_B1), .SB_T2_NORTH_SB_OUT_B16(Tile_X01_Y01_SB_T2_NORTH_SB_OUT_B16), .SB_T2_SOUTH_SB_IN_B16_0(Tile_X01_Y02_SB_T2_NORTH_SB_OUT_B16), .SB_T2_SOUTH_SB_IN_B1_0(Tile_X01_Y02_SB_T2_NORTH_SB_OUT_B1), .SB_T2_SOUTH_SB_OUT_B1(Tile_X01_Y01_SB_T2_SOUTH_SB_OUT_B1), .SB_T2_SOUTH_SB_OUT_B16(Tile_X01_Y01_SB_T2_SOUTH_SB_OUT_B16), .SB_T2_WEST_SB_IN_B16_0(Tile_X00_Y01_SB_T2_EAST_SB_OUT_B16), .SB_T2_WEST_SB_IN_B1_0(Tile_X00_Y01_SB_T2_EAST_SB_OUT_B1), .SB_T2_WEST_SB_OUT_B1(Tile_X01_Y01_SB_T2_WEST_SB_OUT_B1), .SB_T2_WEST_SB_OUT_B16(Tile_X01_Y01_SB_T2_WEST_SB_OUT_B16), .SB_T3_EAST_SB_IN_B16_0(Tile_X02_Y01_SB_T3_WEST_SB_OUT_B16), .SB_T3_EAST_SB_IN_B1_0(Tile_X02_Y01_SB_T3_WEST_SB_OUT_B1), .SB_T3_EAST_SB_OUT_B1(Tile_X01_Y01_SB_T3_EAST_SB_OUT_B1), .SB_T3_EAST_SB_OUT_B16(Tile_X01_Y01_SB_T3_EAST_SB_OUT_B16), .SB_T3_NORTH_SB_IN_B16_0(Tile_X01_Y00_io2f_16), .SB_T3_NORTH_SB_IN_B1_0(Tile_X01_Y00_io2f_1), .SB_T3_NORTH_SB_OUT_B1(Tile_X01_Y01_SB_T3_NORTH_SB_OUT_B1), .SB_T3_NORTH_SB_OUT_B16(Tile_X01_Y01_SB_T3_NORTH_SB_OUT_B16), .SB_T3_SOUTH_SB_IN_B16_0(Tile_X01_Y02_SB_T3_NORTH_SB_OUT_B16), .SB_T3_SOUTH_SB_IN_B1_0(Tile_X01_Y02_SB_T3_NORTH_SB_OUT_B1), .SB_T3_SOUTH_SB_OUT_B1(Tile_X01_Y01_SB_T3_SOUTH_SB_OUT_B1), .SB_T3_SOUTH_SB_OUT_B16(Tile_X01_Y01_SB_T3_SOUTH_SB_OUT_B16), .SB_T3_WEST_SB_IN_B16_0(Tile_X00_Y01_SB_T3_EAST_SB_OUT_B16), .SB_T3_WEST_SB_IN_B1_0(Tile_X00_Y01_SB_T3_EAST_SB_OUT_B1), .SB_T3_WEST_SB_OUT_B1(Tile_X01_Y01_SB_T3_WEST_SB_OUT_B1), .SB_T3_WEST_SB_OUT_B16(Tile_X01_Y01_SB_T3_WEST_SB_OUT_B16), .SB_T4_EAST_SB_IN_B16_0(Tile_X02_Y01_SB_T4_WEST_SB_OUT_B16), .SB_T4_EAST_SB_IN_B1_0(Tile_X02_Y01_SB_T4_WEST_SB_OUT_B1), .SB_T4_EAST_SB_OUT_B1(Tile_X01_Y01_SB_T4_EAST_SB_OUT_B1), .SB_T4_EAST_SB_OUT_B16(Tile_X01_Y01_SB_T4_EAST_SB_OUT_B16), .SB_T4_NORTH_SB_IN_B16_0(Tile_X01_Y00_io2f_16), .SB_T4_NORTH_SB_IN_B1_0(Tile_X01_Y00_io2f_1), .SB_T4_NORTH_SB_OUT_B1(Tile_X01_Y01_SB_T4_NORTH_SB_OUT_B1), .SB_T4_NORTH_SB_OUT_B16(Tile_X01_Y01_SB_T4_NORTH_SB_OUT_B16), .SB_T4_SOUTH_SB_IN_B16_0(Tile_X01_Y02_SB_T4_NORTH_SB_OUT_B16), .SB_T4_SOUTH_SB_IN_B1_0(Tile_X01_Y02_SB_T4_NORTH_SB_OUT_B1), .SB_T4_SOUTH_SB_OUT_B1(Tile_X01_Y01_SB_T4_SOUTH_SB_OUT_B1), .SB_T4_SOUTH_SB_OUT_B16(Tile_X01_Y01_SB_T4_SOUTH_SB_OUT_B16), .SB_T4_WEST_SB_IN_B16_0(Tile_X00_Y01_SB_T4_EAST_SB_OUT_B16), .SB_T4_WEST_SB_IN_B1_0(Tile_X00_Y01_SB_T4_EAST_SB_OUT_B1), .SB_T4_WEST_SB_OUT_B1(Tile_X01_Y01_SB_T4_WEST_SB_OUT_B1), .SB_T4_WEST_SB_OUT_B16(Tile_X01_Y01_SB_T4_WEST_SB_OUT_B16), .clk(clk), .clk_out(Tile_X01_Y01_clk_out), .clk_pass_through(clk), .clk_pass_through_out(Tile_X01_Y01_clk_pass_through_out), .config_config_addr(config_0_config_addr), .config_config_data(config_0_config_data), .config_out_config_addr(Tile_X01_Y01_config_out_config_addr), .config_out_config_data(Tile_X01_Y01_config_out_config_data), .config_out_read(Tile_X01_Y01_config_out_read), .config_out_write(Tile_X01_Y01_config_out_write), .config_read(config_0_read), .config_write(config_0_write), .hi(Tile_X01_Y01_hi), .lo(Tile_X01_Y01_lo), .read_config_data(Tile_X01_Y01_read_config_data), .read_config_data_in(const_0_32_out), .reset(reset), .reset_out(Tile_X01_Y01_reset_out), .stall(stall), .stall_out(Tile_X01_Y01_stall_out), .tile_id({Tile_X01_Y01_lo[7],Tile_X01_Y01_lo[7],Tile_X01_Y01_lo[6],Tile_X01_Y01_lo[6],Tile_X01_Y01_lo[5],Tile_X01_Y01_lo[5],Tile_X01_Y01_lo[4],Tile_X01_Y01_hi[4],Tile_X01_Y01_lo[3],Tile_X01_Y01_lo[3],Tile_X01_Y01_lo[2],Tile_X01_Y01_lo[2],Tile_X01_Y01_lo[1],Tile_X01_Y01_lo[1],Tile_X01_Y01_lo[0],Tile_X01_Y01_hi[0]}));
Tile_PE Tile_X01_Y02(.SB_T0_EAST_SB_IN_B16_0(Tile_X02_Y02_SB_T0_WEST_SB_OUT_B16), .SB_T0_EAST_SB_IN_B1_0(Tile_X02_Y02_SB_T0_WEST_SB_OUT_B1), .SB_T0_EAST_SB_OUT_B1(Tile_X01_Y02_SB_T0_EAST_SB_OUT_B1), .SB_T0_EAST_SB_OUT_B16(Tile_X01_Y02_SB_T0_EAST_SB_OUT_B16), .SB_T0_NORTH_SB_IN_B16_0(Tile_X01_Y01_SB_T0_SOUTH_SB_OUT_B16), .SB_T0_NORTH_SB_IN_B1_0(Tile_X01_Y01_SB_T0_SOUTH_SB_OUT_B1), .SB_T0_NORTH_SB_OUT_B1(Tile_X01_Y02_SB_T0_NORTH_SB_OUT_B1), .SB_T0_NORTH_SB_OUT_B16(Tile_X01_Y02_SB_T0_NORTH_SB_OUT_B16), .SB_T0_SOUTH_SB_IN_B16_0(const_0_16_out), .SB_T0_SOUTH_SB_IN_B1_0(const_0_1_out), .SB_T0_SOUTH_SB_OUT_B1(Tile_X01_Y02_SB_T0_SOUTH_SB_OUT_B1), .SB_T0_SOUTH_SB_OUT_B16(Tile_X01_Y02_SB_T0_SOUTH_SB_OUT_B16), .SB_T0_WEST_SB_IN_B16_0(Tile_X00_Y02_SB_T0_EAST_SB_OUT_B16), .SB_T0_WEST_SB_IN_B1_0(Tile_X00_Y02_SB_T0_EAST_SB_OUT_B1), .SB_T0_WEST_SB_OUT_B1(Tile_X01_Y02_SB_T0_WEST_SB_OUT_B1), .SB_T0_WEST_SB_OUT_B16(Tile_X01_Y02_SB_T0_WEST_SB_OUT_B16), .SB_T1_EAST_SB_IN_B16_0(Tile_X02_Y02_SB_T1_WEST_SB_OUT_B16), .SB_T1_EAST_SB_IN_B1_0(Tile_X02_Y02_SB_T1_WEST_SB_OUT_B1), .SB_T1_EAST_SB_OUT_B1(Tile_X01_Y02_SB_T1_EAST_SB_OUT_B1), .SB_T1_EAST_SB_OUT_B16(Tile_X01_Y02_SB_T1_EAST_SB_OUT_B16), .SB_T1_NORTH_SB_IN_B16_0(Tile_X01_Y01_SB_T1_SOUTH_SB_OUT_B16), .SB_T1_NORTH_SB_IN_B1_0(Tile_X01_Y01_SB_T1_SOUTH_SB_OUT_B1), .SB_T1_NORTH_SB_OUT_B1(Tile_X01_Y02_SB_T1_NORTH_SB_OUT_B1), .SB_T1_NORTH_SB_OUT_B16(Tile_X01_Y02_SB_T1_NORTH_SB_OUT_B16), .SB_T1_SOUTH_SB_IN_B16_0(const_0_16_out), .SB_T1_SOUTH_SB_IN_B1_0(const_0_1_out), .SB_T1_SOUTH_SB_OUT_B1(Tile_X01_Y02_SB_T1_SOUTH_SB_OUT_B1), .SB_T1_SOUTH_SB_OUT_B16(Tile_X01_Y02_SB_T1_SOUTH_SB_OUT_B16), .SB_T1_WEST_SB_IN_B16_0(Tile_X00_Y02_SB_T1_EAST_SB_OUT_B16), .SB_T1_WEST_SB_IN_B1_0(Tile_X00_Y02_SB_T1_EAST_SB_OUT_B1), .SB_T1_WEST_SB_OUT_B1(Tile_X01_Y02_SB_T1_WEST_SB_OUT_B1), .SB_T1_WEST_SB_OUT_B16(Tile_X01_Y02_SB_T1_WEST_SB_OUT_B16), .SB_T2_EAST_SB_IN_B16_0(Tile_X02_Y02_SB_T2_WEST_SB_OUT_B16), .SB_T2_EAST_SB_IN_B1_0(Tile_X02_Y02_SB_T2_WEST_SB_OUT_B1), .SB_T2_EAST_SB_OUT_B1(Tile_X01_Y02_SB_T2_EAST_SB_OUT_B1), .SB_T2_EAST_SB_OUT_B16(Tile_X01_Y02_SB_T2_EAST_SB_OUT_B16), .SB_T2_NORTH_SB_IN_B16_0(Tile_X01_Y01_SB_T2_SOUTH_SB_OUT_B16), .SB_T2_NORTH_SB_IN_B1_0(Tile_X01_Y01_SB_T2_SOUTH_SB_OUT_B1), .SB_T2_NORTH_SB_OUT_B1(Tile_X01_Y02_SB_T2_NORTH_SB_OUT_B1), .SB_T2_NORTH_SB_OUT_B16(Tile_X01_Y02_SB_T2_NORTH_SB_OUT_B16), .SB_T2_SOUTH_SB_IN_B16_0(const_0_16_out), .SB_T2_SOUTH_SB_IN_B1_0(const_0_1_out), .SB_T2_SOUTH_SB_OUT_B1(Tile_X01_Y02_SB_T2_SOUTH_SB_OUT_B1), .SB_T2_SOUTH_SB_OUT_B16(Tile_X01_Y02_SB_T2_SOUTH_SB_OUT_B16), .SB_T2_WEST_SB_IN_B16_0(Tile_X00_Y02_SB_T2_EAST_SB_OUT_B16), .SB_T2_WEST_SB_IN_B1_0(Tile_X00_Y02_SB_T2_EAST_SB_OUT_B1), .SB_T2_WEST_SB_OUT_B1(Tile_X01_Y02_SB_T2_WEST_SB_OUT_B1), .SB_T2_WEST_SB_OUT_B16(Tile_X01_Y02_SB_T2_WEST_SB_OUT_B16), .SB_T3_EAST_SB_IN_B16_0(Tile_X02_Y02_SB_T3_WEST_SB_OUT_B16), .SB_T3_EAST_SB_IN_B1_0(Tile_X02_Y02_SB_T3_WEST_SB_OUT_B1), .SB_T3_EAST_SB_OUT_B1(Tile_X01_Y02_SB_T3_EAST_SB_OUT_B1), .SB_T3_EAST_SB_OUT_B16(Tile_X01_Y02_SB_T3_EAST_SB_OUT_B16), .SB_T3_NORTH_SB_IN_B16_0(Tile_X01_Y01_SB_T3_SOUTH_SB_OUT_B16), .SB_T3_NORTH_SB_IN_B1_0(Tile_X01_Y01_SB_T3_SOUTH_SB_OUT_B1), .SB_T3_NORTH_SB_OUT_B1(Tile_X01_Y02_SB_T3_NORTH_SB_OUT_B1), .SB_T3_NORTH_SB_OUT_B16(Tile_X01_Y02_SB_T3_NORTH_SB_OUT_B16), .SB_T3_SOUTH_SB_IN_B16_0(const_0_16_out), .SB_T3_SOUTH_SB_IN_B1_0(const_0_1_out), .SB_T3_SOUTH_SB_OUT_B1(Tile_X01_Y02_SB_T3_SOUTH_SB_OUT_B1), .SB_T3_SOUTH_SB_OUT_B16(Tile_X01_Y02_SB_T3_SOUTH_SB_OUT_B16), .SB_T3_WEST_SB_IN_B16_0(Tile_X00_Y02_SB_T3_EAST_SB_OUT_B16), .SB_T3_WEST_SB_IN_B1_0(Tile_X00_Y02_SB_T3_EAST_SB_OUT_B1), .SB_T3_WEST_SB_OUT_B1(Tile_X01_Y02_SB_T3_WEST_SB_OUT_B1), .SB_T3_WEST_SB_OUT_B16(Tile_X01_Y02_SB_T3_WEST_SB_OUT_B16), .SB_T4_EAST_SB_IN_B16_0(Tile_X02_Y02_SB_T4_WEST_SB_OUT_B16), .SB_T4_EAST_SB_IN_B1_0(Tile_X02_Y02_SB_T4_WEST_SB_OUT_B1), .SB_T4_EAST_SB_OUT_B1(Tile_X01_Y02_SB_T4_EAST_SB_OUT_B1), .SB_T4_EAST_SB_OUT_B16(Tile_X01_Y02_SB_T4_EAST_SB_OUT_B16), .SB_T4_NORTH_SB_IN_B16_0(Tile_X01_Y01_SB_T4_SOUTH_SB_OUT_B16), .SB_T4_NORTH_SB_IN_B1_0(Tile_X01_Y01_SB_T4_SOUTH_SB_OUT_B1), .SB_T4_NORTH_SB_OUT_B1(Tile_X01_Y02_SB_T4_NORTH_SB_OUT_B1), .SB_T4_NORTH_SB_OUT_B16(Tile_X01_Y02_SB_T4_NORTH_SB_OUT_B16), .SB_T4_SOUTH_SB_IN_B16_0(const_0_16_out), .SB_T4_SOUTH_SB_IN_B1_0(const_0_1_out), .SB_T4_SOUTH_SB_OUT_B1(Tile_X01_Y02_SB_T4_SOUTH_SB_OUT_B1), .SB_T4_SOUTH_SB_OUT_B16(Tile_X01_Y02_SB_T4_SOUTH_SB_OUT_B16), .SB_T4_WEST_SB_IN_B16_0(Tile_X00_Y02_SB_T4_EAST_SB_OUT_B16), .SB_T4_WEST_SB_IN_B1_0(Tile_X00_Y02_SB_T4_EAST_SB_OUT_B1), .SB_T4_WEST_SB_OUT_B1(Tile_X01_Y02_SB_T4_WEST_SB_OUT_B1), .SB_T4_WEST_SB_OUT_B16(Tile_X01_Y02_SB_T4_WEST_SB_OUT_B16), .clk(Tile_X01_Y01_clk_out), .clk_out(Tile_X01_Y02_clk_out), .clk_pass_through(Tile_X01_Y01_clk_pass_through_out), .clk_pass_through_out(Tile_X01_Y02_clk_pass_through_out), .config_config_addr(Tile_X01_Y01_config_out_config_addr), .config_config_data(Tile_X01_Y01_config_out_config_data), .config_out_config_addr(Tile_X01_Y02_config_out_config_addr), .config_out_config_data(Tile_X01_Y02_config_out_config_data), .config_out_read(Tile_X01_Y02_config_out_read), .config_out_write(Tile_X01_Y02_config_out_write), .config_read(Tile_X01_Y01_config_out_read), .config_write(Tile_X01_Y01_config_out_write), .hi(Tile_X01_Y02_hi), .lo(Tile_X01_Y02_lo), .read_config_data(Tile_X01_Y02_read_config_data), .read_config_data_in(Tile_X01_Y01_read_config_data), .reset(Tile_X01_Y01_reset_out), .reset_out(Tile_X01_Y02_reset_out), .stall(Tile_X01_Y01_stall_out), .stall_out(Tile_X01_Y02_stall_out), .tile_id({Tile_X01_Y02_lo[7],Tile_X01_Y02_lo[7],Tile_X01_Y02_lo[6],Tile_X01_Y02_lo[6],Tile_X01_Y02_lo[5],Tile_X01_Y02_lo[5],Tile_X01_Y02_lo[4],Tile_X01_Y02_hi[4],Tile_X01_Y02_lo[3],Tile_X01_Y02_lo[3],Tile_X01_Y02_lo[2],Tile_X01_Y02_lo[2],Tile_X01_Y02_lo[1],Tile_X01_Y02_lo[1],Tile_X01_Y02_hi[1],Tile_X01_Y02_lo[0]}));
Tile_io_core Tile_X02_Y00(.f2io_16_0(Tile_X02_Y01_SB_T0_NORTH_SB_OUT_B16), .f2io_1_0(Tile_X02_Y01_SB_T0_NORTH_SB_OUT_B1), .glb2io_1(glb2io_1_X02_Y00), .glb2io_16(glb2io_16_X02_Y00), .io2f_1(Tile_X02_Y00_io2f_1), .io2f_16(Tile_X02_Y00_io2f_16), .io2glb_1(Tile_X02_Y00_io2glb_1), .io2glb_16(Tile_X02_Y00_io2glb_16), .tile_id(const_512_16_out));
Tile_PE Tile_X02_Y01(.SB_T0_EAST_SB_IN_B16_0(Tile_X03_Y01_SB_T0_WEST_SB_OUT_B16), .SB_T0_EAST_SB_IN_B1_0(Tile_X03_Y01_SB_T0_WEST_SB_OUT_B1), .SB_T0_EAST_SB_OUT_B1(Tile_X02_Y01_SB_T0_EAST_SB_OUT_B1), .SB_T0_EAST_SB_OUT_B16(Tile_X02_Y01_SB_T0_EAST_SB_OUT_B16), .SB_T0_NORTH_SB_IN_B16_0(Tile_X02_Y00_io2f_16), .SB_T0_NORTH_SB_IN_B1_0(Tile_X02_Y00_io2f_1), .SB_T0_NORTH_SB_OUT_B1(Tile_X02_Y01_SB_T0_NORTH_SB_OUT_B1), .SB_T0_NORTH_SB_OUT_B16(Tile_X02_Y01_SB_T0_NORTH_SB_OUT_B16), .SB_T0_SOUTH_SB_IN_B16_0(Tile_X02_Y02_SB_T0_NORTH_SB_OUT_B16), .SB_T0_SOUTH_SB_IN_B1_0(Tile_X02_Y02_SB_T0_NORTH_SB_OUT_B1), .SB_T0_SOUTH_SB_OUT_B1(Tile_X02_Y01_SB_T0_SOUTH_SB_OUT_B1), .SB_T0_SOUTH_SB_OUT_B16(Tile_X02_Y01_SB_T0_SOUTH_SB_OUT_B16), .SB_T0_WEST_SB_IN_B16_0(Tile_X01_Y01_SB_T0_EAST_SB_OUT_B16), .SB_T0_WEST_SB_IN_B1_0(Tile_X01_Y01_SB_T0_EAST_SB_OUT_B1), .SB_T0_WEST_SB_OUT_B1(Tile_X02_Y01_SB_T0_WEST_SB_OUT_B1), .SB_T0_WEST_SB_OUT_B16(Tile_X02_Y01_SB_T0_WEST_SB_OUT_B16), .SB_T1_EAST_SB_IN_B16_0(Tile_X03_Y01_SB_T1_WEST_SB_OUT_B16), .SB_T1_EAST_SB_IN_B1_0(Tile_X03_Y01_SB_T1_WEST_SB_OUT_B1), .SB_T1_EAST_SB_OUT_B1(Tile_X02_Y01_SB_T1_EAST_SB_OUT_B1), .SB_T1_EAST_SB_OUT_B16(Tile_X02_Y01_SB_T1_EAST_SB_OUT_B16), .SB_T1_NORTH_SB_IN_B16_0(Tile_X02_Y00_io2f_16), .SB_T1_NORTH_SB_IN_B1_0(Tile_X02_Y00_io2f_1), .SB_T1_NORTH_SB_OUT_B1(Tile_X02_Y01_SB_T1_NORTH_SB_OUT_B1), .SB_T1_NORTH_SB_OUT_B16(Tile_X02_Y01_SB_T1_NORTH_SB_OUT_B16), .SB_T1_SOUTH_SB_IN_B16_0(Tile_X02_Y02_SB_T1_NORTH_SB_OUT_B16), .SB_T1_SOUTH_SB_IN_B1_0(Tile_X02_Y02_SB_T1_NORTH_SB_OUT_B1), .SB_T1_SOUTH_SB_OUT_B1(Tile_X02_Y01_SB_T1_SOUTH_SB_OUT_B1), .SB_T1_SOUTH_SB_OUT_B16(Tile_X02_Y01_SB_T1_SOUTH_SB_OUT_B16), .SB_T1_WEST_SB_IN_B16_0(Tile_X01_Y01_SB_T1_EAST_SB_OUT_B16), .SB_T1_WEST_SB_IN_B1_0(Tile_X01_Y01_SB_T1_EAST_SB_OUT_B1), .SB_T1_WEST_SB_OUT_B1(Tile_X02_Y01_SB_T1_WEST_SB_OUT_B1), .SB_T1_WEST_SB_OUT_B16(Tile_X02_Y01_SB_T1_WEST_SB_OUT_B16), .SB_T2_EAST_SB_IN_B16_0(Tile_X03_Y01_SB_T2_WEST_SB_OUT_B16), .SB_T2_EAST_SB_IN_B1_0(Tile_X03_Y01_SB_T2_WEST_SB_OUT_B1), .SB_T2_EAST_SB_OUT_B1(Tile_X02_Y01_SB_T2_EAST_SB_OUT_B1), .SB_T2_EAST_SB_OUT_B16(Tile_X02_Y01_SB_T2_EAST_SB_OUT_B16), .SB_T2_NORTH_SB_IN_B16_0(Tile_X02_Y00_io2f_16), .SB_T2_NORTH_SB_IN_B1_0(Tile_X02_Y00_io2f_1), .SB_T2_NORTH_SB_OUT_B1(Tile_X02_Y01_SB_T2_NORTH_SB_OUT_B1), .SB_T2_NORTH_SB_OUT_B16(Tile_X02_Y01_SB_T2_NORTH_SB_OUT_B16), .SB_T2_SOUTH_SB_IN_B16_0(Tile_X02_Y02_SB_T2_NORTH_SB_OUT_B16), .SB_T2_SOUTH_SB_IN_B1_0(Tile_X02_Y02_SB_T2_NORTH_SB_OUT_B1), .SB_T2_SOUTH_SB_OUT_B1(Tile_X02_Y01_SB_T2_SOUTH_SB_OUT_B1), .SB_T2_SOUTH_SB_OUT_B16(Tile_X02_Y01_SB_T2_SOUTH_SB_OUT_B16), .SB_T2_WEST_SB_IN_B16_0(Tile_X01_Y01_SB_T2_EAST_SB_OUT_B16), .SB_T2_WEST_SB_IN_B1_0(Tile_X01_Y01_SB_T2_EAST_SB_OUT_B1), .SB_T2_WEST_SB_OUT_B1(Tile_X02_Y01_SB_T2_WEST_SB_OUT_B1), .SB_T2_WEST_SB_OUT_B16(Tile_X02_Y01_SB_T2_WEST_SB_OUT_B16), .SB_T3_EAST_SB_IN_B16_0(Tile_X03_Y01_SB_T3_WEST_SB_OUT_B16), .SB_T3_EAST_SB_IN_B1_0(Tile_X03_Y01_SB_T3_WEST_SB_OUT_B1), .SB_T3_EAST_SB_OUT_B1(Tile_X02_Y01_SB_T3_EAST_SB_OUT_B1), .SB_T3_EAST_SB_OUT_B16(Tile_X02_Y01_SB_T3_EAST_SB_OUT_B16), .SB_T3_NORTH_SB_IN_B16_0(Tile_X02_Y00_io2f_16), .SB_T3_NORTH_SB_IN_B1_0(Tile_X02_Y00_io2f_1), .SB_T3_NORTH_SB_OUT_B1(Tile_X02_Y01_SB_T3_NORTH_SB_OUT_B1), .SB_T3_NORTH_SB_OUT_B16(Tile_X02_Y01_SB_T3_NORTH_SB_OUT_B16), .SB_T3_SOUTH_SB_IN_B16_0(Tile_X02_Y02_SB_T3_NORTH_SB_OUT_B16), .SB_T3_SOUTH_SB_IN_B1_0(Tile_X02_Y02_SB_T3_NORTH_SB_OUT_B1), .SB_T3_SOUTH_SB_OUT_B1(Tile_X02_Y01_SB_T3_SOUTH_SB_OUT_B1), .SB_T3_SOUTH_SB_OUT_B16(Tile_X02_Y01_SB_T3_SOUTH_SB_OUT_B16), .SB_T3_WEST_SB_IN_B16_0(Tile_X01_Y01_SB_T3_EAST_SB_OUT_B16), .SB_T3_WEST_SB_IN_B1_0(Tile_X01_Y01_SB_T3_EAST_SB_OUT_B1), .SB_T3_WEST_SB_OUT_B1(Tile_X02_Y01_SB_T3_WEST_SB_OUT_B1), .SB_T3_WEST_SB_OUT_B16(Tile_X02_Y01_SB_T3_WEST_SB_OUT_B16), .SB_T4_EAST_SB_IN_B16_0(Tile_X03_Y01_SB_T4_WEST_SB_OUT_B16), .SB_T4_EAST_SB_IN_B1_0(Tile_X03_Y01_SB_T4_WEST_SB_OUT_B1), .SB_T4_EAST_SB_OUT_B1(Tile_X02_Y01_SB_T4_EAST_SB_OUT_B1), .SB_T4_EAST_SB_OUT_B16(Tile_X02_Y01_SB_T4_EAST_SB_OUT_B16), .SB_T4_NORTH_SB_IN_B16_0(Tile_X02_Y00_io2f_16), .SB_T4_NORTH_SB_IN_B1_0(Tile_X02_Y00_io2f_1), .SB_T4_NORTH_SB_OUT_B1(Tile_X02_Y01_SB_T4_NORTH_SB_OUT_B1), .SB_T4_NORTH_SB_OUT_B16(Tile_X02_Y01_SB_T4_NORTH_SB_OUT_B16), .SB_T4_SOUTH_SB_IN_B16_0(Tile_X02_Y02_SB_T4_NORTH_SB_OUT_B16), .SB_T4_SOUTH_SB_IN_B1_0(Tile_X02_Y02_SB_T4_NORTH_SB_OUT_B1), .SB_T4_SOUTH_SB_OUT_B1(Tile_X02_Y01_SB_T4_SOUTH_SB_OUT_B1), .SB_T4_SOUTH_SB_OUT_B16(Tile_X02_Y01_SB_T4_SOUTH_SB_OUT_B16), .SB_T4_WEST_SB_IN_B16_0(Tile_X01_Y01_SB_T4_EAST_SB_OUT_B16), .SB_T4_WEST_SB_IN_B1_0(Tile_X01_Y01_SB_T4_EAST_SB_OUT_B1), .SB_T4_WEST_SB_OUT_B1(Tile_X02_Y01_SB_T4_WEST_SB_OUT_B1), .SB_T4_WEST_SB_OUT_B16(Tile_X02_Y01_SB_T4_WEST_SB_OUT_B16), .clk(clk), .clk_out(Tile_X02_Y01_clk_out), .clk_pass_through(clk), .clk_pass_through_out(Tile_X02_Y01_clk_pass_through_out), .config_config_addr(config_0_config_addr), .config_config_data(config_0_config_data), .config_out_config_addr(Tile_X02_Y01_config_out_config_addr), .config_out_config_data(Tile_X02_Y01_config_out_config_data), .config_out_read(Tile_X02_Y01_config_out_read), .config_out_write(Tile_X02_Y01_config_out_write), .config_read(config_0_read), .config_write(config_0_write), .hi(Tile_X02_Y01_hi), .lo(Tile_X02_Y01_lo), .read_config_data(Tile_X02_Y01_read_config_data), .read_config_data_in(const_0_32_out), .reset(reset), .reset_out(Tile_X02_Y01_reset_out), .stall(stall), .stall_out(Tile_X02_Y01_stall_out), .tile_id({Tile_X02_Y01_lo[7],Tile_X02_Y01_lo[7],Tile_X02_Y01_lo[6],Tile_X02_Y01_lo[6],Tile_X02_Y01_lo[5],Tile_X02_Y01_lo[5],Tile_X02_Y01_hi[5],Tile_X02_Y01_lo[4],Tile_X02_Y01_lo[3],Tile_X02_Y01_lo[3],Tile_X02_Y01_lo[2],Tile_X02_Y01_lo[2],Tile_X02_Y01_lo[1],Tile_X02_Y01_lo[1],Tile_X02_Y01_lo[0],Tile_X02_Y01_hi[0]}));
Tile_PE Tile_X02_Y02(.SB_T0_EAST_SB_IN_B16_0(Tile_X03_Y02_SB_T0_WEST_SB_OUT_B16), .SB_T0_EAST_SB_IN_B1_0(Tile_X03_Y02_SB_T0_WEST_SB_OUT_B1), .SB_T0_EAST_SB_OUT_B1(Tile_X02_Y02_SB_T0_EAST_SB_OUT_B1), .SB_T0_EAST_SB_OUT_B16(Tile_X02_Y02_SB_T0_EAST_SB_OUT_B16), .SB_T0_NORTH_SB_IN_B16_0(Tile_X02_Y01_SB_T0_SOUTH_SB_OUT_B16), .SB_T0_NORTH_SB_IN_B1_0(Tile_X02_Y01_SB_T0_SOUTH_SB_OUT_B1), .SB_T0_NORTH_SB_OUT_B1(Tile_X02_Y02_SB_T0_NORTH_SB_OUT_B1), .SB_T0_NORTH_SB_OUT_B16(Tile_X02_Y02_SB_T0_NORTH_SB_OUT_B16), .SB_T0_SOUTH_SB_IN_B16_0(const_0_16_out), .SB_T0_SOUTH_SB_IN_B1_0(const_0_1_out), .SB_T0_SOUTH_SB_OUT_B1(Tile_X02_Y02_SB_T0_SOUTH_SB_OUT_B1), .SB_T0_SOUTH_SB_OUT_B16(Tile_X02_Y02_SB_T0_SOUTH_SB_OUT_B16), .SB_T0_WEST_SB_IN_B16_0(Tile_X01_Y02_SB_T0_EAST_SB_OUT_B16), .SB_T0_WEST_SB_IN_B1_0(Tile_X01_Y02_SB_T0_EAST_SB_OUT_B1), .SB_T0_WEST_SB_OUT_B1(Tile_X02_Y02_SB_T0_WEST_SB_OUT_B1), .SB_T0_WEST_SB_OUT_B16(Tile_X02_Y02_SB_T0_WEST_SB_OUT_B16), .SB_T1_EAST_SB_IN_B16_0(Tile_X03_Y02_SB_T1_WEST_SB_OUT_B16), .SB_T1_EAST_SB_IN_B1_0(Tile_X03_Y02_SB_T1_WEST_SB_OUT_B1), .SB_T1_EAST_SB_OUT_B1(Tile_X02_Y02_SB_T1_EAST_SB_OUT_B1), .SB_T1_EAST_SB_OUT_B16(Tile_X02_Y02_SB_T1_EAST_SB_OUT_B16), .SB_T1_NORTH_SB_IN_B16_0(Tile_X02_Y01_SB_T1_SOUTH_SB_OUT_B16), .SB_T1_NORTH_SB_IN_B1_0(Tile_X02_Y01_SB_T1_SOUTH_SB_OUT_B1), .SB_T1_NORTH_SB_OUT_B1(Tile_X02_Y02_SB_T1_NORTH_SB_OUT_B1), .SB_T1_NORTH_SB_OUT_B16(Tile_X02_Y02_SB_T1_NORTH_SB_OUT_B16), .SB_T1_SOUTH_SB_IN_B16_0(const_0_16_out), .SB_T1_SOUTH_SB_IN_B1_0(const_0_1_out), .SB_T1_SOUTH_SB_OUT_B1(Tile_X02_Y02_SB_T1_SOUTH_SB_OUT_B1), .SB_T1_SOUTH_SB_OUT_B16(Tile_X02_Y02_SB_T1_SOUTH_SB_OUT_B16), .SB_T1_WEST_SB_IN_B16_0(Tile_X01_Y02_SB_T1_EAST_SB_OUT_B16), .SB_T1_WEST_SB_IN_B1_0(Tile_X01_Y02_SB_T1_EAST_SB_OUT_B1), .SB_T1_WEST_SB_OUT_B1(Tile_X02_Y02_SB_T1_WEST_SB_OUT_B1), .SB_T1_WEST_SB_OUT_B16(Tile_X02_Y02_SB_T1_WEST_SB_OUT_B16), .SB_T2_EAST_SB_IN_B16_0(Tile_X03_Y02_SB_T2_WEST_SB_OUT_B16), .SB_T2_EAST_SB_IN_B1_0(Tile_X03_Y02_SB_T2_WEST_SB_OUT_B1), .SB_T2_EAST_SB_OUT_B1(Tile_X02_Y02_SB_T2_EAST_SB_OUT_B1), .SB_T2_EAST_SB_OUT_B16(Tile_X02_Y02_SB_T2_EAST_SB_OUT_B16), .SB_T2_NORTH_SB_IN_B16_0(Tile_X02_Y01_SB_T2_SOUTH_SB_OUT_B16), .SB_T2_NORTH_SB_IN_B1_0(Tile_X02_Y01_SB_T2_SOUTH_SB_OUT_B1), .SB_T2_NORTH_SB_OUT_B1(Tile_X02_Y02_SB_T2_NORTH_SB_OUT_B1), .SB_T2_NORTH_SB_OUT_B16(Tile_X02_Y02_SB_T2_NORTH_SB_OUT_B16), .SB_T2_SOUTH_SB_IN_B16_0(const_0_16_out), .SB_T2_SOUTH_SB_IN_B1_0(const_0_1_out), .SB_T2_SOUTH_SB_OUT_B1(Tile_X02_Y02_SB_T2_SOUTH_SB_OUT_B1), .SB_T2_SOUTH_SB_OUT_B16(Tile_X02_Y02_SB_T2_SOUTH_SB_OUT_B16), .SB_T2_WEST_SB_IN_B16_0(Tile_X01_Y02_SB_T2_EAST_SB_OUT_B16), .SB_T2_WEST_SB_IN_B1_0(Tile_X01_Y02_SB_T2_EAST_SB_OUT_B1), .SB_T2_WEST_SB_OUT_B1(Tile_X02_Y02_SB_T2_WEST_SB_OUT_B1), .SB_T2_WEST_SB_OUT_B16(Tile_X02_Y02_SB_T2_WEST_SB_OUT_B16), .SB_T3_EAST_SB_IN_B16_0(Tile_X03_Y02_SB_T3_WEST_SB_OUT_B16), .SB_T3_EAST_SB_IN_B1_0(Tile_X03_Y02_SB_T3_WEST_SB_OUT_B1), .SB_T3_EAST_SB_OUT_B1(Tile_X02_Y02_SB_T3_EAST_SB_OUT_B1), .SB_T3_EAST_SB_OUT_B16(Tile_X02_Y02_SB_T3_EAST_SB_OUT_B16), .SB_T3_NORTH_SB_IN_B16_0(Tile_X02_Y01_SB_T3_SOUTH_SB_OUT_B16), .SB_T3_NORTH_SB_IN_B1_0(Tile_X02_Y01_SB_T3_SOUTH_SB_OUT_B1), .SB_T3_NORTH_SB_OUT_B1(Tile_X02_Y02_SB_T3_NORTH_SB_OUT_B1), .SB_T3_NORTH_SB_OUT_B16(Tile_X02_Y02_SB_T3_NORTH_SB_OUT_B16), .SB_T3_SOUTH_SB_IN_B16_0(const_0_16_out), .SB_T3_SOUTH_SB_IN_B1_0(const_0_1_out), .SB_T3_SOUTH_SB_OUT_B1(Tile_X02_Y02_SB_T3_SOUTH_SB_OUT_B1), .SB_T3_SOUTH_SB_OUT_B16(Tile_X02_Y02_SB_T3_SOUTH_SB_OUT_B16), .SB_T3_WEST_SB_IN_B16_0(Tile_X01_Y02_SB_T3_EAST_SB_OUT_B16), .SB_T3_WEST_SB_IN_B1_0(Tile_X01_Y02_SB_T3_EAST_SB_OUT_B1), .SB_T3_WEST_SB_OUT_B1(Tile_X02_Y02_SB_T3_WEST_SB_OUT_B1), .SB_T3_WEST_SB_OUT_B16(Tile_X02_Y02_SB_T3_WEST_SB_OUT_B16), .SB_T4_EAST_SB_IN_B16_0(Tile_X03_Y02_SB_T4_WEST_SB_OUT_B16), .SB_T4_EAST_SB_IN_B1_0(Tile_X03_Y02_SB_T4_WEST_SB_OUT_B1), .SB_T4_EAST_SB_OUT_B1(Tile_X02_Y02_SB_T4_EAST_SB_OUT_B1), .SB_T4_EAST_SB_OUT_B16(Tile_X02_Y02_SB_T4_EAST_SB_OUT_B16), .SB_T4_NORTH_SB_IN_B16_0(Tile_X02_Y01_SB_T4_SOUTH_SB_OUT_B16), .SB_T4_NORTH_SB_IN_B1_0(Tile_X02_Y01_SB_T4_SOUTH_SB_OUT_B1), .SB_T4_NORTH_SB_OUT_B1(Tile_X02_Y02_SB_T4_NORTH_SB_OUT_B1), .SB_T4_NORTH_SB_OUT_B16(Tile_X02_Y02_SB_T4_NORTH_SB_OUT_B16), .SB_T4_SOUTH_SB_IN_B16_0(const_0_16_out), .SB_T4_SOUTH_SB_IN_B1_0(const_0_1_out), .SB_T4_SOUTH_SB_OUT_B1(Tile_X02_Y02_SB_T4_SOUTH_SB_OUT_B1), .SB_T4_SOUTH_SB_OUT_B16(Tile_X02_Y02_SB_T4_SOUTH_SB_OUT_B16), .SB_T4_WEST_SB_IN_B16_0(Tile_X01_Y02_SB_T4_EAST_SB_OUT_B16), .SB_T4_WEST_SB_IN_B1_0(Tile_X01_Y02_SB_T4_EAST_SB_OUT_B1), .SB_T4_WEST_SB_OUT_B1(Tile_X02_Y02_SB_T4_WEST_SB_OUT_B1), .SB_T4_WEST_SB_OUT_B16(Tile_X02_Y02_SB_T4_WEST_SB_OUT_B16), .clk(Tile_X02_Y01_clk_out), .clk_out(Tile_X02_Y02_clk_out), .clk_pass_through(Tile_X02_Y01_clk_pass_through_out), .clk_pass_through_out(Tile_X02_Y02_clk_pass_through_out), .config_config_addr(Tile_X02_Y01_config_out_config_addr), .config_config_data(Tile_X02_Y01_config_out_config_data), .config_out_config_addr(Tile_X02_Y02_config_out_config_addr), .config_out_config_data(Tile_X02_Y02_config_out_config_data), .config_out_read(Tile_X02_Y02_config_out_read), .config_out_write(Tile_X02_Y02_config_out_write), .config_read(Tile_X02_Y01_config_out_read), .config_write(Tile_X02_Y01_config_out_write), .hi(Tile_X02_Y02_hi), .lo(Tile_X02_Y02_lo), .read_config_data(Tile_X02_Y02_read_config_data), .read_config_data_in(Tile_X02_Y01_read_config_data), .reset(Tile_X02_Y01_reset_out), .reset_out(Tile_X02_Y02_reset_out), .stall(Tile_X02_Y01_stall_out), .stall_out(Tile_X02_Y02_stall_out), .tile_id({Tile_X02_Y02_lo[7],Tile_X02_Y02_lo[7],Tile_X02_Y02_lo[6],Tile_X02_Y02_lo[6],Tile_X02_Y02_lo[5],Tile_X02_Y02_lo[5],Tile_X02_Y02_hi[5],Tile_X02_Y02_lo[4],Tile_X02_Y02_lo[3],Tile_X02_Y02_lo[3],Tile_X02_Y02_lo[2],Tile_X02_Y02_lo[2],Tile_X02_Y02_lo[1],Tile_X02_Y02_lo[1],Tile_X02_Y02_hi[1],Tile_X02_Y02_lo[0]}));
Tile_io_core Tile_X03_Y00(.f2io_16_0(Tile_X03_Y01_SB_T0_NORTH_SB_OUT_B16), .f2io_1_0(Tile_X03_Y01_SB_T0_NORTH_SB_OUT_B1), .glb2io_1(glb2io_1_X03_Y00), .glb2io_16(glb2io_16_X03_Y00), .io2f_1(Tile_X03_Y00_io2f_1), .io2f_16(Tile_X03_Y00_io2f_16), .io2glb_1(Tile_X03_Y00_io2glb_1), .io2glb_16(Tile_X03_Y00_io2glb_16), .tile_id(const_768_16_out));
Tile_MemCore Tile_X03_Y01(.SB_T0_EAST_SB_IN_B16_0(const_0_16_out), .SB_T0_EAST_SB_IN_B1_0(const_0_1_out), .SB_T0_EAST_SB_OUT_B1(Tile_X03_Y01_SB_T0_EAST_SB_OUT_B1), .SB_T0_EAST_SB_OUT_B16(Tile_X03_Y01_SB_T0_EAST_SB_OUT_B16), .SB_T0_NORTH_SB_IN_B16_0(Tile_X03_Y00_io2f_16), .SB_T0_NORTH_SB_IN_B1_0(Tile_X03_Y00_io2f_1), .SB_T0_NORTH_SB_OUT_B1(Tile_X03_Y01_SB_T0_NORTH_SB_OUT_B1), .SB_T0_NORTH_SB_OUT_B16(Tile_X03_Y01_SB_T0_NORTH_SB_OUT_B16), .SB_T0_SOUTH_SB_IN_B16_0(Tile_X03_Y02_SB_T0_NORTH_SB_OUT_B16), .SB_T0_SOUTH_SB_IN_B1_0(Tile_X03_Y02_SB_T0_NORTH_SB_OUT_B1), .SB_T0_SOUTH_SB_OUT_B1(Tile_X03_Y01_SB_T0_SOUTH_SB_OUT_B1), .SB_T0_SOUTH_SB_OUT_B16(Tile_X03_Y01_SB_T0_SOUTH_SB_OUT_B16), .SB_T0_WEST_SB_IN_B16_0(Tile_X02_Y01_SB_T0_EAST_SB_OUT_B16), .SB_T0_WEST_SB_IN_B1_0(Tile_X02_Y01_SB_T0_EAST_SB_OUT_B1), .SB_T0_WEST_SB_OUT_B1(Tile_X03_Y01_SB_T0_WEST_SB_OUT_B1), .SB_T0_WEST_SB_OUT_B16(Tile_X03_Y01_SB_T0_WEST_SB_OUT_B16), .SB_T1_EAST_SB_IN_B16_0(const_0_16_out), .SB_T1_EAST_SB_IN_B1_0(const_0_1_out), .SB_T1_EAST_SB_OUT_B1(Tile_X03_Y01_SB_T1_EAST_SB_OUT_B1), .SB_T1_EAST_SB_OUT_B16(Tile_X03_Y01_SB_T1_EAST_SB_OUT_B16), .SB_T1_NORTH_SB_IN_B16_0(Tile_X03_Y00_io2f_16), .SB_T1_NORTH_SB_IN_B1_0(Tile_X03_Y00_io2f_1), .SB_T1_NORTH_SB_OUT_B1(Tile_X03_Y01_SB_T1_NORTH_SB_OUT_B1), .SB_T1_NORTH_SB_OUT_B16(Tile_X03_Y01_SB_T1_NORTH_SB_OUT_B16), .SB_T1_SOUTH_SB_IN_B16_0(Tile_X03_Y02_SB_T1_NORTH_SB_OUT_B16), .SB_T1_SOUTH_SB_IN_B1_0(Tile_X03_Y02_SB_T1_NORTH_SB_OUT_B1), .SB_T1_SOUTH_SB_OUT_B1(Tile_X03_Y01_SB_T1_SOUTH_SB_OUT_B1), .SB_T1_SOUTH_SB_OUT_B16(Tile_X03_Y01_SB_T1_SOUTH_SB_OUT_B16), .SB_T1_WEST_SB_IN_B16_0(Tile_X02_Y01_SB_T1_EAST_SB_OUT_B16), .SB_T1_WEST_SB_IN_B1_0(Tile_X02_Y01_SB_T1_EAST_SB_OUT_B1), .SB_T1_WEST_SB_OUT_B1(Tile_X03_Y01_SB_T1_WEST_SB_OUT_B1), .SB_T1_WEST_SB_OUT_B16(Tile_X03_Y01_SB_T1_WEST_SB_OUT_B16), .SB_T2_EAST_SB_IN_B16_0(const_0_16_out), .SB_T2_EAST_SB_IN_B1_0(const_0_1_out), .SB_T2_EAST_SB_OUT_B1(Tile_X03_Y01_SB_T2_EAST_SB_OUT_B1), .SB_T2_EAST_SB_OUT_B16(Tile_X03_Y01_SB_T2_EAST_SB_OUT_B16), .SB_T2_NORTH_SB_IN_B16_0(Tile_X03_Y00_io2f_16), .SB_T2_NORTH_SB_IN_B1_0(Tile_X03_Y00_io2f_1), .SB_T2_NORTH_SB_OUT_B1(Tile_X03_Y01_SB_T2_NORTH_SB_OUT_B1), .SB_T2_NORTH_SB_OUT_B16(Tile_X03_Y01_SB_T2_NORTH_SB_OUT_B16), .SB_T2_SOUTH_SB_IN_B16_0(Tile_X03_Y02_SB_T2_NORTH_SB_OUT_B16), .SB_T2_SOUTH_SB_IN_B1_0(Tile_X03_Y02_SB_T2_NORTH_SB_OUT_B1), .SB_T2_SOUTH_SB_OUT_B1(Tile_X03_Y01_SB_T2_SOUTH_SB_OUT_B1), .SB_T2_SOUTH_SB_OUT_B16(Tile_X03_Y01_SB_T2_SOUTH_SB_OUT_B16), .SB_T2_WEST_SB_IN_B16_0(Tile_X02_Y01_SB_T2_EAST_SB_OUT_B16), .SB_T2_WEST_SB_IN_B1_0(Tile_X02_Y01_SB_T2_EAST_SB_OUT_B1), .SB_T2_WEST_SB_OUT_B1(Tile_X03_Y01_SB_T2_WEST_SB_OUT_B1), .SB_T2_WEST_SB_OUT_B16(Tile_X03_Y01_SB_T2_WEST_SB_OUT_B16), .SB_T3_EAST_SB_IN_B16_0(const_0_16_out), .SB_T3_EAST_SB_IN_B1_0(const_0_1_out), .SB_T3_EAST_SB_OUT_B1(Tile_X03_Y01_SB_T3_EAST_SB_OUT_B1), .SB_T3_EAST_SB_OUT_B16(Tile_X03_Y01_SB_T3_EAST_SB_OUT_B16), .SB_T3_NORTH_SB_IN_B16_0(Tile_X03_Y00_io2f_16), .SB_T3_NORTH_SB_IN_B1_0(Tile_X03_Y00_io2f_1), .SB_T3_NORTH_SB_OUT_B1(Tile_X03_Y01_SB_T3_NORTH_SB_OUT_B1), .SB_T3_NORTH_SB_OUT_B16(Tile_X03_Y01_SB_T3_NORTH_SB_OUT_B16), .SB_T3_SOUTH_SB_IN_B16_0(Tile_X03_Y02_SB_T3_NORTH_SB_OUT_B16), .SB_T3_SOUTH_SB_IN_B1_0(Tile_X03_Y02_SB_T3_NORTH_SB_OUT_B1), .SB_T3_SOUTH_SB_OUT_B1(Tile_X03_Y01_SB_T3_SOUTH_SB_OUT_B1), .SB_T3_SOUTH_SB_OUT_B16(Tile_X03_Y01_SB_T3_SOUTH_SB_OUT_B16), .SB_T3_WEST_SB_IN_B16_0(Tile_X02_Y01_SB_T3_EAST_SB_OUT_B16), .SB_T3_WEST_SB_IN_B1_0(Tile_X02_Y01_SB_T3_EAST_SB_OUT_B1), .SB_T3_WEST_SB_OUT_B1(Tile_X03_Y01_SB_T3_WEST_SB_OUT_B1), .SB_T3_WEST_SB_OUT_B16(Tile_X03_Y01_SB_T3_WEST_SB_OUT_B16), .SB_T4_EAST_SB_IN_B16_0(const_0_16_out), .SB_T4_EAST_SB_IN_B1_0(const_0_1_out), .SB_T4_EAST_SB_OUT_B1(Tile_X03_Y01_SB_T4_EAST_SB_OUT_B1), .SB_T4_EAST_SB_OUT_B16(Tile_X03_Y01_SB_T4_EAST_SB_OUT_B16), .SB_T4_NORTH_SB_IN_B16_0(Tile_X03_Y00_io2f_16), .SB_T4_NORTH_SB_IN_B1_0(Tile_X03_Y00_io2f_1), .SB_T4_NORTH_SB_OUT_B1(Tile_X03_Y01_SB_T4_NORTH_SB_OUT_B1), .SB_T4_NORTH_SB_OUT_B16(Tile_X03_Y01_SB_T4_NORTH_SB_OUT_B16), .SB_T4_SOUTH_SB_IN_B16_0(Tile_X03_Y02_SB_T4_NORTH_SB_OUT_B16), .SB_T4_SOUTH_SB_IN_B1_0(Tile_X03_Y02_SB_T4_NORTH_SB_OUT_B1), .SB_T4_SOUTH_SB_OUT_B1(Tile_X03_Y01_SB_T4_SOUTH_SB_OUT_B1), .SB_T4_SOUTH_SB_OUT_B16(Tile_X03_Y01_SB_T4_SOUTH_SB_OUT_B16), .SB_T4_WEST_SB_IN_B16_0(Tile_X02_Y01_SB_T4_EAST_SB_OUT_B16), .SB_T4_WEST_SB_IN_B1_0(Tile_X02_Y01_SB_T4_EAST_SB_OUT_B1), .SB_T4_WEST_SB_OUT_B1(Tile_X03_Y01_SB_T4_WEST_SB_OUT_B1), .SB_T4_WEST_SB_OUT_B16(Tile_X03_Y01_SB_T4_WEST_SB_OUT_B16), .clk(clk), .clk_out(Tile_X03_Y01_clk_out), .clk_pass_through(clk), .clk_pass_through_out(Tile_X03_Y01_clk_pass_through_out), .config_config_addr(config_0_config_addr), .config_config_data(config_0_config_data), .config_out_config_addr(Tile_X03_Y01_config_out_config_addr), .config_out_config_data(Tile_X03_Y01_config_out_config_data), .config_out_read(Tile_X03_Y01_config_out_read), .config_out_write(Tile_X03_Y01_config_out_write), .config_read(config_0_read), .config_write(config_0_write), .hi(Tile_X03_Y01_hi), .lo(Tile_X03_Y01_lo), .read_config_data(Tile_X03_Y01_read_config_data), .read_config_data_in(const_0_32_out), .reset(reset), .reset_out(Tile_X03_Y01_reset_out), .stall(stall), .stall_out(Tile_X03_Y01_stall_out), .tile_id({Tile_X03_Y01_lo[7],Tile_X03_Y01_lo[7],Tile_X03_Y01_lo[6],Tile_X03_Y01_lo[6],Tile_X03_Y01_lo[5],Tile_X03_Y01_lo[5],Tile_X03_Y01_hi[5],Tile_X03_Y01_hi[4],Tile_X03_Y01_lo[3],Tile_X03_Y01_lo[3],Tile_X03_Y01_lo[2],Tile_X03_Y01_lo[2],Tile_X03_Y01_lo[1],Tile_X03_Y01_lo[1],Tile_X03_Y01_lo[0],Tile_X03_Y01_hi[0]}));
Tile_MemCore Tile_X03_Y02(.SB_T0_EAST_SB_IN_B16_0(const_0_16_out), .SB_T0_EAST_SB_IN_B1_0(const_0_1_out), .SB_T0_EAST_SB_OUT_B1(Tile_X03_Y02_SB_T0_EAST_SB_OUT_B1), .SB_T0_EAST_SB_OUT_B16(Tile_X03_Y02_SB_T0_EAST_SB_OUT_B16), .SB_T0_NORTH_SB_IN_B16_0(Tile_X03_Y01_SB_T0_SOUTH_SB_OUT_B16), .SB_T0_NORTH_SB_IN_B1_0(Tile_X03_Y01_SB_T0_SOUTH_SB_OUT_B1), .SB_T0_NORTH_SB_OUT_B1(Tile_X03_Y02_SB_T0_NORTH_SB_OUT_B1), .SB_T0_NORTH_SB_OUT_B16(Tile_X03_Y02_SB_T0_NORTH_SB_OUT_B16), .SB_T0_SOUTH_SB_IN_B16_0(const_0_16_out), .SB_T0_SOUTH_SB_IN_B1_0(const_0_1_out), .SB_T0_SOUTH_SB_OUT_B1(Tile_X03_Y02_SB_T0_SOUTH_SB_OUT_B1), .SB_T0_SOUTH_SB_OUT_B16(Tile_X03_Y02_SB_T0_SOUTH_SB_OUT_B16), .SB_T0_WEST_SB_IN_B16_0(Tile_X02_Y02_SB_T0_EAST_SB_OUT_B16), .SB_T0_WEST_SB_IN_B1_0(Tile_X02_Y02_SB_T0_EAST_SB_OUT_B1), .SB_T0_WEST_SB_OUT_B1(Tile_X03_Y02_SB_T0_WEST_SB_OUT_B1), .SB_T0_WEST_SB_OUT_B16(Tile_X03_Y02_SB_T0_WEST_SB_OUT_B16), .SB_T1_EAST_SB_IN_B16_0(const_0_16_out), .SB_T1_EAST_SB_IN_B1_0(const_0_1_out), .SB_T1_EAST_SB_OUT_B1(Tile_X03_Y02_SB_T1_EAST_SB_OUT_B1), .SB_T1_EAST_SB_OUT_B16(Tile_X03_Y02_SB_T1_EAST_SB_OUT_B16), .SB_T1_NORTH_SB_IN_B16_0(Tile_X03_Y01_SB_T1_SOUTH_SB_OUT_B16), .SB_T1_NORTH_SB_IN_B1_0(Tile_X03_Y01_SB_T1_SOUTH_SB_OUT_B1), .SB_T1_NORTH_SB_OUT_B1(Tile_X03_Y02_SB_T1_NORTH_SB_OUT_B1), .SB_T1_NORTH_SB_OUT_B16(Tile_X03_Y02_SB_T1_NORTH_SB_OUT_B16), .SB_T1_SOUTH_SB_IN_B16_0(const_0_16_out), .SB_T1_SOUTH_SB_IN_B1_0(const_0_1_out), .SB_T1_SOUTH_SB_OUT_B1(Tile_X03_Y02_SB_T1_SOUTH_SB_OUT_B1), .SB_T1_SOUTH_SB_OUT_B16(Tile_X03_Y02_SB_T1_SOUTH_SB_OUT_B16), .SB_T1_WEST_SB_IN_B16_0(Tile_X02_Y02_SB_T1_EAST_SB_OUT_B16), .SB_T1_WEST_SB_IN_B1_0(Tile_X02_Y02_SB_T1_EAST_SB_OUT_B1), .SB_T1_WEST_SB_OUT_B1(Tile_X03_Y02_SB_T1_WEST_SB_OUT_B1), .SB_T1_WEST_SB_OUT_B16(Tile_X03_Y02_SB_T1_WEST_SB_OUT_B16), .SB_T2_EAST_SB_IN_B16_0(const_0_16_out), .SB_T2_EAST_SB_IN_B1_0(const_0_1_out), .SB_T2_EAST_SB_OUT_B1(Tile_X03_Y02_SB_T2_EAST_SB_OUT_B1), .SB_T2_EAST_SB_OUT_B16(Tile_X03_Y02_SB_T2_EAST_SB_OUT_B16), .SB_T2_NORTH_SB_IN_B16_0(Tile_X03_Y01_SB_T2_SOUTH_SB_OUT_B16), .SB_T2_NORTH_SB_IN_B1_0(Tile_X03_Y01_SB_T2_SOUTH_SB_OUT_B1), .SB_T2_NORTH_SB_OUT_B1(Tile_X03_Y02_SB_T2_NORTH_SB_OUT_B1), .SB_T2_NORTH_SB_OUT_B16(Tile_X03_Y02_SB_T2_NORTH_SB_OUT_B16), .SB_T2_SOUTH_SB_IN_B16_0(const_0_16_out), .SB_T2_SOUTH_SB_IN_B1_0(const_0_1_out), .SB_T2_SOUTH_SB_OUT_B1(Tile_X03_Y02_SB_T2_SOUTH_SB_OUT_B1), .SB_T2_SOUTH_SB_OUT_B16(Tile_X03_Y02_SB_T2_SOUTH_SB_OUT_B16), .SB_T2_WEST_SB_IN_B16_0(Tile_X02_Y02_SB_T2_EAST_SB_OUT_B16), .SB_T2_WEST_SB_IN_B1_0(Tile_X02_Y02_SB_T2_EAST_SB_OUT_B1), .SB_T2_WEST_SB_OUT_B1(Tile_X03_Y02_SB_T2_WEST_SB_OUT_B1), .SB_T2_WEST_SB_OUT_B16(Tile_X03_Y02_SB_T2_WEST_SB_OUT_B16), .SB_T3_EAST_SB_IN_B16_0(const_0_16_out), .SB_T3_EAST_SB_IN_B1_0(const_0_1_out), .SB_T3_EAST_SB_OUT_B1(Tile_X03_Y02_SB_T3_EAST_SB_OUT_B1), .SB_T3_EAST_SB_OUT_B16(Tile_X03_Y02_SB_T3_EAST_SB_OUT_B16), .SB_T3_NORTH_SB_IN_B16_0(Tile_X03_Y01_SB_T3_SOUTH_SB_OUT_B16), .SB_T3_NORTH_SB_IN_B1_0(Tile_X03_Y01_SB_T3_SOUTH_SB_OUT_B1), .SB_T3_NORTH_SB_OUT_B1(Tile_X03_Y02_SB_T3_NORTH_SB_OUT_B1), .SB_T3_NORTH_SB_OUT_B16(Tile_X03_Y02_SB_T3_NORTH_SB_OUT_B16), .SB_T3_SOUTH_SB_IN_B16_0(const_0_16_out), .SB_T3_SOUTH_SB_IN_B1_0(const_0_1_out), .SB_T3_SOUTH_SB_OUT_B1(Tile_X03_Y02_SB_T3_SOUTH_SB_OUT_B1), .SB_T3_SOUTH_SB_OUT_B16(Tile_X03_Y02_SB_T3_SOUTH_SB_OUT_B16), .SB_T3_WEST_SB_IN_B16_0(Tile_X02_Y02_SB_T3_EAST_SB_OUT_B16), .SB_T3_WEST_SB_IN_B1_0(Tile_X02_Y02_SB_T3_EAST_SB_OUT_B1), .SB_T3_WEST_SB_OUT_B1(Tile_X03_Y02_SB_T3_WEST_SB_OUT_B1), .SB_T3_WEST_SB_OUT_B16(Tile_X03_Y02_SB_T3_WEST_SB_OUT_B16), .SB_T4_EAST_SB_IN_B16_0(const_0_16_out), .SB_T4_EAST_SB_IN_B1_0(const_0_1_out), .SB_T4_EAST_SB_OUT_B1(Tile_X03_Y02_SB_T4_EAST_SB_OUT_B1), .SB_T4_EAST_SB_OUT_B16(Tile_X03_Y02_SB_T4_EAST_SB_OUT_B16), .SB_T4_NORTH_SB_IN_B16_0(Tile_X03_Y01_SB_T4_SOUTH_SB_OUT_B16), .SB_T4_NORTH_SB_IN_B1_0(Tile_X03_Y01_SB_T4_SOUTH_SB_OUT_B1), .SB_T4_NORTH_SB_OUT_B1(Tile_X03_Y02_SB_T4_NORTH_SB_OUT_B1), .SB_T4_NORTH_SB_OUT_B16(Tile_X03_Y02_SB_T4_NORTH_SB_OUT_B16), .SB_T4_SOUTH_SB_IN_B16_0(const_0_16_out), .SB_T4_SOUTH_SB_IN_B1_0(const_0_1_out), .SB_T4_SOUTH_SB_OUT_B1(Tile_X03_Y02_SB_T4_SOUTH_SB_OUT_B1), .SB_T4_SOUTH_SB_OUT_B16(Tile_X03_Y02_SB_T4_SOUTH_SB_OUT_B16), .SB_T4_WEST_SB_IN_B16_0(Tile_X02_Y02_SB_T4_EAST_SB_OUT_B16), .SB_T4_WEST_SB_IN_B1_0(Tile_X02_Y02_SB_T4_EAST_SB_OUT_B1), .SB_T4_WEST_SB_OUT_B1(Tile_X03_Y02_SB_T4_WEST_SB_OUT_B1), .SB_T4_WEST_SB_OUT_B16(Tile_X03_Y02_SB_T4_WEST_SB_OUT_B16), .clk(Tile_X03_Y01_clk_out), .clk_out(Tile_X03_Y02_clk_out), .clk_pass_through(Tile_X03_Y01_clk_pass_through_out), .clk_pass_through_out(Tile_X03_Y02_clk_pass_through_out), .config_config_addr(Tile_X03_Y01_config_out_config_addr), .config_config_data(Tile_X03_Y01_config_out_config_data), .config_out_config_addr(Tile_X03_Y02_config_out_config_addr), .config_out_config_data(Tile_X03_Y02_config_out_config_data), .config_out_read(Tile_X03_Y02_config_out_read), .config_out_write(Tile_X03_Y02_config_out_write), .config_read(Tile_X03_Y01_config_out_read), .config_write(Tile_X03_Y01_config_out_write), .hi(Tile_X03_Y02_hi), .lo(Tile_X03_Y02_lo), .read_config_data(Tile_X03_Y02_read_config_data), .read_config_data_in(Tile_X03_Y01_read_config_data), .reset(Tile_X03_Y01_reset_out), .reset_out(Tile_X03_Y02_reset_out), .stall(Tile_X03_Y01_stall_out), .stall_out(Tile_X03_Y02_stall_out), .tile_id({Tile_X03_Y02_lo[7],Tile_X03_Y02_lo[7],Tile_X03_Y02_lo[6],Tile_X03_Y02_lo[6],Tile_X03_Y02_lo[5],Tile_X03_Y02_lo[5],Tile_X03_Y02_hi[5],Tile_X03_Y02_hi[4],Tile_X03_Y02_lo[3],Tile_X03_Y02_lo[3],Tile_X03_Y02_lo[2],Tile_X03_Y02_lo[2],Tile_X03_Y02_lo[1],Tile_X03_Y02_lo[1],Tile_X03_Y02_hi[1],Tile_X03_Y02_lo[0]}));
coreir_const #(.value(1'h0), .width(1)) const_0_1(.out(const_0_1_out));
coreir_const #(.value(16'h0000), .width(16)) const_0_16(.out(const_0_16_out));
coreir_const #(.value('h00000000), .width(32)) const_0_32(.out(const_0_32_out));
coreir_const #(.value(16'h0100), .width(16)) const_256_16(.out(const_256_16_out));
coreir_const #(.value(16'h0200), .width(16)) const_512_16(.out(const_512_16_out));
coreir_const #(.value(16'h0300), .width(16)) const_768_16(.out(const_768_16_out));
Or4x32 read_config_data_or_final(.I0(Tile_X00_Y02_read_config_data), .I1(Tile_X01_Y02_read_config_data), .I2(Tile_X02_Y02_read_config_data), .I3(Tile_X03_Y02_read_config_data), .O(read_config_data_or_final_O));
assign io2glb_16_X00_Y00 = Tile_X00_Y00_io2glb_16;
assign io2glb_16_X01_Y00 = Tile_X01_Y00_io2glb_16;
assign io2glb_16_X02_Y00 = Tile_X02_Y00_io2glb_16;
assign io2glb_16_X03_Y00 = Tile_X03_Y00_io2glb_16;
assign io2glb_1_X00_Y00 = Tile_X00_Y00_io2glb_1;
assign io2glb_1_X01_Y00 = Tile_X01_Y00_io2glb_1;
assign io2glb_1_X02_Y00 = Tile_X02_Y00_io2glb_1;
assign io2glb_1_X03_Y00 = Tile_X03_Y00_io2glb_1;
assign read_config_data = read_config_data_or_final_O;
endmodule

module Garnet (input [11:0] axi4_ctrl_araddr, output axi4_ctrl_arready, input axi4_ctrl_arvalid, input [11:0] axi4_ctrl_awaddr, output axi4_ctrl_awready, input axi4_ctrl_awvalid, output axi4_ctrl_interrupt, output [31:0] axi4_ctrl_rdata, input axi4_ctrl_rready, output [1:0] axi4_ctrl_rresp, output axi4_ctrl_rvalid, input [31:0] axi4_ctrl_wdata, output axi4_ctrl_wready, input axi4_ctrl_wvalid, output cgra_running_clk_out, input clk_in, input jtag_tck, input jtag_tdi, output jtag_tdo, input jtag_tms, input jtag_trst_n, input reset_in, input [31:0] soc_data_rd_addr, output [63:0] soc_data_rd_data, input soc_data_rd_en, input [31:0] soc_data_wr_addr, input [63:0] soc_data_wr_data, input [7:0] soc_data_wr_strb);
wire GlobalBuffer_32_1_1_17_32_32_32_12_inst0_cgra_done_pulse;
wire GlobalBuffer_32_1_1_17_32_32_32_12_inst0_config_done_pulse;
wire [31:0] GlobalBuffer_32_1_1_17_32_32_32_12_inst0_glb_config_rd_data;
wire [31:0] GlobalBuffer_32_1_1_17_32_32_32_12_inst0_glb_sram_config_rd_data;
wire [31:0] GlobalBuffer_32_1_1_17_32_32_32_12_inst0_glb_to_cgra_config_0_config_addr;
wire [31:0] GlobalBuffer_32_1_1_17_32_32_32_12_inst0_glb_to_cgra_config_0_config_data;
wire [0:0] GlobalBuffer_32_1_1_17_32_32_32_12_inst0_glb_to_cgra_config_0_read;
wire [0:0] GlobalBuffer_32_1_1_17_32_32_32_12_inst0_glb_to_cgra_config_0_write;
wire [15:0] GlobalBuffer_32_1_1_17_32_32_32_12_inst0_io_to_cgra_rd_data_0;
wire [0:0] GlobalBuffer_32_1_1_17_32_32_32_12_inst0_io_to_cgra_rd_data_valid;
wire [63:0] GlobalBuffer_32_1_1_17_32_32_32_12_inst0_soc_data_rd_data;
wire GlobalController_32_32_inst0_axi4_ctrl_arready;
wire GlobalController_32_32_inst0_axi4_ctrl_awready;
wire GlobalController_32_32_inst0_axi4_ctrl_interrupt;
wire [31:0] GlobalController_32_32_inst0_axi4_ctrl_rdata;
wire [1:0] GlobalController_32_32_inst0_axi4_ctrl_rresp;
wire GlobalController_32_32_inst0_axi4_ctrl_rvalid;
wire GlobalController_32_32_inst0_axi4_ctrl_wready;
wire GlobalController_32_32_inst0_cgra_soft_reset;
wire GlobalController_32_32_inst0_cgra_start_pulse;
wire GlobalController_32_32_inst0_clk_out;
wire [31:0] GlobalController_32_32_inst0_config_config_addr;
wire [31:0] GlobalController_32_32_inst0_config_config_data;
wire [0:0] GlobalController_32_32_inst0_config_read;
wire GlobalController_32_32_inst0_config_start_pulse;
wire [0:0] GlobalController_32_32_inst0_config_write;
wire [11:0] GlobalController_32_32_inst0_glb_config_config_addr;
wire [31:0] GlobalController_32_32_inst0_glb_config_config_data;
wire [0:0] GlobalController_32_32_inst0_glb_config_read;
wire [0:0] GlobalController_32_32_inst0_glb_config_write;
wire [31:0] GlobalController_32_32_inst0_glb_sram_config_config_addr;
wire [31:0] GlobalController_32_32_inst0_glb_sram_config_config_data;
wire [0:0] GlobalController_32_32_inst0_glb_sram_config_read;
wire [0:0] GlobalController_32_32_inst0_glb_sram_config_write;
wire GlobalController_32_32_inst0_glb_stall;
wire GlobalController_32_32_inst0_jtag_tdo;
wire GlobalController_32_32_inst0_reset_out;
wire [0:0] GlobalController_32_32_inst0_stall;
wire [15:0] Interconnect_inst0_io2glb_16_X00_Y00;
wire [15:0] Interconnect_inst0_io2glb_16_X01_Y00;
wire [15:0] Interconnect_inst0_io2glb_16_X02_Y00;
wire [15:0] Interconnect_inst0_io2glb_16_X03_Y00;
wire [0:0] Interconnect_inst0_io2glb_1_X00_Y00;
wire [0:0] Interconnect_inst0_io2glb_1_X01_Y00;
wire [0:0] Interconnect_inst0_io2glb_1_X02_Y00;
wire [0:0] Interconnect_inst0_io2glb_1_X03_Y00;
wire [31:0] Interconnect_inst0_read_config_data;
wire [0:0] const_0_1_out;
wire [15:0] const_0_16_out;
GlobalBuffer_32_1_1_17_32_32_32_12 GlobalBuffer_32_1_1_17_32_32_32_12_inst0(.cgra_config_config_addr(GlobalController_32_32_inst0_config_config_addr), .cgra_config_config_data(GlobalController_32_32_inst0_config_config_data), .cgra_config_read(GlobalController_32_32_inst0_config_read), .cgra_config_write(GlobalController_32_32_inst0_config_write), .cgra_done_pulse(GlobalBuffer_32_1_1_17_32_32_32_12_inst0_cgra_done_pulse), .cgra_start_pulse(GlobalController_32_32_inst0_cgra_start_pulse), .cgra_to_io_addr_high_0(Interconnect_inst0_io2glb_16_X02_Y00), .cgra_to_io_addr_low_0(Interconnect_inst0_io2glb_16_X03_Y00), .cgra_to_io_rd_en(Interconnect_inst0_io2glb_1_X00_Y00), .cgra_to_io_wr_data_0(Interconnect_inst0_io2glb_16_X01_Y00), .cgra_to_io_wr_en(Interconnect_inst0_io2glb_1_X01_Y00), .clk(GlobalController_32_32_inst0_clk_out), .config_done_pulse(GlobalBuffer_32_1_1_17_32_32_32_12_inst0_config_done_pulse), .config_start_pulse(GlobalController_32_32_inst0_config_start_pulse), .glb_config_config_addr(GlobalController_32_32_inst0_glb_config_config_addr), .glb_config_config_data(GlobalController_32_32_inst0_glb_config_config_data), .glb_config_rd_data(GlobalBuffer_32_1_1_17_32_32_32_12_inst0_glb_config_rd_data), .glb_config_read(GlobalController_32_32_inst0_glb_config_read), .glb_config_write(GlobalController_32_32_inst0_glb_config_write), .glb_sram_config_config_addr(GlobalController_32_32_inst0_glb_sram_config_config_addr), .glb_sram_config_config_data(GlobalController_32_32_inst0_glb_sram_config_config_data), .glb_sram_config_rd_data(GlobalBuffer_32_1_1_17_32_32_32_12_inst0_glb_sram_config_rd_data), .glb_sram_config_read(GlobalController_32_32_inst0_glb_sram_config_read), .glb_sram_config_write(GlobalController_32_32_inst0_glb_sram_config_write), .glb_to_cgra_config_0_config_addr(GlobalBuffer_32_1_1_17_32_32_32_12_inst0_glb_to_cgra_config_0_config_addr), .glb_to_cgra_config_0_config_data(GlobalBuffer_32_1_1_17_32_32_32_12_inst0_glb_to_cgra_config_0_config_data), .glb_to_cgra_config_0_read(GlobalBuffer_32_1_1_17_32_32_32_12_inst0_glb_to_cgra_config_0_read), .glb_to_cgra_config_0_write(GlobalBuffer_32_1_1_17_32_32_32_12_inst0_glb_to_cgra_config_0_write), .glc_to_io_stall(GlobalController_32_32_inst0_glb_stall), .io_to_cgra_rd_data_0(GlobalBuffer_32_1_1_17_32_32_32_12_inst0_io_to_cgra_rd_data_0), .io_to_cgra_rd_data_valid(GlobalBuffer_32_1_1_17_32_32_32_12_inst0_io_to_cgra_rd_data_valid), .reset(GlobalController_32_32_inst0_reset_out), .soc_data_rd_addr(soc_data_rd_addr), .soc_data_rd_data(GlobalBuffer_32_1_1_17_32_32_32_12_inst0_soc_data_rd_data), .soc_data_rd_en(soc_data_rd_en), .soc_data_wr_addr(soc_data_wr_addr), .soc_data_wr_data(soc_data_wr_data), .soc_data_wr_strb(soc_data_wr_strb));
GlobalController_32_32 GlobalController_32_32_inst0(.axi4_ctrl_araddr(axi4_ctrl_araddr), .axi4_ctrl_arready(GlobalController_32_32_inst0_axi4_ctrl_arready), .axi4_ctrl_arvalid(axi4_ctrl_arvalid), .axi4_ctrl_awaddr(axi4_ctrl_awaddr), .axi4_ctrl_awready(GlobalController_32_32_inst0_axi4_ctrl_awready), .axi4_ctrl_awvalid(axi4_ctrl_awvalid), .axi4_ctrl_interrupt(GlobalController_32_32_inst0_axi4_ctrl_interrupt), .axi4_ctrl_rdata(GlobalController_32_32_inst0_axi4_ctrl_rdata), .axi4_ctrl_rready(axi4_ctrl_rready), .axi4_ctrl_rresp(GlobalController_32_32_inst0_axi4_ctrl_rresp), .axi4_ctrl_rvalid(GlobalController_32_32_inst0_axi4_ctrl_rvalid), .axi4_ctrl_wdata(axi4_ctrl_wdata), .axi4_ctrl_wready(GlobalController_32_32_inst0_axi4_ctrl_wready), .axi4_ctrl_wvalid(axi4_ctrl_wvalid), .cgra_done_pulse(GlobalBuffer_32_1_1_17_32_32_32_12_inst0_cgra_done_pulse), .cgra_soft_reset(GlobalController_32_32_inst0_cgra_soft_reset), .cgra_start_pulse(GlobalController_32_32_inst0_cgra_start_pulse), .clk_in(clk_in), .clk_out(GlobalController_32_32_inst0_clk_out), .config_config_addr(GlobalController_32_32_inst0_config_config_addr), .config_config_data(GlobalController_32_32_inst0_config_config_data), .config_done_pulse(GlobalBuffer_32_1_1_17_32_32_32_12_inst0_config_done_pulse), .config_read(GlobalController_32_32_inst0_config_read), .config_start_pulse(GlobalController_32_32_inst0_config_start_pulse), .config_write(GlobalController_32_32_inst0_config_write), .glb_config_config_addr(GlobalController_32_32_inst0_glb_config_config_addr), .glb_config_config_data(GlobalController_32_32_inst0_glb_config_config_data), .glb_config_read(GlobalController_32_32_inst0_glb_config_read), .glb_config_write(GlobalController_32_32_inst0_glb_config_write), .glb_read_data_in(GlobalBuffer_32_1_1_17_32_32_32_12_inst0_glb_config_rd_data), .glb_sram_config_config_addr(GlobalController_32_32_inst0_glb_sram_config_config_addr), .glb_sram_config_config_data(GlobalController_32_32_inst0_glb_sram_config_config_data), .glb_sram_config_read(GlobalController_32_32_inst0_glb_sram_config_read), .glb_sram_config_write(GlobalController_32_32_inst0_glb_sram_config_write), .glb_sram_read_data_in(GlobalBuffer_32_1_1_17_32_32_32_12_inst0_glb_sram_config_rd_data), .glb_stall(GlobalController_32_32_inst0_glb_stall), .jtag_tck(jtag_tck), .jtag_tdi(jtag_tdi), .jtag_tdo(GlobalController_32_32_inst0_jtag_tdo), .jtag_tms(jtag_tms), .jtag_trst_n(jtag_trst_n), .read_data_in(Interconnect_inst0_read_config_data), .reset_in(reset_in), .reset_out(GlobalController_32_32_inst0_reset_out), .stall(GlobalController_32_32_inst0_stall));
Interconnect Interconnect_inst0(.clk(GlobalController_32_32_inst0_clk_out), .config_0_config_addr(GlobalBuffer_32_1_1_17_32_32_32_12_inst0_glb_to_cgra_config_0_config_addr), .config_0_config_data(GlobalBuffer_32_1_1_17_32_32_32_12_inst0_glb_to_cgra_config_0_config_data), .config_0_read(GlobalBuffer_32_1_1_17_32_32_32_12_inst0_glb_to_cgra_config_0_read), .config_0_write(GlobalBuffer_32_1_1_17_32_32_32_12_inst0_glb_to_cgra_config_0_write), .glb2io_16_X00_Y00(GlobalBuffer_32_1_1_17_32_32_32_12_inst0_io_to_cgra_rd_data_0), .glb2io_16_X01_Y00(const_0_16_out), .glb2io_16_X02_Y00(const_0_16_out), .glb2io_16_X03_Y00(const_0_16_out), .glb2io_1_X00_Y00(GlobalBuffer_32_1_1_17_32_32_32_12_inst0_io_to_cgra_rd_data_valid), .glb2io_1_X01_Y00(const_0_1_out), .glb2io_1_X02_Y00(const_0_1_out), .glb2io_1_X03_Y00(GlobalController_32_32_inst0_cgra_soft_reset), .io2glb_16_X00_Y00(Interconnect_inst0_io2glb_16_X00_Y00), .io2glb_16_X01_Y00(Interconnect_inst0_io2glb_16_X01_Y00), .io2glb_16_X02_Y00(Interconnect_inst0_io2glb_16_X02_Y00), .io2glb_16_X03_Y00(Interconnect_inst0_io2glb_16_X03_Y00), .io2glb_1_X00_Y00(Interconnect_inst0_io2glb_1_X00_Y00), .io2glb_1_X01_Y00(Interconnect_inst0_io2glb_1_X01_Y00), .io2glb_1_X02_Y00(Interconnect_inst0_io2glb_1_X02_Y00), .io2glb_1_X03_Y00(Interconnect_inst0_io2glb_1_X03_Y00), .read_config_data(Interconnect_inst0_read_config_data), .reset(GlobalController_32_32_inst0_reset_out), .stall(GlobalController_32_32_inst0_stall));
coreir_const #(.value(1'h0), .width(1)) const_0_1(.out(const_0_1_out));
coreir_const #(.value(16'h0000), .width(16)) const_0_16(.out(const_0_16_out));
assign axi4_ctrl_arready = GlobalController_32_32_inst0_axi4_ctrl_arready;
assign axi4_ctrl_awready = GlobalController_32_32_inst0_axi4_ctrl_awready;
assign axi4_ctrl_interrupt = GlobalController_32_32_inst0_axi4_ctrl_interrupt;
assign axi4_ctrl_rdata = GlobalController_32_32_inst0_axi4_ctrl_rdata;
assign axi4_ctrl_rresp = GlobalController_32_32_inst0_axi4_ctrl_rresp;
assign axi4_ctrl_rvalid = GlobalController_32_32_inst0_axi4_ctrl_rvalid;
assign axi4_ctrl_wready = GlobalController_32_32_inst0_axi4_ctrl_wready;
assign cgra_running_clk_out = GlobalController_32_32_inst0_clk_out;
assign jtag_tdo = GlobalController_32_32_inst0_jtag_tdo;
assign soc_data_rd_data = GlobalBuffer_32_1_1_17_32_32_32_12_inst0_soc_data_rd_data;
endmodule

