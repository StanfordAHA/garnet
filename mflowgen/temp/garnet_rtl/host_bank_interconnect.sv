//
//--------------------------------------------------------------------------------
//          THIS FILE WAS AUTOMATICALLY GENERATED BY THE GENESIS2 ENGINE        
//  FOR MORE INFORMATION: OFER SHACHAM (CHIP GENESIS INC / STANFORD VLSI GROUP)
//    !! THIS VERSION OF GENESIS2 IS NOT FOR ANY COMMERCIAL USE !!
//     FOR COMMERCIAL LICENSE CONTACT SHACHAM@ALUMNI.STANFORD.EDU
//--------------------------------------------------------------------------------
//
//  
//	-----------------------------------------------
//	|            Genesis Release Info             |
//	|  $Change: 11904 $ --- $Date: 2013/08/03 $   |
//	-----------------------------------------------
//	
//
//  Source file: /sim/ajcars/aha-arm-soc-june-2019/components/cgra/garnet/global_buffer/genesis/host_bank_interconnect.svp
//  Source template: host_bank_interconnect
//
// --------------- Begin Pre-Generation Parameters Status Report ---------------
//
//	From 'generate' statement (priority=5):
// Parameter num_banks 	= 32
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From Command Line input (priority=4):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From XML input (priority=3):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From Config File input (priority=2):
//
// ---------------- End Pre-Generation Pramameters Status Report ----------------

/*=============================================================================
** Module: host_bank_interconnect.sv
** Description:
**              Interface between host soc_ports and bank soc_ports
** Author: Taeyoung Kong
** Change history: 04/18/2019 - Implement first version
**===========================================================================*/
// num_banks (_GENESIS2_INHERITANCE_PRIORITY_) = 32
//

module host_bank_interconnect #(
    parameter integer BANK_DATA_WIDTH = 64,
    parameter integer BANK_ADDR_WIDTH = 17,
    parameter integer GLB_ADDR_WIDTH = 32
)
(

    input                                   clk,
    input                                   reset,
    
    input                                   host_wr_en,
    input        [BANK_DATA_WIDTH/8-1:0]    host_wr_strb,
    input        [GLB_ADDR_WIDTH-1:0]       host_wr_addr,
    input        [BANK_DATA_WIDTH-1:0]      host_wr_data,

    input                                   host_rd_en,
    input        [GLB_ADDR_WIDTH-1:0]       host_rd_addr,
    output logic [BANK_DATA_WIDTH-1:0]      host_rd_data,

    output logic                            host_to_bank_wr_en [31:0],
    output logic [BANK_DATA_WIDTH-1:0]      host_to_bank_wr_data [31:0],
    output logic [BANK_DATA_WIDTH-1:0]      host_to_bank_wr_data_bit_sel [31:0],
    output logic [BANK_ADDR_WIDTH-1:0]      host_to_bank_wr_addr [31:0],

    output logic                            host_to_bank_rd_en [31:0],
    input        [BANK_DATA_WIDTH-1:0]      bank_to_host_rd_data [31:0],
    output logic [BANK_ADDR_WIDTH-1:0]      host_to_bank_rd_addr [31:0]
);

//============================================================================//
// internal wire / reg declaration for write
//============================================================================//
logic                         int_host_wr_en [31:0];
logic [BANK_DATA_WIDTH-1:0]   int_host_wr_data;
logic [BANK_DATA_WIDTH/8-1:0] int_host_wr_strb;
logic [BANK_ADDR_WIDTH-1:0]   int_host_wr_addr;
logic                         int_host_wr_en_d1 [31:0];
logic [BANK_DATA_WIDTH-1:0]   int_host_wr_data_d1 [31:0];
logic [BANK_ADDR_WIDTH-1:0]   int_host_wr_addr_d1 [31:0];
logic [BANK_DATA_WIDTH/8-1:0] int_host_wr_strb_d1 [31:0];

//============================================================================//
// write muxing and pipeline
//============================================================================//
integer i;
always_comb begin
    for (i=0; i<32; i=i+1) begin
        int_host_wr_en[i] = host_wr_en && (i == host_wr_addr[GLB_ADDR_WIDTH-1:BANK_ADDR_WIDTH]);
    end
end
assign int_host_wr_data = host_wr_data;
assign int_host_wr_strb = host_wr_strb;
assign int_host_wr_addr = host_wr_addr[0 +: BANK_ADDR_WIDTH];

integer j;
always_ff @ (posedge clk) begin
    for (j=0; j<32; j=j+1) begin
        int_host_wr_en_d1[j] <= int_host_wr_en[j];
        int_host_wr_addr_d1[j] <= int_host_wr_addr;
        int_host_wr_data_d1[j] <= int_host_wr_data;
        int_host_wr_strb_d1[j] <= int_host_wr_strb;
    end
end

assign host_to_bank_wr_en = int_host_wr_en_d1;
assign host_to_bank_wr_addr = int_host_wr_addr_d1;
assign host_to_bank_wr_data = int_host_wr_data_d1;
always_comb begin
    for (integer i=0; i<32; i=i+1) begin
        for (integer j=0; j<BANK_DATA_WIDTH/8; j=j+1) begin
            // Byte-addressable
            host_to_bank_wr_data_bit_sel[i][j*8 +: 8] = {8{int_host_wr_strb_d1[i][j]}};
        end
    end
end

//============================================================================//
// internal wire / reg declaration for read
//============================================================================//
logic                                       int_host_rd_en [31:0];
logic [BANK_ADDR_WIDTH-1:0]                 int_host_rd_addr;

logic [BANK_DATA_WIDTH-1:0]                 int_host_rd_data;
logic [BANK_DATA_WIDTH-1:0]                 int_host_rd_data_d1 [31:0];

logic [GLB_ADDR_WIDTH-BANK_ADDR_WIDTH-1:0]  int_host_rd_bank_sel;
logic [GLB_ADDR_WIDTH-BANK_ADDR_WIDTH-1:0]  int_host_rd_bank_sel_d1;
logic [GLB_ADDR_WIDTH-BANK_ADDR_WIDTH-1:0]  int_host_rd_bank_sel_d2;

//============================================================================//
// read muxing and pipelining
//============================================================================//
assign int_host_rd_bank_sel = host_rd_addr[GLB_ADDR_WIDTH-1:BANK_ADDR_WIDTH];

always_ff @(posedge clk) begin
    int_host_rd_bank_sel_d1 <= int_host_rd_bank_sel;
    int_host_rd_bank_sel_d2 <= int_host_rd_bank_sel_d1;
end

integer ii;
always_comb begin
    for (ii=0; ii<32; ii=ii+1) begin
        int_host_rd_en[ii] = host_rd_en && (ii == int_host_rd_bank_sel);
        host_to_bank_rd_addr[ii] = host_rd_addr[0 +: BANK_ADDR_WIDTH];
    end
end

integer jj;
always_ff @(posedge clk) begin
    for (jj=0; jj<32; jj=jj+1) begin
        int_host_rd_data_d1[jj] <= bank_to_host_rd_data[jj];
    end
end

assign host_to_bank_rd_en = int_host_rd_en;
assign int_host_rd_data = int_host_rd_data_d1[int_host_rd_bank_sel_d2];

//===========================================================================//
// rd_data output assignment
//===========================================================================//
logic host_rd_en_d1;
logic host_rd_en_d2;
logic [BANK_DATA_WIDTH-1:0]   host_rd_data_reg;

always_ff @(posedge clk) begin
    host_rd_en_d1 <= host_rd_en;
    host_rd_en_d2 <= host_rd_en_d1;
end

always_ff @(posedge clk or posedge reset) begin
    if (reset) begin
        host_rd_data_reg <= 0;
    end
    else begin
        host_rd_data_reg <= host_rd_data;
    end
end

assign host_rd_data = host_rd_en_d2 ? int_host_rd_data : host_rd_data_reg;

endmodule
