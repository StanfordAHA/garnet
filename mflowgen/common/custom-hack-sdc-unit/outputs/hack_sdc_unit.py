#=================================================================#
# File: hack_sdc_unit.py
# Author: Po-Han Chen
# Usage: python hack_sdc_unit.py <sdc_file_path>
# Description: This script is used to hack the sdc file generated by
#              Innovus. Innovus creates the sdc in {ps, fF} unit,
#              but PrimeTime interprets the sdc in {ns, pF} unit.
#              This script does pattern matching to find the numbers
#              and scale them down by 1000x.
#=================================================================#

import sys
import os
import re

# check if the user provides a file path
if len(sys.argv) != 2:
    print("Usage: python hack_sdc_unit.py <sdc_file_path>")
    exit()
else:
    sdc_file_path = sys.argv[1]

print("===========================================================================================")

# For any number that goes after the following keywords
# This script scales it down by 1000x
keywords = [
    "-period",
    "-setup",
    "-rise",
    "-fall",
    "-max",
    "-min",
    "-add_delay",
    "set_input_transition",
    "set_max_transition",
    "set_max_delay",
    "set_min_delay"
]
regex_prefix = "(" + "|".join(keywords) + ")"

# A number can be negative, and can have a decimal point
# e.g. -0.123, 0.123, 123, -123
regex_number = "(-?\d+(\.\d+)?)"

# The pattern is: <keyword> <number>
# There can be more than one space between the keyword and the number
pattern = regex_prefix + "\s+" + regex_number

# Open the SDC file, read it into a string
with open(sdc_file_path, 'r') as f:
    sdc_string = f.read()
    # backup the original sdc file
    with open(sdc_file_path + ".backup", 'w') as f2:
        f2.write(sdc_string)

# print info

print(f"[hack_sdc_unit.py] Hacking SDC file: {sdc_file_path}...")
print(f"[hack_sdc_unit.py] This script scales the number that goes after the following keywords:")
for keyword in keywords:
    print(f"[hack_sdc_unit.py]     {keyword}")
print(f"[hack_sdc_unit.py] The pattern is: {pattern}")

# Initialize an offset for index adjustments
offset = 0

# Loop through every match
for match in re.finditer(pattern, sdc_string):

    # Get the match string, keyword, and number
    # where match_string = "<match_keyword> <match_number>"
    match_string = match.group(0)
    match_keyword = match.group(1)
    match_number = match.group(2)

    # Scale the number down by 1000x
    modified_number = float(match_number) / 1000.0
    modified_number = f"{modified_number:.8f}"

    # remove trailing zeros
    # 1.234000 -> 1.234
    # 1.000000 -> 1
    if '.' in modified_number:
        modified_number = modified_number.rstrip('0').rstrip('.')

    # generate modified string
    modified_string = match_string.replace(match_number, modified_number)

    # Calculate the start and end indices of the match
    start = match.start() + offset
    end = match.end() + offset

    # Replace the number in the sdc_string at the match location
    sdc_string = sdc_string[:start] + modified_string + sdc_string[end:]

    # Update the offset
    # why: everytime you modified the sdc_string, the actual location
    #      of the match in the sdc_string is changed accordingly.
    offset += len(modified_number) - len(match_number)

# Remove waveform {<some_number> <some_number>}
print(f"[hack_sdc_unit.py] Removing waveform from create_clock commands...")
regex = r'-waveform \{\d+(\.\d+)?\s+\d+(\.\d+)?\}'
sdc_string = re.sub(regex, '', sdc_string)

# remove the old file
if os.path.islink(sdc_file_path):
    os.unlink(sdc_file_path)
elif os.path.isfile(sdc_file_path):
    os.remove(sdc_file_path)
else:
    print(f"[hack_sdc_unit.py] Error: {sdc_file_path} is not a file or symlink")
    exit(1)

# Write the file out
with open(sdc_file_path, 'w') as file:
    file.write(sdc_string)

print(f"[hack_sdc_unit.py] Finished.")
print(f"[hack_sdc_unit.py] The modified sdc file is located at: {sdc_file_path}")
print(f"[hack_sdc_unit.py] The original sdc file is located at: {sdc_file_path}.backup")
print("===========================================================================================")
