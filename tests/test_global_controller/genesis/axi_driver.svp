/*=============================================================================
** Module: axi_driver.sv
** Description:
**              driver for the axi interface
** Author: Taeyoung Kong
** Change history:  05/07/2019 - Implement first version of axi driver
**===========================================================================*/

//; # get ifc object from the design
//; my $ifc_obj = $self->get_top_param('IFC');
//; my $ref_clk = parameter(Name=>'ReferenceClkName', Val=>'Clk');

parameter axi_data_width = 32;
parameter axi_addr_width = 32;
parameter axi_op_width   = 8;

typedef enum logic [axi_op_width-1:0] {
    axi_tst={{4{1'b1}}, {4'd1}}, axi_reset={{4{1'b1}}, {4'd2}}, axi_stall={{4{1'b1}}, {4'd3}}, axi_rd_delay={{4{1'b1}}, {4'd4}}, axi_glb_config={{4{1'b1}}, {4'd5}}, axi_glb_sram={{4{1'b1}}, {4'd6}}, axi_cgra_ctrl={{4{1'b1}}, {4'd7}}} axi_op_t;

typedef struct {
    logic [axi_data_width-1:0] data_in;
    logic [axi_data_width-1:0] data_out;
    logic [axi_addr_width-1:0] addr;
    axi_op_t op;
} axi_trans_t;

//============================================================================//
// Class axi_driver
//============================================================================//
class `mname`;
    virtual `$ifc_obj->mname()`.test ifc; // interface for the axi signals

    int verbose;

    // current transaction 
    axi_trans_t cur_trans;
   
    function new(virtual `$ifc_obj->mname()`.test ifc);
        this.verbose = 1;
        this.ifc = ifc;
    endfunction 

    //============================================================================//
    // Extern tasks in axi driver
    //============================================================================//
    // write axi instruction
    extern task axi_write(input [axi_addr_width-1:0] addr, 
                                 input [axi_data_width-1:0] data);
    // read axi instruction
    extern task axi_read(input [axi_addr_width-1:0] addr);

    extern task Write(input axi_trans_t new_trans);
    extern task Read(input axi_trans_t new_trans);

    // get the results of the latest transaction sent
    extern function axi_trans_t GetResult();

    // reset
    extern task Reset();

endclass: `mname`


//============================================================================//
// Axi driver function
// Get the results of the latest transaction sent
//============================================================================//
function axi_trans_t `mname`::GetResult();
    return cur_trans;
endfunction // axi_trans_t
   
//============================================================================//
// AXI transaction task
//============================================================================//
task `mname`::Reset();
  repeat (2) @(posedge this.ifc.`$ref_clk`);
  this.ifc.AWADDR = 0;
  this.ifc.AWVALID = 0;
  this.ifc.WDATA = 0;
  this.ifc.WVALID = 0;
  this.ifc.ARADDR = 0;
  this.ifc.ARVALID = 0;
  this.ifc.RREADY = 0;
  repeat (2) @(posedge this.ifc.`$ref_clk`);
endtask // Reset

task `mname`::Write(input axi_trans_t new_trans);
    cur_trans = new_trans;
    @(posedge this.ifc.`$ref_clk`);
    this.ifc.AWADDR = cur_trans.addr;
    this.ifc.AWVALID = 1;
    for (int i=0; i<100; i++) begin
        if (this.ifc.AWREADY==1) break;
        @(posedge this.ifc.`$ref_clk`);
    end
    @(posedge this.ifc.`$ref_clk`);
    this.ifc.AWVALID = 0;
    @(posedge this.ifc.`$ref_clk`);
    this.ifc.WDATA = cur_trans.data_in;
    this.ifc.WVALID = 1;
    for (int i=0; i<100; i++) begin
        if (this.ifc.WREADY==1) break;
        @(posedge this.ifc.`$ref_clk`);
    end
    @(posedge this.ifc.`$ref_clk`);
    this.ifc.WVALID = 0;
    @(posedge this.ifc.`$ref_clk`);
endtask // Write

task `mname`::Read(input axi_trans_t new_trans);
    cur_trans = new_trans;
    @(posedge this.ifc.`$ref_clk`);
    this.ifc.ARADDR = cur_trans.addr;
    this.ifc.ARVALID = 1;
    this.ifc.RREADY = 1;
    for (int i=0; i<100; i++) begin
        if (this.ifc.ARREADY==1) break;
        @(posedge this.ifc.`$ref_clk`);
    end
    @(posedge this.ifc.`$ref_clk`);
    this.ifc.ARVALID = 0;
    @(posedge this.ifc.`$ref_clk`);
    for (int i=0; i<100; i++) begin
        if (this.ifc.RVALID==1) break;
        @(posedge this.ifc.`$ref_clk`);
    end
    cur_trans.data_out = this.ifc.RDATA;
    @(posedge this.ifc.`$ref_clk`);
    this.ifc.RREADY = 0;
    @(posedge this.ifc.`$ref_clk`);
endtask // Read

task `mname`::axi_write(input [axi_addr_width-1:0] addr,
                               input [axi_data_width-1:0] data);
    axi_trans_t axi_trans;
    axi_trans.addr = addr;
    axi_trans.data_in = data;
    Write(axi_trans);
endtask // axi_write

task `mname`::axi_read(input [axi_addr_width-1:0] addr);
    axi_trans_t axi_trans;
    axi_trans.addr = addr;
    Read(axi_trans);
endtask // axi_read
