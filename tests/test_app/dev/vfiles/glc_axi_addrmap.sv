//
//--------------------------------------------------------------------------------
//          THIS FILE WAS AUTOMATICALLY GENERATED BY THE GENESIS2 ENGINE        
//  FOR MORE INFORMATION: OFER SHACHAM (CHIP GENESIS INC / STANFORD VLSI GROUP)
//    !! THIS VERSION OF GENESIS2 IS NOT FOR ANY COMMERCIAL USE !!
//     FOR COMMERCIAL LICENSE CONTACT SHACHAM@ALUMNI.STANFORD.EDU
//--------------------------------------------------------------------------------
//
//  
//	-----------------------------------------------
//	|            Genesis Release Info             |
//	|  $Change: 11904 $ --- $Date: 2013/08/03 $   |
//	-----------------------------------------------
//	
//
//  Source file: /aha/garnet/global_controller/rtl/genesis/glc_axi_addrmap.svp
//  Source template: glc_axi_addrmap
//
// --------------- Begin Pre-Generation Parameters Status Report ---------------
//
//	From 'generate' statement (priority=5):
// Parameter axi_data_width 	= 32
// Parameter block_axi_addr_width 	= 12
// Parameter cfg_data_width 	= 32
// Parameter glb_addr_width 	= 19
// Parameter cgra_width 	= 8
// Parameter cfg_addr_width 	= 32
// Parameter num_glb_tiles 	= 4
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From Command Line input (priority=4):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From XML input (priority=3):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From Config File input (priority=2):
//
// ---------------- End Pre-Generation Pramameters Status Report ----------------

/*=============================================================================
** Module: glc_axi_addrmap.svp
** Description:
**              Global Controller JTAG Address Map Controller
** Author: Taeyoung Kong
** Change history: 04/10/2020
**      - Initial version
**===========================================================================*/

// cfg_data_width (_GENESIS2_INHERITANCE_PRIORITY_) = 32
//
// cfg_addr_width (_GENESIS2_INHERITANCE_PRIORITY_) = 32
//
// axi_data_width (_GENESIS2_INHERITANCE_PRIORITY_) = 32
//
// block_axi_addr_width (_GENESIS2_INHERITANCE_PRIORITY_) = 12
//
// glb_addr_width (_GENESIS2_INHERITANCE_PRIORITY_) = 19
//
// num_glb_tiles (_GENESIS2_INHERITANCE_PRIORITY_) = 4
//
// cgra_width (_GENESIS2_INHERITANCE_PRIORITY_) = 8
//

// local parameter

module glc_axi_addrmap (
    input  logic                                clk,
    input  logic                                reset,

    // cgra control signals
    output logic                                axi_global_reset,
    output logic [3:0]         axi_glb_clk_en_master, 
    output logic [3:0]         axi_glb_clk_en_bank_master, 
    output logic [3:0]         axi_glb_pcfg_broadcast_stall, 
    output logic [$clog2(4)*2-1:0] axi_glb_flush_crossbar_sel, 
    output logic [7:0]            axi_cgra_stall, 

	// global buffer control signals
	output logic [3:0]         strm_g2f_start_pulse,
	output logic [3:0]         strm_f2g_start_pulse,
	output logic [3:0]         pc_start_pulse,
	input  logic [3:0]         strm_g2f_interrupt_pulse,
	input  logic [3:0]         strm_f2g_interrupt_pulse,
	input  logic [3:0]         pcfg_g2f_interrupt_pulse,

    // axi global controller configuration
    input  logic                                axi_glc_cfg_wr_en,
    input  logic                                axi_glc_cfg_wr_clk_en,
    input  logic [11:0]  axi_glc_cfg_wr_addr,
    input  logic [31:0]        axi_glc_cfg_wr_data,
    input  logic                                axi_glc_cfg_rd_en,
    input  logic                                axi_glc_cfg_rd_clk_en,
    input  logic [11:0]  axi_glc_cfg_rd_addr,
    output logic [31:0]        axi_glc_cfg_rd_data,
    output logic                                axi_glc_cfg_rd_data_valid,

    // jtag to axi addressmap
    input  logic                                jtag_axi_wr_en,
    input  logic [11:0]  jtag_axi_wr_addr,
    input  logic [31:0]        jtag_axi_wr_data,
    input  logic                                jtag_axi_rd_en,
    input  logic [11:0]  jtag_axi_rd_addr,
    output logic [31:0]        jtag_axi_rd_data,
    output logic                                jtag_axi_rd_data_valid,

    // cgra configuration
    output logic                                axi_cgra_cfg_read,
    output logic                                axi_cgra_cfg_write,
    output logic [31:0]        axi_cgra_cfg_addr,
    output logic [31:0]        axi_cgra_cfg_wr_data,
    input  logic [31:0]        axi_cgra_cfg_data_in,

    output logic                                interrupt
);

//============================================================================//
// Internal logic
//============================================================================//
    //------- inputs
    logic     [31:0] h2l_global_reset_cnt_w;
    logic    h2l_global_reset_cnt_we;
    logic    h2l_strm_f2g_isr_tile_0_intr;
    logic    h2l_strm_f2g_isr_tile_1_intr;
    logic    h2l_strm_f2g_isr_tile_2_intr;
    logic    h2l_strm_f2g_isr_tile_3_intr;
    logic    h2l_strm_f2g_isr_tile_4_intr;
    logic    h2l_strm_f2g_isr_tile_5_intr;
    logic    h2l_strm_f2g_isr_tile_6_intr;
    logic    h2l_strm_f2g_isr_tile_7_intr;
    logic    h2l_strm_f2g_isr_tile_8_intr;
    logic    h2l_strm_f2g_isr_tile_9_intr;
    logic    h2l_strm_f2g_isr_tile_10_intr;
    logic    h2l_strm_f2g_isr_tile_11_intr;
    logic    h2l_strm_f2g_isr_tile_12_intr;
    logic    h2l_strm_f2g_isr_tile_13_intr;
    logic    h2l_strm_f2g_isr_tile_14_intr;
    logic    h2l_strm_f2g_isr_tile_15_intr;
    logic    h2l_strm_g2f_isr_tile_0_intr;
    logic    h2l_strm_g2f_isr_tile_1_intr;
    logic    h2l_strm_g2f_isr_tile_2_intr;
    logic    h2l_strm_g2f_isr_tile_3_intr;
    logic    h2l_strm_g2f_isr_tile_4_intr;
    logic    h2l_strm_g2f_isr_tile_5_intr;
    logic    h2l_strm_g2f_isr_tile_6_intr;
    logic    h2l_strm_g2f_isr_tile_7_intr;
    logic    h2l_strm_g2f_isr_tile_8_intr;
    logic    h2l_strm_g2f_isr_tile_9_intr;
    logic    h2l_strm_g2f_isr_tile_10_intr;
    logic    h2l_strm_g2f_isr_tile_11_intr;
    logic    h2l_strm_g2f_isr_tile_12_intr;
    logic    h2l_strm_g2f_isr_tile_13_intr;
    logic    h2l_strm_g2f_isr_tile_14_intr;
    logic    h2l_strm_g2f_isr_tile_15_intr;
    logic    h2l_par_cfg_g2f_isr_tile_0_intr;
    logic    h2l_par_cfg_g2f_isr_tile_1_intr;
    logic    h2l_par_cfg_g2f_isr_tile_2_intr;
    logic    h2l_par_cfg_g2f_isr_tile_3_intr;
    logic    h2l_par_cfg_g2f_isr_tile_4_intr;
    logic    h2l_par_cfg_g2f_isr_tile_5_intr;
    logic    h2l_par_cfg_g2f_isr_tile_6_intr;
    logic    h2l_par_cfg_g2f_isr_tile_7_intr;
    logic    h2l_par_cfg_g2f_isr_tile_8_intr;
    logic    h2l_par_cfg_g2f_isr_tile_9_intr;
    logic    h2l_par_cfg_g2f_isr_tile_10_intr;
    logic    h2l_par_cfg_g2f_isr_tile_11_intr;
    logic    h2l_par_cfg_g2f_isr_tile_12_intr;
    logic    h2l_par_cfg_g2f_isr_tile_13_intr;
    logic    h2l_par_cfg_g2f_isr_tile_14_intr;
    logic    h2l_par_cfg_g2f_isr_tile_15_intr;
    logic     [31:0] h2l_cgra_config_write_cnt_w;
    logic    h2l_cgra_config_write_cnt_we;
    logic     [31:0] h2l_cgra_config_read_cnt_w;
    logic    h2l_cgra_config_read_cnt_we;
    logic     [31:0] h2l_cgra_config_rd_data_data_w;
    logic    h2l_cgra_config_rd_data_data_we;
    logic     [6:2] h2d_pio_dec_address;
    logic     [31:0] h2d_pio_dec_write_data;
    logic    h2d_pio_dec_write;
    logic    h2d_pio_dec_read;

    //------- outputs
    logic     [31:0] l2h_global_reset_cnt_r;
    logic     [31:0] l2h_cgra_stall_stall_r;
    logic     [15:0] l2h_glb_clk_en_master_clk_en_r;
    logic     [15:0] l2h_glb_clk_en_bank_master_clk_en_r;
    logic     [15:0] l2h_glb_pcfg_broadcast_stall_stall_r;
    logic     [31:0] l2h_glb_flush_crossbar_sel_r;
    logic    h2l_global_isr_strm_f2g_w;
    logic    h2l_global_isr_strm_g2f_w;
    logic    h2l_global_isr_par_cfg_g2f_w;
    logic    l2h_stream_start_pulse_g2f_glb_tile_0_r;
    logic    l2h_stream_start_pulse_g2f_glb_tile_1_r;
    logic    l2h_stream_start_pulse_g2f_glb_tile_2_r;
    logic    l2h_stream_start_pulse_g2f_glb_tile_3_r;
    logic    l2h_stream_start_pulse_g2f_glb_tile_4_r;
    logic    l2h_stream_start_pulse_g2f_glb_tile_5_r;
    logic    l2h_stream_start_pulse_g2f_glb_tile_6_r;
    logic    l2h_stream_start_pulse_g2f_glb_tile_7_r;
    logic    l2h_stream_start_pulse_g2f_glb_tile_8_r;
    logic    l2h_stream_start_pulse_g2f_glb_tile_9_r;
    logic    l2h_stream_start_pulse_g2f_glb_tile_10_r;
    logic    l2h_stream_start_pulse_g2f_glb_tile_11_r;
    logic    l2h_stream_start_pulse_g2f_glb_tile_12_r;
    logic    l2h_stream_start_pulse_g2f_glb_tile_13_r;
    logic    l2h_stream_start_pulse_g2f_glb_tile_14_r;
    logic    l2h_stream_start_pulse_g2f_glb_tile_15_r;
    logic    l2h_stream_start_pulse_f2g_glb_tile_0_r;
    logic    l2h_stream_start_pulse_f2g_glb_tile_1_r;
    logic    l2h_stream_start_pulse_f2g_glb_tile_2_r;
    logic    l2h_stream_start_pulse_f2g_glb_tile_3_r;
    logic    l2h_stream_start_pulse_f2g_glb_tile_4_r;
    logic    l2h_stream_start_pulse_f2g_glb_tile_5_r;
    logic    l2h_stream_start_pulse_f2g_glb_tile_6_r;
    logic    l2h_stream_start_pulse_f2g_glb_tile_7_r;
    logic    l2h_stream_start_pulse_f2g_glb_tile_8_r;
    logic    l2h_stream_start_pulse_f2g_glb_tile_9_r;
    logic    l2h_stream_start_pulse_f2g_glb_tile_10_r;
    logic    l2h_stream_start_pulse_f2g_glb_tile_11_r;
    logic    l2h_stream_start_pulse_f2g_glb_tile_12_r;
    logic    l2h_stream_start_pulse_f2g_glb_tile_13_r;
    logic    l2h_stream_start_pulse_f2g_glb_tile_14_r;
    logic    l2h_stream_start_pulse_f2g_glb_tile_15_r;
    logic    l2h_pc_start_pulse_glb_tile_0_r;
    logic    l2h_pc_start_pulse_glb_tile_1_r;
    logic    l2h_pc_start_pulse_glb_tile_2_r;
    logic    l2h_pc_start_pulse_glb_tile_3_r;
    logic    l2h_pc_start_pulse_glb_tile_4_r;
    logic    l2h_pc_start_pulse_glb_tile_5_r;
    logic    l2h_pc_start_pulse_glb_tile_6_r;
    logic    l2h_pc_start_pulse_glb_tile_7_r;
    logic    l2h_pc_start_pulse_glb_tile_8_r;
    logic    l2h_pc_start_pulse_glb_tile_9_r;
    logic    l2h_pc_start_pulse_glb_tile_10_r;
    logic    l2h_pc_start_pulse_glb_tile_11_r;
    logic    l2h_pc_start_pulse_glb_tile_12_r;
    logic    l2h_pc_start_pulse_glb_tile_13_r;
    logic    l2h_pc_start_pulse_glb_tile_14_r;
    logic    l2h_pc_start_pulse_glb_tile_15_r;
    logic    l2h_strm_f2g_isr_intr_o;
    logic    l2h_strm_g2f_isr_intr_o;
    logic    l2h_par_cfg_g2f_isr_intr_o;
    logic    l2h_global_isr_intr_o;
    logic     [31:0] l2h_cgra_config_addr_addr_r;
    logic     [31:0] l2h_cgra_config_wr_data_data_r;
    logic     [31:0] l2h_cgra_config_write_cnt_r;
    logic    l2h_cgra_config_write_cnt_ored_o;
    logic     [31:0] l2h_cgra_config_read_cnt_r;
    logic    l2h_cgra_config_read_cnt_ored_o;
    logic     [31:0] l2h_cgra_config_rd_data_data_r;
    logic     [31:0] d2h_dec_pio_read_data;
    logic    d2h_dec_pio_ack;
    logic    d2h_dec_pio_nack;

    // internal logic
    logic [31:0] wr_data_internal;
    logic [4:0] addr_internal;
    logic read_internal;
    logic write_internal;
    logic rd_en_d1, rd_en_d2;
    logic is_jtag, is_jtag_d1, is_jtag_d2;
    logic [31:0] axi_rd_data_internal, axi_rd_data_next;
    logic [31:0] jtag_rd_data_internal, jtag_rd_data_next;
    logic axi_rd_data_valid_internal, axi_rd_data_valid_next;
    logic jtag_rd_data_valid_internal, jtag_rd_data_valid_next;
    logic axi_wr_id_match, axi_rd_id_match;
    logic jtag_wr_id_match, jtag_rd_id_match;
    logic interrupt_internal;

//============================================================================//
// assigns
//============================================================================//
// read/write control logic
assign h2d_pio_dec_write_data = wr_data_internal;
assign h2d_pio_dec_address = addr_internal;
assign h2d_pio_dec_read = read_internal;
assign h2d_pio_dec_write = write_internal;

// configuration registers
assign h2l_strm_f2g_isr_tile_0_intr = strm_f2g_interrupt_pulse[0];
assign h2l_strm_f2g_isr_tile_1_intr = strm_f2g_interrupt_pulse[1];
assign h2l_strm_f2g_isr_tile_2_intr = strm_f2g_interrupt_pulse[2];
assign h2l_strm_f2g_isr_tile_3_intr = strm_f2g_interrupt_pulse[3];

assign h2l_strm_g2f_isr_tile_0_intr = strm_g2f_interrupt_pulse[0];
assign h2l_strm_g2f_isr_tile_1_intr = strm_g2f_interrupt_pulse[1];
assign h2l_strm_g2f_isr_tile_2_intr = strm_g2f_interrupt_pulse[2];
assign h2l_strm_g2f_isr_tile_3_intr = strm_g2f_interrupt_pulse[3];

assign h2l_par_cfg_g2f_isr_tile_0_intr = pcfg_g2f_interrupt_pulse[0];
assign h2l_par_cfg_g2f_isr_tile_1_intr = pcfg_g2f_interrupt_pulse[1];
assign h2l_par_cfg_g2f_isr_tile_2_intr = pcfg_g2f_interrupt_pulse[2];
assign h2l_par_cfg_g2f_isr_tile_3_intr = pcfg_g2f_interrupt_pulse[3];

assign strm_g2f_start_pulse[0] = l2h_stream_start_pulse_g2f_glb_tile_0_r;
assign strm_g2f_start_pulse[1] = l2h_stream_start_pulse_g2f_glb_tile_1_r;
assign strm_g2f_start_pulse[2] = l2h_stream_start_pulse_g2f_glb_tile_2_r;
assign strm_g2f_start_pulse[3] = l2h_stream_start_pulse_g2f_glb_tile_3_r;

assign strm_f2g_start_pulse[0] = l2h_stream_start_pulse_f2g_glb_tile_0_r;
assign strm_f2g_start_pulse[1] = l2h_stream_start_pulse_f2g_glb_tile_1_r;
assign strm_f2g_start_pulse[2] = l2h_stream_start_pulse_f2g_glb_tile_2_r;
assign strm_f2g_start_pulse[3] = l2h_stream_start_pulse_f2g_glb_tile_3_r;

assign pc_start_pulse[0] = l2h_pc_start_pulse_glb_tile_0_r;
assign pc_start_pulse[1] = l2h_pc_start_pulse_glb_tile_1_r;
assign pc_start_pulse[2] = l2h_pc_start_pulse_glb_tile_2_r;
assign pc_start_pulse[3] = l2h_pc_start_pulse_glb_tile_3_r;

assign axi_glb_clk_en_master = l2h_glb_clk_en_master_clk_en_r;
assign axi_glb_clk_en_bank_master = l2h_glb_clk_en_bank_master_clk_en_r;
assign axi_glb_pcfg_broadcast_stall = l2h_glb_pcfg_broadcast_stall_stall_r;
assign axi_glb_flush_crossbar_sel = l2h_glb_flush_crossbar_sel_r;
assign axi_cgra_stall = l2h_cgra_stall_stall_r;

assign interrupt_internal = l2h_global_isr_intr_o;

// global reset controller
assign axi_global_reset = (l2h_global_reset_cnt_r > 0);

assign h2l_global_reset_cnt_we = (l2h_global_reset_cnt_r > 0);
assign h2l_global_reset_cnt_w = l2h_global_reset_cnt_r - 1;

//============================================================================//
// interrupt register
//============================================================================//
always_ff @(posedge clk or posedge reset) begin
    if (reset) begin
        interrupt <= 0;
    end
    else begin
        interrupt <= interrupt_internal;
    end
end

//============================================================================//
// cgra config control logic
//============================================================================//
always_comb begin
    h2l_cgra_config_write_cnt_w = l2h_cgra_config_write_cnt_r - 1;
    h2l_cgra_config_write_cnt_we = (l2h_cgra_config_write_cnt_r > 0);
    h2l_cgra_config_read_cnt_w = l2h_cgra_config_read_cnt_r - 1;
    h2l_cgra_config_read_cnt_we = (l2h_cgra_config_read_cnt_r > 0);
end

always_comb begin
    axi_cgra_cfg_read = l2h_cgra_config_read_cnt_ored_o;
    axi_cgra_cfg_write = l2h_cgra_config_write_cnt_ored_o;
    axi_cgra_cfg_addr = '0;
    axi_cgra_cfg_wr_data = '0;
    if (axi_cgra_cfg_read) begin
        axi_cgra_cfg_addr = l2h_cgra_config_addr_addr_r;
    end
    else if (axi_cgra_cfg_write) begin
        axi_cgra_cfg_addr = l2h_cgra_config_addr_addr_r;
        axi_cgra_cfg_wr_data = l2h_cgra_config_wr_data_data_r;
    end
end

always_comb begin
    h2l_cgra_config_rd_data_data_w = axi_cgra_cfg_data_in;
    h2l_cgra_config_rd_data_data_we = axi_cgra_cfg_read;
end

//============================================================================//
// axi control logic
//============================================================================//
always_comb begin
    axi_wr_id_match = (axi_glc_cfg_wr_addr[11:7] == 0);
    axi_rd_id_match = (axi_glc_cfg_rd_addr[11:7] == 0);
    jtag_wr_id_match = (jtag_axi_wr_addr[11:7] == 0);
    jtag_rd_id_match = (jtag_axi_rd_addr[11:7] == 0);
end

always_comb begin
    wr_data_internal = '0;
    addr_internal = '0;
    read_internal = 0;
    write_internal = 0;
    is_jtag = 0;
    // write address override read address when both are asserted
    if (axi_glc_cfg_wr_en & axi_wr_id_match) begin
        wr_data_internal = axi_glc_cfg_wr_data;
        addr_internal = axi_glc_cfg_wr_addr[6:2];
        write_internal = 1;
        is_jtag = 0;
    end
    else if (axi_glc_cfg_rd_en & axi_rd_id_match) begin
        addr_internal = axi_glc_cfg_rd_addr[6:2];
        read_internal = 1;
        is_jtag = 0;
    end
    else if (jtag_axi_wr_en & jtag_wr_id_match) begin
        wr_data_internal = jtag_axi_wr_data;
        addr_internal = jtag_axi_wr_addr[6:2];
        write_internal = 1;
        is_jtag = 1;
    end
    else if (jtag_axi_rd_en & jtag_rd_id_match) begin
        addr_internal = jtag_axi_rd_addr[6:2];
        read_internal = 1;
        is_jtag = 1;
    end
end

always_ff @(posedge clk or posedge reset) begin
    if (reset) begin
        rd_en_d1 <= 0;
        rd_en_d2 <= 0;
        is_jtag_d1 <= 0;
        is_jtag_d2 <= 0;
    end
    else begin
        rd_en_d1 <= read_internal;
        rd_en_d2 <= rd_en_d1;
        is_jtag_d1 <= is_jtag;
        is_jtag_d2 <= is_jtag_d1;
    end
end

always_comb begin
    axi_rd_data_valid_next = 0;
    axi_rd_data_next = '0;
    if (~is_jtag_d2 & rd_en_d2 & (d2h_dec_pio_ack | d2h_dec_pio_nack)) begin
        axi_rd_data_valid_next = 1;
        axi_rd_data_next = d2h_dec_pio_read_data;
    end
end

always_comb begin
    jtag_rd_data_valid_next = 0;
    jtag_rd_data_next = '0;
    if (is_jtag_d2 & rd_en_d2 & (d2h_dec_pio_ack | d2h_dec_pio_nack)) begin
        jtag_rd_data_valid_next = 1;
        jtag_rd_data_next = d2h_dec_pio_read_data;
    end
end


always_ff @(posedge clk or posedge reset) begin
    if (reset) begin
        axi_rd_data_valid_internal <= 0;
        axi_rd_data_internal <= '0;
        jtag_rd_data_valid_internal <= 0;
        jtag_rd_data_internal <= '0;
    end
    else begin
        axi_rd_data_valid_internal <= axi_rd_data_valid_next;
        axi_rd_data_internal <= axi_rd_data_next;
        jtag_rd_data_valid_internal <= jtag_rd_data_valid_next;
        jtag_rd_data_internal <= jtag_rd_data_next;
    end
end

always_comb begin
    axi_glc_cfg_rd_data = axi_rd_data_internal;
    axi_glc_cfg_rd_data_valid = axi_rd_data_valid_internal;
    jtag_axi_rd_data = jtag_rd_data_internal;
    jtag_axi_rd_data_valid = jtag_rd_data_valid_internal;
end

//============================================================================//
// glc_pio instantiation
//============================================================================//
glc_pio glc_pio(
    .*
);

endmodule
