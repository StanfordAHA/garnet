/*=============================================================================
** Module: top.sv
** Description:
**              top for garnet testbench
** Author: Taeyoung Kong, Michael Oduoza
** Change history:
**  10/14/2020 - Taeyoung Kong: Implement the first version
**  11/28/2024 - Michael Oduoza: add matrix unit support to testing environment
**==============================================================================*/

//============================================================================//
// Genesis parameter declaration
//============================================================================//
//; use POSIX;
//; my $using_matrix_unit = parameter(NAME => 'using_matrix_unit', VAL => 0, DOC => 'Indicates if matrix unit ifc should be included');
//; my $oc_0 = parameter(NAME => 'oc_0', VAL => 32, DOC => 'Matrix unit output channel unrolling');
//; my $mu_datawidth = parameter(NAME => 'mu_datawidth', VAL => 16, DOC => 'Width of data coming from matrix unit');

\`define DBG_TBTOP 0 // Set to '1' for debugging

\`ifndef CLK_PERIOD
\`define CLK_PERIOD 1ns
\`endif

import global_buffer_param::*;
import matrix_unit_param::*;

module top;
    // FIXME every other module assumes timescale == 1ps/1ps
    // FIXME this one should do the same !!!
    // (Also see time_check function in garnet_test.sv)
    timeunit 1ns; timeprecision 1ps;

    logic clk;
    logic reset;
    logic interrupt;

    //============================================================================//
    // clk / reset generation
    //============================================================================//
    // clk generation
    initial begin
        clk = 0;
        forever #(\`CLK_PERIOD / 2.0) clk = !clk;
    end

    // Print a debug message every once in awhile
    initial begin
         $display("[%0t] Model running...\n", $time);
         $display("[%0t]", $time);
         forever #(\`CLK_PERIOD * 1000) $display("[%0t]", $time);
     end


     \`ifdef verilator
        // Dump out the wave info
        // FIXME think about moving this to verilator top-level CGRA.cpp or whatever
        initial begin
            if ($test$plusargs("trace") != 0) begin
                $display("[%0t] Tracing to logs/vlt_dump.vcd...\n", $time);
                $dumpfile("logs/vlt_dump.vcd");
                $dumpvars();
            end
        end
    \`endif

    // reset generation
    initial begin
        // Change reset to give a clear up-and-down pulse
        reset = 0; if (\`DBG_TBTOP) $display("[%0t] reset = 0", $time);
        repeat (3) @(posedge clk);
        reset = 1; if (\`DBG_TBTOP) $display("[%0t] reset = 1", $time);
        repeat (3) @(posedge clk);
        reset = 0; if (\`DBG_TBTOP) $display("[%0t] reset = 0\n", $time);
    end

    //============================================================================//
    // Proc interface and axi interface 
    //============================================================================//
    proc_ifc p_ifc (.clk(clk));
    axil_ifc #(
        .ADDR_WIDTH(CGRA_AXI_ADDR_WIDTH),
        .DATA_WIDTH(CGRA_AXI_DATA_WIDTH)
    ) axil_ifc (
        .clk(clk)
    );


    //; if ($using_matrix_unit) {
    //============================================================================//
    // Matrix unit ifc 
    //============================================================================//
    logic [`$mu_datawidth-1`:0] mu2cgra [`$oc_0-1`:0];
    logic mu2cgra_valid;
    logic cgra2mu_ready; 

    behavioral_matrix_unit #(
        .MU_DATAWIDTH(`$mu_datawidth`),
        .OC_0(`$oc_0`)
    ) mu_ifc (
        .clk(clk),
        .reset(reset),
        //.cgra2mu_ready(cgra2mu_ready_row0),
        .cgra2mu_ready(cgra2mu_ready),
        .mu2cgra_valid(mu2cgra_valid),
        .mu2cgra(mu2cgra)
    );
//; } else {
     // NOT IN USE 
      behavioral_matrix_unit #(
        .MU_DATAWIDTH(`$mu_datawidth`),
        .OC_0(`$oc_0`)
    ) mu_ifc (
        .clk(clk),
        .reset(reset),
        //.cgra2mu_ready(cgra2mu_ready_row0),
        .cgra2mu_ready(1'b0),
        .mu2cgra_valid(/* NO CONN */ ),
        .mu2cgra(/* NO CONN */ )
    );
//; }



    //============================================================================//
    // instantiate test
    //============================================================================//
    garnet_test test (
        .clk     (clk),
        .reset   (reset),
        .p_ifc   (p_ifc),
        .axil_ifc(axil_ifc),
        .mu_ifc (mu_ifc)
    );


    //============================================================================//
    // instantiate dut
    //============================================================================//
    Garnet dut (
        // clk/reset/interrupt
        .clk_in              (clk),
        .reset_in            (reset),
        .interrupt           (interrupt),
        .cgra_running_clk_out(  /*unused*/),

        // proc ifc
        .proc_packet_wr_en        (p_ifc.wr_en),
        .proc_packet_wr_strb      (p_ifc.wr_strb),
        .proc_packet_wr_addr      (p_ifc.wr_addr),
        .proc_packet_wr_data      (p_ifc.wr_data),
        .proc_packet_rd_en        (p_ifc.rd_en),
        .proc_packet_rd_addr      (p_ifc.rd_addr),
        .proc_packet_rd_data      (p_ifc.rd_data),
        .proc_packet_rd_data_valid(p_ifc.rd_data_valid),

        // axi4-lite ifc
        .axi4_slave_araddr (axil_ifc.araddr),
        .axi4_slave_arready(axil_ifc.arready),
        .axi4_slave_arvalid(axil_ifc.arvalid),
        .axi4_slave_awaddr (axil_ifc.awaddr),
        .axi4_slave_awready(axil_ifc.awready),
        .axi4_slave_awvalid(axil_ifc.awvalid),
        .axi4_slave_bready (axil_ifc.bready),
        .axi4_slave_bresp  (axil_ifc.bresp),
        .axi4_slave_bvalid (axil_ifc.bvalid),
        .axi4_slave_rdata  (axil_ifc.rdata),
        .axi4_slave_rready (axil_ifc.rready),
        .axi4_slave_rresp  (axil_ifc.rresp),
        .axi4_slave_rvalid (axil_ifc.rvalid),
        .axi4_slave_wdata  (axil_ifc.wdata),
        .axi4_slave_wready (axil_ifc.wready),
        .axi4_slave_wvalid (axil_ifc.wvalid),

        // jtag ifc
        .jtag_tck   (  /*unused*/),
        .jtag_tdi   (  /*unused*/),
        .jtag_tdo   (  /*unused*/),
        .jtag_tms   (  /*unused*/),

    //; if ($using_matrix_unit) {
        .jtag_trst_n(  /*unused*/),

        // matrix unit ifc
        .mu2cgra_valid (mu2cgra_valid),
        .cgra2mu_ready (cgra2mu_ready),

        // MO: Temporary HACK
        //.cgra2mu_ready_row0(cgra2mu_ready_row0),
        .mu2cgra(mu2cgra)

    //; } else {
        .jtag_trst_n(  /*unused*/)

    //; }
     );
endmodule
