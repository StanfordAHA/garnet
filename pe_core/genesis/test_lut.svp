//; my $lut_inps = parameter(Name=>'lut_inps',
//;                               Val=>2, Min=>2, Step=>1, Max=>16,
//;                               Doc=>"Number of inputs to a LUT");
//;
//;my $c_in_decl = ($lut_inps > 3) ? "[".($lut_inps-3).":0]" : "     ";
//;
module  `mname`  #(
  parameter DataWidth = 16
) (
  input                  cfg_clk,
  input                  cfg_rst_n,
  input  [31:0]          cfg_d,
  input  [7:0]           cfg_a,
  input                  cfg_en,

  input  [DataWidth-1:0] op_a_in,
  input  [DataWidth-1:0] op_b_in,

//; if ($lut_inps > 2) {
  input  `$c_in_decl`        op_c_in,
//;}
  output logic [31:0] read_data,
  output logic [DataWidth-1:0] res
);

genvar ggg;
generate
  for (ggg = 0; ggg < DataWidth; ggg = ggg +1) begin : GEN_LUT

    logic [`2**$lut_inps-1`:0] lut;

    always_ff @(posedge cfg_clk or negedge cfg_rst_n) begin
      if(~cfg_rst_n) begin
        lut   <= `2**$lut_inps`'h0;
      end else if(cfg_en && (cfg_a == $unsigned(ggg/4)) ) begin
//; my $cfg_index = 2**$lut_inps;
//; if ($cfg_index > 32) {$cfg_index = 32;}
//; if((2**$lut_inps) > 32) {
        lut   <= {`(2**$lut_inps)/32`{cfg_d[`$cfg_index-1`: 0]}};
//; } else {
        lut   <= cfg_d[`$cfg_index-1`: 0];
//; }
      end
    end

//; if ($lut_inps > 2) {
    assign res[ggg] = lut[{op_c_in, op_b_in[ggg], op_a_in[ggg]}];
//;} else {
    assign res[ggg] = lut[{op_b_in[ggg], op_a_in[ggg]}];
//;}
    assign read_data = {`32-(2**$lut_inps)`'b0, lut};
  end
endgenerate


logic [31:0] nc_cfg_d;
assign nc_cfg_d = cfg_d;

endmodule




