//; my $reg_inputs = parameter(Name=>'reg_inputs', val=> 1, List=>[1, 0], doc=>'Add register on the inputs');
//; my $reg_out    = parameter(Name=>'reg_out', val=> 0, List=>[1, 0], doc=>'Add register on the outputs');
//;
//; my $use_add   = parameter(Name=>'use_add', val=> 2, List=>[2, 1, 0], doc=>'0 - no adders, 1 - simple ADDs, 2 - SAD');
//; my $use_cntr  = parameter(Name=>'use_cntr', val=> 1, List=>[1, 0],  doc=>'0 - no counter mode, 1 - enable counter mode');
//; my $use_bool  = parameter(Name=>'use_bool', Val=> 1, List=>[1, 0], Doc=>"0 - no booleans, 1 - simple gates");
//; my $use_shift = parameter(Name=>'use_shift', val=> 1, List=>[1, 0], doc=>'Use shift operations');
//; my $mult_mode = parameter(Name=>'mult_mode', val=> 2, List=>[2, 1, 0], doc=>'Use MAD(2) or MULT(1) or None(0)');
//; my $use_div   = parameter(Name=>'use_div', val=> 0, List=>[1, 0],  doc=>'0 - no divide, 1 - enable iterrative divide');
//; my $is_msb    = parameter(Name=>'is_msb', val=> 0, List=>[1, 0], doc=>'1 - MSB in 32b mode, 0 - LSB result');
//; my $en_double = parameter(Name=>'en_double', val=> 0, List=>[1, 0], doc=>'1 - 32b supported, 0 - No 32b support');
//;
//; my $en_opt   = parameter(Name=>'en_opt', val=> 1, List=>[1, 0], doc=>'Use shifter area optimization?');
//; my $en_trick = parameter(Name=>'en_trick', val=> 0, List=>[1, 0], doc=>'Shiter sharing trick in double presition');
//;
//; my $use_abs     = parameter(Name=>'use_abs', val=> 1, List=>[1, 0],  doc=>'0 - no ABS, 1 - enable ABS');
//; my $use_max_min = parameter(Name=>'use_max_min', val=> 1, List=>[1, 0],  doc=>'0 - no max/min, 1 - enable max/min');
//; my $use_relu    = parameter(Name=>'use_relu', val=> 1, List=>[1, 0],  doc=>'0 - no relu, 1 - enable relu');
//;
//; my $get_carry = parameter(Name=>'get_carry', val=> 1, List=>[1, 0], doc=>'1 - output carry, 0 - No carry');
//;
//; my $debug = $self->parameter(name=>'debug', val=> 0, List=>[1, 0], doc=>'Generate extra code for debug');
//;
//; my $use_flip  = $self->parameter(name=>'use_flip', val=> 0, List=>[1, 0], doc=>'Add option to flip inputs?');
//;
//; my $use_acc  = $self->parameter(name=>'use_acc', val=> 0, List=>[1, 0], doc=>'Enable accumulation?');
//;
//; my $en_ovfl = parameter(Name=>'en_ovfl', val=> 1, List=>[1, 0], doc=>'Enable overflow signals?');
//;
//; my $en_debug = parameter(Name=>'en_debug', val=> 1, List=>[1, 0], doc=>'Enable debuging registers?');
//;
//;
//; my $lut_inps  = parameter(Name=>'lut_inps',
//;                               Val=> 3, Min=>0, Step=>1, Max=>16,
//;                               Doc=>"0 - no LUT, 1-16 - uses LUTs with that number of inputs");
//;
//;
//; my $use_lut  = ($lut_inps > 1);
//;
//; my $use_c_input = ($use_add > 1) or ($mult_mode > 1) or ($lut_inps > 3);

//; my $filename = "PE".$self->mname();
//; open(PEINFO, ">$filename") or die "Couldn't open file $filename, $!";
//; my $pe_info_hash;
//; my $opcode_alu_bitl = 0;
//; my $opcode_alu_bith = 6;
//; my $opcode_flip_bitl = 8;
//; my $opcode_flip_bith = 8;
//; my $opcode_acc_en_bitl = 9;
//; my $opcode_acc_en_bith = 9;
//; my $opcode_irq_en_bitl = 10;
//; my $opcode_irq_en_bith = 11;
//; my $opcode_flag_sel_bitl = 12;
//; my $opcode_flag_sel_bith = 15;

//; my $rename_hash;

/*
use_add   = `$use_add  `
mult_mode = `$mult_mode`
lut_inps  = `$lut_inps `

use_abs     = `$use_abs    `
use_max_min = `$use_max_min`
use_relu    = `$use_relu   `

*/

module   `mname`  #(
  parameter DataWidth = 16
) (
//; if($use_lut || $reg_inputs || $reg_out) {
  input                clk,
  input                rst_n,
  input                clk_en,
//;}

//; if($use_lut || $reg_inputs) {
  input         [31:0] cfg_d,
  input         [7:0]  cfg_a,
  input                cfg_en,

//;} else {
  input [15:0]                  op_code,
//;}

  input  [DataWidth-1:0]        data0,//op_a_in,
//; if($en_double & $use_shift) {
  input  [DataWidth-1:0]        op_a_shift,
//; }
  input  [DataWidth-1:0]        data1,//op_b_in,
//; if($use_c_input) {
  input  [DataWidth-1:0]        data2,//op_c_in,
//;}
  input                         bit0,//op_d_p_in,
  input                         bit1,//op_e_p_in,
  input                         bit2,//op_f_p_in,

//; if($en_double & $use_add > 0) {
//;   if($is_msb) {
  input [`$use_add -1`:0]       carry_in,
  input                         cmpr_eq_in,
//;   } else {
  input                         res_p_msb,
  output [`$use_add -1`:0]      carry_out,
  output                        cmpr_eq_out,
//;   }
//; }
//; if($use_div) {
  input        [DataWidth-1:0]   div_oper,
//;   if(!$is_msb & !$en_double) {
  input                          res_p_msb,
//;   }
//;   if(!$is_msb) {
  output logic [DataWidth-1:0]   div_co,
//;   }
//;}


  output logic [DataWidth-1:0]  res,
//; if($en_double & $mult_mode > 0) {
  output logic [2*DataWidth-1:0] mult_res,
//;}
//; if($en_debug) {
  output logic                   irq,
//;}
  output logic                   res_p
);

logic  [DataWidth-1:0]        op_a;
logic  [DataWidth-1:0]        op_b;
//; if($use_c_input) {
logic  [DataWidth-1:0]        op_c;
//; }
logic                         op_d_p;
logic                         op_e_p;
logic                         op_f_p;

logic [DataWidth-1:0] comp_res;
logic                 comp_res_p;
logic                 res_p_w;

//; if(($use_add > 0) & ($get_carry & !($en_double & !$is_msb))) {
  logic [`$use_add -1`:0]             carry_out;
//;}


//; if($reg_inputs) {


logic [15:0] inp_code;
logic [15:0] op_code;

always_ff @(posedge clk or negedge rst_n) begin
  if(~rst_n) begin
    inp_code <= 'h0;
    op_code  <= 'h0;
  end else if(cfg_en && (&cfg_a)) begin // (&cfg_a) means cfg_a == 8'hFF
    inp_code <= cfg_d[31:16];
    op_code  <= cfg_d[15:0];
  end
end


logic [15:0] nc_inp_code;
assign nc_inp_code = inp_code;
logic [15:0] nc_op_code;
assign nc_op_code = op_code;

//; my $op_a_r = generate_base('test_opt_reg', 'test_opt_reg_a');
`$op_a_r->mname()` #(.DataWidth(DataWidth)) `$op_a_r->iname()`
(
  .clk        (clk),
  .clk_en     (clk_en),
  .rst_n      (rst_n),
  .load       (cfg_en && (cfg_a == 8'hF0)),
  .val        (cfg_d[DataWidth-1:0]),
  .mode       (inp_code[1:0]),
  .data_in    (data0),//op_a_in),
  .res        (op_a)
);

//; $pe_info_hash->{ '2_reg_a' } = {
//;   address => '0xff',
//;   out => 'a',
//;   bitl => 16,
//;   bith => 17,
//;   mname => $op_a_r->mname()
//; };

//; $pe_info_hash->{ '3_init_a' } = {
//;   address => '0xf0',
//;   out => 'a',
//;   bitl => 0,
//;   bith => 15,
//; };

//; my $op_b_r = clone($op_a_r, 'test_opt_reg_b');

logic                 op_b_ld;
logic [DataWidth-1:0] op_b_val;
//; if($use_acc) {

logic en_acc;
assign en_acc = op_code[`$opcode_acc_en_bith`:`$opcode_acc_en_bitl`];
//; }

//; if($use_cntr) {
  logic cntr_en;
  //logic [DataWidth-1:0] cntr_next;
//; }

//;
//;my $b_en_acc = '';
//;my $b_acc_rst = '';
//;
//;if ($use_cntr) {
//;  $b_en_acc = 'cntr_en';
//;  $b_acc_rst = '(cntr_en & comp_res_p)';
//;}
//;
//;if ($use_acc) {
//;  if ($use_cntr) {
//;    $b_en_acc  = $b_en_acc  . '|';
//;    $b_acc_rst = $b_acc_rst . '|';
//;  }
//;
//;  $b_en_acc  = $b_en_acc  . 'en_acc';
//;  $b_acc_rst = $b_acc_rst . '(en_acc & op_d_p)';
//;}
//;


//; if($use_cntr | $use_acc) {
  assign op_b_ld  = (cfg_en && (cfg_a == 8'hF1)) | (clk_en & (`$b_en_acc`));
  assign op_b_val = cfg_en ?
                    cfg_d[DataWidth-1:0] :
                    (`$b_acc_rst` ? {DataWidth{1'b0}}: comp_res);

//;} else {
  assign op_b_ld  = cfg_en && (cfg_a == 8'hF1);
  assign op_b_val = cfg_d[DataWidth-1:0];
//;}


`$op_b_r->mname()` #(.DataWidth(DataWidth)) `$op_b_r->iname()`
(
  .clk        (clk),
  .clk_en     (clk_en),
  .rst_n      (rst_n),
  .load       (op_b_ld),
  .val        (op_b_val),
  .mode       (inp_code[3:2]),
  .data_in    (data1),//op_b_in),
  .res        (op_b)
);

//; $pe_info_hash->{ '2_reg_b' } = {
//;   address => '0xff',
//;   out => 'b',
//;   bitl => 18,
//;   bith => 19,
//;   mname => $op_b_r->mname()
//; };
//; $pe_info_hash->{ '3_init_b' } = {
//;   address => '0xf1',
//;   out => 'b',
//;   bitl => 0,
//;   bith => 15,
//; };


//; if($use_c_input) {
//;   my $op_c_r = clone($op_a_r, 'test_opt_reg_c');
`$op_c_r->mname()` #(.DataWidth(DataWidth)) `$op_c_r->iname()`
(
  .clk        (clk),
  .clk_en     (clk_en),
  .rst_n      (rst_n),
  .load       (cfg_en && (cfg_a == 8'hF2)),
  .val        (cfg_d[DataWidth-1:0]),
  .mode       (inp_code[5:4]),
  .data_in    (data2),//op_c_in),
  .res        (op_c)
);
//; $pe_info_hash->{ '2_reg_c' } = {
//;   address => '0xff',
//;   out => 'c',
//;   bitl => 20,
//;   bith => 21,
//;   mname => $op_c_r->mname()
//; };
//; $pe_info_hash->{ '3_init_c' } = {
//;   address => '0xf2',
//;   out => 'c',
//;   bitl => 0,
//;   bith => 15,
//; };
//; }


//;my $op_d_r = clone($op_a_r, 'test_opt_reg_d');
`$op_d_r->mname()` #(.DataWidth(1)) `$op_d_r->iname()`
(
  .clk        (clk),
  .clk_en     (clk_en),
  .rst_n      (rst_n),
  .load       (cfg_en && (cfg_a == 8'hF3)),
  .val        (cfg_d[0]),
  .mode       (inp_code[9:8]),
  .data_in    (bit0),//op_d_p_in),
  .res        (op_d_p)
);

//; $pe_info_hash->{ '2_reg_d' } = {
//;   address => '0xff',
//;   out => 'd',
//;   bitl => 24,
//;   bith => 25,
//;   mname => $op_d_r->mname()
//; };
//; $pe_info_hash->{ '3_init_d' } = {
//;   address => '0xf3',
//;   out => 'd',
//;   bitl => 0,
//;   bith => 0,
//; };

//;my $op_e_r = clone($op_a_r, 'test_opt_reg_e');
`$op_e_r->mname()` #(.DataWidth(1)) `$op_e_r->iname()`
(
  .clk        (clk),
  .clk_en     (clk_en),
  .rst_n      (rst_n),
  .load       (cfg_en && (cfg_a == 8'hF4)),
  .val        (cfg_d[0]),
  .mode       (inp_code[11:10]),
  .data_in    (bit1),//op_e_p_in),
  .res        (op_e_p)
);

//; $pe_info_hash->{ '2_reg_e' } = {
//;   address => '0xff',
//;   out => 'e',
//;   bitl => 26,
//;   bith => 27,
//;   mname => $op_e_r->mname()
//; };
//; $pe_info_hash->{ '3_init_e' } = {
//;   address => '0xf4',
//;   out => 'e',
//;   bitl => 0,
//;   bith => 0,
//; };

//;my $op_f_r = clone($op_a_r, 'test_opt_reg_f');
`$op_f_r->mname()` #(.DataWidth(1)) `$op_f_r->iname()`
(
  .clk        (clk),
  .clk_en     (clk_en),
  .rst_n      (rst_n),
  .load       (cfg_en && (cfg_a == 8'hF5)),
  .val        (cfg_d[0]),
  .mode       (inp_code[13:12]),
  .data_in    (bit2),//op_f_p_in),
  .res        (op_f_p)
);

//; $pe_info_hash->{ '2_reg_f' } = {
//;   address => '0xff',
//;   out => 'f',
//;   bitl => 28,
//;   bith => 29,
//;   mname => $op_f_r->mname()
//; };
//; $pe_info_hash->{ '3_init_f' } = {
//;   address => '0xf5',
//;   out => 'f',
//;   bitl => 0,
//;   bith => 0,
//; };

//;} else {
assign op_a = data0;//op_a_in;
assign op_b = data1;//op_b_in;
//; if($use_c_input) {
assign op_c = data2;//op_c_in;
//; }
assign op_d_p = bit0;//op_d_p_in;

//;}

//; if ($use_flip){
logic flip_inputs;
assign flip_inputs = op_code[`$opcode_flip_bitl`:`$opcode_flip_bith`]; // WARNING:: 'Flip' is not supported for 'double' mode
//;}

//; if($en_ovfl) {
logic V;

//;}


//; my $pe_comp = generate('test_pe_comp', 'test_pe_comp', "use_bool"=>$use_bool, "use_add"=>$use_add,
//;                         "use_cntr" => $use_cntr, "use_shift"=>$use_shift, "mult_mode"=>$mult_mode,
//;                         "use_div" => $use_div, "is_msb"=>$is_msb, "en_double"=>$en_double,
//;                         "use_relu" => $use_relu, "en_opt"=>$en_opt, "en_trick"=>$en_trick,
//;                         "use_abs"=>$use_abs, "use_max_min"=>$use_max_min,
//;                         "get_carry" => $get_carry, "en_ovfl" => $en_ovfl,
//;                         "debug"=>$debug);

`$pe_comp->instantiate()`
(
  .op_code (op_code[7:0]),

//; if($use_flip) {
  .op_a     (flip_inputs ? op_b : op_a),
  .op_b     (flip_inputs ? op_a : op_b),
//; } else {
  .op_a     (op_a),
  .op_b     (op_b),
//; }
//; if($en_double & $use_shift) {
  .op_a_shift (op_a_shift),
//; }
//; if($use_c_input) {
  .op_c     (op_c),
//;}
  .op_d_p   (op_d_p),


//; if($en_double & $use_add > 0) {
//;   if($is_msb) {
  .carry_in    (carry_in  ),
  .cmpr_eq_in  (cmpr_eq_in),
//;   } else {
  .res_p_msb   (res_p_msb  ),
  .cmpr_eq_out (cmpr_eq_out),
//;   }
//; }
//; if(($use_add > 0) & ($get_carry | ($en_double & !$is_msb))) {
  .carry_out   (carry_out  ),
//;}

//; if($use_div) {
  .div_oper    (div_oper),
//;   if(!$is_msb & !$en_double) {
  .res_p_msb   (res_p_msb  ),
//;   }
//;   if(!$is_msb) {
  .div_co      (div_co),
//;   }
//;}


//; if($use_cntr) {
  .cntr_en  (cntr_en),
  //.cntr_next(cntr_next),
//;}
  .res      (comp_res),
//; if($en_double & $mult_mode > 0) {
  .mult_res (mult_res),
//;}
//; if($en_ovfl) {
  .ovfl     (V),
//;}
  .res_p    (comp_res_p)
);

//; $pe_info_hash->{ '1_pe_comp' } = {
//;   address => '0xff',
//;   bitl => $opcode_alu_bitl,
//;   bith => $opcode_alu_bith,
//;   mname => $pe_comp->mname()
//; };


logic result_flag;
//; if($use_lut) {
logic res_lut;
//; }

//; if($get_carry) {
    logic Z;
    logic N;
    logic C;

//; 	  if(!$en_ovfl) {
   logic V;
   assign V = 1'b0;
//;	    }

    logic [3:0] flag_sel;

    assign flag_sel = op_code[`$opcode_flag_sel_bith`: `$opcode_flag_sel_bitl`];

    assign C = carry_out[`$use_add -1`];
    assign Z = ~|comp_res;
    assign N = comp_res[DataWidth-1];

    localparam PE_FLAG_EQ = 4'h0;
    localparam PE_FLAG_NE = 4'h1;
    localparam PE_FLAG_CS = 4'h2;
    localparam PE_FLAG_CC = 4'h3;
    localparam PE_FLAG_MI = 4'h4;
    localparam PE_FLAG_PL = 4'h5;
    localparam PE_FLAG_VS = 4'h6;
    localparam PE_FLAG_VC = 4'h7;
    localparam PE_FLAG_HI = 4'h8;
    localparam PE_FLAG_LS = 4'h9;
    localparam PE_FLAG_GE = 4'hA;
    localparam PE_FLAG_LT = 4'hB;
    localparam PE_FLAG_GT = 4'hC;
    localparam PE_FLAG_LE = 4'hD;
//; if($use_lut) {
    localparam PE_FLAG_LUT = 4'hE;
//; }
    localparam PE_FLAG_PE  = 4'hF;

    always_comb begin
        case (flag_sel)
            PE_FLAG_EQ  : result_flag = Z;
            PE_FLAG_NE  : result_flag = ~Z;
            PE_FLAG_CS  : result_flag = C;
            PE_FLAG_CC  : result_flag = ~C;
            PE_FLAG_MI  : result_flag = N;
            PE_FLAG_PL  : result_flag = ~N;
            PE_FLAG_VS  : result_flag = V;
            PE_FLAG_VC  : result_flag = ~V;
            PE_FLAG_HI  : result_flag = C & ~Z;
            PE_FLAG_LS  : result_flag = ~C | Z;
            PE_FLAG_GE  : result_flag = (N == V);
            PE_FLAG_LT  : result_flag = (N != V);
            PE_FLAG_GT  : result_flag = ~Z & (N == V);
            PE_FLAG_LE  : result_flag = Z | (N != V);
//; if($use_lut) {
            PE_FLAG_LUT : result_flag = res_lut;
//; }
            PE_FLAG_PE  : result_flag = comp_res_p;

            default     : result_flag = comp_res_p;
        endcase
    end


    //assign result_flag = |({Z,N, C, comp_res_p} & flag_mask);
//; } else {
    assign result_flag = comp_res_p;
//; }




//; if($use_lut) {
//;#logic res_lut;

//; my $lut           = generate_base('test_lut', 'test_lut', "lut_inps"=>$lut_inps);
//; my $lut_extra_inp = $lut->get_param('lut_inps') > 2;
//; my $lut_c_inp     = "";
//; my $c_in_slice    = ($lut->get_param('lut_inps') == 3) ? "[0]" : "[".($lut_inps-3).":0]";
//; if( $lut->get_param('lut_inps') == 3) {
//;    $lut_c_inp     = "op_f_p";
//; } elsif($use_c_input) {
//;    $lut_c_inp     = "op_c".$c_in_slice;
//; }

// `$lut->mname()` #(.DataWidth(1)) `$lut->iname()`
// (
//   .cfg_clk  (clk),
//   .cfg_rst_n(rst_n),
//   .cfg_d    (cfg_d),
//   .cfg_a    (cfg_a),
//   .cfg_en   (cfg_en),
// 
//   .op_a_in  (op_d_p),
//   .op_b_in  (op_e_p),
// //; if($lut_extra_inp){
//   .op_c_in  (`$lut_c_inp`),
// //;}
// 
//   .res      (res_lut)
// );
// 
// //; 	 if($get_carry) {
//   assign res_p_w = result_flag;
// //;	 } else {
//   assign res_p_w = op_code[12] ? res_lut : result_flag;//comp_res_p;
// //;	 }
// 
// 
// //;} else {
// 
//   assign res_p_w = result_flag;//comp_res_p;
//;}

//; my $res_w = 'comp_res';
//;
//; if($use_cntr & $use_acc) {
//;  $res_w = '(cntr_en | en_acc) ? op_b : comp_res';
//; } elsif($use_cntr) {
//;  $res_w = '(cntr_en) ? op_b : comp_res';
//; } elsif($use_cntr) {
//;  $res_w = '(en_acc) ? op_b : comp_res';
//; }
//;


//; if($reg_out) {
always_ff @(posedge clk or negedge rst_n) begin
  if(~rst_n) begin
    res   <= 16'h0;
    res_p <= 1'b0;
  end else begin
    res   <= `$res_w`;
    res_p <= res_p_w;
  end
end
//; } else {
  assign res   = `$res_w`;
  //assign res_p = res_p_w;
  assign res_p = result_flag;
//;}

//; if($en_debug) {

logic irq_data;
logic irq_bit;

//; my $debug_d = generate_base('test_debug_reg', 'test_debug_data');
`$debug_d->mname()` #(.DataWidth(DataWidth)) `$debug_d->iname()`
(
  .cfg_clk   (clk),
  .cfg_rst_n (rst_n),
  .cfg_d     (cfg_d),
  .cfg_en    (cfg_en && (cfg_a == 8'hE0)),

  .data_in   (res),

  .debug_irq (irq_data)
);

//; my $debug_b = clone($debug_d, 'test_debug_bit');
`$debug_b->mname()` #(.DataWidth(1)) `$debug_b->iname()`
(
  .cfg_clk   (clk),
  .cfg_rst_n (rst_n),
  .cfg_d     (cfg_d),
  .cfg_en    (cfg_en && (cfg_a == 8'hE1)),

  .data_in   (res_p),

  .debug_irq (irq_bit)
);

logic [1:0] irq_en;
assign irq_en = op_code[`$opcode_irq_en_bith` :`$opcode_irq_en_bitl` ];

assign irq = |({irq_data,irq_bit} & irq_en);

//;}

//; $rename_hash = {
//;   wire_a => 'data0',
//;   wire_b => 'data1',
//;   wire_c => 'data2',
//;   wire_d => 'bit0',
//;   wire_e => 'bit1',
//;   wire_f => 'bit2'
//; };

//;#######################################################################
//;## Generate pe info
//;##
//;#######################################################################
//;foreach my $feature (sort keys %$pe_info_hash)  {
//;  my $value = $pe_info_hash->{$feature};
//;################### PEs
//;  if ($feature=~m/1_pe_comp/) {
//;    print PEINFO "        <opcode reg_address='$value->{'address'}' bith='$value->{'bith'}' bitl='$value->{'bitl'}'>\n";
//;    my $filename = "PECOMP".$value->{'mname'};
//;    open (INP, "<$filename") or die "Couldn't open file $filename, $!";
//;    while (<INP>) {
//;      my $line = $_;
//;      print PEINFO $line;
//;    }
//;    close INP;
//;    print PEINFO "        </opcode>\n"
//;  }
//;################### REGs
//;  if ($feature=~m/2_reg/) {
//;    print PEINFO "        <mux reg_address='$value->{'address'}' snk='op_$value->{'out'}' bith='$value->{'bith'}' bitl='$value->{'bitl'}'>\n";
//;    my $filename = "REGMODE".$value->{'mname'};
//;    open (INP, "<$filename") or die "Couldn't open file $filename, $!";
//;    while (<INP>) {
//;      my $line = $_;
//;      $line=~s/OUTNAME/$value->{'out'}/g;
//;      while ( my ($find, $replace) = each($rename_hash) ) {
//;         $line=~s/>$find</>$replace</g;
//;         $line=~s/'$find'/'$replace'/g;
//;      }
//;      print PEINFO $line;
//;    }
//;    close INP;
//;    print PEINFO "        </mux>\n"
//;  }
//;  if ($feature=~m/3_init/) {
//;    print PEINFO "        <reg reg_address='$value->{'address'}' bith='$value->{'bith'}' bitl='$value->{'bitl'}'>reg_$value->{'out'}</reg>\n";
//;  }
//;}
//;close PEINFO;
endmodule
