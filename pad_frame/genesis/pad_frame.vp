//; use POSIX;
//; my $num_ios_per_group = parameter(Name=>'num_ios_per_group', val=>16, min=>1, step=>1);
//; my $num_groups_per_side = parameter(Name=>'num_groups_per_side', val=>1, min=>1, step=>1);
//; my $config_addr_width = parameter(Name=>'config_addr_width', val=>32, min=>1, step =>1);
//; my $config_data_width = parameter(Name=>'config_data_width', val=>32, min=>1, step =>1);
//; my $tile_id_offset = parameter(Name=>'tile_id_offset', val=>400, min=>0, step=>1);
//; 
//; # my $tristate_supported = parameter(name=>'tristate_supported', val=>0, list=>[0,1]);
//; my $tristate_supported = 1;
//; if (exists $ENV{"TRISTATE_UNAVAILABLE"}) { $tristate_supported = 0; }
//; 
//; my $group = 0;
//; 
// This module contains all of the io1bit and io16bit tiles in the CGRA.

//; # my @sides = ('N','S','E','W');
//; # I need this order for debugging; we can change it back later if you like...
//; my @sides = ('N','E','S','W');
module `mname` (
  input clk_pad,
  input reset_pad,
  input tck_pad,
  input tms_pad,
  input tdi_pad,
  input trst_n_pad,
  output tdo_pad,
  input [`$config_data_width-1`:0] config_data,
  input [`$config_addr_width-1`:0] config_addr,
  input config_read,
  input config_write,
  output clk,
  output reset,
  output tck,
  output tdi,
  output tms,
  output trst_n,
  input tdo,

//; for (my $i=0; $i < $num_groups_per_side; $i++) {
//;   for my $side (@sides) {
  input  [`$num_ios_per_group-1`:0] f2p_wide_`$side`_`$i`,
  input  [`$num_ios_per_group-1`:0] f2p_1bit_`$side`_`$i`,
//;     if ($tristate_supported) {
  inout  [`$num_ios_per_group-1`:0] pads_`$side`_`$i`,
//;     } else {
  input  [`$num_ios_per_group-1`:0] pads_`$side`_`$i`_in,
  output [`$num_ios_per_group-1`:0] pads_`$side`_`$i`_out,
//;     }
  output [`$num_ios_per_group-1`:0] p2f_`$side`_`$i`,
//;   }

//; }
  output reg [`$config_data_width-1`:0] read_data
);

wire [`$config_data_width-1`:0] read_data_group [`($num_groups_per_side * 4)-1`:0];

//; my $id_offset = $tile_id_offset;
//; for my $side (@sides) {
//;   for (my $i = 0; $i<$num_groups_per_side; $i++) {
//;     my $io_group_obj = generate("io_group","io_side_${side}_gr_${i}",side=>$side,io_group_num=>$i,tile_id_offset=>$id_offset);
//;     $id_offset += $num_ios_per_group;
`$io_group_obj->instantiate()` (
  .clk(clk),
  .reset(reset),
  .config_data(config_data),
  .config_addr(config_addr),
  .config_read(config_read),
  .config_write(config_write),
  .f2p_wide(f2p_wide_`$side`_`$i`),
  .f2p_1bit(f2p_1bit_`$side`_`$i`),
//;     if ($tristate_supported) {
  .pads(pads_`$side`_`$i`),
//;     } else {
  .pads_in(pads_`$side`_`$i`_in),
  .pads_out(pads_`$side`_`$i`_out),
//;     }
  .p2f(p2f_`$side`_`$i`),
  .read_data(read_data_group[`$group`])
);
//;     $group++;
//;   }
//; }

  // System Verilog equivalent: assign read_data = read_data_group.or();
integer i;
always @(*) begin
  read_data = 0;
  for (i=0; i < `$num_groups_per_side * 4`; i=i+1)
    read_data = read_data | read_data_group[i];
end

//Instantiate IO cells for non-configurable IOs (clk, reset, JTAG signals)
//input clk pad 
//; my $clk_input_obj = generate("fixed_io", "clk_input_cell", is_input=>1);
`$clk_input_obj->instantiate()` (
  .pad(clk_pad),
  .p2f(clk)
); 

//input reset pad
//; my $reset_input_obj = clone($clk_input_obj, "reset_input_cell");
`$reset_input_obj->instantiate()` (
  .pad(reset_pad),
  .p2f(reset)
);
 
//input tck pad
//; my $tck_input_obj = clone($clk_input_obj, "tck_input_cell");
`$tck_input_obj->instantiate()` (
  .pad(tck_pad),
  .p2f(tck)
); 

//input tdi pad
//; my $tdi_input_obj = clone($clk_input_obj, "tdi_input_cell");
`$tdi_input_obj->instantiate()` (
  .pad(tdi_pad),
  .p2f(tdi)
); 

//input tms pad
//; my $tms_input_obj = clone($clk_input_obj, "tms_input_cell");
`$tms_input_obj->instantiate()` (
  .pad(tms_pad),
  .p2f(tms)
); 

//input trst_n pad
//; my $trst_n_input_obj = clone($clk_input_obj, "trst_n_input_cell");
`$trst_n_input_obj->instantiate()` (
  .pad(trst_n_pad),
  .p2f(trst_n)
);

//output tdo pad
//; my $tdo_output_obj = generate("fixed_io", "tdo_output_cell", is_input=>0);
`$tdo_output_obj->instantiate()` (
  .pad(tdo_pad),
  .f2p(tdo)
); 
 
endmodule
