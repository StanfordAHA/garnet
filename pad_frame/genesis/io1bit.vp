//; use POSIX;
//; my $io_group = parameter(Name=>'io_group', val=> -1, doc=>'specifies the IO group the IO belongs to');
//; my $side = parameter(Name=>'side', val=> 0, doc=>'specifies the side (0=right/1=bottom/2=left/3=top) of the pad on which fabric wires exist ');

//;my $filename = "TILE".$self->mname();
//;open(TILEINFO, ">$filename") or die "Couldn't open file $filename, $!";

module `mname` (
clk, 
reset,
pad,
p2f,
f2p_16,
f2p_1,
config_addr,
config_data,
config_write,
config_read,
tile_id,
read_data
);

  /* verilator lint_off UNUSED */
  input  clk;
  input  reset;
  inout  pad;
  output p2f;
  input f2p_16;
  input f2p_1;
  input [31:0] config_data;
  input [31:0] config_addr;
  input config_read;
  input config_write;
  input [15:0] tile_id;
  output reg [31:0] read_data;
  /* verilator lint_on UNUSED */

  wire ___genesis_wire_`${side}`_`${io_group}`;

  //; # Bits [31:24] are for switch box, [23:0] for connection box.
  //; # So we have to let the linter know (verilator 'lint_off' directives above) or it complains:
  //; # %Warning-UNUSED: .../cb_unq1.v:73: Bits of signal are not used: config_addr[23:0]
  //; # FIXME someday? Maybe shouldn't bring in all 32 bits if we're not going to use them?  Then turn off directives!

  reg config_en;
  always @(*) begin
    if (reset) begin
       config_en = 1'b0;
    end else begin
       if (config_write&&(config_addr[15:0]==tile_id)&&(config_addr[23:16]==8'd0)) begin
         config_en = 1'b1;
       end else begin
         config_en = 1'b0;
       end
    end
  end
  reg io_bit;
  reg out_bus;
  always @(posedge clk or posedge reset) begin
    if (reset==1'b1) begin
       io_bit <= 1'b0;
       out_bus <= 1'b0;
    end else begin
       if (config_en==1'b1) begin
         io_bit <= config_data[0];
         out_bus <= config_data[1];
       end
    end
  end

  always @(*) begin
    if (config_read&&(config_addr[15:0]==tile_id)&&(config_addr[23:16]==8'd0)) begin
      read_data = {out_bus, io_bit}; 
    end
    else begin
      read_data = 'h0;
    end
  end
  assign pad = (io_bit==1'b1)?((out_bus==1'b0)?f2p_16:f2p_1):1'bz;
  assign p2f = pad;


endmodule

//;print TILEINFO "    <io_group>$io_group</io_group>\n";
//;print TILEINFO "    <tri feature_address='0' reg_address='0' bitl='0' bith='0'>\n";
//;print TILEINFO "        <direction sel='0'>in</direction>  <!--input-->\n";
//;print TILEINFO "        <direction sel='1'>out</direction> <!--output-->\n";
//;print TILEINFO "    </tri>\n";
//;print TILEINFO "    <mux feature_address='0' reg_address='0' bitl='1' bith='1'>\n";
//;print TILEINFO "        <src sel='0'>16</src> <!-- 16 bit mode -->\n";
//;print TILEINFO "        <src sel='1'>1</src>  <!--  1 bit mode -->\n";
//;print TILEINFO "    </mux>\n";
//;close TILEINFO;



