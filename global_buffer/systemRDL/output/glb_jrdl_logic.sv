//   Ordt 190524.01 autogenerated file 
//   Input: /aha/garnet/global_buffer/systemRDL/glb.rdl
//   Parms: /aha/garnet/global_buffer/systemRDL/ordt_params/glb.parms
//   Date: Fri Jan 19 15:54:41 PST 2024
//

//
//---------- module glb_jrdl_logic
//
module glb_jrdl_logic
(
  clk,
  reset,
  d2l_data_network_ctrl_w,
  d2l_data_network_ctrl_we,
  d2l_data_network_ctrl_re,
  d2l_data_network_latency_w,
  d2l_data_network_latency_we,
  d2l_data_network_latency_re,
  d2l_pcfg_network_ctrl_w,
  d2l_pcfg_network_ctrl_we,
  d2l_pcfg_network_ctrl_re,
  d2l_pcfg_network_latency_w,
  d2l_pcfg_network_latency_we,
  d2l_pcfg_network_latency_re,
  d2l_st_dma_ctrl_w,
  d2l_st_dma_ctrl_we,
  d2l_st_dma_ctrl_re,
  d2l_st_dma_num_blocks_w,
  d2l_st_dma_num_blocks_we,
  d2l_st_dma_num_blocks_re,
  d2l_st_dma_header_0_dim_w,
  d2l_st_dma_header_0_dim_we,
  d2l_st_dma_header_0_dim_re,
  d2l_st_dma_header_0_start_addr_w,
  d2l_st_dma_header_0_start_addr_we,
  d2l_st_dma_header_0_start_addr_re,
  d2l_st_dma_header_0_cycle_start_addr_w,
  d2l_st_dma_header_0_cycle_start_addr_we,
  d2l_st_dma_header_0_cycle_start_addr_re,
  d2l_st_dma_header_0_range_0_w,
  d2l_st_dma_header_0_range_0_we,
  d2l_st_dma_header_0_range_0_re,
  d2l_st_dma_header_0_stride_0_w,
  d2l_st_dma_header_0_stride_0_we,
  d2l_st_dma_header_0_stride_0_re,
  d2l_st_dma_header_0_cycle_stride_0_w,
  d2l_st_dma_header_0_cycle_stride_0_we,
  d2l_st_dma_header_0_cycle_stride_0_re,
  d2l_st_dma_header_0_range_1_w,
  d2l_st_dma_header_0_range_1_we,
  d2l_st_dma_header_0_range_1_re,
  d2l_st_dma_header_0_stride_1_w,
  d2l_st_dma_header_0_stride_1_we,
  d2l_st_dma_header_0_stride_1_re,
  d2l_st_dma_header_0_cycle_stride_1_w,
  d2l_st_dma_header_0_cycle_stride_1_we,
  d2l_st_dma_header_0_cycle_stride_1_re,
  d2l_st_dma_header_0_range_2_w,
  d2l_st_dma_header_0_range_2_we,
  d2l_st_dma_header_0_range_2_re,
  d2l_st_dma_header_0_stride_2_w,
  d2l_st_dma_header_0_stride_2_we,
  d2l_st_dma_header_0_stride_2_re,
  d2l_st_dma_header_0_cycle_stride_2_w,
  d2l_st_dma_header_0_cycle_stride_2_we,
  d2l_st_dma_header_0_cycle_stride_2_re,
  d2l_st_dma_header_0_range_3_w,
  d2l_st_dma_header_0_range_3_we,
  d2l_st_dma_header_0_range_3_re,
  d2l_st_dma_header_0_stride_3_w,
  d2l_st_dma_header_0_stride_3_we,
  d2l_st_dma_header_0_stride_3_re,
  d2l_st_dma_header_0_cycle_stride_3_w,
  d2l_st_dma_header_0_cycle_stride_3_we,
  d2l_st_dma_header_0_cycle_stride_3_re,
  d2l_st_dma_header_0_range_4_w,
  d2l_st_dma_header_0_range_4_we,
  d2l_st_dma_header_0_range_4_re,
  d2l_st_dma_header_0_stride_4_w,
  d2l_st_dma_header_0_stride_4_we,
  d2l_st_dma_header_0_stride_4_re,
  d2l_st_dma_header_0_cycle_stride_4_w,
  d2l_st_dma_header_0_cycle_stride_4_we,
  d2l_st_dma_header_0_cycle_stride_4_re,
  d2l_st_dma_header_0_range_5_w,
  d2l_st_dma_header_0_range_5_we,
  d2l_st_dma_header_0_range_5_re,
  d2l_st_dma_header_0_stride_5_w,
  d2l_st_dma_header_0_stride_5_we,
  d2l_st_dma_header_0_stride_5_re,
  d2l_st_dma_header_0_cycle_stride_5_w,
  d2l_st_dma_header_0_cycle_stride_5_we,
  d2l_st_dma_header_0_cycle_stride_5_re,
  d2l_st_dma_header_0_range_6_w,
  d2l_st_dma_header_0_range_6_we,
  d2l_st_dma_header_0_range_6_re,
  d2l_st_dma_header_0_stride_6_w,
  d2l_st_dma_header_0_stride_6_we,
  d2l_st_dma_header_0_stride_6_re,
  d2l_st_dma_header_0_cycle_stride_6_w,
  d2l_st_dma_header_0_cycle_stride_6_we,
  d2l_st_dma_header_0_cycle_stride_6_re,
  d2l_ld_dma_ctrl_w,
  d2l_ld_dma_ctrl_we,
  d2l_ld_dma_ctrl_re,
  d2l_ld_dma_header_0_dim_w,
  d2l_ld_dma_header_0_dim_we,
  d2l_ld_dma_header_0_dim_re,
  d2l_ld_dma_header_0_start_addr_w,
  d2l_ld_dma_header_0_start_addr_we,
  d2l_ld_dma_header_0_start_addr_re,
  d2l_ld_dma_header_0_cycle_start_addr_w,
  d2l_ld_dma_header_0_cycle_start_addr_we,
  d2l_ld_dma_header_0_cycle_start_addr_re,
  d2l_ld_dma_header_0_range_0_w,
  d2l_ld_dma_header_0_range_0_we,
  d2l_ld_dma_header_0_range_0_re,
  d2l_ld_dma_header_0_stride_0_w,
  d2l_ld_dma_header_0_stride_0_we,
  d2l_ld_dma_header_0_stride_0_re,
  d2l_ld_dma_header_0_cycle_stride_0_w,
  d2l_ld_dma_header_0_cycle_stride_0_we,
  d2l_ld_dma_header_0_cycle_stride_0_re,
  d2l_ld_dma_header_0_range_1_w,
  d2l_ld_dma_header_0_range_1_we,
  d2l_ld_dma_header_0_range_1_re,
  d2l_ld_dma_header_0_stride_1_w,
  d2l_ld_dma_header_0_stride_1_we,
  d2l_ld_dma_header_0_stride_1_re,
  d2l_ld_dma_header_0_cycle_stride_1_w,
  d2l_ld_dma_header_0_cycle_stride_1_we,
  d2l_ld_dma_header_0_cycle_stride_1_re,
  d2l_ld_dma_header_0_range_2_w,
  d2l_ld_dma_header_0_range_2_we,
  d2l_ld_dma_header_0_range_2_re,
  d2l_ld_dma_header_0_stride_2_w,
  d2l_ld_dma_header_0_stride_2_we,
  d2l_ld_dma_header_0_stride_2_re,
  d2l_ld_dma_header_0_cycle_stride_2_w,
  d2l_ld_dma_header_0_cycle_stride_2_we,
  d2l_ld_dma_header_0_cycle_stride_2_re,
  d2l_ld_dma_header_0_range_3_w,
  d2l_ld_dma_header_0_range_3_we,
  d2l_ld_dma_header_0_range_3_re,
  d2l_ld_dma_header_0_stride_3_w,
  d2l_ld_dma_header_0_stride_3_we,
  d2l_ld_dma_header_0_stride_3_re,
  d2l_ld_dma_header_0_cycle_stride_3_w,
  d2l_ld_dma_header_0_cycle_stride_3_we,
  d2l_ld_dma_header_0_cycle_stride_3_re,
  d2l_ld_dma_header_0_range_4_w,
  d2l_ld_dma_header_0_range_4_we,
  d2l_ld_dma_header_0_range_4_re,
  d2l_ld_dma_header_0_stride_4_w,
  d2l_ld_dma_header_0_stride_4_we,
  d2l_ld_dma_header_0_stride_4_re,
  d2l_ld_dma_header_0_cycle_stride_4_w,
  d2l_ld_dma_header_0_cycle_stride_4_we,
  d2l_ld_dma_header_0_cycle_stride_4_re,
  d2l_ld_dma_header_0_range_5_w,
  d2l_ld_dma_header_0_range_5_we,
  d2l_ld_dma_header_0_range_5_re,
  d2l_ld_dma_header_0_stride_5_w,
  d2l_ld_dma_header_0_stride_5_we,
  d2l_ld_dma_header_0_stride_5_re,
  d2l_ld_dma_header_0_cycle_stride_5_w,
  d2l_ld_dma_header_0_cycle_stride_5_we,
  d2l_ld_dma_header_0_cycle_stride_5_re,
  d2l_ld_dma_header_0_range_6_w,
  d2l_ld_dma_header_0_range_6_we,
  d2l_ld_dma_header_0_range_6_re,
  d2l_ld_dma_header_0_stride_6_w,
  d2l_ld_dma_header_0_stride_6_we,
  d2l_ld_dma_header_0_stride_6_re,
  d2l_ld_dma_header_0_cycle_stride_6_w,
  d2l_ld_dma_header_0_cycle_stride_6_we,
  d2l_ld_dma_header_0_cycle_stride_6_re,
  d2l_ld_dma_header_0_range_7_w,
  d2l_ld_dma_header_0_range_7_we,
  d2l_ld_dma_header_0_range_7_re,
  d2l_ld_dma_header_0_stride_7_w,
  d2l_ld_dma_header_0_stride_7_we,
  d2l_ld_dma_header_0_stride_7_re,
  d2l_ld_dma_header_0_cycle_stride_7_w,
  d2l_ld_dma_header_0_cycle_stride_7_we,
  d2l_ld_dma_header_0_cycle_stride_7_re,
  d2l_pcfg_dma_ctrl_w,
  d2l_pcfg_dma_ctrl_we,
  d2l_pcfg_dma_ctrl_re,
  d2l_pcfg_dma_header_start_addr_w,
  d2l_pcfg_dma_header_start_addr_we,
  d2l_pcfg_dma_header_start_addr_re,
  d2l_pcfg_dma_header_num_cfg_w,
  d2l_pcfg_dma_header_num_cfg_we,
  d2l_pcfg_dma_header_num_cfg_re,
  d2l_pcfg_broadcast_mux_w,
  d2l_pcfg_broadcast_mux_we,
  d2l_pcfg_broadcast_mux_re,

  l2d_data_network_ctrl_r,
  l2d_data_network_latency_r,
  l2d_pcfg_network_ctrl_r,
  l2d_pcfg_network_latency_r,
  l2d_st_dma_ctrl_r,
  l2d_st_dma_num_blocks_r,
  l2d_st_dma_header_0_dim_r,
  l2d_st_dma_header_0_start_addr_r,
  l2d_st_dma_header_0_cycle_start_addr_r,
  l2d_st_dma_header_0_range_0_r,
  l2d_st_dma_header_0_stride_0_r,
  l2d_st_dma_header_0_cycle_stride_0_r,
  l2d_st_dma_header_0_range_1_r,
  l2d_st_dma_header_0_stride_1_r,
  l2d_st_dma_header_0_cycle_stride_1_r,
  l2d_st_dma_header_0_range_2_r,
  l2d_st_dma_header_0_stride_2_r,
  l2d_st_dma_header_0_cycle_stride_2_r,
  l2d_st_dma_header_0_range_3_r,
  l2d_st_dma_header_0_stride_3_r,
  l2d_st_dma_header_0_cycle_stride_3_r,
  l2d_st_dma_header_0_range_4_r,
  l2d_st_dma_header_0_stride_4_r,
  l2d_st_dma_header_0_cycle_stride_4_r,
  l2d_st_dma_header_0_range_5_r,
  l2d_st_dma_header_0_stride_5_r,
  l2d_st_dma_header_0_cycle_stride_5_r,
  l2d_st_dma_header_0_range_6_r,
  l2d_st_dma_header_0_stride_6_r,
  l2d_st_dma_header_0_cycle_stride_6_r,
  l2d_ld_dma_ctrl_r,
  l2d_ld_dma_header_0_dim_r,
  l2d_ld_dma_header_0_start_addr_r,
  l2d_ld_dma_header_0_cycle_start_addr_r,
  l2d_ld_dma_header_0_range_0_r,
  l2d_ld_dma_header_0_stride_0_r,
  l2d_ld_dma_header_0_cycle_stride_0_r,
  l2d_ld_dma_header_0_range_1_r,
  l2d_ld_dma_header_0_stride_1_r,
  l2d_ld_dma_header_0_cycle_stride_1_r,
  l2d_ld_dma_header_0_range_2_r,
  l2d_ld_dma_header_0_stride_2_r,
  l2d_ld_dma_header_0_cycle_stride_2_r,
  l2d_ld_dma_header_0_range_3_r,
  l2d_ld_dma_header_0_stride_3_r,
  l2d_ld_dma_header_0_cycle_stride_3_r,
  l2d_ld_dma_header_0_range_4_r,
  l2d_ld_dma_header_0_stride_4_r,
  l2d_ld_dma_header_0_cycle_stride_4_r,
  l2d_ld_dma_header_0_range_5_r,
  l2d_ld_dma_header_0_stride_5_r,
  l2d_ld_dma_header_0_cycle_stride_5_r,
  l2d_ld_dma_header_0_range_6_r,
  l2d_ld_dma_header_0_stride_6_r,
  l2d_ld_dma_header_0_cycle_stride_6_r,
  l2d_ld_dma_header_0_range_7_r,
  l2d_ld_dma_header_0_stride_7_r,
  l2d_ld_dma_header_0_cycle_stride_7_r,
  l2d_pcfg_dma_ctrl_r,
  l2d_pcfg_dma_header_start_addr_r,
  l2d_pcfg_dma_header_num_cfg_r,
  l2d_pcfg_broadcast_mux_r,
  l2h_data_network_ctrl_connected_r,
  l2h_data_network_latency_value_r,
  l2h_pcfg_network_ctrl_connected_r,
  l2h_pcfg_network_latency_value_r,
  l2h_st_dma_ctrl_mode_r,
  l2h_st_dma_ctrl_valid_mode_r,
  l2h_st_dma_ctrl_data_mux_r,
  l2h_st_dma_ctrl_num_repeat_r,
  l2h_st_dma_num_blocks_value_r,
  l2h_st_dma_header_0_dim_dim_r,
  l2h_st_dma_header_0_start_addr_start_addr_r,
  l2h_st_dma_header_0_cycle_start_addr_cycle_start_addr_r,
  l2h_st_dma_header_0_range_0_range_r,
  l2h_st_dma_header_0_stride_0_stride_r,
  l2h_st_dma_header_0_cycle_stride_0_cycle_stride_r,
  l2h_st_dma_header_0_range_1_range_r,
  l2h_st_dma_header_0_stride_1_stride_r,
  l2h_st_dma_header_0_cycle_stride_1_cycle_stride_r,
  l2h_st_dma_header_0_range_2_range_r,
  l2h_st_dma_header_0_stride_2_stride_r,
  l2h_st_dma_header_0_cycle_stride_2_cycle_stride_r,
  l2h_st_dma_header_0_range_3_range_r,
  l2h_st_dma_header_0_stride_3_stride_r,
  l2h_st_dma_header_0_cycle_stride_3_cycle_stride_r,
  l2h_st_dma_header_0_range_4_range_r,
  l2h_st_dma_header_0_stride_4_stride_r,
  l2h_st_dma_header_0_cycle_stride_4_cycle_stride_r,
  l2h_st_dma_header_0_range_5_range_r,
  l2h_st_dma_header_0_stride_5_stride_r,
  l2h_st_dma_header_0_cycle_stride_5_cycle_stride_r,
  l2h_st_dma_header_0_range_6_range_r,
  l2h_st_dma_header_0_stride_6_stride_r,
  l2h_st_dma_header_0_cycle_stride_6_cycle_stride_r,
  l2h_ld_dma_ctrl_mode_r,
  l2h_ld_dma_ctrl_valid_mode_r,
  l2h_ld_dma_ctrl_flush_mode_r,
  l2h_ld_dma_ctrl_data_mux_r,
  l2h_ld_dma_ctrl_num_repeat_r,
  l2h_ld_dma_header_0_dim_dim_r,
  l2h_ld_dma_header_0_start_addr_start_addr_r,
  l2h_ld_dma_header_0_cycle_start_addr_cycle_start_addr_r,
  l2h_ld_dma_header_0_range_0_range_r,
  l2h_ld_dma_header_0_stride_0_stride_r,
  l2h_ld_dma_header_0_cycle_stride_0_cycle_stride_r,
  l2h_ld_dma_header_0_range_1_range_r,
  l2h_ld_dma_header_0_stride_1_stride_r,
  l2h_ld_dma_header_0_cycle_stride_1_cycle_stride_r,
  l2h_ld_dma_header_0_range_2_range_r,
  l2h_ld_dma_header_0_stride_2_stride_r,
  l2h_ld_dma_header_0_cycle_stride_2_cycle_stride_r,
  l2h_ld_dma_header_0_range_3_range_r,
  l2h_ld_dma_header_0_stride_3_stride_r,
  l2h_ld_dma_header_0_cycle_stride_3_cycle_stride_r,
  l2h_ld_dma_header_0_range_4_range_r,
  l2h_ld_dma_header_0_stride_4_stride_r,
  l2h_ld_dma_header_0_cycle_stride_4_cycle_stride_r,
  l2h_ld_dma_header_0_range_5_range_r,
  l2h_ld_dma_header_0_stride_5_stride_r,
  l2h_ld_dma_header_0_cycle_stride_5_cycle_stride_r,
  l2h_ld_dma_header_0_range_6_range_r,
  l2h_ld_dma_header_0_stride_6_stride_r,
  l2h_ld_dma_header_0_cycle_stride_6_cycle_stride_r,
  l2h_ld_dma_header_0_range_7_range_r,
  l2h_ld_dma_header_0_stride_7_stride_r,
  l2h_ld_dma_header_0_cycle_stride_7_cycle_stride_r,
  l2h_pcfg_dma_ctrl_mode_r,
  l2h_pcfg_dma_ctrl_relocation_value_r,
  l2h_pcfg_dma_ctrl_relocation_is_msb_r,
  l2h_pcfg_dma_header_start_addr_start_addr_r,
  l2h_pcfg_dma_header_num_cfg_num_cfg_r,
  l2h_pcfg_broadcast_mux_west_r,
  l2h_pcfg_broadcast_mux_east_r,
  l2h_pcfg_broadcast_mux_south_r );

  //------- inputs
  input    clk;
  input    reset;
  input     [31:0] d2l_data_network_ctrl_w;
  input    d2l_data_network_ctrl_we;
  input    d2l_data_network_ctrl_re;
  input     [31:0] d2l_data_network_latency_w;
  input    d2l_data_network_latency_we;
  input    d2l_data_network_latency_re;
  input     [31:0] d2l_pcfg_network_ctrl_w;
  input    d2l_pcfg_network_ctrl_we;
  input    d2l_pcfg_network_ctrl_re;
  input     [31:0] d2l_pcfg_network_latency_w;
  input    d2l_pcfg_network_latency_we;
  input    d2l_pcfg_network_latency_re;
  input     [31:0] d2l_st_dma_ctrl_w;
  input    d2l_st_dma_ctrl_we;
  input    d2l_st_dma_ctrl_re;
  input     [31:0] d2l_st_dma_num_blocks_w;
  input    d2l_st_dma_num_blocks_we;
  input    d2l_st_dma_num_blocks_re;
  input     [31:0] d2l_st_dma_header_0_dim_w;
  input    d2l_st_dma_header_0_dim_we;
  input    d2l_st_dma_header_0_dim_re;
  input     [31:0] d2l_st_dma_header_0_start_addr_w;
  input    d2l_st_dma_header_0_start_addr_we;
  input    d2l_st_dma_header_0_start_addr_re;
  input     [31:0] d2l_st_dma_header_0_cycle_start_addr_w;
  input    d2l_st_dma_header_0_cycle_start_addr_we;
  input    d2l_st_dma_header_0_cycle_start_addr_re;
  input     [31:0] d2l_st_dma_header_0_range_0_w;
  input    d2l_st_dma_header_0_range_0_we;
  input    d2l_st_dma_header_0_range_0_re;
  input     [31:0] d2l_st_dma_header_0_stride_0_w;
  input    d2l_st_dma_header_0_stride_0_we;
  input    d2l_st_dma_header_0_stride_0_re;
  input     [31:0] d2l_st_dma_header_0_cycle_stride_0_w;
  input    d2l_st_dma_header_0_cycle_stride_0_we;
  input    d2l_st_dma_header_0_cycle_stride_0_re;
  input     [31:0] d2l_st_dma_header_0_range_1_w;
  input    d2l_st_dma_header_0_range_1_we;
  input    d2l_st_dma_header_0_range_1_re;
  input     [31:0] d2l_st_dma_header_0_stride_1_w;
  input    d2l_st_dma_header_0_stride_1_we;
  input    d2l_st_dma_header_0_stride_1_re;
  input     [31:0] d2l_st_dma_header_0_cycle_stride_1_w;
  input    d2l_st_dma_header_0_cycle_stride_1_we;
  input    d2l_st_dma_header_0_cycle_stride_1_re;
  input     [31:0] d2l_st_dma_header_0_range_2_w;
  input    d2l_st_dma_header_0_range_2_we;
  input    d2l_st_dma_header_0_range_2_re;
  input     [31:0] d2l_st_dma_header_0_stride_2_w;
  input    d2l_st_dma_header_0_stride_2_we;
  input    d2l_st_dma_header_0_stride_2_re;
  input     [31:0] d2l_st_dma_header_0_cycle_stride_2_w;
  input    d2l_st_dma_header_0_cycle_stride_2_we;
  input    d2l_st_dma_header_0_cycle_stride_2_re;
  input     [31:0] d2l_st_dma_header_0_range_3_w;
  input    d2l_st_dma_header_0_range_3_we;
  input    d2l_st_dma_header_0_range_3_re;
  input     [31:0] d2l_st_dma_header_0_stride_3_w;
  input    d2l_st_dma_header_0_stride_3_we;
  input    d2l_st_dma_header_0_stride_3_re;
  input     [31:0] d2l_st_dma_header_0_cycle_stride_3_w;
  input    d2l_st_dma_header_0_cycle_stride_3_we;
  input    d2l_st_dma_header_0_cycle_stride_3_re;
  input     [31:0] d2l_st_dma_header_0_range_4_w;
  input    d2l_st_dma_header_0_range_4_we;
  input    d2l_st_dma_header_0_range_4_re;
  input     [31:0] d2l_st_dma_header_0_stride_4_w;
  input    d2l_st_dma_header_0_stride_4_we;
  input    d2l_st_dma_header_0_stride_4_re;
  input     [31:0] d2l_st_dma_header_0_cycle_stride_4_w;
  input    d2l_st_dma_header_0_cycle_stride_4_we;
  input    d2l_st_dma_header_0_cycle_stride_4_re;
  input     [31:0] d2l_st_dma_header_0_range_5_w;
  input    d2l_st_dma_header_0_range_5_we;
  input    d2l_st_dma_header_0_range_5_re;
  input     [31:0] d2l_st_dma_header_0_stride_5_w;
  input    d2l_st_dma_header_0_stride_5_we;
  input    d2l_st_dma_header_0_stride_5_re;
  input     [31:0] d2l_st_dma_header_0_cycle_stride_5_w;
  input    d2l_st_dma_header_0_cycle_stride_5_we;
  input    d2l_st_dma_header_0_cycle_stride_5_re;
  input     [31:0] d2l_st_dma_header_0_range_6_w;
  input    d2l_st_dma_header_0_range_6_we;
  input    d2l_st_dma_header_0_range_6_re;
  input     [31:0] d2l_st_dma_header_0_stride_6_w;
  input    d2l_st_dma_header_0_stride_6_we;
  input    d2l_st_dma_header_0_stride_6_re;
  input     [31:0] d2l_st_dma_header_0_cycle_stride_6_w;
  input    d2l_st_dma_header_0_cycle_stride_6_we;
  input    d2l_st_dma_header_0_cycle_stride_6_re;
  input     [31:0] d2l_ld_dma_ctrl_w;
  input    d2l_ld_dma_ctrl_we;
  input    d2l_ld_dma_ctrl_re;
  input     [31:0] d2l_ld_dma_header_0_dim_w;
  input    d2l_ld_dma_header_0_dim_we;
  input    d2l_ld_dma_header_0_dim_re;
  input     [31:0] d2l_ld_dma_header_0_start_addr_w;
  input    d2l_ld_dma_header_0_start_addr_we;
  input    d2l_ld_dma_header_0_start_addr_re;
  input     [31:0] d2l_ld_dma_header_0_cycle_start_addr_w;
  input    d2l_ld_dma_header_0_cycle_start_addr_we;
  input    d2l_ld_dma_header_0_cycle_start_addr_re;
  input     [31:0] d2l_ld_dma_header_0_range_0_w;
  input    d2l_ld_dma_header_0_range_0_we;
  input    d2l_ld_dma_header_0_range_0_re;
  input     [31:0] d2l_ld_dma_header_0_stride_0_w;
  input    d2l_ld_dma_header_0_stride_0_we;
  input    d2l_ld_dma_header_0_stride_0_re;
  input     [31:0] d2l_ld_dma_header_0_cycle_stride_0_w;
  input    d2l_ld_dma_header_0_cycle_stride_0_we;
  input    d2l_ld_dma_header_0_cycle_stride_0_re;
  input     [31:0] d2l_ld_dma_header_0_range_1_w;
  input    d2l_ld_dma_header_0_range_1_we;
  input    d2l_ld_dma_header_0_range_1_re;
  input     [31:0] d2l_ld_dma_header_0_stride_1_w;
  input    d2l_ld_dma_header_0_stride_1_we;
  input    d2l_ld_dma_header_0_stride_1_re;
  input     [31:0] d2l_ld_dma_header_0_cycle_stride_1_w;
  input    d2l_ld_dma_header_0_cycle_stride_1_we;
  input    d2l_ld_dma_header_0_cycle_stride_1_re;
  input     [31:0] d2l_ld_dma_header_0_range_2_w;
  input    d2l_ld_dma_header_0_range_2_we;
  input    d2l_ld_dma_header_0_range_2_re;
  input     [31:0] d2l_ld_dma_header_0_stride_2_w;
  input    d2l_ld_dma_header_0_stride_2_we;
  input    d2l_ld_dma_header_0_stride_2_re;
  input     [31:0] d2l_ld_dma_header_0_cycle_stride_2_w;
  input    d2l_ld_dma_header_0_cycle_stride_2_we;
  input    d2l_ld_dma_header_0_cycle_stride_2_re;
  input     [31:0] d2l_ld_dma_header_0_range_3_w;
  input    d2l_ld_dma_header_0_range_3_we;
  input    d2l_ld_dma_header_0_range_3_re;
  input     [31:0] d2l_ld_dma_header_0_stride_3_w;
  input    d2l_ld_dma_header_0_stride_3_we;
  input    d2l_ld_dma_header_0_stride_3_re;
  input     [31:0] d2l_ld_dma_header_0_cycle_stride_3_w;
  input    d2l_ld_dma_header_0_cycle_stride_3_we;
  input    d2l_ld_dma_header_0_cycle_stride_3_re;
  input     [31:0] d2l_ld_dma_header_0_range_4_w;
  input    d2l_ld_dma_header_0_range_4_we;
  input    d2l_ld_dma_header_0_range_4_re;
  input     [31:0] d2l_ld_dma_header_0_stride_4_w;
  input    d2l_ld_dma_header_0_stride_4_we;
  input    d2l_ld_dma_header_0_stride_4_re;
  input     [31:0] d2l_ld_dma_header_0_cycle_stride_4_w;
  input    d2l_ld_dma_header_0_cycle_stride_4_we;
  input    d2l_ld_dma_header_0_cycle_stride_4_re;
  input     [31:0] d2l_ld_dma_header_0_range_5_w;
  input    d2l_ld_dma_header_0_range_5_we;
  input    d2l_ld_dma_header_0_range_5_re;
  input     [31:0] d2l_ld_dma_header_0_stride_5_w;
  input    d2l_ld_dma_header_0_stride_5_we;
  input    d2l_ld_dma_header_0_stride_5_re;
  input     [31:0] d2l_ld_dma_header_0_cycle_stride_5_w;
  input    d2l_ld_dma_header_0_cycle_stride_5_we;
  input    d2l_ld_dma_header_0_cycle_stride_5_re;
  input     [31:0] d2l_ld_dma_header_0_range_6_w;
  input    d2l_ld_dma_header_0_range_6_we;
  input    d2l_ld_dma_header_0_range_6_re;
  input     [31:0] d2l_ld_dma_header_0_stride_6_w;
  input    d2l_ld_dma_header_0_stride_6_we;
  input    d2l_ld_dma_header_0_stride_6_re;
  input     [31:0] d2l_ld_dma_header_0_cycle_stride_6_w;
  input    d2l_ld_dma_header_0_cycle_stride_6_we;
  input    d2l_ld_dma_header_0_cycle_stride_6_re;
  input     [31:0] d2l_ld_dma_header_0_range_7_w;
  input    d2l_ld_dma_header_0_range_7_we;
  input    d2l_ld_dma_header_0_range_7_re;
  input     [31:0] d2l_ld_dma_header_0_stride_7_w;
  input    d2l_ld_dma_header_0_stride_7_we;
  input    d2l_ld_dma_header_0_stride_7_re;
  input     [31:0] d2l_ld_dma_header_0_cycle_stride_7_w;
  input    d2l_ld_dma_header_0_cycle_stride_7_we;
  input    d2l_ld_dma_header_0_cycle_stride_7_re;
  input     [31:0] d2l_pcfg_dma_ctrl_w;
  input    d2l_pcfg_dma_ctrl_we;
  input    d2l_pcfg_dma_ctrl_re;
  input     [31:0] d2l_pcfg_dma_header_start_addr_w;
  input    d2l_pcfg_dma_header_start_addr_we;
  input    d2l_pcfg_dma_header_start_addr_re;
  input     [31:0] d2l_pcfg_dma_header_num_cfg_w;
  input    d2l_pcfg_dma_header_num_cfg_we;
  input    d2l_pcfg_dma_header_num_cfg_re;
  input     [31:0] d2l_pcfg_broadcast_mux_w;
  input    d2l_pcfg_broadcast_mux_we;
  input    d2l_pcfg_broadcast_mux_re;

  //------- outputs
  output     [31:0] l2d_data_network_ctrl_r;
  output     [31:0] l2d_data_network_latency_r;
  output     [31:0] l2d_pcfg_network_ctrl_r;
  output     [31:0] l2d_pcfg_network_latency_r;
  output     [31:0] l2d_st_dma_ctrl_r;
  output     [31:0] l2d_st_dma_num_blocks_r;
  output     [31:0] l2d_st_dma_header_0_dim_r;
  output     [31:0] l2d_st_dma_header_0_start_addr_r;
  output     [31:0] l2d_st_dma_header_0_cycle_start_addr_r;
  output     [31:0] l2d_st_dma_header_0_range_0_r;
  output     [31:0] l2d_st_dma_header_0_stride_0_r;
  output     [31:0] l2d_st_dma_header_0_cycle_stride_0_r;
  output     [31:0] l2d_st_dma_header_0_range_1_r;
  output     [31:0] l2d_st_dma_header_0_stride_1_r;
  output     [31:0] l2d_st_dma_header_0_cycle_stride_1_r;
  output     [31:0] l2d_st_dma_header_0_range_2_r;
  output     [31:0] l2d_st_dma_header_0_stride_2_r;
  output     [31:0] l2d_st_dma_header_0_cycle_stride_2_r;
  output     [31:0] l2d_st_dma_header_0_range_3_r;
  output     [31:0] l2d_st_dma_header_0_stride_3_r;
  output     [31:0] l2d_st_dma_header_0_cycle_stride_3_r;
  output     [31:0] l2d_st_dma_header_0_range_4_r;
  output     [31:0] l2d_st_dma_header_0_stride_4_r;
  output     [31:0] l2d_st_dma_header_0_cycle_stride_4_r;
  output     [31:0] l2d_st_dma_header_0_range_5_r;
  output     [31:0] l2d_st_dma_header_0_stride_5_r;
  output     [31:0] l2d_st_dma_header_0_cycle_stride_5_r;
  output     [31:0] l2d_st_dma_header_0_range_6_r;
  output     [31:0] l2d_st_dma_header_0_stride_6_r;
  output     [31:0] l2d_st_dma_header_0_cycle_stride_6_r;
  output     [31:0] l2d_ld_dma_ctrl_r;
  output     [31:0] l2d_ld_dma_header_0_dim_r;
  output     [31:0] l2d_ld_dma_header_0_start_addr_r;
  output     [31:0] l2d_ld_dma_header_0_cycle_start_addr_r;
  output     [31:0] l2d_ld_dma_header_0_range_0_r;
  output     [31:0] l2d_ld_dma_header_0_stride_0_r;
  output     [31:0] l2d_ld_dma_header_0_cycle_stride_0_r;
  output     [31:0] l2d_ld_dma_header_0_range_1_r;
  output     [31:0] l2d_ld_dma_header_0_stride_1_r;
  output     [31:0] l2d_ld_dma_header_0_cycle_stride_1_r;
  output     [31:0] l2d_ld_dma_header_0_range_2_r;
  output     [31:0] l2d_ld_dma_header_0_stride_2_r;
  output     [31:0] l2d_ld_dma_header_0_cycle_stride_2_r;
  output     [31:0] l2d_ld_dma_header_0_range_3_r;
  output     [31:0] l2d_ld_dma_header_0_stride_3_r;
  output     [31:0] l2d_ld_dma_header_0_cycle_stride_3_r;
  output     [31:0] l2d_ld_dma_header_0_range_4_r;
  output     [31:0] l2d_ld_dma_header_0_stride_4_r;
  output     [31:0] l2d_ld_dma_header_0_cycle_stride_4_r;
  output     [31:0] l2d_ld_dma_header_0_range_5_r;
  output     [31:0] l2d_ld_dma_header_0_stride_5_r;
  output     [31:0] l2d_ld_dma_header_0_cycle_stride_5_r;
  output     [31:0] l2d_ld_dma_header_0_range_6_r;
  output     [31:0] l2d_ld_dma_header_0_stride_6_r;
  output     [31:0] l2d_ld_dma_header_0_cycle_stride_6_r;
  output     [31:0] l2d_ld_dma_header_0_range_7_r;
  output     [31:0] l2d_ld_dma_header_0_stride_7_r;
  output     [31:0] l2d_ld_dma_header_0_cycle_stride_7_r;
  output     [31:0] l2d_pcfg_dma_ctrl_r;
  output     [31:0] l2d_pcfg_dma_header_start_addr_r;
  output     [31:0] l2d_pcfg_dma_header_num_cfg_r;
  output     [31:0] l2d_pcfg_broadcast_mux_r;
  output    l2h_data_network_ctrl_connected_r;
  output     [5:0] l2h_data_network_latency_value_r;
  output    l2h_pcfg_network_ctrl_connected_r;
  output     [5:0] l2h_pcfg_network_latency_value_r;
  output     [1:0] l2h_st_dma_ctrl_mode_r;
  output     [1:0] l2h_st_dma_ctrl_valid_mode_r;
  output     [1:0] l2h_st_dma_ctrl_data_mux_r;
  output    l2h_st_dma_ctrl_num_repeat_r;
  output     [31:0] l2h_st_dma_num_blocks_value_r;
  output     [3:0] l2h_st_dma_header_0_dim_dim_r;
  output     [17:0] l2h_st_dma_header_0_start_addr_start_addr_r;
  output     [15:0] l2h_st_dma_header_0_cycle_start_addr_cycle_start_addr_r;
  output     [31:0] l2h_st_dma_header_0_range_0_range_r;
  output     [18:0] l2h_st_dma_header_0_stride_0_stride_r;
  output     [15:0] l2h_st_dma_header_0_cycle_stride_0_cycle_stride_r;
  output     [31:0] l2h_st_dma_header_0_range_1_range_r;
  output     [18:0] l2h_st_dma_header_0_stride_1_stride_r;
  output     [15:0] l2h_st_dma_header_0_cycle_stride_1_cycle_stride_r;
  output     [31:0] l2h_st_dma_header_0_range_2_range_r;
  output     [18:0] l2h_st_dma_header_0_stride_2_stride_r;
  output     [15:0] l2h_st_dma_header_0_cycle_stride_2_cycle_stride_r;
  output     [31:0] l2h_st_dma_header_0_range_3_range_r;
  output     [18:0] l2h_st_dma_header_0_stride_3_stride_r;
  output     [15:0] l2h_st_dma_header_0_cycle_stride_3_cycle_stride_r;
  output     [31:0] l2h_st_dma_header_0_range_4_range_r;
  output     [18:0] l2h_st_dma_header_0_stride_4_stride_r;
  output     [15:0] l2h_st_dma_header_0_cycle_stride_4_cycle_stride_r;
  output     [31:0] l2h_st_dma_header_0_range_5_range_r;
  output     [18:0] l2h_st_dma_header_0_stride_5_stride_r;
  output     [15:0] l2h_st_dma_header_0_cycle_stride_5_cycle_stride_r;
  output     [31:0] l2h_st_dma_header_0_range_6_range_r;
  output     [18:0] l2h_st_dma_header_0_stride_6_stride_r;
  output     [15:0] l2h_st_dma_header_0_cycle_stride_6_cycle_stride_r;
  output     [1:0] l2h_ld_dma_ctrl_mode_r;
  output     [1:0] l2h_ld_dma_ctrl_valid_mode_r;
  output    l2h_ld_dma_ctrl_flush_mode_r;
  output     [1:0] l2h_ld_dma_ctrl_data_mux_r;
  output    l2h_ld_dma_ctrl_num_repeat_r;
  output     [3:0] l2h_ld_dma_header_0_dim_dim_r;
  output     [17:0] l2h_ld_dma_header_0_start_addr_start_addr_r;
  output     [15:0] l2h_ld_dma_header_0_cycle_start_addr_cycle_start_addr_r;
  output     [31:0] l2h_ld_dma_header_0_range_0_range_r;
  output     [18:0] l2h_ld_dma_header_0_stride_0_stride_r;
  output     [15:0] l2h_ld_dma_header_0_cycle_stride_0_cycle_stride_r;
  output     [31:0] l2h_ld_dma_header_0_range_1_range_r;
  output     [18:0] l2h_ld_dma_header_0_stride_1_stride_r;
  output     [15:0] l2h_ld_dma_header_0_cycle_stride_1_cycle_stride_r;
  output     [31:0] l2h_ld_dma_header_0_range_2_range_r;
  output     [18:0] l2h_ld_dma_header_0_stride_2_stride_r;
  output     [15:0] l2h_ld_dma_header_0_cycle_stride_2_cycle_stride_r;
  output     [31:0] l2h_ld_dma_header_0_range_3_range_r;
  output     [18:0] l2h_ld_dma_header_0_stride_3_stride_r;
  output     [15:0] l2h_ld_dma_header_0_cycle_stride_3_cycle_stride_r;
  output     [31:0] l2h_ld_dma_header_0_range_4_range_r;
  output     [18:0] l2h_ld_dma_header_0_stride_4_stride_r;
  output     [15:0] l2h_ld_dma_header_0_cycle_stride_4_cycle_stride_r;
  output     [31:0] l2h_ld_dma_header_0_range_5_range_r;
  output     [18:0] l2h_ld_dma_header_0_stride_5_stride_r;
  output     [15:0] l2h_ld_dma_header_0_cycle_stride_5_cycle_stride_r;
  output     [31:0] l2h_ld_dma_header_0_range_6_range_r;
  output     [18:0] l2h_ld_dma_header_0_stride_6_stride_r;
  output     [15:0] l2h_ld_dma_header_0_cycle_stride_6_cycle_stride_r;
  output     [31:0] l2h_ld_dma_header_0_range_7_range_r;
  output     [18:0] l2h_ld_dma_header_0_stride_7_stride_r;
  output     [15:0] l2h_ld_dma_header_0_cycle_stride_7_cycle_stride_r;
  output    l2h_pcfg_dma_ctrl_mode_r;
  output     [15:0] l2h_pcfg_dma_ctrl_relocation_value_r;
  output    l2h_pcfg_dma_ctrl_relocation_is_msb_r;
  output     [17:0] l2h_pcfg_dma_header_start_addr_start_addr_r;
  output     [14:0] l2h_pcfg_dma_header_num_cfg_num_cfg_r;
  output     [1:0] l2h_pcfg_broadcast_mux_west_r;
  output     [1:0] l2h_pcfg_broadcast_mux_east_r;
  output     [1:0] l2h_pcfg_broadcast_mux_south_r;


  //------- reg defines
  logic  rg_data_network_ctrl_connected;
  logic  reg_data_network_ctrl_connected_next;
  logic  l2h_data_network_ctrl_connected_r;
  logic   [31:0] l2d_data_network_ctrl_r;
  logic   [5:0] rg_data_network_latency_value;
  logic   [5:0] reg_data_network_latency_value_next;
  logic   [5:0] l2h_data_network_latency_value_r;
  logic   [31:0] l2d_data_network_latency_r;
  logic  rg_pcfg_network_ctrl_connected;
  logic  reg_pcfg_network_ctrl_connected_next;
  logic  l2h_pcfg_network_ctrl_connected_r;
  logic   [31:0] l2d_pcfg_network_ctrl_r;
  logic   [5:0] rg_pcfg_network_latency_value;
  logic   [5:0] reg_pcfg_network_latency_value_next;
  logic   [5:0] l2h_pcfg_network_latency_value_r;
  logic   [31:0] l2d_pcfg_network_latency_r;
  logic   [1:0] rg_st_dma_ctrl_mode;
  logic   [1:0] reg_st_dma_ctrl_mode_next;
  logic   [1:0] l2h_st_dma_ctrl_mode_r;
  logic   [1:0] rg_st_dma_ctrl_valid_mode;
  logic   [1:0] reg_st_dma_ctrl_valid_mode_next;
  logic   [1:0] l2h_st_dma_ctrl_valid_mode_r;
  logic   [1:0] rg_st_dma_ctrl_data_mux;
  logic   [1:0] reg_st_dma_ctrl_data_mux_next;
  logic   [1:0] l2h_st_dma_ctrl_data_mux_r;
  logic  rg_st_dma_ctrl_num_repeat;
  logic  reg_st_dma_ctrl_num_repeat_next;
  logic  l2h_st_dma_ctrl_num_repeat_r;
  logic   [31:0] l2d_st_dma_ctrl_r;
  logic   [31:0] rg_st_dma_num_blocks_value;
  logic   [31:0] reg_st_dma_num_blocks_value_next;
  logic   [31:0] l2h_st_dma_num_blocks_value_r;
  logic   [31:0] l2d_st_dma_num_blocks_r;
  logic   [3:0] rg_st_dma_header_0_dim_dim;
  logic   [3:0] reg_st_dma_header_0_dim_dim_next;
  logic   [3:0] l2h_st_dma_header_0_dim_dim_r;
  logic   [31:0] l2d_st_dma_header_0_dim_r;
  logic   [17:0] rg_st_dma_header_0_start_addr_start_addr;
  logic   [17:0] reg_st_dma_header_0_start_addr_start_addr_next;
  logic   [17:0] l2h_st_dma_header_0_start_addr_start_addr_r;
  logic   [31:0] l2d_st_dma_header_0_start_addr_r;
  logic   [15:0] rg_st_dma_header_0_cycle_start_addr_cycle_start_addr;
  logic   [15:0] reg_st_dma_header_0_cycle_start_addr_cycle_start_addr_next;
  logic   [15:0] l2h_st_dma_header_0_cycle_start_addr_cycle_start_addr_r;
  logic   [31:0] l2d_st_dma_header_0_cycle_start_addr_r;
  logic   [31:0] rg_st_dma_header_0_range_0_range;
  logic   [31:0] reg_st_dma_header_0_range_0_range_next;
  logic   [31:0] l2h_st_dma_header_0_range_0_range_r;
  logic   [31:0] l2d_st_dma_header_0_range_0_r;
  logic   [18:0] rg_st_dma_header_0_stride_0_stride;
  logic   [18:0] reg_st_dma_header_0_stride_0_stride_next;
  logic   [18:0] l2h_st_dma_header_0_stride_0_stride_r;
  logic   [31:0] l2d_st_dma_header_0_stride_0_r;
  logic   [15:0] rg_st_dma_header_0_cycle_stride_0_cycle_stride;
  logic   [15:0] reg_st_dma_header_0_cycle_stride_0_cycle_stride_next;
  logic   [15:0] l2h_st_dma_header_0_cycle_stride_0_cycle_stride_r;
  logic   [31:0] l2d_st_dma_header_0_cycle_stride_0_r;
  logic   [31:0] rg_st_dma_header_0_range_1_range;
  logic   [31:0] reg_st_dma_header_0_range_1_range_next;
  logic   [31:0] l2h_st_dma_header_0_range_1_range_r;
  logic   [31:0] l2d_st_dma_header_0_range_1_r;
  logic   [18:0] rg_st_dma_header_0_stride_1_stride;
  logic   [18:0] reg_st_dma_header_0_stride_1_stride_next;
  logic   [18:0] l2h_st_dma_header_0_stride_1_stride_r;
  logic   [31:0] l2d_st_dma_header_0_stride_1_r;
  logic   [15:0] rg_st_dma_header_0_cycle_stride_1_cycle_stride;
  logic   [15:0] reg_st_dma_header_0_cycle_stride_1_cycle_stride_next;
  logic   [15:0] l2h_st_dma_header_0_cycle_stride_1_cycle_stride_r;
  logic   [31:0] l2d_st_dma_header_0_cycle_stride_1_r;
  logic   [31:0] rg_st_dma_header_0_range_2_range;
  logic   [31:0] reg_st_dma_header_0_range_2_range_next;
  logic   [31:0] l2h_st_dma_header_0_range_2_range_r;
  logic   [31:0] l2d_st_dma_header_0_range_2_r;
  logic   [18:0] rg_st_dma_header_0_stride_2_stride;
  logic   [18:0] reg_st_dma_header_0_stride_2_stride_next;
  logic   [18:0] l2h_st_dma_header_0_stride_2_stride_r;
  logic   [31:0] l2d_st_dma_header_0_stride_2_r;
  logic   [15:0] rg_st_dma_header_0_cycle_stride_2_cycle_stride;
  logic   [15:0] reg_st_dma_header_0_cycle_stride_2_cycle_stride_next;
  logic   [15:0] l2h_st_dma_header_0_cycle_stride_2_cycle_stride_r;
  logic   [31:0] l2d_st_dma_header_0_cycle_stride_2_r;
  logic   [31:0] rg_st_dma_header_0_range_3_range;
  logic   [31:0] reg_st_dma_header_0_range_3_range_next;
  logic   [31:0] l2h_st_dma_header_0_range_3_range_r;
  logic   [31:0] l2d_st_dma_header_0_range_3_r;
  logic   [18:0] rg_st_dma_header_0_stride_3_stride;
  logic   [18:0] reg_st_dma_header_0_stride_3_stride_next;
  logic   [18:0] l2h_st_dma_header_0_stride_3_stride_r;
  logic   [31:0] l2d_st_dma_header_0_stride_3_r;
  logic   [15:0] rg_st_dma_header_0_cycle_stride_3_cycle_stride;
  logic   [15:0] reg_st_dma_header_0_cycle_stride_3_cycle_stride_next;
  logic   [15:0] l2h_st_dma_header_0_cycle_stride_3_cycle_stride_r;
  logic   [31:0] l2d_st_dma_header_0_cycle_stride_3_r;
  logic   [31:0] rg_st_dma_header_0_range_4_range;
  logic   [31:0] reg_st_dma_header_0_range_4_range_next;
  logic   [31:0] l2h_st_dma_header_0_range_4_range_r;
  logic   [31:0] l2d_st_dma_header_0_range_4_r;
  logic   [18:0] rg_st_dma_header_0_stride_4_stride;
  logic   [18:0] reg_st_dma_header_0_stride_4_stride_next;
  logic   [18:0] l2h_st_dma_header_0_stride_4_stride_r;
  logic   [31:0] l2d_st_dma_header_0_stride_4_r;
  logic   [15:0] rg_st_dma_header_0_cycle_stride_4_cycle_stride;
  logic   [15:0] reg_st_dma_header_0_cycle_stride_4_cycle_stride_next;
  logic   [15:0] l2h_st_dma_header_0_cycle_stride_4_cycle_stride_r;
  logic   [31:0] l2d_st_dma_header_0_cycle_stride_4_r;
  logic   [31:0] rg_st_dma_header_0_range_5_range;
  logic   [31:0] reg_st_dma_header_0_range_5_range_next;
  logic   [31:0] l2h_st_dma_header_0_range_5_range_r;
  logic   [31:0] l2d_st_dma_header_0_range_5_r;
  logic   [18:0] rg_st_dma_header_0_stride_5_stride;
  logic   [18:0] reg_st_dma_header_0_stride_5_stride_next;
  logic   [18:0] l2h_st_dma_header_0_stride_5_stride_r;
  logic   [31:0] l2d_st_dma_header_0_stride_5_r;
  logic   [15:0] rg_st_dma_header_0_cycle_stride_5_cycle_stride;
  logic   [15:0] reg_st_dma_header_0_cycle_stride_5_cycle_stride_next;
  logic   [15:0] l2h_st_dma_header_0_cycle_stride_5_cycle_stride_r;
  logic   [31:0] l2d_st_dma_header_0_cycle_stride_5_r;
  logic   [31:0] rg_st_dma_header_0_range_6_range;
  logic   [31:0] reg_st_dma_header_0_range_6_range_next;
  logic   [31:0] l2h_st_dma_header_0_range_6_range_r;
  logic   [31:0] l2d_st_dma_header_0_range_6_r;
  logic   [18:0] rg_st_dma_header_0_stride_6_stride;
  logic   [18:0] reg_st_dma_header_0_stride_6_stride_next;
  logic   [18:0] l2h_st_dma_header_0_stride_6_stride_r;
  logic   [31:0] l2d_st_dma_header_0_stride_6_r;
  logic   [15:0] rg_st_dma_header_0_cycle_stride_6_cycle_stride;
  logic   [15:0] reg_st_dma_header_0_cycle_stride_6_cycle_stride_next;
  logic   [15:0] l2h_st_dma_header_0_cycle_stride_6_cycle_stride_r;
  logic   [31:0] l2d_st_dma_header_0_cycle_stride_6_r;
  logic   [1:0] rg_ld_dma_ctrl_mode;
  logic   [1:0] reg_ld_dma_ctrl_mode_next;
  logic   [1:0] l2h_ld_dma_ctrl_mode_r;
  logic   [1:0] rg_ld_dma_ctrl_valid_mode;
  logic   [1:0] reg_ld_dma_ctrl_valid_mode_next;
  logic   [1:0] l2h_ld_dma_ctrl_valid_mode_r;
  logic  rg_ld_dma_ctrl_flush_mode;
  logic  reg_ld_dma_ctrl_flush_mode_next;
  logic  l2h_ld_dma_ctrl_flush_mode_r;
  logic   [1:0] rg_ld_dma_ctrl_data_mux;
  logic   [1:0] reg_ld_dma_ctrl_data_mux_next;
  logic   [1:0] l2h_ld_dma_ctrl_data_mux_r;
  logic  rg_ld_dma_ctrl_num_repeat;
  logic  reg_ld_dma_ctrl_num_repeat_next;
  logic  l2h_ld_dma_ctrl_num_repeat_r;
  logic   [31:0] l2d_ld_dma_ctrl_r;
  logic   [3:0] rg_ld_dma_header_0_dim_dim;
  logic   [3:0] reg_ld_dma_header_0_dim_dim_next;
  logic   [3:0] l2h_ld_dma_header_0_dim_dim_r;
  logic   [31:0] l2d_ld_dma_header_0_dim_r;
  logic   [17:0] rg_ld_dma_header_0_start_addr_start_addr;
  logic   [17:0] reg_ld_dma_header_0_start_addr_start_addr_next;
  logic   [17:0] l2h_ld_dma_header_0_start_addr_start_addr_r;
  logic   [31:0] l2d_ld_dma_header_0_start_addr_r;
  logic   [15:0] rg_ld_dma_header_0_cycle_start_addr_cycle_start_addr;
  logic   [15:0] reg_ld_dma_header_0_cycle_start_addr_cycle_start_addr_next;
  logic   [15:0] l2h_ld_dma_header_0_cycle_start_addr_cycle_start_addr_r;
  logic   [31:0] l2d_ld_dma_header_0_cycle_start_addr_r;
  logic   [31:0] rg_ld_dma_header_0_range_0_range;
  logic   [31:0] reg_ld_dma_header_0_range_0_range_next;
  logic   [31:0] l2h_ld_dma_header_0_range_0_range_r;
  logic   [31:0] l2d_ld_dma_header_0_range_0_r;
  logic   [18:0] rg_ld_dma_header_0_stride_0_stride;
  logic   [18:0] reg_ld_dma_header_0_stride_0_stride_next;
  logic   [18:0] l2h_ld_dma_header_0_stride_0_stride_r;
  logic   [31:0] l2d_ld_dma_header_0_stride_0_r;
  logic   [15:0] rg_ld_dma_header_0_cycle_stride_0_cycle_stride;
  logic   [15:0] reg_ld_dma_header_0_cycle_stride_0_cycle_stride_next;
  logic   [15:0] l2h_ld_dma_header_0_cycle_stride_0_cycle_stride_r;
  logic   [31:0] l2d_ld_dma_header_0_cycle_stride_0_r;
  logic   [31:0] rg_ld_dma_header_0_range_1_range;
  logic   [31:0] reg_ld_dma_header_0_range_1_range_next;
  logic   [31:0] l2h_ld_dma_header_0_range_1_range_r;
  logic   [31:0] l2d_ld_dma_header_0_range_1_r;
  logic   [18:0] rg_ld_dma_header_0_stride_1_stride;
  logic   [18:0] reg_ld_dma_header_0_stride_1_stride_next;
  logic   [18:0] l2h_ld_dma_header_0_stride_1_stride_r;
  logic   [31:0] l2d_ld_dma_header_0_stride_1_r;
  logic   [15:0] rg_ld_dma_header_0_cycle_stride_1_cycle_stride;
  logic   [15:0] reg_ld_dma_header_0_cycle_stride_1_cycle_stride_next;
  logic   [15:0] l2h_ld_dma_header_0_cycle_stride_1_cycle_stride_r;
  logic   [31:0] l2d_ld_dma_header_0_cycle_stride_1_r;
  logic   [31:0] rg_ld_dma_header_0_range_2_range;
  logic   [31:0] reg_ld_dma_header_0_range_2_range_next;
  logic   [31:0] l2h_ld_dma_header_0_range_2_range_r;
  logic   [31:0] l2d_ld_dma_header_0_range_2_r;
  logic   [18:0] rg_ld_dma_header_0_stride_2_stride;
  logic   [18:0] reg_ld_dma_header_0_stride_2_stride_next;
  logic   [18:0] l2h_ld_dma_header_0_stride_2_stride_r;
  logic   [31:0] l2d_ld_dma_header_0_stride_2_r;
  logic   [15:0] rg_ld_dma_header_0_cycle_stride_2_cycle_stride;
  logic   [15:0] reg_ld_dma_header_0_cycle_stride_2_cycle_stride_next;
  logic   [15:0] l2h_ld_dma_header_0_cycle_stride_2_cycle_stride_r;
  logic   [31:0] l2d_ld_dma_header_0_cycle_stride_2_r;
  logic   [31:0] rg_ld_dma_header_0_range_3_range;
  logic   [31:0] reg_ld_dma_header_0_range_3_range_next;
  logic   [31:0] l2h_ld_dma_header_0_range_3_range_r;
  logic   [31:0] l2d_ld_dma_header_0_range_3_r;
  logic   [18:0] rg_ld_dma_header_0_stride_3_stride;
  logic   [18:0] reg_ld_dma_header_0_stride_3_stride_next;
  logic   [18:0] l2h_ld_dma_header_0_stride_3_stride_r;
  logic   [31:0] l2d_ld_dma_header_0_stride_3_r;
  logic   [15:0] rg_ld_dma_header_0_cycle_stride_3_cycle_stride;
  logic   [15:0] reg_ld_dma_header_0_cycle_stride_3_cycle_stride_next;
  logic   [15:0] l2h_ld_dma_header_0_cycle_stride_3_cycle_stride_r;
  logic   [31:0] l2d_ld_dma_header_0_cycle_stride_3_r;
  logic   [31:0] rg_ld_dma_header_0_range_4_range;
  logic   [31:0] reg_ld_dma_header_0_range_4_range_next;
  logic   [31:0] l2h_ld_dma_header_0_range_4_range_r;
  logic   [31:0] l2d_ld_dma_header_0_range_4_r;
  logic   [18:0] rg_ld_dma_header_0_stride_4_stride;
  logic   [18:0] reg_ld_dma_header_0_stride_4_stride_next;
  logic   [18:0] l2h_ld_dma_header_0_stride_4_stride_r;
  logic   [31:0] l2d_ld_dma_header_0_stride_4_r;
  logic   [15:0] rg_ld_dma_header_0_cycle_stride_4_cycle_stride;
  logic   [15:0] reg_ld_dma_header_0_cycle_stride_4_cycle_stride_next;
  logic   [15:0] l2h_ld_dma_header_0_cycle_stride_4_cycle_stride_r;
  logic   [31:0] l2d_ld_dma_header_0_cycle_stride_4_r;
  logic   [31:0] rg_ld_dma_header_0_range_5_range;
  logic   [31:0] reg_ld_dma_header_0_range_5_range_next;
  logic   [31:0] l2h_ld_dma_header_0_range_5_range_r;
  logic   [31:0] l2d_ld_dma_header_0_range_5_r;
  logic   [18:0] rg_ld_dma_header_0_stride_5_stride;
  logic   [18:0] reg_ld_dma_header_0_stride_5_stride_next;
  logic   [18:0] l2h_ld_dma_header_0_stride_5_stride_r;
  logic   [31:0] l2d_ld_dma_header_0_stride_5_r;
  logic   [15:0] rg_ld_dma_header_0_cycle_stride_5_cycle_stride;
  logic   [15:0] reg_ld_dma_header_0_cycle_stride_5_cycle_stride_next;
  logic   [15:0] l2h_ld_dma_header_0_cycle_stride_5_cycle_stride_r;
  logic   [31:0] l2d_ld_dma_header_0_cycle_stride_5_r;
  logic   [31:0] rg_ld_dma_header_0_range_6_range;
  logic   [31:0] reg_ld_dma_header_0_range_6_range_next;
  logic   [31:0] l2h_ld_dma_header_0_range_6_range_r;
  logic   [31:0] l2d_ld_dma_header_0_range_6_r;
  logic   [18:0] rg_ld_dma_header_0_stride_6_stride;
  logic   [18:0] reg_ld_dma_header_0_stride_6_stride_next;
  logic   [18:0] l2h_ld_dma_header_0_stride_6_stride_r;
  logic   [31:0] l2d_ld_dma_header_0_stride_6_r;
  logic   [15:0] rg_ld_dma_header_0_cycle_stride_6_cycle_stride;
  logic   [15:0] reg_ld_dma_header_0_cycle_stride_6_cycle_stride_next;
  logic   [15:0] l2h_ld_dma_header_0_cycle_stride_6_cycle_stride_r;
  logic   [31:0] l2d_ld_dma_header_0_cycle_stride_6_r;
  logic   [31:0] rg_ld_dma_header_0_range_7_range;
  logic   [31:0] reg_ld_dma_header_0_range_7_range_next;
  logic   [31:0] l2h_ld_dma_header_0_range_7_range_r;
  logic   [31:0] l2d_ld_dma_header_0_range_7_r;
  logic   [18:0] rg_ld_dma_header_0_stride_7_stride;
  logic   [18:0] reg_ld_dma_header_0_stride_7_stride_next;
  logic   [18:0] l2h_ld_dma_header_0_stride_7_stride_r;
  logic   [31:0] l2d_ld_dma_header_0_stride_7_r;
  logic   [15:0] rg_ld_dma_header_0_cycle_stride_7_cycle_stride;
  logic   [15:0] reg_ld_dma_header_0_cycle_stride_7_cycle_stride_next;
  logic   [15:0] l2h_ld_dma_header_0_cycle_stride_7_cycle_stride_r;
  logic   [31:0] l2d_ld_dma_header_0_cycle_stride_7_r;
  logic  rg_pcfg_dma_ctrl_mode;
  logic  reg_pcfg_dma_ctrl_mode_next;
  logic  l2h_pcfg_dma_ctrl_mode_r;
  logic   [15:0] rg_pcfg_dma_ctrl_relocation_value;
  logic   [15:0] reg_pcfg_dma_ctrl_relocation_value_next;
  logic   [15:0] l2h_pcfg_dma_ctrl_relocation_value_r;
  logic  rg_pcfg_dma_ctrl_relocation_is_msb;
  logic  reg_pcfg_dma_ctrl_relocation_is_msb_next;
  logic  l2h_pcfg_dma_ctrl_relocation_is_msb_r;
  logic   [31:0] l2d_pcfg_dma_ctrl_r;
  logic   [17:0] rg_pcfg_dma_header_start_addr_start_addr;
  logic   [17:0] reg_pcfg_dma_header_start_addr_start_addr_next;
  logic   [17:0] l2h_pcfg_dma_header_start_addr_start_addr_r;
  logic   [31:0] l2d_pcfg_dma_header_start_addr_r;
  logic   [14:0] rg_pcfg_dma_header_num_cfg_num_cfg;
  logic   [14:0] reg_pcfg_dma_header_num_cfg_num_cfg_next;
  logic   [14:0] l2h_pcfg_dma_header_num_cfg_num_cfg_r;
  logic   [31:0] l2d_pcfg_dma_header_num_cfg_r;
  logic   [1:0] rg_pcfg_broadcast_mux_west;
  logic   [1:0] reg_pcfg_broadcast_mux_west_next;
  logic   [1:0] l2h_pcfg_broadcast_mux_west_r;
  logic   [1:0] rg_pcfg_broadcast_mux_east;
  logic   [1:0] reg_pcfg_broadcast_mux_east_next;
  logic   [1:0] l2h_pcfg_broadcast_mux_east_r;
  logic   [1:0] rg_pcfg_broadcast_mux_south;
  logic   [1:0] reg_pcfg_broadcast_mux_south_next;
  logic   [1:0] l2h_pcfg_broadcast_mux_south_r;
  logic   [31:0] l2d_pcfg_broadcast_mux_r;
  
  
  //------- combinatorial assigns for data_network_latency
  always_comb begin
    reg_data_network_latency_value_next = rg_data_network_latency_value;
    l2h_data_network_latency_value_r = rg_data_network_latency_value;
    if (d2l_data_network_latency_we) reg_data_network_latency_value_next = d2l_data_network_latency_w [5:0] ;
  end
  
  //------- reg assigns for data_network_latency
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_data_network_latency_value <= 6'd0;
    end
    else begin
      rg_data_network_latency_value <=  reg_data_network_latency_value_next;
    end
  end
  
  //------- combinatorial assigns for st_dma_header_0_cycle_stride_0
  always_comb begin
    reg_st_dma_header_0_cycle_stride_0_cycle_stride_next = rg_st_dma_header_0_cycle_stride_0_cycle_stride;
    l2h_st_dma_header_0_cycle_stride_0_cycle_stride_r = rg_st_dma_header_0_cycle_stride_0_cycle_stride;
    if (d2l_st_dma_header_0_cycle_stride_0_we) reg_st_dma_header_0_cycle_stride_0_cycle_stride_next = d2l_st_dma_header_0_cycle_stride_0_w [15:0] ;
  end
  
  //------- reg assigns for st_dma_header_0_cycle_stride_0
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_st_dma_header_0_cycle_stride_0_cycle_stride <= 16'd0;
    end
    else begin
      rg_st_dma_header_0_cycle_stride_0_cycle_stride <=  reg_st_dma_header_0_cycle_stride_0_cycle_stride_next;
    end
  end
  
  //------- combinatorial assigns for data_network_ctrl (pio read data)
  always_comb begin
    l2d_data_network_ctrl_r = 32'b0;
    l2d_data_network_ctrl_r [0]  = rg_data_network_ctrl_connected;
  end
  
  //------- combinatorial assigns for st_dma_header_0_range_5 (pio read data)
  always_comb begin
    l2d_st_dma_header_0_range_5_r = rg_st_dma_header_0_range_5_range;
  end
  
  //------- combinatorial assigns for st_dma_header_0_range_2 (pio read data)
  always_comb begin
    l2d_st_dma_header_0_range_2_r = rg_st_dma_header_0_range_2_range;
  end
  
  //------- combinatorial assigns for pcfg_broadcast_mux
  always_comb begin
    reg_pcfg_broadcast_mux_west_next = rg_pcfg_broadcast_mux_west;
    l2h_pcfg_broadcast_mux_west_r = rg_pcfg_broadcast_mux_west;
    reg_pcfg_broadcast_mux_east_next = rg_pcfg_broadcast_mux_east;
    l2h_pcfg_broadcast_mux_east_r = rg_pcfg_broadcast_mux_east;
    reg_pcfg_broadcast_mux_south_next = rg_pcfg_broadcast_mux_south;
    l2h_pcfg_broadcast_mux_south_r = rg_pcfg_broadcast_mux_south;
    if (d2l_pcfg_broadcast_mux_we) reg_pcfg_broadcast_mux_west_next = d2l_pcfg_broadcast_mux_w [1:0] ;
    if (d2l_pcfg_broadcast_mux_we) reg_pcfg_broadcast_mux_east_next = d2l_pcfg_broadcast_mux_w [3:2] ;
    if (d2l_pcfg_broadcast_mux_we) reg_pcfg_broadcast_mux_south_next = d2l_pcfg_broadcast_mux_w [5:4] ;
  end
  
  //------- reg assigns for pcfg_broadcast_mux
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_pcfg_broadcast_mux_west <= 2'd0;
      rg_pcfg_broadcast_mux_east <= 2'd0;
      rg_pcfg_broadcast_mux_south <= 2'd0;
    end
    else begin
      rg_pcfg_broadcast_mux_west <=  reg_pcfg_broadcast_mux_west_next;
      rg_pcfg_broadcast_mux_east <=  reg_pcfg_broadcast_mux_east_next;
      rg_pcfg_broadcast_mux_south <=  reg_pcfg_broadcast_mux_south_next;
    end
  end
  
  //------- combinatorial assigns for ld_dma_header_0_cycle_stride_1 (pio read data)
  always_comb begin
    l2d_ld_dma_header_0_cycle_stride_1_r = 32'b0;
    l2d_ld_dma_header_0_cycle_stride_1_r [15:0]  = rg_ld_dma_header_0_cycle_stride_1_cycle_stride;
  end
  
  //------- combinatorial assigns for ld_dma_header_0_stride_3 (pio read data)
  always_comb begin
    l2d_ld_dma_header_0_stride_3_r = 32'b0;
    l2d_ld_dma_header_0_stride_3_r [18:0]  = rg_ld_dma_header_0_stride_3_stride;
  end
  
  //------- combinatorial assigns for st_dma_header_0_cycle_stride_3 (pio read data)
  always_comb begin
    l2d_st_dma_header_0_cycle_stride_3_r = 32'b0;
    l2d_st_dma_header_0_cycle_stride_3_r [15:0]  = rg_st_dma_header_0_cycle_stride_3_cycle_stride;
  end
  
  //------- combinatorial assigns for ld_dma_header_0_range_3 (pio read data)
  always_comb begin
    l2d_ld_dma_header_0_range_3_r = rg_ld_dma_header_0_range_3_range;
  end
  
  //------- combinatorial assigns for ld_dma_header_0_cycle_stride_4 (pio read data)
  always_comb begin
    l2d_ld_dma_header_0_cycle_stride_4_r = 32'b0;
    l2d_ld_dma_header_0_cycle_stride_4_r [15:0]  = rg_ld_dma_header_0_cycle_stride_4_cycle_stride;
  end
  
  //------- combinatorial assigns for pcfg_dma_header_num_cfg
  always_comb begin
    reg_pcfg_dma_header_num_cfg_num_cfg_next = rg_pcfg_dma_header_num_cfg_num_cfg;
    l2h_pcfg_dma_header_num_cfg_num_cfg_r = rg_pcfg_dma_header_num_cfg_num_cfg;
    if (d2l_pcfg_dma_header_num_cfg_we) reg_pcfg_dma_header_num_cfg_num_cfg_next = d2l_pcfg_dma_header_num_cfg_w [14:0] ;
  end
  
  //------- reg assigns for pcfg_dma_header_num_cfg
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_pcfg_dma_header_num_cfg_num_cfg <= 15'd0;
    end
    else begin
      rg_pcfg_dma_header_num_cfg_num_cfg <=  reg_pcfg_dma_header_num_cfg_num_cfg_next;
    end
  end
  
  //------- combinatorial assigns for st_dma_header_0_cycle_stride_6 (pio read data)
  always_comb begin
    l2d_st_dma_header_0_cycle_stride_6_r = 32'b0;
    l2d_st_dma_header_0_cycle_stride_6_r [15:0]  = rg_st_dma_header_0_cycle_stride_6_cycle_stride;
  end
  
  //------- combinatorial assigns for st_dma_ctrl
  always_comb begin
    reg_st_dma_ctrl_mode_next = rg_st_dma_ctrl_mode;
    l2h_st_dma_ctrl_mode_r = rg_st_dma_ctrl_mode;
    reg_st_dma_ctrl_valid_mode_next = rg_st_dma_ctrl_valid_mode;
    l2h_st_dma_ctrl_valid_mode_r = rg_st_dma_ctrl_valid_mode;
    reg_st_dma_ctrl_data_mux_next = rg_st_dma_ctrl_data_mux;
    l2h_st_dma_ctrl_data_mux_r = rg_st_dma_ctrl_data_mux;
    reg_st_dma_ctrl_num_repeat_next = rg_st_dma_ctrl_num_repeat;
    l2h_st_dma_ctrl_num_repeat_r = rg_st_dma_ctrl_num_repeat;
    if (d2l_st_dma_ctrl_we) reg_st_dma_ctrl_mode_next = d2l_st_dma_ctrl_w [1:0] ;
    if (d2l_st_dma_ctrl_we) reg_st_dma_ctrl_valid_mode_next = d2l_st_dma_ctrl_w [3:2] ;
    if (d2l_st_dma_ctrl_we) reg_st_dma_ctrl_data_mux_next = d2l_st_dma_ctrl_w [5:4] ;
    if (d2l_st_dma_ctrl_we) reg_st_dma_ctrl_num_repeat_next = d2l_st_dma_ctrl_w [6] ;
  end
  
  //------- reg assigns for st_dma_ctrl
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_st_dma_ctrl_mode <= 2'd0;
      rg_st_dma_ctrl_valid_mode <= 2'd0;
      rg_st_dma_ctrl_data_mux <= 2'd0;
      rg_st_dma_ctrl_num_repeat <= 1'd0;
    end
    else begin
      rg_st_dma_ctrl_mode <=  reg_st_dma_ctrl_mode_next;
      rg_st_dma_ctrl_valid_mode <=  reg_st_dma_ctrl_valid_mode_next;
      rg_st_dma_ctrl_data_mux <=  reg_st_dma_ctrl_data_mux_next;
      rg_st_dma_ctrl_num_repeat <=  reg_st_dma_ctrl_num_repeat_next;
    end
  end
  
  //------- combinatorial assigns for ld_dma_header_0_cycle_stride_7 (pio read data)
  always_comb begin
    l2d_ld_dma_header_0_cycle_stride_7_r = 32'b0;
    l2d_ld_dma_header_0_cycle_stride_7_r [15:0]  = rg_ld_dma_header_0_cycle_stride_7_cycle_stride;
  end
  
  //------- combinatorial assigns for ld_dma_header_0_range_0 (pio read data)
  always_comb begin
    l2d_ld_dma_header_0_range_0_r = rg_ld_dma_header_0_range_0_range;
  end
  
  //------- combinatorial assigns for ld_dma_header_0_stride_6 (pio read data)
  always_comb begin
    l2d_ld_dma_header_0_stride_6_r = 32'b0;
    l2d_ld_dma_header_0_stride_6_r [18:0]  = rg_ld_dma_header_0_stride_6_stride;
  end
  
  //------- combinatorial assigns for st_dma_header_0_cycle_stride_0 (pio read data)
  always_comb begin
    l2d_st_dma_header_0_cycle_stride_0_r = 32'b0;
    l2d_st_dma_header_0_cycle_stride_0_r [15:0]  = rg_st_dma_header_0_cycle_stride_0_cycle_stride;
  end
  
  //------- combinatorial assigns for ld_dma_header_0_stride_0 (pio read data)
  always_comb begin
    l2d_ld_dma_header_0_stride_0_r = 32'b0;
    l2d_ld_dma_header_0_stride_0_r [18:0]  = rg_ld_dma_header_0_stride_0_stride;
  end
  
  //------- combinatorial assigns for ld_dma_header_0_range_6 (pio read data)
  always_comb begin
    l2d_ld_dma_header_0_range_6_r = rg_ld_dma_header_0_range_6_range;
  end
  
  //------- combinatorial assigns for st_dma_header_0_dim
  always_comb begin
    reg_st_dma_header_0_dim_dim_next = rg_st_dma_header_0_dim_dim;
    l2h_st_dma_header_0_dim_dim_r = rg_st_dma_header_0_dim_dim;
    if (d2l_st_dma_header_0_dim_we) reg_st_dma_header_0_dim_dim_next = d2l_st_dma_header_0_dim_w [3:0] ;
  end
  
  //------- reg assigns for st_dma_header_0_dim
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_st_dma_header_0_dim_dim <= 4'd0;
    end
    else begin
      rg_st_dma_header_0_dim_dim <=  reg_st_dma_header_0_dim_dim_next;
    end
  end
  
  //------- combinatorial assigns for st_dma_header_0_start_addr
  always_comb begin
    reg_st_dma_header_0_start_addr_start_addr_next = rg_st_dma_header_0_start_addr_start_addr;
    l2h_st_dma_header_0_start_addr_start_addr_r = rg_st_dma_header_0_start_addr_start_addr;
    if (d2l_st_dma_header_0_start_addr_we) reg_st_dma_header_0_start_addr_start_addr_next = d2l_st_dma_header_0_start_addr_w [17:0] ;
  end
  
  //------- reg assigns for st_dma_header_0_start_addr
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_st_dma_header_0_start_addr_start_addr <= 18'd0;
    end
    else begin
      rg_st_dma_header_0_start_addr_start_addr <=  reg_st_dma_header_0_start_addr_start_addr_next;
    end
  end
  
  //------- combinatorial assigns for ld_dma_header_0_cycle_start_addr
  always_comb begin
    reg_ld_dma_header_0_cycle_start_addr_cycle_start_addr_next = rg_ld_dma_header_0_cycle_start_addr_cycle_start_addr;
    l2h_ld_dma_header_0_cycle_start_addr_cycle_start_addr_r = rg_ld_dma_header_0_cycle_start_addr_cycle_start_addr;
    if (d2l_ld_dma_header_0_cycle_start_addr_we) reg_ld_dma_header_0_cycle_start_addr_cycle_start_addr_next = d2l_ld_dma_header_0_cycle_start_addr_w [15:0] ;
  end
  
  //------- reg assigns for ld_dma_header_0_cycle_start_addr
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_ld_dma_header_0_cycle_start_addr_cycle_start_addr <= 16'd0;
    end
    else begin
      rg_ld_dma_header_0_cycle_start_addr_cycle_start_addr <=  reg_ld_dma_header_0_cycle_start_addr_cycle_start_addr_next;
    end
  end
  
  //------- combinatorial assigns for data_network_latency (pio read data)
  always_comb begin
    l2d_data_network_latency_r = 32'b0;
    l2d_data_network_latency_r [5:0]  = rg_data_network_latency_value;
  end
  
  //------- combinatorial assigns for pcfg_dma_ctrl
  always_comb begin
    reg_pcfg_dma_ctrl_mode_next = rg_pcfg_dma_ctrl_mode;
    l2h_pcfg_dma_ctrl_mode_r = rg_pcfg_dma_ctrl_mode;
    reg_pcfg_dma_ctrl_relocation_value_next = rg_pcfg_dma_ctrl_relocation_value;
    l2h_pcfg_dma_ctrl_relocation_value_r = rg_pcfg_dma_ctrl_relocation_value;
    reg_pcfg_dma_ctrl_relocation_is_msb_next = rg_pcfg_dma_ctrl_relocation_is_msb;
    l2h_pcfg_dma_ctrl_relocation_is_msb_r = rg_pcfg_dma_ctrl_relocation_is_msb;
    if (d2l_pcfg_dma_ctrl_we) reg_pcfg_dma_ctrl_mode_next = d2l_pcfg_dma_ctrl_w [0] ;
    if (d2l_pcfg_dma_ctrl_we) reg_pcfg_dma_ctrl_relocation_value_next = d2l_pcfg_dma_ctrl_w [16:1] ;
    if (d2l_pcfg_dma_ctrl_we) reg_pcfg_dma_ctrl_relocation_is_msb_next = d2l_pcfg_dma_ctrl_w [17] ;
  end
  
  //------- reg assigns for pcfg_dma_ctrl
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_pcfg_dma_ctrl_mode <= 1'd0;
      rg_pcfg_dma_ctrl_relocation_value <= 16'd0;
      rg_pcfg_dma_ctrl_relocation_is_msb <= 1'd0;
    end
    else begin
      rg_pcfg_dma_ctrl_mode <=  reg_pcfg_dma_ctrl_mode_next;
      rg_pcfg_dma_ctrl_relocation_value <=  reg_pcfg_dma_ctrl_relocation_value_next;
      rg_pcfg_dma_ctrl_relocation_is_msb <=  reg_pcfg_dma_ctrl_relocation_is_msb_next;
    end
  end
  
  //------- combinatorial assigns for st_dma_header_0_stride_4 (pio read data)
  always_comb begin
    l2d_st_dma_header_0_stride_4_r = 32'b0;
    l2d_st_dma_header_0_stride_4_r [18:0]  = rg_st_dma_header_0_stride_4_stride;
  end
  
  //------- combinatorial assigns for ld_dma_header_0_stride_7
  always_comb begin
    reg_ld_dma_header_0_stride_7_stride_next = rg_ld_dma_header_0_stride_7_stride;
    l2h_ld_dma_header_0_stride_7_stride_r = rg_ld_dma_header_0_stride_7_stride;
    if (d2l_ld_dma_header_0_stride_7_we) reg_ld_dma_header_0_stride_7_stride_next = d2l_ld_dma_header_0_stride_7_w [18:0] ;
  end
  
  //------- reg assigns for ld_dma_header_0_stride_7
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_ld_dma_header_0_stride_7_stride <= 19'd0;
    end
    else begin
      rg_ld_dma_header_0_stride_7_stride <=  reg_ld_dma_header_0_stride_7_stride_next;
    end
  end
  
  //------- combinatorial assigns for ld_dma_ctrl
  always_comb begin
    reg_ld_dma_ctrl_mode_next = rg_ld_dma_ctrl_mode;
    l2h_ld_dma_ctrl_mode_r = rg_ld_dma_ctrl_mode;
    reg_ld_dma_ctrl_valid_mode_next = rg_ld_dma_ctrl_valid_mode;
    l2h_ld_dma_ctrl_valid_mode_r = rg_ld_dma_ctrl_valid_mode;
    reg_ld_dma_ctrl_flush_mode_next = rg_ld_dma_ctrl_flush_mode;
    l2h_ld_dma_ctrl_flush_mode_r = rg_ld_dma_ctrl_flush_mode;
    reg_ld_dma_ctrl_data_mux_next = rg_ld_dma_ctrl_data_mux;
    l2h_ld_dma_ctrl_data_mux_r = rg_ld_dma_ctrl_data_mux;
    reg_ld_dma_ctrl_num_repeat_next = rg_ld_dma_ctrl_num_repeat;
    l2h_ld_dma_ctrl_num_repeat_r = rg_ld_dma_ctrl_num_repeat;
    if (d2l_ld_dma_ctrl_we) reg_ld_dma_ctrl_mode_next = d2l_ld_dma_ctrl_w [1:0] ;
    if (d2l_ld_dma_ctrl_we) reg_ld_dma_ctrl_valid_mode_next = d2l_ld_dma_ctrl_w [3:2] ;
    if (d2l_ld_dma_ctrl_we) reg_ld_dma_ctrl_flush_mode_next = d2l_ld_dma_ctrl_w [4] ;
    if (d2l_ld_dma_ctrl_we) reg_ld_dma_ctrl_data_mux_next = d2l_ld_dma_ctrl_w [6:5] ;
    if (d2l_ld_dma_ctrl_we) reg_ld_dma_ctrl_num_repeat_next = d2l_ld_dma_ctrl_w [7] ;
  end
  
  //------- reg assigns for ld_dma_ctrl
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_ld_dma_ctrl_mode <= 2'd0;
      rg_ld_dma_ctrl_valid_mode <= 2'd0;
      rg_ld_dma_ctrl_flush_mode <= 1'd0;
      rg_ld_dma_ctrl_data_mux <= 2'd0;
      rg_ld_dma_ctrl_num_repeat <= 1'd0;
    end
    else begin
      rg_ld_dma_ctrl_mode <=  reg_ld_dma_ctrl_mode_next;
      rg_ld_dma_ctrl_valid_mode <=  reg_ld_dma_ctrl_valid_mode_next;
      rg_ld_dma_ctrl_flush_mode <=  reg_ld_dma_ctrl_flush_mode_next;
      rg_ld_dma_ctrl_data_mux <=  reg_ld_dma_ctrl_data_mux_next;
      rg_ld_dma_ctrl_num_repeat <=  reg_ld_dma_ctrl_num_repeat_next;
    end
  end
  
  //------- combinatorial assigns for ld_dma_header_0_stride_5
  always_comb begin
    reg_ld_dma_header_0_stride_5_stride_next = rg_ld_dma_header_0_stride_5_stride;
    l2h_ld_dma_header_0_stride_5_stride_r = rg_ld_dma_header_0_stride_5_stride;
    if (d2l_ld_dma_header_0_stride_5_we) reg_ld_dma_header_0_stride_5_stride_next = d2l_ld_dma_header_0_stride_5_w [18:0] ;
  end
  
  //------- reg assigns for ld_dma_header_0_stride_5
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_ld_dma_header_0_stride_5_stride <= 19'd0;
    end
    else begin
      rg_ld_dma_header_0_stride_5_stride <=  reg_ld_dma_header_0_stride_5_stride_next;
    end
  end
  
  //------- combinatorial assigns for ld_dma_header_0_stride_6
  always_comb begin
    reg_ld_dma_header_0_stride_6_stride_next = rg_ld_dma_header_0_stride_6_stride;
    l2h_ld_dma_header_0_stride_6_stride_r = rg_ld_dma_header_0_stride_6_stride;
    if (d2l_ld_dma_header_0_stride_6_we) reg_ld_dma_header_0_stride_6_stride_next = d2l_ld_dma_header_0_stride_6_w [18:0] ;
  end
  
  //------- reg assigns for ld_dma_header_0_stride_6
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_ld_dma_header_0_stride_6_stride <= 19'd0;
    end
    else begin
      rg_ld_dma_header_0_stride_6_stride <=  reg_ld_dma_header_0_stride_6_stride_next;
    end
  end
  
  //------- combinatorial assigns for ld_dma_header_0_stride_3
  always_comb begin
    reg_ld_dma_header_0_stride_3_stride_next = rg_ld_dma_header_0_stride_3_stride;
    l2h_ld_dma_header_0_stride_3_stride_r = rg_ld_dma_header_0_stride_3_stride;
    if (d2l_ld_dma_header_0_stride_3_we) reg_ld_dma_header_0_stride_3_stride_next = d2l_ld_dma_header_0_stride_3_w [18:0] ;
  end
  
  //------- reg assigns for ld_dma_header_0_stride_3
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_ld_dma_header_0_stride_3_stride <= 19'd0;
    end
    else begin
      rg_ld_dma_header_0_stride_3_stride <=  reg_ld_dma_header_0_stride_3_stride_next;
    end
  end
  
  //------- combinatorial assigns for ld_dma_header_0_range_7 (pio read data)
  always_comb begin
    l2d_ld_dma_header_0_range_7_r = rg_ld_dma_header_0_range_7_range;
  end
  
  //------- combinatorial assigns for ld_dma_header_0_stride_4
  always_comb begin
    reg_ld_dma_header_0_stride_4_stride_next = rg_ld_dma_header_0_stride_4_stride;
    l2h_ld_dma_header_0_stride_4_stride_r = rg_ld_dma_header_0_stride_4_stride;
    if (d2l_ld_dma_header_0_stride_4_we) reg_ld_dma_header_0_stride_4_stride_next = d2l_ld_dma_header_0_stride_4_w [18:0] ;
  end
  
  //------- reg assigns for ld_dma_header_0_stride_4
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_ld_dma_header_0_stride_4_stride <= 19'd0;
    end
    else begin
      rg_ld_dma_header_0_stride_4_stride <=  reg_ld_dma_header_0_stride_4_stride_next;
    end
  end
  
  //------- combinatorial assigns for st_dma_num_blocks
  always_comb begin
    reg_st_dma_num_blocks_value_next = rg_st_dma_num_blocks_value;
    l2h_st_dma_num_blocks_value_r = rg_st_dma_num_blocks_value;
    if (d2l_st_dma_num_blocks_we) reg_st_dma_num_blocks_value_next = d2l_st_dma_num_blocks_w;
  end
  
  //------- reg assigns for st_dma_num_blocks
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_st_dma_num_blocks_value <= 32'd0;
    end
    else begin
      rg_st_dma_num_blocks_value <=  reg_st_dma_num_blocks_value_next;
    end
  end
  
  //------- combinatorial assigns for st_dma_header_0_cycle_stride_1 (pio read data)
  always_comb begin
    l2d_st_dma_header_0_cycle_stride_1_r = 32'b0;
    l2d_st_dma_header_0_cycle_stride_1_r [15:0]  = rg_st_dma_header_0_cycle_stride_1_cycle_stride;
  end
  
  //------- combinatorial assigns for ld_dma_header_0_range_1 (pio read data)
  always_comb begin
    l2d_ld_dma_header_0_range_1_r = rg_ld_dma_header_0_range_1_range;
  end
  
  //------- combinatorial assigns for st_dma_header_0_range_0
  always_comb begin
    reg_st_dma_header_0_range_0_range_next = rg_st_dma_header_0_range_0_range;
    l2h_st_dma_header_0_range_0_range_r = rg_st_dma_header_0_range_0_range;
    if (d2l_st_dma_header_0_range_0_we) reg_st_dma_header_0_range_0_range_next = d2l_st_dma_header_0_range_0_w;
  end
  
  //------- reg assigns for st_dma_header_0_range_0
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_st_dma_header_0_range_0_range <= 32'd0;
    end
    else begin
      rg_st_dma_header_0_range_0_range <=  reg_st_dma_header_0_range_0_range_next;
    end
  end
  
  //------- combinatorial assigns for st_dma_header_0_range_1
  always_comb begin
    reg_st_dma_header_0_range_1_range_next = rg_st_dma_header_0_range_1_range;
    l2h_st_dma_header_0_range_1_range_r = rg_st_dma_header_0_range_1_range;
    if (d2l_st_dma_header_0_range_1_we) reg_st_dma_header_0_range_1_range_next = d2l_st_dma_header_0_range_1_w;
  end
  
  //------- reg assigns for st_dma_header_0_range_1
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_st_dma_header_0_range_1_range <= 32'd0;
    end
    else begin
      rg_st_dma_header_0_range_1_range <=  reg_st_dma_header_0_range_1_range_next;
    end
  end
  
  //------- combinatorial assigns for st_dma_header_0_range_2
  always_comb begin
    reg_st_dma_header_0_range_2_range_next = rg_st_dma_header_0_range_2_range;
    l2h_st_dma_header_0_range_2_range_r = rg_st_dma_header_0_range_2_range;
    if (d2l_st_dma_header_0_range_2_we) reg_st_dma_header_0_range_2_range_next = d2l_st_dma_header_0_range_2_w;
  end
  
  //------- reg assigns for st_dma_header_0_range_2
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_st_dma_header_0_range_2_range <= 32'd0;
    end
    else begin
      rg_st_dma_header_0_range_2_range <=  reg_st_dma_header_0_range_2_range_next;
    end
  end
  
  //------- combinatorial assigns for st_dma_header_0_range_3
  always_comb begin
    reg_st_dma_header_0_range_3_range_next = rg_st_dma_header_0_range_3_range;
    l2h_st_dma_header_0_range_3_range_r = rg_st_dma_header_0_range_3_range;
    if (d2l_st_dma_header_0_range_3_we) reg_st_dma_header_0_range_3_range_next = d2l_st_dma_header_0_range_3_w;
  end
  
  //------- reg assigns for st_dma_header_0_range_3
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_st_dma_header_0_range_3_range <= 32'd0;
    end
    else begin
      rg_st_dma_header_0_range_3_range <=  reg_st_dma_header_0_range_3_range_next;
    end
  end
  
  //------- combinatorial assigns for st_dma_header_0_range_4
  always_comb begin
    reg_st_dma_header_0_range_4_range_next = rg_st_dma_header_0_range_4_range;
    l2h_st_dma_header_0_range_4_range_r = rg_st_dma_header_0_range_4_range;
    if (d2l_st_dma_header_0_range_4_we) reg_st_dma_header_0_range_4_range_next = d2l_st_dma_header_0_range_4_w;
  end
  
  //------- reg assigns for st_dma_header_0_range_4
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_st_dma_header_0_range_4_range <= 32'd0;
    end
    else begin
      rg_st_dma_header_0_range_4_range <=  reg_st_dma_header_0_range_4_range_next;
    end
  end
  
  //------- combinatorial assigns for ld_dma_header_0_cycle_stride_1
  always_comb begin
    reg_ld_dma_header_0_cycle_stride_1_cycle_stride_next = rg_ld_dma_header_0_cycle_stride_1_cycle_stride;
    l2h_ld_dma_header_0_cycle_stride_1_cycle_stride_r = rg_ld_dma_header_0_cycle_stride_1_cycle_stride;
    if (d2l_ld_dma_header_0_cycle_stride_1_we) reg_ld_dma_header_0_cycle_stride_1_cycle_stride_next = d2l_ld_dma_header_0_cycle_stride_1_w [15:0] ;
  end
  
  //------- reg assigns for ld_dma_header_0_cycle_stride_1
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_ld_dma_header_0_cycle_stride_1_cycle_stride <= 16'd0;
    end
    else begin
      rg_ld_dma_header_0_cycle_stride_1_cycle_stride <=  reg_ld_dma_header_0_cycle_stride_1_cycle_stride_next;
    end
  end
  
  //------- combinatorial assigns for st_dma_header_0_range_5
  always_comb begin
    reg_st_dma_header_0_range_5_range_next = rg_st_dma_header_0_range_5_range;
    l2h_st_dma_header_0_range_5_range_r = rg_st_dma_header_0_range_5_range;
    if (d2l_st_dma_header_0_range_5_we) reg_st_dma_header_0_range_5_range_next = d2l_st_dma_header_0_range_5_w;
  end
  
  //------- reg assigns for st_dma_header_0_range_5
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_st_dma_header_0_range_5_range <= 32'd0;
    end
    else begin
      rg_st_dma_header_0_range_5_range <=  reg_st_dma_header_0_range_5_range_next;
    end
  end
  
  //------- combinatorial assigns for ld_dma_header_0_cycle_stride_0
  always_comb begin
    reg_ld_dma_header_0_cycle_stride_0_cycle_stride_next = rg_ld_dma_header_0_cycle_stride_0_cycle_stride;
    l2h_ld_dma_header_0_cycle_stride_0_cycle_stride_r = rg_ld_dma_header_0_cycle_stride_0_cycle_stride;
    if (d2l_ld_dma_header_0_cycle_stride_0_we) reg_ld_dma_header_0_cycle_stride_0_cycle_stride_next = d2l_ld_dma_header_0_cycle_stride_0_w [15:0] ;
  end
  
  //------- reg assigns for ld_dma_header_0_cycle_stride_0
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_ld_dma_header_0_cycle_stride_0_cycle_stride <= 16'd0;
    end
    else begin
      rg_ld_dma_header_0_cycle_stride_0_cycle_stride <=  reg_ld_dma_header_0_cycle_stride_0_cycle_stride_next;
    end
  end
  
  //------- combinatorial assigns for ld_dma_header_0_range_4 (pio read data)
  always_comb begin
    l2d_ld_dma_header_0_range_4_r = rg_ld_dma_header_0_range_4_range;
  end
  
  //------- combinatorial assigns for st_dma_header_0_range_6
  always_comb begin
    reg_st_dma_header_0_range_6_range_next = rg_st_dma_header_0_range_6_range;
    l2h_st_dma_header_0_range_6_range_r = rg_st_dma_header_0_range_6_range;
    if (d2l_st_dma_header_0_range_6_we) reg_st_dma_header_0_range_6_range_next = d2l_st_dma_header_0_range_6_w;
  end
  
  //------- reg assigns for st_dma_header_0_range_6
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_st_dma_header_0_range_6_range <= 32'd0;
    end
    else begin
      rg_st_dma_header_0_range_6_range <=  reg_st_dma_header_0_range_6_range_next;
    end
  end
  
  //------- combinatorial assigns for ld_dma_header_0_cycle_stride_3
  always_comb begin
    reg_ld_dma_header_0_cycle_stride_3_cycle_stride_next = rg_ld_dma_header_0_cycle_stride_3_cycle_stride;
    l2h_ld_dma_header_0_cycle_stride_3_cycle_stride_r = rg_ld_dma_header_0_cycle_stride_3_cycle_stride;
    if (d2l_ld_dma_header_0_cycle_stride_3_we) reg_ld_dma_header_0_cycle_stride_3_cycle_stride_next = d2l_ld_dma_header_0_cycle_stride_3_w [15:0] ;
  end
  
  //------- reg assigns for ld_dma_header_0_cycle_stride_3
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_ld_dma_header_0_cycle_stride_3_cycle_stride <= 16'd0;
    end
    else begin
      rg_ld_dma_header_0_cycle_stride_3_cycle_stride <=  reg_ld_dma_header_0_cycle_stride_3_cycle_stride_next;
    end
  end
  
  //------- combinatorial assigns for ld_dma_header_0_cycle_stride_2
  always_comb begin
    reg_ld_dma_header_0_cycle_stride_2_cycle_stride_next = rg_ld_dma_header_0_cycle_stride_2_cycle_stride;
    l2h_ld_dma_header_0_cycle_stride_2_cycle_stride_r = rg_ld_dma_header_0_cycle_stride_2_cycle_stride;
    if (d2l_ld_dma_header_0_cycle_stride_2_we) reg_ld_dma_header_0_cycle_stride_2_cycle_stride_next = d2l_ld_dma_header_0_cycle_stride_2_w [15:0] ;
  end
  
  //------- reg assigns for ld_dma_header_0_cycle_stride_2
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_ld_dma_header_0_cycle_stride_2_cycle_stride <= 16'd0;
    end
    else begin
      rg_ld_dma_header_0_cycle_stride_2_cycle_stride <=  reg_ld_dma_header_0_cycle_stride_2_cycle_stride_next;
    end
  end
  
  //------- combinatorial assigns for ld_dma_header_0_cycle_stride_5
  always_comb begin
    reg_ld_dma_header_0_cycle_stride_5_cycle_stride_next = rg_ld_dma_header_0_cycle_stride_5_cycle_stride;
    l2h_ld_dma_header_0_cycle_stride_5_cycle_stride_r = rg_ld_dma_header_0_cycle_stride_5_cycle_stride;
    if (d2l_ld_dma_header_0_cycle_stride_5_we) reg_ld_dma_header_0_cycle_stride_5_cycle_stride_next = d2l_ld_dma_header_0_cycle_stride_5_w [15:0] ;
  end
  
  //------- reg assigns for ld_dma_header_0_cycle_stride_5
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_ld_dma_header_0_cycle_stride_5_cycle_stride <= 16'd0;
    end
    else begin
      rg_ld_dma_header_0_cycle_stride_5_cycle_stride <=  reg_ld_dma_header_0_cycle_stride_5_cycle_stride_next;
    end
  end
  
  //------- combinatorial assigns for ld_dma_header_0_cycle_stride_4
  always_comb begin
    reg_ld_dma_header_0_cycle_stride_4_cycle_stride_next = rg_ld_dma_header_0_cycle_stride_4_cycle_stride;
    l2h_ld_dma_header_0_cycle_stride_4_cycle_stride_r = rg_ld_dma_header_0_cycle_stride_4_cycle_stride;
    if (d2l_ld_dma_header_0_cycle_stride_4_we) reg_ld_dma_header_0_cycle_stride_4_cycle_stride_next = d2l_ld_dma_header_0_cycle_stride_4_w [15:0] ;
  end
  
  //------- reg assigns for ld_dma_header_0_cycle_stride_4
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_ld_dma_header_0_cycle_stride_4_cycle_stride <= 16'd0;
    end
    else begin
      rg_ld_dma_header_0_cycle_stride_4_cycle_stride <=  reg_ld_dma_header_0_cycle_stride_4_cycle_stride_next;
    end
  end
  
  //------- combinatorial assigns for pcfg_dma_header_start_addr (pio read data)
  always_comb begin
    l2d_pcfg_dma_header_start_addr_r = 32'b0;
    l2d_pcfg_dma_header_start_addr_r [17:0]  = rg_pcfg_dma_header_start_addr_start_addr;
  end
  
  //------- combinatorial assigns for ld_dma_header_0_cycle_stride_7
  always_comb begin
    reg_ld_dma_header_0_cycle_stride_7_cycle_stride_next = rg_ld_dma_header_0_cycle_stride_7_cycle_stride;
    l2h_ld_dma_header_0_cycle_stride_7_cycle_stride_r = rg_ld_dma_header_0_cycle_stride_7_cycle_stride;
    if (d2l_ld_dma_header_0_cycle_stride_7_we) reg_ld_dma_header_0_cycle_stride_7_cycle_stride_next = d2l_ld_dma_header_0_cycle_stride_7_w [15:0] ;
  end
  
  //------- reg assigns for ld_dma_header_0_cycle_stride_7
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_ld_dma_header_0_cycle_stride_7_cycle_stride <= 16'd0;
    end
    else begin
      rg_ld_dma_header_0_cycle_stride_7_cycle_stride <=  reg_ld_dma_header_0_cycle_stride_7_cycle_stride_next;
    end
  end
  
  //------- combinatorial assigns for st_dma_header_0_stride_1 (pio read data)
  always_comb begin
    l2d_st_dma_header_0_stride_1_r = 32'b0;
    l2d_st_dma_header_0_stride_1_r [18:0]  = rg_st_dma_header_0_stride_1_stride;
  end
  
  //------- combinatorial assigns for ld_dma_header_0_cycle_stride_6
  always_comb begin
    reg_ld_dma_header_0_cycle_stride_6_cycle_stride_next = rg_ld_dma_header_0_cycle_stride_6_cycle_stride;
    l2h_ld_dma_header_0_cycle_stride_6_cycle_stride_r = rg_ld_dma_header_0_cycle_stride_6_cycle_stride;
    if (d2l_ld_dma_header_0_cycle_stride_6_we) reg_ld_dma_header_0_cycle_stride_6_cycle_stride_next = d2l_ld_dma_header_0_cycle_stride_6_w [15:0] ;
  end
  
  //------- reg assigns for ld_dma_header_0_cycle_stride_6
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_ld_dma_header_0_cycle_stride_6_cycle_stride <= 16'd0;
    end
    else begin
      rg_ld_dma_header_0_cycle_stride_6_cycle_stride <=  reg_ld_dma_header_0_cycle_stride_6_cycle_stride_next;
    end
  end
  
  //------- combinatorial assigns for st_dma_header_0_cycle_stride_4 (pio read data)
  always_comb begin
    l2d_st_dma_header_0_cycle_stride_4_r = 32'b0;
    l2d_st_dma_header_0_cycle_stride_4_r [15:0]  = rg_st_dma_header_0_cycle_stride_4_cycle_stride;
  end
  
  //------- combinatorial assigns for st_dma_header_0_range_0 (pio read data)
  always_comb begin
    l2d_st_dma_header_0_range_0_r = rg_st_dma_header_0_range_0_range;
  end
  
  //------- combinatorial assigns for st_dma_header_0_range_3 (pio read data)
  always_comb begin
    l2d_st_dma_header_0_range_3_r = rg_st_dma_header_0_range_3_range;
  end
  
  //------- combinatorial assigns for st_dma_header_0_range_6 (pio read data)
  always_comb begin
    l2d_st_dma_header_0_range_6_r = rg_st_dma_header_0_range_6_range;
  end
  
  //------- combinatorial assigns for pcfg_network_ctrl (pio read data)
  always_comb begin
    l2d_pcfg_network_ctrl_r = 32'b0;
    l2d_pcfg_network_ctrl_r [0]  = rg_pcfg_network_ctrl_connected;
  end
  
  //------- combinatorial assigns for st_dma_header_0_cycle_stride_1
  always_comb begin
    reg_st_dma_header_0_cycle_stride_1_cycle_stride_next = rg_st_dma_header_0_cycle_stride_1_cycle_stride;
    l2h_st_dma_header_0_cycle_stride_1_cycle_stride_r = rg_st_dma_header_0_cycle_stride_1_cycle_stride;
    if (d2l_st_dma_header_0_cycle_stride_1_we) reg_st_dma_header_0_cycle_stride_1_cycle_stride_next = d2l_st_dma_header_0_cycle_stride_1_w [15:0] ;
  end
  
  //------- reg assigns for st_dma_header_0_cycle_stride_1
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_st_dma_header_0_cycle_stride_1_cycle_stride <= 16'd0;
    end
    else begin
      rg_st_dma_header_0_cycle_stride_1_cycle_stride <=  reg_st_dma_header_0_cycle_stride_1_cycle_stride_next;
    end
  end
  
  //------- combinatorial assigns for ld_dma_header_0_stride_1
  always_comb begin
    reg_ld_dma_header_0_stride_1_stride_next = rg_ld_dma_header_0_stride_1_stride;
    l2h_ld_dma_header_0_stride_1_stride_r = rg_ld_dma_header_0_stride_1_stride;
    if (d2l_ld_dma_header_0_stride_1_we) reg_ld_dma_header_0_stride_1_stride_next = d2l_ld_dma_header_0_stride_1_w [18:0] ;
  end
  
  //------- reg assigns for ld_dma_header_0_stride_1
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_ld_dma_header_0_stride_1_stride <= 19'd0;
    end
    else begin
      rg_ld_dma_header_0_stride_1_stride <=  reg_ld_dma_header_0_stride_1_stride_next;
    end
  end
  
  //------- combinatorial assigns for st_dma_header_0_cycle_stride_2
  always_comb begin
    reg_st_dma_header_0_cycle_stride_2_cycle_stride_next = rg_st_dma_header_0_cycle_stride_2_cycle_stride;
    l2h_st_dma_header_0_cycle_stride_2_cycle_stride_r = rg_st_dma_header_0_cycle_stride_2_cycle_stride;
    if (d2l_st_dma_header_0_cycle_stride_2_we) reg_st_dma_header_0_cycle_stride_2_cycle_stride_next = d2l_st_dma_header_0_cycle_stride_2_w [15:0] ;
  end
  
  //------- reg assigns for st_dma_header_0_cycle_stride_2
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_st_dma_header_0_cycle_stride_2_cycle_stride <= 16'd0;
    end
    else begin
      rg_st_dma_header_0_cycle_stride_2_cycle_stride <=  reg_st_dma_header_0_cycle_stride_2_cycle_stride_next;
    end
  end
  
  //------- combinatorial assigns for ld_dma_header_0_stride_2
  always_comb begin
    reg_ld_dma_header_0_stride_2_stride_next = rg_ld_dma_header_0_stride_2_stride;
    l2h_ld_dma_header_0_stride_2_stride_r = rg_ld_dma_header_0_stride_2_stride;
    if (d2l_ld_dma_header_0_stride_2_we) reg_ld_dma_header_0_stride_2_stride_next = d2l_ld_dma_header_0_stride_2_w [18:0] ;
  end
  
  //------- reg assigns for ld_dma_header_0_stride_2
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_ld_dma_header_0_stride_2_stride <= 19'd0;
    end
    else begin
      rg_ld_dma_header_0_stride_2_stride <=  reg_ld_dma_header_0_stride_2_stride_next;
    end
  end
  
  //------- combinatorial assigns for st_dma_header_0_cycle_stride_3
  always_comb begin
    reg_st_dma_header_0_cycle_stride_3_cycle_stride_next = rg_st_dma_header_0_cycle_stride_3_cycle_stride;
    l2h_st_dma_header_0_cycle_stride_3_cycle_stride_r = rg_st_dma_header_0_cycle_stride_3_cycle_stride;
    if (d2l_st_dma_header_0_cycle_stride_3_we) reg_st_dma_header_0_cycle_stride_3_cycle_stride_next = d2l_st_dma_header_0_cycle_stride_3_w [15:0] ;
  end
  
  //------- reg assigns for st_dma_header_0_cycle_stride_3
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_st_dma_header_0_cycle_stride_3_cycle_stride <= 16'd0;
    end
    else begin
      rg_st_dma_header_0_cycle_stride_3_cycle_stride <=  reg_st_dma_header_0_cycle_stride_3_cycle_stride_next;
    end
  end
  
  //------- combinatorial assigns for st_dma_header_0_cycle_stride_4
  always_comb begin
    reg_st_dma_header_0_cycle_stride_4_cycle_stride_next = rg_st_dma_header_0_cycle_stride_4_cycle_stride;
    l2h_st_dma_header_0_cycle_stride_4_cycle_stride_r = rg_st_dma_header_0_cycle_stride_4_cycle_stride;
    if (d2l_st_dma_header_0_cycle_stride_4_we) reg_st_dma_header_0_cycle_stride_4_cycle_stride_next = d2l_st_dma_header_0_cycle_stride_4_w [15:0] ;
  end
  
  //------- reg assigns for st_dma_header_0_cycle_stride_4
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_st_dma_header_0_cycle_stride_4_cycle_stride <= 16'd0;
    end
    else begin
      rg_st_dma_header_0_cycle_stride_4_cycle_stride <=  reg_st_dma_header_0_cycle_stride_4_cycle_stride_next;
    end
  end
  
  //------- combinatorial assigns for ld_dma_header_0_stride_0
  always_comb begin
    reg_ld_dma_header_0_stride_0_stride_next = rg_ld_dma_header_0_stride_0_stride;
    l2h_ld_dma_header_0_stride_0_stride_r = rg_ld_dma_header_0_stride_0_stride;
    if (d2l_ld_dma_header_0_stride_0_we) reg_ld_dma_header_0_stride_0_stride_next = d2l_ld_dma_header_0_stride_0_w [18:0] ;
  end
  
  //------- reg assigns for ld_dma_header_0_stride_0
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_ld_dma_header_0_stride_0_stride <= 19'd0;
    end
    else begin
      rg_ld_dma_header_0_stride_0_stride <=  reg_ld_dma_header_0_stride_0_stride_next;
    end
  end
  
  //------- combinatorial assigns for st_dma_header_0_cycle_stride_5
  always_comb begin
    reg_st_dma_header_0_cycle_stride_5_cycle_stride_next = rg_st_dma_header_0_cycle_stride_5_cycle_stride;
    l2h_st_dma_header_0_cycle_stride_5_cycle_stride_r = rg_st_dma_header_0_cycle_stride_5_cycle_stride;
    if (d2l_st_dma_header_0_cycle_stride_5_we) reg_st_dma_header_0_cycle_stride_5_cycle_stride_next = d2l_st_dma_header_0_cycle_stride_5_w [15:0] ;
  end
  
  //------- reg assigns for st_dma_header_0_cycle_stride_5
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_st_dma_header_0_cycle_stride_5_cycle_stride <= 16'd0;
    end
    else begin
      rg_st_dma_header_0_cycle_stride_5_cycle_stride <=  reg_st_dma_header_0_cycle_stride_5_cycle_stride_next;
    end
  end
  
  //------- combinatorial assigns for st_dma_ctrl (pio read data)
  always_comb begin
    l2d_st_dma_ctrl_r = 32'b0;
    l2d_st_dma_ctrl_r [1:0]  = rg_st_dma_ctrl_mode;
    l2d_st_dma_ctrl_r [3:2]  = rg_st_dma_ctrl_valid_mode;
    l2d_st_dma_ctrl_r [5:4]  = rg_st_dma_ctrl_data_mux;
    l2d_st_dma_ctrl_r [6]  = rg_st_dma_ctrl_num_repeat;
  end
  
  //------- combinatorial assigns for st_dma_header_0_cycle_stride_6
  always_comb begin
    reg_st_dma_header_0_cycle_stride_6_cycle_stride_next = rg_st_dma_header_0_cycle_stride_6_cycle_stride;
    l2h_st_dma_header_0_cycle_stride_6_cycle_stride_r = rg_st_dma_header_0_cycle_stride_6_cycle_stride;
    if (d2l_st_dma_header_0_cycle_stride_6_we) reg_st_dma_header_0_cycle_stride_6_cycle_stride_next = d2l_st_dma_header_0_cycle_stride_6_w [15:0] ;
  end
  
  //------- reg assigns for st_dma_header_0_cycle_stride_6
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_st_dma_header_0_cycle_stride_6_cycle_stride <= 16'd0;
    end
    else begin
      rg_st_dma_header_0_cycle_stride_6_cycle_stride <=  reg_st_dma_header_0_cycle_stride_6_cycle_stride_next;
    end
  end
  
  //------- combinatorial assigns for ld_dma_ctrl (pio read data)
  always_comb begin
    l2d_ld_dma_ctrl_r = 32'b0;
    l2d_ld_dma_ctrl_r [1:0]  = rg_ld_dma_ctrl_mode;
    l2d_ld_dma_ctrl_r [3:2]  = rg_ld_dma_ctrl_valid_mode;
    l2d_ld_dma_ctrl_r [4]  = rg_ld_dma_ctrl_flush_mode;
    l2d_ld_dma_ctrl_r [6:5]  = rg_ld_dma_ctrl_data_mux;
    l2d_ld_dma_ctrl_r [7]  = rg_ld_dma_ctrl_num_repeat;
  end
  
  //------- combinatorial assigns for ld_dma_header_0_stride_7 (pio read data)
  always_comb begin
    l2d_ld_dma_header_0_stride_7_r = 32'b0;
    l2d_ld_dma_header_0_stride_7_r [18:0]  = rg_ld_dma_header_0_stride_7_stride;
  end
  
  //------- combinatorial assigns for st_dma_header_0_cycle_stride_2 (pio read data)
  always_comb begin
    l2d_st_dma_header_0_cycle_stride_2_r = 32'b0;
    l2d_st_dma_header_0_cycle_stride_2_r [15:0]  = rg_st_dma_header_0_cycle_stride_2_cycle_stride;
  end
  
  //------- combinatorial assigns for ld_dma_header_0_start_addr (pio read data)
  always_comb begin
    l2d_ld_dma_header_0_start_addr_r = 32'b0;
    l2d_ld_dma_header_0_start_addr_r [17:0]  = rg_ld_dma_header_0_start_addr_start_addr;
  end
  
  //------- combinatorial assigns for st_dma_num_blocks (pio read data)
  always_comb begin
    l2d_st_dma_num_blocks_r = rg_st_dma_num_blocks_value;
  end
  
  //------- combinatorial assigns for pcfg_dma_header_start_addr
  always_comb begin
    reg_pcfg_dma_header_start_addr_start_addr_next = rg_pcfg_dma_header_start_addr_start_addr;
    l2h_pcfg_dma_header_start_addr_start_addr_r = rg_pcfg_dma_header_start_addr_start_addr;
    if (d2l_pcfg_dma_header_start_addr_we) reg_pcfg_dma_header_start_addr_start_addr_next = d2l_pcfg_dma_header_start_addr_w [17:0] ;
  end
  
  //------- reg assigns for pcfg_dma_header_start_addr
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_pcfg_dma_header_start_addr_start_addr <= 18'd0;
    end
    else begin
      rg_pcfg_dma_header_start_addr_start_addr <=  reg_pcfg_dma_header_start_addr_start_addr_next;
    end
  end
  
  //------- combinatorial assigns for st_dma_header_0_cycle_start_addr
  always_comb begin
    reg_st_dma_header_0_cycle_start_addr_cycle_start_addr_next = rg_st_dma_header_0_cycle_start_addr_cycle_start_addr;
    l2h_st_dma_header_0_cycle_start_addr_cycle_start_addr_r = rg_st_dma_header_0_cycle_start_addr_cycle_start_addr;
    if (d2l_st_dma_header_0_cycle_start_addr_we) reg_st_dma_header_0_cycle_start_addr_cycle_start_addr_next = d2l_st_dma_header_0_cycle_start_addr_w [15:0] ;
  end
  
  //------- reg assigns for st_dma_header_0_cycle_start_addr
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_st_dma_header_0_cycle_start_addr_cycle_start_addr <= 16'd0;
    end
    else begin
      rg_st_dma_header_0_cycle_start_addr_cycle_start_addr <=  reg_st_dma_header_0_cycle_start_addr_cycle_start_addr_next;
    end
  end
  
  //------- combinatorial assigns for ld_dma_header_0_cycle_stride_5 (pio read data)
  always_comb begin
    l2d_ld_dma_header_0_cycle_stride_5_r = 32'b0;
    l2d_ld_dma_header_0_cycle_stride_5_r [15:0]  = rg_ld_dma_header_0_cycle_stride_5_cycle_stride;
  end
  
  //------- combinatorial assigns for pcfg_network_ctrl
  always_comb begin
    reg_pcfg_network_ctrl_connected_next = rg_pcfg_network_ctrl_connected;
    l2h_pcfg_network_ctrl_connected_r = rg_pcfg_network_ctrl_connected;
    if (d2l_pcfg_network_ctrl_we) reg_pcfg_network_ctrl_connected_next = d2l_pcfg_network_ctrl_w [0] ;
  end
  
  //------- reg assigns for pcfg_network_ctrl
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_pcfg_network_ctrl_connected <= 1'd0;
    end
    else begin
      rg_pcfg_network_ctrl_connected <=  reg_pcfg_network_ctrl_connected_next;
    end
  end
  
  //------- combinatorial assigns for ld_dma_header_0_stride_1 (pio read data)
  always_comb begin
    l2d_ld_dma_header_0_stride_1_r = 32'b0;
    l2d_ld_dma_header_0_stride_1_r [18:0]  = rg_ld_dma_header_0_stride_1_stride;
  end
  
  //------- combinatorial assigns for ld_dma_header_0_stride_4 (pio read data)
  always_comb begin
    l2d_ld_dma_header_0_stride_4_r = 32'b0;
    l2d_ld_dma_header_0_stride_4_r [18:0]  = rg_ld_dma_header_0_stride_4_stride;
  end
  
  //------- combinatorial assigns for ld_dma_header_0_dim
  always_comb begin
    reg_ld_dma_header_0_dim_dim_next = rg_ld_dma_header_0_dim_dim;
    l2h_ld_dma_header_0_dim_dim_r = rg_ld_dma_header_0_dim_dim;
    if (d2l_ld_dma_header_0_dim_we) reg_ld_dma_header_0_dim_dim_next = d2l_ld_dma_header_0_dim_w [3:0] ;
  end
  
  //------- reg assigns for ld_dma_header_0_dim
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_ld_dma_header_0_dim_dim <= 4'd0;
    end
    else begin
      rg_ld_dma_header_0_dim_dim <=  reg_ld_dma_header_0_dim_dim_next;
    end
  end
  
  //------- combinatorial assigns for st_dma_header_0_stride_0 (pio read data)
  always_comb begin
    l2d_st_dma_header_0_stride_0_r = 32'b0;
    l2d_st_dma_header_0_stride_0_r [18:0]  = rg_st_dma_header_0_stride_0_stride;
  end
  
  //------- combinatorial assigns for st_dma_header_0_cycle_start_addr (pio read data)
  always_comb begin
    l2d_st_dma_header_0_cycle_start_addr_r = 32'b0;
    l2d_st_dma_header_0_cycle_start_addr_r [15:0]  = rg_st_dma_header_0_cycle_start_addr_cycle_start_addr;
  end
  
  //------- combinatorial assigns for ld_dma_header_0_range_6
  always_comb begin
    reg_ld_dma_header_0_range_6_range_next = rg_ld_dma_header_0_range_6_range;
    l2h_ld_dma_header_0_range_6_range_r = rg_ld_dma_header_0_range_6_range;
    if (d2l_ld_dma_header_0_range_6_we) reg_ld_dma_header_0_range_6_range_next = d2l_ld_dma_header_0_range_6_w;
  end
  
  //------- reg assigns for ld_dma_header_0_range_6
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_ld_dma_header_0_range_6_range <= 32'd0;
    end
    else begin
      rg_ld_dma_header_0_range_6_range <=  reg_ld_dma_header_0_range_6_range_next;
    end
  end
  
  //------- combinatorial assigns for ld_dma_header_0_range_5
  always_comb begin
    reg_ld_dma_header_0_range_5_range_next = rg_ld_dma_header_0_range_5_range;
    l2h_ld_dma_header_0_range_5_range_r = rg_ld_dma_header_0_range_5_range;
    if (d2l_ld_dma_header_0_range_5_we) reg_ld_dma_header_0_range_5_range_next = d2l_ld_dma_header_0_range_5_w;
  end
  
  //------- reg assigns for ld_dma_header_0_range_5
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_ld_dma_header_0_range_5_range <= 32'd0;
    end
    else begin
      rg_ld_dma_header_0_range_5_range <=  reg_ld_dma_header_0_range_5_range_next;
    end
  end
  
  //------- combinatorial assigns for ld_dma_header_0_range_7
  always_comb begin
    reg_ld_dma_header_0_range_7_range_next = rg_ld_dma_header_0_range_7_range;
    l2h_ld_dma_header_0_range_7_range_r = rg_ld_dma_header_0_range_7_range;
    if (d2l_ld_dma_header_0_range_7_we) reg_ld_dma_header_0_range_7_range_next = d2l_ld_dma_header_0_range_7_w;
  end
  
  //------- reg assigns for ld_dma_header_0_range_7
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_ld_dma_header_0_range_7_range <= 32'd0;
    end
    else begin
      rg_ld_dma_header_0_range_7_range <=  reg_ld_dma_header_0_range_7_range_next;
    end
  end
  
  //------- combinatorial assigns for ld_dma_header_0_cycle_stride_2 (pio read data)
  always_comb begin
    l2d_ld_dma_header_0_cycle_stride_2_r = 32'b0;
    l2d_ld_dma_header_0_cycle_stride_2_r [15:0]  = rg_ld_dma_header_0_cycle_stride_2_cycle_stride;
  end
  
  //------- combinatorial assigns for st_dma_header_0_dim (pio read data)
  always_comb begin
    l2d_st_dma_header_0_dim_r = 32'b0;
    l2d_st_dma_header_0_dim_r [3:0]  = rg_st_dma_header_0_dim_dim;
  end
  
  //------- combinatorial assigns for st_dma_header_0_stride_3 (pio read data)
  always_comb begin
    l2d_st_dma_header_0_stride_3_r = 32'b0;
    l2d_st_dma_header_0_stride_3_r [18:0]  = rg_st_dma_header_0_stride_3_stride;
  end
  
  //------- combinatorial assigns for st_dma_header_0_stride_6 (pio read data)
  always_comb begin
    l2d_st_dma_header_0_stride_6_r = 32'b0;
    l2d_st_dma_header_0_stride_6_r [18:0]  = rg_st_dma_header_0_stride_6_stride;
  end
  
  //------- combinatorial assigns for st_dma_header_0_start_addr (pio read data)
  always_comb begin
    l2d_st_dma_header_0_start_addr_r = 32'b0;
    l2d_st_dma_header_0_start_addr_r [17:0]  = rg_st_dma_header_0_start_addr_start_addr;
  end
  
  //------- combinatorial assigns for st_dma_header_0_range_1 (pio read data)
  always_comb begin
    l2d_st_dma_header_0_range_1_r = rg_st_dma_header_0_range_1_range;
  end
  
  //------- combinatorial assigns for st_dma_header_0_range_4 (pio read data)
  always_comb begin
    l2d_st_dma_header_0_range_4_r = rg_st_dma_header_0_range_4_range;
  end
  
  //------- combinatorial assigns for st_dma_header_0_stride_4
  always_comb begin
    reg_st_dma_header_0_stride_4_stride_next = rg_st_dma_header_0_stride_4_stride;
    l2h_st_dma_header_0_stride_4_stride_r = rg_st_dma_header_0_stride_4_stride;
    if (d2l_st_dma_header_0_stride_4_we) reg_st_dma_header_0_stride_4_stride_next = d2l_st_dma_header_0_stride_4_w [18:0] ;
  end
  
  //------- reg assigns for st_dma_header_0_stride_4
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_st_dma_header_0_stride_4_stride <= 19'd0;
    end
    else begin
      rg_st_dma_header_0_stride_4_stride <=  reg_st_dma_header_0_stride_4_stride_next;
    end
  end
  
  //------- combinatorial assigns for st_dma_header_0_stride_5
  always_comb begin
    reg_st_dma_header_0_stride_5_stride_next = rg_st_dma_header_0_stride_5_stride;
    l2h_st_dma_header_0_stride_5_stride_r = rg_st_dma_header_0_stride_5_stride;
    if (d2l_st_dma_header_0_stride_5_we) reg_st_dma_header_0_stride_5_stride_next = d2l_st_dma_header_0_stride_5_w [18:0] ;
  end
  
  //------- reg assigns for st_dma_header_0_stride_5
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_st_dma_header_0_stride_5_stride <= 19'd0;
    end
    else begin
      rg_st_dma_header_0_stride_5_stride <=  reg_st_dma_header_0_stride_5_stride_next;
    end
  end
  
  //------- combinatorial assigns for ld_dma_header_0_cycle_stride_0 (pio read data)
  always_comb begin
    l2d_ld_dma_header_0_cycle_stride_0_r = 32'b0;
    l2d_ld_dma_header_0_cycle_stride_0_r [15:0]  = rg_ld_dma_header_0_cycle_stride_0_cycle_stride;
  end
  
  //------- combinatorial assigns for st_dma_header_0_stride_2
  always_comb begin
    reg_st_dma_header_0_stride_2_stride_next = rg_st_dma_header_0_stride_2_stride;
    l2h_st_dma_header_0_stride_2_stride_r = rg_st_dma_header_0_stride_2_stride;
    if (d2l_st_dma_header_0_stride_2_we) reg_st_dma_header_0_stride_2_stride_next = d2l_st_dma_header_0_stride_2_w [18:0] ;
  end
  
  //------- reg assigns for st_dma_header_0_stride_2
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_st_dma_header_0_stride_2_stride <= 19'd0;
    end
    else begin
      rg_st_dma_header_0_stride_2_stride <=  reg_st_dma_header_0_stride_2_stride_next;
    end
  end
  
  //------- combinatorial assigns for st_dma_header_0_stride_3
  always_comb begin
    reg_st_dma_header_0_stride_3_stride_next = rg_st_dma_header_0_stride_3_stride;
    l2h_st_dma_header_0_stride_3_stride_r = rg_st_dma_header_0_stride_3_stride;
    if (d2l_st_dma_header_0_stride_3_we) reg_st_dma_header_0_stride_3_stride_next = d2l_st_dma_header_0_stride_3_w [18:0] ;
  end
  
  //------- reg assigns for st_dma_header_0_stride_3
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_st_dma_header_0_stride_3_stride <= 19'd0;
    end
    else begin
      rg_st_dma_header_0_stride_3_stride <=  reg_st_dma_header_0_stride_3_stride_next;
    end
  end
  
  //------- combinatorial assigns for st_dma_header_0_stride_6
  always_comb begin
    reg_st_dma_header_0_stride_6_stride_next = rg_st_dma_header_0_stride_6_stride;
    l2h_st_dma_header_0_stride_6_stride_r = rg_st_dma_header_0_stride_6_stride;
    if (d2l_st_dma_header_0_stride_6_we) reg_st_dma_header_0_stride_6_stride_next = d2l_st_dma_header_0_stride_6_w [18:0] ;
  end
  
  //------- reg assigns for st_dma_header_0_stride_6
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_st_dma_header_0_stride_6_stride <= 19'd0;
    end
    else begin
      rg_st_dma_header_0_stride_6_stride <=  reg_st_dma_header_0_stride_6_stride_next;
    end
  end
  
  //------- combinatorial assigns for st_dma_header_0_stride_0
  always_comb begin
    reg_st_dma_header_0_stride_0_stride_next = rg_st_dma_header_0_stride_0_stride;
    l2h_st_dma_header_0_stride_0_stride_r = rg_st_dma_header_0_stride_0_stride;
    if (d2l_st_dma_header_0_stride_0_we) reg_st_dma_header_0_stride_0_stride_next = d2l_st_dma_header_0_stride_0_w [18:0] ;
  end
  
  //------- reg assigns for st_dma_header_0_stride_0
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_st_dma_header_0_stride_0_stride <= 19'd0;
    end
    else begin
      rg_st_dma_header_0_stride_0_stride <=  reg_st_dma_header_0_stride_0_stride_next;
    end
  end
  
  //------- combinatorial assigns for st_dma_header_0_stride_1
  always_comb begin
    reg_st_dma_header_0_stride_1_stride_next = rg_st_dma_header_0_stride_1_stride;
    l2h_st_dma_header_0_stride_1_stride_r = rg_st_dma_header_0_stride_1_stride;
    if (d2l_st_dma_header_0_stride_1_we) reg_st_dma_header_0_stride_1_stride_next = d2l_st_dma_header_0_stride_1_w [18:0] ;
  end
  
  //------- reg assigns for st_dma_header_0_stride_1
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_st_dma_header_0_stride_1_stride <= 19'd0;
    end
    else begin
      rg_st_dma_header_0_stride_1_stride <=  reg_st_dma_header_0_stride_1_stride_next;
    end
  end
  
  //------- combinatorial assigns for ld_dma_header_0_range_0
  always_comb begin
    reg_ld_dma_header_0_range_0_range_next = rg_ld_dma_header_0_range_0_range;
    l2h_ld_dma_header_0_range_0_range_r = rg_ld_dma_header_0_range_0_range;
    if (d2l_ld_dma_header_0_range_0_we) reg_ld_dma_header_0_range_0_range_next = d2l_ld_dma_header_0_range_0_w;
  end
  
  //------- reg assigns for ld_dma_header_0_range_0
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_ld_dma_header_0_range_0_range <= 32'd0;
    end
    else begin
      rg_ld_dma_header_0_range_0_range <=  reg_ld_dma_header_0_range_0_range_next;
    end
  end
  
  //------- combinatorial assigns for ld_dma_header_0_range_2
  always_comb begin
    reg_ld_dma_header_0_range_2_range_next = rg_ld_dma_header_0_range_2_range;
    l2h_ld_dma_header_0_range_2_range_r = rg_ld_dma_header_0_range_2_range;
    if (d2l_ld_dma_header_0_range_2_we) reg_ld_dma_header_0_range_2_range_next = d2l_ld_dma_header_0_range_2_w;
  end
  
  //------- reg assigns for ld_dma_header_0_range_2
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_ld_dma_header_0_range_2_range <= 32'd0;
    end
    else begin
      rg_ld_dma_header_0_range_2_range <=  reg_ld_dma_header_0_range_2_range_next;
    end
  end
  
  //------- combinatorial assigns for data_network_ctrl
  always_comb begin
    reg_data_network_ctrl_connected_next = rg_data_network_ctrl_connected;
    l2h_data_network_ctrl_connected_r = rg_data_network_ctrl_connected;
    if (d2l_data_network_ctrl_we) reg_data_network_ctrl_connected_next = d2l_data_network_ctrl_w [0] ;
  end
  
  //------- reg assigns for data_network_ctrl
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_data_network_ctrl_connected <= 1'd0;
    end
    else begin
      rg_data_network_ctrl_connected <=  reg_data_network_ctrl_connected_next;
    end
  end
  
  //------- combinatorial assigns for ld_dma_header_0_range_1
  always_comb begin
    reg_ld_dma_header_0_range_1_range_next = rg_ld_dma_header_0_range_1_range;
    l2h_ld_dma_header_0_range_1_range_r = rg_ld_dma_header_0_range_1_range;
    if (d2l_ld_dma_header_0_range_1_we) reg_ld_dma_header_0_range_1_range_next = d2l_ld_dma_header_0_range_1_w;
  end
  
  //------- reg assigns for ld_dma_header_0_range_1
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_ld_dma_header_0_range_1_range <= 32'd0;
    end
    else begin
      rg_ld_dma_header_0_range_1_range <=  reg_ld_dma_header_0_range_1_range_next;
    end
  end
  
  //------- combinatorial assigns for pcfg_dma_header_num_cfg (pio read data)
  always_comb begin
    l2d_pcfg_dma_header_num_cfg_r = 32'b0;
    l2d_pcfg_dma_header_num_cfg_r [14:0]  = rg_pcfg_dma_header_num_cfg_num_cfg;
  end
  
  //------- combinatorial assigns for ld_dma_header_0_range_4
  always_comb begin
    reg_ld_dma_header_0_range_4_range_next = rg_ld_dma_header_0_range_4_range;
    l2h_ld_dma_header_0_range_4_range_r = rg_ld_dma_header_0_range_4_range;
    if (d2l_ld_dma_header_0_range_4_we) reg_ld_dma_header_0_range_4_range_next = d2l_ld_dma_header_0_range_4_w;
  end
  
  //------- reg assigns for ld_dma_header_0_range_4
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_ld_dma_header_0_range_4_range <= 32'd0;
    end
    else begin
      rg_ld_dma_header_0_range_4_range <=  reg_ld_dma_header_0_range_4_range_next;
    end
  end
  
  //------- combinatorial assigns for ld_dma_header_0_range_3
  always_comb begin
    reg_ld_dma_header_0_range_3_range_next = rg_ld_dma_header_0_range_3_range;
    l2h_ld_dma_header_0_range_3_range_r = rg_ld_dma_header_0_range_3_range;
    if (d2l_ld_dma_header_0_range_3_we) reg_ld_dma_header_0_range_3_range_next = d2l_ld_dma_header_0_range_3_w;
  end
  
  //------- reg assigns for ld_dma_header_0_range_3
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_ld_dma_header_0_range_3_range <= 32'd0;
    end
    else begin
      rg_ld_dma_header_0_range_3_range <=  reg_ld_dma_header_0_range_3_range_next;
    end
  end
  
  //------- combinatorial assigns for ld_dma_header_0_cycle_start_addr (pio read data)
  always_comb begin
    l2d_ld_dma_header_0_cycle_start_addr_r = 32'b0;
    l2d_ld_dma_header_0_cycle_start_addr_r [15:0]  = rg_ld_dma_header_0_cycle_start_addr_cycle_start_addr;
  end
  
  //------- combinatorial assigns for ld_dma_header_0_dim (pio read data)
  always_comb begin
    l2d_ld_dma_header_0_dim_r = 32'b0;
    l2d_ld_dma_header_0_dim_r [3:0]  = rg_ld_dma_header_0_dim_dim;
  end
  
  //------- combinatorial assigns for pcfg_network_latency
  always_comb begin
    reg_pcfg_network_latency_value_next = rg_pcfg_network_latency_value;
    l2h_pcfg_network_latency_value_r = rg_pcfg_network_latency_value;
    if (d2l_pcfg_network_latency_we) reg_pcfg_network_latency_value_next = d2l_pcfg_network_latency_w [5:0] ;
  end
  
  //------- reg assigns for pcfg_network_latency
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_pcfg_network_latency_value <= 6'd0;
    end
    else begin
      rg_pcfg_network_latency_value <=  reg_pcfg_network_latency_value_next;
    end
  end
  
  //------- combinatorial assigns for ld_dma_header_0_start_addr
  always_comb begin
    reg_ld_dma_header_0_start_addr_start_addr_next = rg_ld_dma_header_0_start_addr_start_addr;
    l2h_ld_dma_header_0_start_addr_start_addr_r = rg_ld_dma_header_0_start_addr_start_addr;
    if (d2l_ld_dma_header_0_start_addr_we) reg_ld_dma_header_0_start_addr_start_addr_next = d2l_ld_dma_header_0_start_addr_w [17:0] ;
  end
  
  //------- reg assigns for ld_dma_header_0_start_addr
  always_ff @ (posedge clk or posedge reset) begin
    if (reset) begin
      rg_ld_dma_header_0_start_addr_start_addr <= 18'd0;
    end
    else begin
      rg_ld_dma_header_0_start_addr_start_addr <=  reg_ld_dma_header_0_start_addr_start_addr_next;
    end
  end
  
  //------- combinatorial assigns for st_dma_header_0_stride_5 (pio read data)
  always_comb begin
    l2d_st_dma_header_0_stride_5_r = 32'b0;
    l2d_st_dma_header_0_stride_5_r [18:0]  = rg_st_dma_header_0_stride_5_stride;
  end
  
  //------- combinatorial assigns for pcfg_dma_ctrl (pio read data)
  always_comb begin
    l2d_pcfg_dma_ctrl_r = 32'b0;
    l2d_pcfg_dma_ctrl_r [0]  = rg_pcfg_dma_ctrl_mode;
    l2d_pcfg_dma_ctrl_r [16:1]  = rg_pcfg_dma_ctrl_relocation_value;
    l2d_pcfg_dma_ctrl_r [17]  = rg_pcfg_dma_ctrl_relocation_is_msb;
  end
  
  //------- combinatorial assigns for pcfg_broadcast_mux (pio read data)
  always_comb begin
    l2d_pcfg_broadcast_mux_r = 32'b0;
    l2d_pcfg_broadcast_mux_r [1:0]  = rg_pcfg_broadcast_mux_west;
    l2d_pcfg_broadcast_mux_r [3:2]  = rg_pcfg_broadcast_mux_east;
    l2d_pcfg_broadcast_mux_r [5:4]  = rg_pcfg_broadcast_mux_south;
  end
  
  //------- combinatorial assigns for ld_dma_header_0_stride_5 (pio read data)
  always_comb begin
    l2d_ld_dma_header_0_stride_5_r = 32'b0;
    l2d_ld_dma_header_0_stride_5_r [18:0]  = rg_ld_dma_header_0_stride_5_stride;
  end
  
  //------- combinatorial assigns for st_dma_header_0_stride_2 (pio read data)
  always_comb begin
    l2d_st_dma_header_0_stride_2_r = 32'b0;
    l2d_st_dma_header_0_stride_2_r [18:0]  = rg_st_dma_header_0_stride_2_stride;
  end
  
  //------- combinatorial assigns for ld_dma_header_0_cycle_stride_6 (pio read data)
  always_comb begin
    l2d_ld_dma_header_0_cycle_stride_6_r = 32'b0;
    l2d_ld_dma_header_0_cycle_stride_6_r [15:0]  = rg_ld_dma_header_0_cycle_stride_6_cycle_stride;
  end
  
  //------- combinatorial assigns for st_dma_header_0_cycle_stride_5 (pio read data)
  always_comb begin
    l2d_st_dma_header_0_cycle_stride_5_r = 32'b0;
    l2d_st_dma_header_0_cycle_stride_5_r [15:0]  = rg_st_dma_header_0_cycle_stride_5_cycle_stride;
  end
  
  //------- combinatorial assigns for pcfg_network_latency (pio read data)
  always_comb begin
    l2d_pcfg_network_latency_r = 32'b0;
    l2d_pcfg_network_latency_r [5:0]  = rg_pcfg_network_latency_value;
  end
  
  //------- combinatorial assigns for ld_dma_header_0_range_2 (pio read data)
  always_comb begin
    l2d_ld_dma_header_0_range_2_r = rg_ld_dma_header_0_range_2_range;
  end
  
  //------- combinatorial assigns for ld_dma_header_0_stride_2 (pio read data)
  always_comb begin
    l2d_ld_dma_header_0_stride_2_r = 32'b0;
    l2d_ld_dma_header_0_stride_2_r [18:0]  = rg_ld_dma_header_0_stride_2_stride;
  end
  
  //------- combinatorial assigns for ld_dma_header_0_cycle_stride_3 (pio read data)
  always_comb begin
    l2d_ld_dma_header_0_cycle_stride_3_r = 32'b0;
    l2d_ld_dma_header_0_cycle_stride_3_r [15:0]  = rg_ld_dma_header_0_cycle_stride_3_cycle_stride;
  end
  
  //------- combinatorial assigns for ld_dma_header_0_range_5 (pio read data)
  always_comb begin
    l2d_ld_dma_header_0_range_5_r = rg_ld_dma_header_0_range_5_range;
  end
  
endmodule

