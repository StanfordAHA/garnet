/*=============================================================================
** Module: global_buffer.sv
** Description:
**              Global Buffer
** Author: Taeyoung Kong
** Change history: 04/12/2019 - Implement first version of global buffer
**                 04/18/2019 - Add interconnect between host and banks
**                 04/20/2019 - Add interconnect between io and banks
**                            - Add interconnect between configuration 
**                              and banks
**===========================================================================*/
//; use POSIX;
//; my $num_banks = parameter(Name=>'num_banks', val=> 32, step=>4, min=>4, max=>32, doc=>'number of banks');
//; my $bank_addr_width = parameter(Name=>'bank_addr_width', val=> 17, step=>1, min=>3, max=>19, doc=>'Address width of each bank. Byte-addressable');
//; my $num_io_channels = parameter(Name=>'num_io_channels', val=> 8, step=>1, min=>1, max=>16, doc=>'number of io channels');
//; my $num_cfg_channels = parameter(Name=>'num_cfg_channels', val=> 8, step=>1, min=>1, max=>16, doc=>'number of cfg channels');
//; my $num_banks_width = ceil(log($num_banks)/log(2));

module `mname` #(
    parameter integer BANK_DATA_WIDTH = 64,
    parameter integer CGRA_DATA_WIDTH = 16,
    parameter integer GLB_CFG_TILE_WIDTH = 8,
    parameter integer GLB_CFG_FEATURE_WIDTH = 8,
    parameter integer GLB_CFG_REG_WIDTH = 8,
    parameter integer CFG_ADDR_WIDTH = 32,
    parameter integer CFG_DATA_WIDTH = 32,
    parameter integer BANK_ADDR_WIDTH = `$bank_addr_width`,
    parameter integer GLB_ADDR_WIDTH = `$num_banks_width` + BANK_ADDR_WIDTH
)
(
    input                                 clk,
    input                                 reset,

    input                                 host_wr_en,
    input        [GLB_ADDR_WIDTH-1:0]     host_wr_addr,
    input        [BANK_DATA_WIDTH-1:0]    host_wr_data,

    input                                 host_rd_en,
    input        [GLB_ADDR_WIDTH-1:0]     host_rd_addr,
    output logic [BANK_DATA_WIDTH-1:0]    host_rd_data,

    //input                                 cgra_to_io_stall [`$num_io_channels-1`:0],
    input                                 cgra_to_io_wr_en [`$num_io_channels-1`:0],
    input                                 cgra_to_io_rd_en [`$num_io_channels-1`:0],
    output logic                          io_to_cgra_rd_data_valid [`$num_io_channels-1`:0],
    input        [CGRA_DATA_WIDTH-1:0]    cgra_to_io_wr_data [`$num_io_channels-1`:0],
    output logic [CGRA_DATA_WIDTH-1:0]    io_to_cgra_rd_data [`$num_io_channels-1`:0],
    input        [CGRA_DATA_WIDTH-1:0]    cgra_to_io_addr_high [`$num_io_channels-1`:0],
    input        [CGRA_DATA_WIDTH-1:0]    cgra_to_io_addr_low [`$num_io_channels-1`:0],

    input                                 glc_to_cgra_cfg_wr,
    input                                 glc_to_cgra_cfg_rd,
    input        [CFG_ADDR_WIDTH-1:0]     glc_to_cgra_cfg_addr,
    input        [CFG_DATA_WIDTH-1:0]     glc_to_cgra_cfg_data,

    output logic                          glb_to_cgra_cfg_wr [`$num_cfg_channels-1`:0],
    output logic                          glb_to_cgra_cfg_rd [`$num_cfg_channels-1`:0],
    output logic [CFG_ADDR_WIDTH-1:0]     glb_to_cgra_cfg_addr [`$num_cfg_channels-1`:0],
    output logic [CFG_DATA_WIDTH-1:0]     glb_to_cgra_cfg_data [`$num_cfg_channels-1`:0],

    input                                 glc_to_io_stall,
    input                                 cgra_start_pulse,
    output logic                          cgra_done_pulse,
    input                                 config_start_pulse,
    output logic                          config_done_pulse,

    input                                 glb_config_wr,
    input                                 glb_config_rd,
    input                                 glb_sram_config_wr,
    input                                 glb_sram_config_rd,
    input        [CFG_ADDR_WIDTH-1:0]     glb_config_addr,
    input        [CFG_DATA_WIDTH-1:0]     glb_config_wr_data,
    output logic [CFG_DATA_WIDTH-1:0]     glb_config_rd_data
);


//============================================================================//
// global buffer configuration signal 
//============================================================================//
logic                           glb_config_en_bank [`$num_banks-1`:0];
logic [BANK_ADDR_WIDTH-1:0]     glb_config_addr_bank;
logic [`$num_banks_width-1`:0]  glb_config_bank_sel;
logic [CFG_DATA_WIDTH-1:0]      glb_config_rd_data_bank [`$num_banks-1`:0];

assign glb_config_addr_bank = glb_config_addr[BANK_ADDR_WIDTH-1:0];
assign glb_config_bank_sel = glb_config_addr[BANK_ADDR_WIDTH +: `$num_banks_width`];


integer j;
always_comb begin
    for (j=0; j<`$num_banks`; j=j+1) begin
        glb_config_en_bank[j] = (j == glb_config_bank_sel);
    end
end

localparam integer
    GLB_CONFIG_IO = 0,
    GLB_CONFIG_CFG = 1;
localparam integer GLB_CFG_FEATURE_REG_WIDTH = GLB_CFG_FEATURE_WIDTH+GLB_CFG_REG_WIDTH;

logic [GLB_CFG_TILE_WIDTH-1:0] glb_config_tile_addr;
logic                                   glb_config_en_io;
logic                                   glb_config_en_cfg;
logic [GLB_CFG_FEATURE_REG_WIDTH-1:0]   glb_config_addr_io;
logic [GLB_CFG_FEATURE_REG_WIDTH-1:0]   glb_config_addr_cfg;
logic [CFG_DATA_WIDTH-1:0]              glb_config_rd_data_io;
logic [CFG_DATA_WIDTH-1:0]              glb_config_rd_data_cfg;

assign glb_config_tile_addr = glb_config_addr[0 +: GLB_CFG_TILE_WIDTH];
assign glb_config_en_io = (glb_config_tile_addr == GLB_CONFIG_IO);
assign glb_config_en_cfg = (glb_config_tile_addr == GLB_CONFIG_CFG);
assign glb_config_addr_io = glb_config_addr[GLB_CFG_TILE_WIDTH +: GLB_CFG_FEATURE_REG_WIDTH];
assign glb_config_addr_cfg = glb_config_addr[GLB_CFG_TILE_WIDTH +: GLB_CFG_FEATURE_REG_WIDTH];

always_comb begin       
    if (glb_sram_config_rd) begin
        glb_config_rd_data = glb_config_rd_data_bank[glb_config_bank_sel];
    end
    else if (glb_config_rd && glb_config_en_io) begin
        glb_config_rd_data = glb_config_rd_data_io;
    end
    else if (glb_config_rd && glb_config_en_cfg) begin
        glb_config_rd_data = glb_config_rd_data_cfg;
    end
    else begin
        glb_config_rd_data = 0;
    end
end

//============================================================================//
// internal wire declaration
//============================================================================//
wire                        host_to_bank_wr_en [`$num_banks-1`:0];
wire [BANK_DATA_WIDTH-1:0]  host_to_bank_wr_data [`$num_banks-1`:0];
wire [BANK_ADDR_WIDTH-1:0]  host_to_bank_wr_addr [`$num_banks-1`:0];

wire                        host_to_bank_rd_en [`$num_banks-1`:0];
wire [BANK_DATA_WIDTH-1:0]  bank_to_host_rd_data [`$num_banks-1`:0];
wire [BANK_ADDR_WIDTH-1:0]  host_to_bank_rd_addr [`$num_banks-1`:0];

//============================================================================//
// host-bank interconnect
//============================================================================//
//; my $host_bank_interconnect = generate_base('host_bank_interconnect', 'host_bank_interconnect',
//;                                            "num_banks"=>$num_banks);
`$host_bank_interconnect->mname()` #(
    .BANK_ADDR_WIDTH(BANK_ADDR_WIDTH),
    .GLB_ADDR_WIDTH(GLB_ADDR_WIDTH),
    .BANK_DATA_WIDTH(BANK_DATA_WIDTH)
) `$host_bank_interconnect->iname()` (
    .clk(clk),

    .host_wr_en(host_wr_en),
    .host_wr_data(host_wr_data),
    .host_wr_addr(host_wr_addr),

    .host_rd_en(host_rd_en),
    .host_rd_addr(host_rd_addr),
    .host_rd_data(host_rd_data),

    .host_to_bank_wr_en(host_to_bank_wr_en),
    .host_to_bank_wr_data(host_to_bank_wr_data),
    .host_to_bank_wr_addr(host_to_bank_wr_addr),

    .host_to_bank_rd_en(host_to_bank_rd_en),
    .host_to_bank_rd_addr(host_to_bank_rd_addr),
    .bank_to_host_rd_data(bank_to_host_rd_data)
);

//============================================================================//
// internal wire declaration
//============================================================================//
wire                        io_to_bank_wr_en [`$num_banks-1`:0];
wire [BANK_DATA_WIDTH-1:0]  io_to_bank_wr_data [`$num_banks-1`:0];
wire [BANK_DATA_WIDTH-1:0]  io_to_bank_wr_data_bit_sel [`$num_banks-1`:0];
wire [BANK_ADDR_WIDTH-1:0]  io_to_bank_wr_addr [`$num_banks-1`:0];

wire                        io_to_bank_rd_en [`$num_banks-1`:0];
wire [BANK_DATA_WIDTH-1:0]  bank_to_io_rd_data [`$num_banks-1`:0];
wire [BANK_ADDR_WIDTH-1:0]  io_to_bank_rd_addr [`$num_banks-1`:0];

wire                        cfg_to_bank_rd_en [`$num_banks-1`:0];
wire [BANK_DATA_WIDTH-1:0]  bank_to_cfg_rd_data [`$num_banks-1`:0];
wire [BANK_ADDR_WIDTH-1:0]  cfg_to_bank_rd_addr [`$num_banks-1`:0];

//============================================================================//
// bank generation
//============================================================================//
//; my $memory_bank = generate_base('memory_bank', 'memory_bank');
//; for(my $i=0; $i<$num_banks; $i++) {
//; $memory_bank = clone($memory_bank, "memory_bank_${i}");
`$memory_bank->mname()` #(
.BANK_ADDR_WIDTH(BANK_ADDR_WIDTH),
.BANK_DATA_WIDTH(BANK_DATA_WIDTH),
.CONFIG_DATA_WIDTH(CFG_DATA_WIDTH)
) `$memory_bank->iname()` (
    .clk(clk),
    .reset(reset),

    .host_wr_en(host_to_bank_wr_en[`$i`]),
    .host_wr_data(host_to_bank_wr_data[`$i`]),
    .host_wr_addr(host_to_bank_wr_addr[`$i`]),

    .host_rd_en(host_to_bank_rd_en[`$i`]),
    .host_rd_data(bank_to_host_rd_data[`$i`]),
    .host_rd_addr(host_to_bank_rd_addr[`$i`]),

    .cgra_wr_en(io_to_bank_wr_en[`$i`]),
    .cgra_wr_data(io_to_bank_wr_data[`$i`]),
    .cgra_wr_bit_sel(io_to_bank_wr_data_bit_sel[`$i`]),
    .cgra_wr_addr(io_to_bank_wr_addr[`$i`]),

    .cgra_rd_en(io_to_bank_rd_en[`$i`]),
    .cgra_rd_data(bank_to_io_rd_data[`$i`]),
    .cgra_rd_addr(io_to_bank_rd_addr[`$i`]),

    .cfg_rd_en(cfg_to_bank_rd_en[`$i`]),
    .cfg_rd_data(bank_to_cfg_rd_data[`$i`]),
    .cfg_rd_addr(cfg_to_bank_rd_addr[`$i`]),

    .config_en(glb_config_en_bank[`$i`]),
    .config_wr(glb_sram_config_wr),
    .config_rd(glb_sram_config_rd),
    .config_addr(glb_config_addr_bank),
    .config_wr_data(glb_config_wr_data),
    .config_rd_data(glb_config_rd_data_bank[`$i`])
);

//; }

//============================================================================//
// cgra_io-bank interconnect
//============================================================================//
//; my $addrgen_bank_interconnect = generate_base('addrgen_bank_interconnect', 'addrgen_bank_interconnect',
//;                                               "num_banks"=>$num_banks, "num_io_channels"=>$num_io_channels);
`$addrgen_bank_interconnect->mname()` #(
    .BANK_ADDR_WIDTH(BANK_ADDR_WIDTH),
    .BANK_DATA_WIDTH(BANK_DATA_WIDTH),
    .CGRA_DATA_WIDTH(CGRA_DATA_WIDTH),
    .CONFIG_FEATURE_WIDTH(GLB_CFG_FEATURE_WIDTH),
    .CONFIG_REG_WIDTH(GLB_CFG_REG_WIDTH),
    .CONFIG_DATA_WIDTH(CFG_DATA_WIDTH)
) `$addrgen_bank_interconnect->iname()` (
    .clk(clk),
    .reset(reset),

    .cgra_start_pulse(cgra_start_pulse),
    .cgra_done_pulse(cgra_done_pulse),

    .glc_to_io_stall(glc_to_io_stall),
    //.cgra_to_io_stall(cgra_to_io_stall),
    .cgra_to_io_rd_en(cgra_to_io_rd_en),
    .cgra_to_io_wr_en(cgra_to_io_wr_en),
    .cgra_to_io_addr_high(cgra_to_io_addr_high),
    .cgra_to_io_addr_low(cgra_to_io_addr_low),
    .cgra_to_io_wr_data(cgra_to_io_wr_data),
    .io_to_cgra_rd_data(io_to_cgra_rd_data),
    .io_to_cgra_rd_data_valid(io_to_cgra_rd_data_valid),

    .io_to_bank_wr_en(io_to_bank_wr_en),
    .io_to_bank_wr_data(io_to_bank_wr_data),
    .io_to_bank_wr_data_bit_sel(io_to_bank_wr_data_bit_sel),
    .io_to_bank_wr_addr(io_to_bank_wr_addr),
    .io_to_bank_rd_en(io_to_bank_rd_en),
    .io_to_bank_rd_addr(io_to_bank_rd_addr),
    .bank_to_io_rd_data(bank_to_io_rd_data),

    .config_en(glb_config_en_io),
    .config_wr(glb_config_wr),
    .config_rd(glb_config_rd),
    .config_addr(glb_config_addr_io),
    .config_wr_data(glb_config_wr_data),
    .config_rd_data(glb_config_rd_data_io)
);


//============================================================================//
// cfg-bank interconnect
//============================================================================//
//; my $cfg_bank_interconnect = generate_base('cfg_bank_interconnect', 'cfg_bank_interconnect',
//;                                           "num_banks"=>$num_banks, "num_cfg_channels"=>$num_cfg_channels);
`$cfg_bank_interconnect->mname()` #(
    .BANK_ADDR_WIDTH(BANK_ADDR_WIDTH),
    .GLB_ADDR_WIDTH(GLB_ADDR_WIDTH),
    .BANK_DATA_WIDTH(BANK_DATA_WIDTH),
    .CONFIG_FEATURE_WIDTH(GLB_CFG_FEATURE_WIDTH),
    .CONFIG_REG_WIDTH(GLB_CFG_REG_WIDTH),
    .CONFIG_DATA_WIDTH(CFG_DATA_WIDTH),
    .CFG_ADDR_WIDTH(CFG_ADDR_WIDTH),
    .CFG_DATA_WIDTH(CFG_DATA_WIDTH)
) `$cfg_bank_interconnect->iname()` (
    .clk(clk),
    .reset(reset),

    .config_start_pulse(config_start_pulse),
    .config_done_pulse(config_done_pulse),

    .cfg_rd_en(cfg_to_bank_rd_en),
    .cfg_rd_addr(cfg_to_bank_rd_addr),
    .cfg_rd_data(bank_to_cfg_rd_data),

    .glc_to_cgra_cfg_wr(glc_to_cgra_cfg_wr),
    .glc_to_cgra_cfg_rd(glc_to_cgra_cfg_rd),
    .glc_to_cgra_cfg_addr(glc_to_cgra_cfg_addr),
    .glc_to_cgra_cfg_data(glc_to_cgra_cfg_data),

    .glb_to_cgra_cfg_wr(glb_to_cgra_cfg_wr),
    .glb_to_cgra_cfg_rd(glb_to_cgra_cfg_rd),
    .glb_to_cgra_cfg_addr(glb_to_cgra_cfg_addr),
    .glb_to_cgra_cfg_data(glb_to_cgra_cfg_data),

    .config_en(glb_config_en_cfg),
    .config_wr(glb_config_wr),
    .config_rd(glb_config_rd),
    .config_addr(glb_config_addr_cfg),
    .config_wr_data(glb_config_wr_data),
    .config_rd_data(glb_config_rd_data_cfg)
);

endmodule
