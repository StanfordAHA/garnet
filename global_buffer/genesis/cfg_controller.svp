/*=============================================================================
** Module: cfg_controller.sv
** Description:
**              Parallel configuration controller
** Author: Taeyoung Kong
** Change history: 05/12/2019 - Implement first version
**===========================================================================*/

module `mname` #(
    parameter integer BANK_DATA_WIDTH = 64,
    parameter integer GLB_ADDR_WIDTH = 32,
    parameter integer CFG_ADDR_WIDTH = 32,
    parameter integer CFG_DATA_WIDTH = 32
)
(
    input  logic                        clk,
    input  logic                        reset,
    input  logic                        config_start_pulse,
    output logic                        config_done_pulse,

    input  logic [GLB_ADDR_WIDTH-1:0]   start_addr,
    input  logic [GLB_ADDR_WIDTH-1:0]   num_words,

    output logic                        cfg_to_bank_rd_en,
    output logic [GLB_ADDR_WIDTH-1:0]   cfg_to_bank_addr,
    input  logic [BANK_DATA_WIDTH-1:0]  bank_to_cfg_rd_data,
    input  logic                        bank_to_cfg_rd_data_valid,

    output logic                        cfg_to_cgra_config_wr,
    output logic [CFG_ADDR_WIDTH-1:0]   cfg_to_cgra_config_addr,
    output logic [CFG_DATA_WIDTH-1:0]   cfg_to_cgra_config_data
);

//============================================================================//
// local parameter declaration
//============================================================================//
localparam integer BANK_ADDR_OFFSET = $clog2(BANK_DATA_WIDTH/8); // 3
localparam integer BANK_DATA_BYTE = $ceil(BANK_DATA_WIDTH/8); //8

//============================================================================//
// address generator for parallel configuration
//============================================================================//
enum logic {IDLE, READ} state;
logic [GLB_ADDR_WIDTH-1:0]  int_addr;
logic                       int_bank_rd_en;
logic [GLB_ADDR_WIDTH-1:0]  num_words_cnt;

// simple FSM for parallel configuration
// num_words_cnt decreases by 1 if it is non-zero
always_ff @(posedge clk or posedge reset) begin
    if (reset) begin
        state <= IDLE;
        num_words_cnt <= 0;
        int_addr <= 0;
        int_bank_rd_en <= 0;
        config_done_pulse <= 0;
    end
    else begin
        case (state)
            IDLE: begin
                if (config_start_pulse && (num_words > 0)) begin
                    state <= READ;
                    num_words_cnt <= num_words;
                    int_addr <= start_addr;
                    int_bank_rd_en <= 1;
                    config_done_pulse <= 0;
                end
                // corner case when num_words is set to 0 when config_start_pulse is high
                else if (config_start_pulse && (num_words == 0)) begin
                    state <= IDLE;
                    num_words_cnt <= 0;
                    int_addr <= start_addr;
                    int_bank_rd_en <= 0;
                    config_done_pulse <= 1;
                end
                else begin
                    state <= IDLE;
                    num_words_cnt <= 0;
                    int_addr <= int_addr;
                    int_bank_rd_en <= 0;
                    config_done_pulse <= 0;
                end
            end
            READ: begin
                if (num_words_cnt == 1) begin
                    state <= IDLE;
                    num_words_cnt <= 0;
                    int_addr <= int_addr;
                    int_bank_rd_en <= 0;
                    config_done_pulse <= 1;
                end
                else begin
                    state <= READ;
                    num_words_cnt <= num_words_cnt - 1;
                    int_addr <= int_addr + BANK_DATA_BYTE;
                    int_bank_rd_en <= 1;
                    config_done_pulse <= 0;
                end
            end
            default: begin
                state <= IDLE;
                num_words_cnt <= 0;
                int_addr <= int_addr;
                int_bank_rd_en <= 0;
                config_done_pulse <= 0;
            end
        endcase
    end
end

//============================================================================//
// output assignment
//============================================================================//
assign cfg_to_bank_rd_en = int_bank_rd_en;
// cfg_to_bank_addr is equal to int_addr with ADDR_OFFSET bits set to 0
assign cfg_to_bank_addr = {int_addr[GLB_ADDR_WIDTH-1:BANK_ADDR_OFFSET], {BANK_ADDR_OFFSET{1'b0}}};

assign cfg_to_cgra_config_wr = bank_to_cfg_rd_data_valid;
assign cfg_to_cgra_config_addr = bank_to_cfg_rd_data[CFG_DATA_WIDTH +: CFG_ADDR_WIDTH];
assign cfg_to_cgra_config_data = bank_to_cfg_rd_data[0 +: CFG_DATA_WIDTH];

endmodule
