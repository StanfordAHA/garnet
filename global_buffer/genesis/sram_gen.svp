//Generate to create larger memories from output of 2048x64 sram macro
//Author: Alex Carsello
//Modification by Taeyoung Kong 

`timescale 1ns/100fs
module `mname` #(
    parameter integer DATA_WIDTH = 64,
    parameter integer ADDR_WIDTH = 14
)
(A,CEB,BWEB,CLK,WEB,D,Q);
localparam integer WORD_DEPTH = (1 << ADDR_WIDTH);
localparam integer NUM_INST = (WORD_DEPTH + 2047)/2048;
localparam integer PER_MEM_ADDR_WIDTH = 11;

input							CLK;
input                           CEB;
input                           WEB;
input   [DATA_WIDTH-1:0]        BWEB;
input   [ADDR_WIDTH-1:0]        A;
input   [DATA_WIDTH-1:0]  		D;
output  [DATA_WIDTH-1:0]  		Q;

//INPUTS
wire [NUM_INST-1:0] WEB_array;
wire [PER_MEM_ADDR_WIDTH-1:0] A_to_mem;

//OUTPUTS
wire [DATA_WIDTH-1:0] Q_array [NUM_INST-1:0];
wire [DATA_WIDTH-1:0] data_out;

//address bits not going directly to SRAMs
wire [ADDR_WIDTH-PER_MEM_ADDR_WIDTH-1:0] mem_select;

reg [ADDR_WIDTH-PER_MEM_ADDR_WIDTH-1:0] output_select;

// Address bits that are not going to each SRAM
// will be used to select which SRAM to read from/write to
assign mem_select = A[ADDR_WIDTH-1:PER_MEM_ADDR_WIDTH];
assign A_to_mem = A[PER_MEM_ADDR_WIDTH-1:0];

//INPUTS
//Decode mem_select to apply control inputs to correct SRAM
assign WEB_array = (~WEB) ? ~(1 << mem_select) : ~0;

//OUTPUTS
assign Q = data_out;
assign data_out = Q_array[output_select];

always @ (posedge CLK) begin
    if (CEB == 0) begin
        if (WEB == 1) begin
            output_select <= mem_select;
        end
    end
end

//Use parameters to decide which width of memory to instantiate and how many
genvar i;
generate
    for (i = 0; i < NUM_INST; i = i + 1) begin
        wire [63:0] Q_temp;
        wire [63:0] D_stretch;
        TS1N16FFCLLSBLVTC2048X64M8SW
        sram_array (.CLK(CLK), .A(A_to_mem), .BWEB(BWEB), .CEB(CEB), .WEB(WEB_array[i]), .D(D_stretch), .Q(Q_temp), .RTSEL(2'b01), .WTSEL(2'b00));
        assign D_stretch = D;
        assign Q_array[i] = Q_temp[DATA_WIDTH-1:0];
    end
endgenerate

endmodule

