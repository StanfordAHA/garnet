/*=============================================================================
** Module: host_bank_interconnect.sv
** Description:
**              Interface between host soc_ports and bank soc_ports
** Author: Taeyoung Kong
** Change history: 04/18/2019 - Implement first version
**===========================================================================*/
//; use POSIX;
//; my $num_banks = parameter(Name=>'num_banks', val=> 32, step=>4, min=>4, max=>32, doc=>'number of banks');
//; my $num_banks_width = ceil(log($num_banks)/log(2));

module `mname` #(
    parameter integer BANK_DATA_WIDTH = 64,
    parameter integer BANK_ADDR_WIDTH = 17,
    parameter integer GLB_ADDR_WIDTH = 22
)
(

    input                                 clk,
    
    input                                 host_wr_en,
    input        [GLB_ADDR_WIDTH-1:0]     host_wr_addr,
    input        [BANK_DATA_WIDTH-1:0]    host_wr_data,

    input                                 host_rd_en,
    input        [GLB_ADDR_WIDTH-1:0]     host_rd_addr,
    output logic [BANK_DATA_WIDTH-1:0]    host_rd_data,

    output logic                          host_to_bank_wr_en [`$num_banks-1`:0],
    output logic [BANK_DATA_WIDTH-1:0]    host_to_bank_wr_data [`$num_banks-1`:0],
    output logic [BANK_ADDR_WIDTH-1:0]    host_to_bank_wr_addr [`$num_banks-1`:0],

    output logic                          host_to_bank_rd_en [`$num_banks-1`:0],
    input        [BANK_DATA_WIDTH-1:0]    bank_to_host_rd_data [`$num_banks-1`:0],
    output logic [BANK_ADDR_WIDTH-1:0]    host_to_bank_rd_addr [`$num_banks-1`:0]
);

//============================================================================//
// internal wire / reg declaration for write
//============================================================================//
logic                         int_host_wr_en [`$num_banks-1`:0];
logic [BANK_DATA_WIDTH-1:0]   int_host_wr_data;
logic [BANK_ADDR_WIDTH-1:0]   int_host_wr_addr;
logic                         int_host_wr_en_d1 [`$num_banks-1`:0];
logic [BANK_DATA_WIDTH-1:0]   int_host_wr_data_d1 [`$num_banks-1`:0];
logic [BANK_ADDR_WIDTH-1:0]   int_host_wr_addr_d1 [`$num_banks-1`:0];

//============================================================================//
// write muxing and pipeline
//============================================================================//
integer i;
always_comb begin
    for (i=0; i<`$num_banks`; i=i+1) begin
        int_host_wr_en[i] = host_wr_en && (i == host_wr_addr[BANK_ADDR_WIDTH +: `$num_banks_width`]);
    end
end
assign int_host_wr_data = host_wr_data;
assign int_host_wr_addr = host_wr_addr[0 +: BANK_ADDR_WIDTH];

integer j;
always_ff @ (posedge clk) begin
    for (j=0; j<`$num_banks`; j=j+1) begin
        int_host_wr_en_d1[j] <= int_host_wr_en[j];
        int_host_wr_addr_d1[j] <= int_host_wr_addr;
        int_host_wr_data_d1[j] <= int_host_wr_data;
    end
end

assign host_to_bank_wr_en = int_host_wr_en_d1;
assign host_to_bank_wr_addr = int_host_wr_addr_d1;
assign host_to_bank_wr_data = int_host_wr_data_d1;

//============================================================================//
// internal wire / reg declaration for read
//============================================================================//
logic                         int_host_rd_en [`$num_banks-1`:0];
logic [BANK_ADDR_WIDTH-1:0]   int_host_rd_addr;

logic [BANK_DATA_WIDTH-1:0]   int_host_rd_data;
logic [BANK_DATA_WIDTH-1:0]   int_host_rd_data_d1 [`$num_banks-1`:0];

logic [`$num_banks_width`-1:0]   int_host_rd_bank_sel;
logic [`$num_banks_width`-1:0]   int_host_rd_bank_sel_d1;
logic [`$num_banks_width`-1:0]   int_host_rd_bank_sel_d2;

//============================================================================//
// read muxing and pipelining
//============================================================================//
assign int_host_rd_bank_sel = host_rd_addr[BANK_ADDR_WIDTH +: `$num_banks_width`];

always_ff @(posedge clk) begin
    int_host_rd_bank_sel_d1 <= int_host_rd_bank_sel;
    int_host_rd_bank_sel_d2 <= int_host_rd_bank_sel_d1;
end

integer ii;
always_comb begin
    for (ii=0; ii<`$num_banks`; ii=ii+1) begin
        int_host_rd_en[ii] = host_rd_en && (ii == int_host_rd_bank_sel);
        host_to_bank_rd_addr[ii] = host_rd_addr[0 +: BANK_ADDR_WIDTH];
    end
end

integer jj;
always_ff @(posedge clk) begin
    for (jj=0; jj<`$num_banks`; jj=jj+1) begin
        int_host_rd_data_d1[jj] <= bank_to_host_rd_data[jj];
    end
end

assign host_to_bank_rd_en = int_host_rd_en;
assign int_host_rd_data = int_host_rd_data_d1[int_host_rd_bank_sel_d2];

//===========================================================================//
// rd_data output assignment
//===========================================================================//
logic host_rd_en_d1;
logic host_rd_en_d2;
logic [BANK_DATA_WIDTH-1:0]   host_rd_data_reg;

always_ff @(posedge clk) begin
    host_rd_en_d1 <= host_rd_en;
    host_rd_en_d2 <= host_rd_en_d1;
    host_rd_data_reg <= host_rd_data;
end

assign host_rd_data = host_rd_en_d2 ? int_host_rd_data : host_rd_data_reg;

endmodule
