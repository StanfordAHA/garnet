/*=============================================================================
** Module: addrgen_bank_interconnect.sv
** Description:
**              Interface between cgra address_generator ports and bank ports
** Author: Taeyoung Kong
** Change history: 04/20/2019 - Implement first version
**===========================================================================*/
//; use POSIX;
//; my $num_banks = parameter(Name=>'num_banks', val=> 32, step=>4, min=>4, max=>32, doc=>'number of banks');
//; my $num_io_channels = parameter(Name=>'num_io_channels', val=> 8, step=>1, min=>1, max=>16, doc=>'number of io channels');
//; my $num_banks_width = ceil(log($num_banks)/log(2));
//; my $config_data_width = 32;
//; my $banks_per_io = ceil($num_banks / $num_io_channels); 

module `mname` #(
    parameter integer BANK_DATA_WIDTH = 64,
    parameter integer BANK_ADDR_WIDTH = 17,
    parameter integer CGRA_DATA_WIDTH = 16,
    parameter integer CONFIG_REG_WIDTH = 8,
    parameter integer CONFIG_FEATURE_WIDTH = 8,
    parameter integer CONFIG_DATA_WIDTH = 32,
    parameter integer CONFIG_FEATURE_REG_WIDTH = CONFIG_FEATURE_WIDTH+CONFIG_REG_WIDTH
)
(

    input                                       clk,
    input                                       reset,

    input                                       cgra_start_pulse,
    output logic                                cgra_done_pulse,

    input                                       glc_to_io_stall,
    //input                                       cgra_to_io_stall [`$num_io_channels-1`:0],
    input                                       cgra_to_io_wr_en [`$num_io_channels-1`:0],
    input                                       cgra_to_io_rd_en [`$num_io_channels-1`:0],
    output logic                                io_to_cgra_rd_data_valid [`$num_io_channels-1`:0],
    input        [CGRA_DATA_WIDTH-1:0]          cgra_to_io_wr_data [`$num_io_channels-1`:0],
    output logic [CGRA_DATA_WIDTH-1:0]          io_to_cgra_rd_data [`$num_io_channels-1`:0],
    input        [CGRA_DATA_WIDTH-1:0]          cgra_to_io_addr_high [`$num_io_channels-1`:0],
    input        [CGRA_DATA_WIDTH-1:0]          cgra_to_io_addr_low [`$num_io_channels-1`:0],
    
    output logic                                io_to_bank_wr_en [`$num_banks-1`:0],
    output logic [BANK_DATA_WIDTH-1:0]          io_to_bank_wr_data [`$num_banks-1`:0],
    output logic [BANK_DATA_WIDTH-1:0]          io_to_bank_wr_data_bit_sel [`$num_banks-1`:0],
    output logic [BANK_ADDR_WIDTH-1:0]          io_to_bank_wr_addr [`$num_banks-1`:0],
    output logic                                io_to_bank_rd_en [`$num_banks-1`:0],
    input        [BANK_DATA_WIDTH-1:0]          bank_to_io_rd_data [`$num_banks-1`:0],
    output logic [BANK_ADDR_WIDTH-1:0]          io_to_bank_rd_addr [`$num_banks-1`:0],

    input                                       config_en,
    input                                       config_wr,
    input                                       config_rd,
    input        [CONFIG_FEATURE_REG_WIDTH-1:0] config_addr,
    input        [CONFIG_DATA_WIDTH-1:0]        config_wr_data,
    output logic [CONFIG_DATA_WIDTH-1:0]        config_rd_data
);

//============================================================================//
// local parameter
//============================================================================//
localparam integer GLB_ADDR_WIDTH = BANK_ADDR_WIDTH + `$num_banks_width`;

//============================================================================//
// internal signals
//============================================================================//
logic                       io_wr_en [`$num_io_channels-1`:0];
logic                       io_rd_en [`$num_io_channels-1`:0];
logic [BANK_DATA_WIDTH-1:0] io_wr_data [`$num_io_channels-1`:0];
logic [BANK_DATA_WIDTH-1:0] io_wr_data_bit_sel [`$num_io_channels-1`:0];
logic [BANK_DATA_WIDTH-1:0] io_rd_data [`$num_io_channels-1`:0];
logic [GLB_ADDR_WIDTH-1:0]  io_addr [`$num_io_channels-1`:0];
logic                       io_cgra_start_pulse [`$num_io_channels-1`:0];
logic                       io_cgra_done_pulse [`$num_io_channels-1`:0];
// The number of switching mux is one less than the number of IO channels
logic [`$num_banks-1`:0]    switch_sel;
logic [GLB_ADDR_WIDTH-1:0]  io_ctrl_start_addr [`$num_io_channels-1`:0];
logic [GLB_ADDR_WIDTH-1:0]  io_ctrl_num_words [`$num_io_channels-1`:0];
logic [1:0]                 io_ctrl_mode [`$num_io_channels-1`:0];
logic                       io_ctrl_start_pulse_en [`$num_io_channels-1`:0];
logic                       io_ctrl_done_pulse_en [`$num_io_channels-1`:0];

//============================================================================//
// clk enable signal
//============================================================================//
logic clk_en;
assign clk_en = !glc_to_io_stall;

//============================================================================//
// io controller instantiation
//============================================================================//
//; my $address_generator = generate_base('address_generator', 'address_generator');
//; for(my $i=0; $i<$num_io_channels; $i++) {
//; $address_generator = clone($address_generator, "address_generator_${i}");
`$address_generator->mname()` #(
    .BANK_DATA_WIDTH(BANK_DATA_WIDTH),
    .CGRA_DATA_WIDTH(CGRA_DATA_WIDTH),
    .GLB_ADDR_WIDTH(GLB_ADDR_WIDTH)
) `$address_generator->iname()` (
    .clk(clk),
    .clk_en(clk_en),
    .reset(reset),

    .cgra_start_pulse(io_cgra_start_pulse[`$i`]),
    .cgra_done_pulse(io_cgra_done_pulse[`$i`]),

    .start_addr(io_ctrl_start_addr[`$i`]),
    .num_words(io_ctrl_num_words[`$i`]),
    .mode(io_ctrl_mode[`$i`]),

    .cgra_to_io_wr_en(cgra_to_io_wr_en[`$i`]),
    .cgra_to_io_rd_en(cgra_to_io_rd_en[`$i`]),
    .io_to_cgra_rd_data_valid(io_to_cgra_rd_data_valid[`$i`]),
    .cgra_to_io_addr_high(cgra_to_io_addr_high[`$i`]),
    .cgra_to_io_addr_low(cgra_to_io_addr_low[`$i`]),
    .cgra_to_io_wr_data(cgra_to_io_wr_data[`$i`]),
    .io_to_cgra_rd_data(io_to_cgra_rd_data[`$i`]),

    .io_to_bank_wr_en(io_wr_en[`$i`]),
    .io_to_bank_wr_data(io_wr_data[`$i`]),
    .io_to_bank_wr_data_bit_sel(io_wr_data_bit_sel[`$i`]),
    .io_to_bank_rd_en(io_rd_en[`$i`]),
    .bank_to_io_rd_data(io_rd_data[`$i`]),
    .io_to_bank_addr(io_addr[`$i`])
);
//; }

//============================================================================//
// configuration
//============================================================================//
wire [CONFIG_FEATURE_WIDTH-1:0] config_feature_addr;
wire [CONFIG_REG_WIDTH-1:0]     config_reg_addr;
reg                             config_en_io_ctrl [`$num_io_channels-1`:0];
reg                             config_en_io_int;

assign config_feature_addr = config_addr[0 +: CONFIG_FEATURE_WIDTH];
assign config_reg_addr = config_addr[CONFIG_FEATURE_WIDTH +: CONFIG_REG_WIDTH];

always_comb begin
    for(integer i=0; i<`$num_io_channels`; i=i+1) begin
        config_en_io_ctrl[i] = config_en && (config_feature_addr == i);
    end
    config_en_io_int = config_en && (config_feature_addr == `$num_io_channels`);
end

always_ff @(posedge clk or posedge reset) begin
    if (reset) begin
        switch_sel <= 0;
    end
    else begin
        if (config_en_io_int && config_wr) begin
            case (config_reg_addr)
                //; for(my $j=0; ($j*$config_data_width)<$num_banks; $j++) {
                    //; if (($j+1)*$config_data_width < $num_banks) {
                    `$j`: switch_sel[`($j+1)*$config_data_width-1`:`$j*$config_data_width`] <= config_wr_data;
                    //; } else {
                    `$j`: switch_sel[`$num_banks-1`:`$j*$config_data_width`] <= config_wr_data[`$num_banks-$j*$config_data_width-1`:0];
                    //; }
                //; }
            endcase
        end
    end
end

always_ff @(posedge clk or posedge reset) begin
    if (reset) begin
        for(integer j=0; j<`$num_io_channels`; j=j+1) begin
            io_ctrl_mode[j] <= 0;
            io_ctrl_start_addr[j] <= 0;
            io_ctrl_num_words[j] <= 0;
            io_ctrl_start_pulse_en[j] <= 1;
            io_ctrl_done_pulse_en[j] <= 1;
        end
    end
    else begin
        for(integer j=0; j<`$num_io_channels`; j=j+1) begin
            if (config_en_io_ctrl[j] && config_wr) begin
                case (config_reg_addr)
                    0: io_ctrl_mode[j] <= config_wr_data[1:0];
                    1: io_ctrl_start_addr[j] <= config_wr_data[GLB_ADDR_WIDTH-1:0];
                    2: io_ctrl_num_words[j] <= config_wr_data[GLB_ADDR_WIDTH-1:0];
                    3: io_ctrl_start_pulse_en[j] <= config_wr_data[0];
                    4: io_ctrl_done_pulse_en[j] <= config_wr_data[0];
                endcase
            end
        end
    end
end

always_comb begin
    config_rd_data = 0;
    if (config_en_io_int && config_rd) begin
        case (config_reg_addr)
            //; for(my $j=0; ($j*$config_data_width)<$num_banks; $j++) {
                //; if (($j+1)*$config_data_width < $num_banks) {
                `$j`: config_rd_data = switch_sel[`($j+1)*$config_data_width-1`:`$j*$config_data_width`];
                //; } else {
                `$j`: config_rd_data[`$num_banks-$j*$config_data_width-1`:0] = switch_sel[`$num_banks-1`:`$j*$config_data_width`];
                //; }
            //; }
            default: config_rd_data = 0;
        endcase
    end
    else begin
        for(integer j=0; j<`$num_io_channels`; j=j+1) begin
            if (config_en_io_ctrl[j] && config_rd) begin
                case (config_reg_addr)
                    0: config_rd_data = io_ctrl_mode[j];
                    1: config_rd_data = io_ctrl_start_addr[j];
                    2: config_rd_data = io_ctrl_num_words[j];
                    3: config_rd_data = io_ctrl_start_pulse_en[j];
                    4: config_rd_data = io_ctrl_done_pulse_en[j];
                    default: config_rd_data = 0;
                endcase
            end
        end
    end
end

//============================================================================//
// cgra_start_pulse & cgra_done_pulse
//============================================================================//
always_comb begin
    cgra_done_pulse = 0;
    for (integer j=0; j<`$num_io_channels`; j=j+1) begin
        cgra_done_pulse = cgra_done_pulse | (io_ctrl_done_pulse_en[j] & io_cgra_done_pulse[j]);
    end
end

always_comb begin
    for (integer j=0; j<`$num_io_channels`; j=j+1) begin
        io_cgra_start_pulse[j] = io_ctrl_start_pulse_en[j] & cgra_start_pulse;
    end
end

//============================================================================//
// address channel interconnection network with pipeline
//============================================================================//
reg [GLB_ADDR_WIDTH-1:0]    bank_addr_int [`$num_banks-1`:0];
always_comb begin
    bank_addr_int[0] = switch_sel[0] ? io_addr[0/`$banks_per_io`] : 0;
    for (integer k=1; k<`$num_banks`; k=k+1) begin
        bank_addr_int[k] = switch_sel[k] ? io_addr[k/`$banks_per_io`] : bank_addr_int[k-1];
    end
end

//============================================================================//
// write channel interconnection network with pipeline
//============================================================================//
reg                         bank_wr_en_int [`$num_banks-1`:0];
reg [BANK_DATA_WIDTH-1:0]   bank_wr_data_int [`$num_banks-1`:0];
reg [BANK_DATA_WIDTH-1:0]   bank_wr_data_bit_sel_int [`$num_banks-1`:0];

always_comb begin
    bank_wr_en_int[0] = (switch_sel[0] ? io_wr_en[0] : 0) && (bank_addr_int[0][BANK_ADDR_WIDTH +: `$num_banks_width`] == 0);  
    for (integer k=1; k<`$num_banks`; k=k+1) begin
        bank_wr_en_int[k] = (switch_sel[k] ? io_wr_en[k/`$banks_per_io`] : bank_wr_en_int[k-1]) && (bank_addr_int[k][BANK_ADDR_WIDTH +: `$num_banks_width`] == k);  
    end
end

always_comb begin
    bank_wr_data_int[0] = switch_sel[0] ? io_wr_data[0] : 0;
    for (integer k=1; k<`$num_banks`; k=k+1) begin
        bank_wr_data_int[k] = switch_sel[k] ? io_wr_data[k/`$banks_per_io`] : bank_wr_data_int[k-1];
    end
end

always_comb begin
    bank_wr_data_bit_sel_int[0] = switch_sel[0] ? io_wr_data_bit_sel[0] : 0; 
    for (integer k=1; k<`$num_banks`; k=k+1) begin
        bank_wr_data_bit_sel_int[k] = switch_sel[k] ? io_wr_data_bit_sel[k/`$banks_per_io`] : bank_wr_data_bit_sel_int[k-1]; 
    end
end

//============================================================================//
// read channel interconnection network with pipeline
//============================================================================//
reg                         bank_rd_en_int [`$num_banks-1`:0];
reg                         bank_rd_en_int_d1 [`$num_banks-1`:0];
reg                         bank_rd_en_int_d2 [`$num_banks-1`:0];
reg [BANK_DATA_WIDTH-1:0]   io_rd_data_int [`$num_io_channels-1`:0];
reg [BANK_DATA_WIDTH-1:0]   bank_rd_data_int [`$num_banks-1`:0];
reg [BANK_DATA_WIDTH-1:0]   bank_to_io_rd_data_d1 [`$num_banks-1`:0];

always_comb begin
    bank_rd_en_int[0] = (switch_sel[0] ? io_rd_en[0] : 0) && (bank_addr_int[0][BANK_ADDR_WIDTH +: `$num_banks_width`] == 0); 
    for (integer k=1; k<`$num_banks`; k=k+1) begin
        bank_rd_en_int[k] = (switch_sel[k] ? io_rd_en[k/`$banks_per_io`] : bank_rd_en_int[k-1]) && (bank_addr_int[k][BANK_ADDR_WIDTH +: `$num_banks_width`] == k);  
    end
end

always_ff @(posedge clk) begin
    if (clk_en) begin
        for (integer i=0; i<`$num_banks`; i=i+1) begin
            bank_rd_en_int_d1[i] <= bank_rd_en_int[i];
            bank_rd_en_int_d2[i] <= bank_rd_en_int_d1[i];
        end
    end
end

always_ff @(posedge clk) begin
    if (clk_en) begin
        for (integer i=0; i<`$num_banks`; i=i+1) begin
            bank_to_io_rd_data_d1[i] <= bank_to_io_rd_data[i]; 
        end
    end
end

always_comb begin
    bank_rd_data_int[`$num_banks-1`] = bank_rd_en_int_d2[`$num_banks-1`] ? bank_to_io_rd_data_d1[`$num_banks-1`] : 0;
    for (integer k=0; k<`$num_banks-1`; k=k+1) begin
        bank_rd_data_int[k] = bank_rd_en_int_d2[k] ? bank_to_io_rd_data_d1[k] : bank_rd_data_int[k+1];
    end
end

always_comb begin
    for (integer j=0; j<`$num_io_channels`; j=j+1) begin
    //; for (my $i=0; $i<$banks_per_io; $i++) {
    //; if ($i == 0) {
        if (switch_sel[j*`$banks_per_io`] == 1'b1)
            io_rd_data_int[j] = bank_rd_data_int[j*`$banks_per_io`];
    //; }
    //; else {
        else if (switch_sel[j*`$banks_per_io`+`$i`] == 1'b1)
            io_rd_data_int[j] = bank_rd_data_int[j*`$banks_per_io`+`$i`];
    //; }
    //; }
        else
            io_rd_data_int[j] = 0;
    end
end

assign io_rd_data = io_rd_data_int;

//============================================================================//
// output assignment
//============================================================================//
assign io_to_bank_wr_en = bank_wr_en_int;
assign io_to_bank_wr_data = bank_wr_data_int;
assign io_to_bank_wr_data_bit_sel = bank_wr_data_bit_sel_int;

always_comb begin
    for (integer k=0; k<`$num_banks`; k=k+1) begin
        io_to_bank_wr_addr[k] = bank_addr_int[k][BANK_ADDR_WIDTH-1:0];
        io_to_bank_rd_addr[k] = bank_addr_int[k][BANK_ADDR_WIDTH-1:0];
    end
end
assign io_to_bank_rd_en = bank_rd_en_int;

endmodule
