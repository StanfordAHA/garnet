//============================================================================//
// generator parameter declaration
//============================================================================//
//; use POSIX;
//; use POSIX qw(log2);
//; my $num_banks = parameter(Name=>'num_banks', val=> 32, min=>16, step=>2, max=>64, doc=>'Number of banks');
//; my $bank_addr_width = parameter(Name=>'bank_addr_width', val=> 16, min=>3, step=>1, max=>20, doc=>'Address width of each bank. Byte-addressable');
//; my $bank_data_width = parameter(Name=>'bank_data_width', val=> 64, list=>[16, 32, 48, 64], doc=>'Data width of bank');
//; my $top_config_addr_width = parameter(Name=>'top_config_addr_width', val=> 32, doc=>'Address width of top configuration');
//; my $top_config_data_width = parameter(Name=>'top_config_data_width', val=> 32, doc=>'Data width of top configuration');

//; my $num_banks_bit_width = ceil(log2($num_banks));
/*=============================================================================
** Module: global_buffer.sv
** Description:
**              Global Buffer
** Author: Taeyoung Kong
** Change history: 04/12/2019 - Implement first version of global buffer
**===========================================================================*/

module `mname` (
    input                                   clk,
    input                                   reset,

    input                                   host_wr_en [`$num_banks-1`:0],
    input  [`$bank_data_width-1`:0]         host_wr_data [`$num_banks-1`:0],
    input  [`$bank_addr_width-1`:0]         host_wr_addr [`$num_banks-1`:0],

    input                                   host_rd_en [`$num_banks-1`:0],
    output [`$bank_data_width-1`:0]         host_rd_data [`$num_banks-1`:0],
    input  [`$bank_addr_width-1`:0]         host_rd_addr [`$num_banks-1`:0],

    input                                   cgra_wr_en [`$num_banks-1`:0],
    input  [`$bank_addr_width-1`:0]         cgra_wr_addr [`$num_banks-1`:0],
    input  [`$bank_data_width-1`:0]         cgra_wr_data [`$num_banks-1`:0],

    input                                   cgra_rd_en [`$num_banks-1`:0],
    input  [`$bank_addr_width-1`:0]         cgra_rd_addr [`$num_banks-1`:0],
    output [`$bank_data_width-1`:0]         cgra_rd_data [`$num_banks-1`:0],

    input                                   top_config_en_glb,
    input                                   top_config_wr,
    input                                   top_config_rd,
    input  [`$top_config_addr_width-1`:0]   top_config_addr,
    input  [`$top_config_data_width-1`:0]   top_config_wr_data,
    output [`$top_config_data_width-1`:0]   top_config_rd_data
);

//============================================================================//
// configuration signal declaration
//============================================================================//
wire [`$bank_addr_width-1`:0]       top_config_addr_bank [`$num_banks-1`:0];
wire                                top_config_en_bank [`$num_banks-1`:0];
wire [`$top_config_data_width-1`:0] top_config_rd_data_bank [`$num_banks-1`:0];

integer j;
always_comb begin
    for (j=0; j<`$num_banks`; j=j+1) begin
        top_config_addr_bank[j] = top_config_addr[`$bank_addr_width-1`:0];
    end
end

always_comb begin
    for (j=0; j<`$num_banks`; j=j+1) begin
        top_config_en_bank[j] = top_config_en_glb && (j == top_config_addr[`$bank_addr_width` +: `$num_banks_bit_width`]);
    end
end

always_comb begin       
    top_config_rd_data = 0;
    for (j=0; j<`$num_banks`; j=j+1) begin
    	top_config_rd_data = top_config_rd_data | top_config_rd_data_bank[j];
    end
end

//============================================================================//
// bank generation
//============================================================================//
genvar i;
generate
for (i=0; i<`$num_banks`; i=i+1) begin: generate_bank
    memory_bank #(
    .BANK_ADDR_WIDTH(`$bank_addr_width`),
    .BANK_DATA_WIDTH(`$bank_data_width`),
    .CONFIG_DATA_WIDTH(`$top_config_data_width`)
    ) inst_bank (
        .clk(clk),
        .reset(reset),

        .host_wr_en(host_wr_en[i]),
        .host_wr_data(host_wr_data[i]),
        .host_wr_addr(host_wr_addr[i]),

        .host_rd_en(host_rd_en[i]),
        .host_rd_data(host_rd_data[i]),
        .host_rd_addr(host_rd_addr[i]),

        .cgra_wr_en(cgra_wr_en[i]),
        .cgra_wr_data(cgra_wr_data[i]),
        .cgra_wr_addr(cgra_wr_addr[i]),

        .cgra_rd_en(cgra_rd_en[i]),
        .cgra_rd_data(cgra_rd_data[i]),
        .cgra_rd_addr(cgra_rd_addr[i]),

        .config_en(top_config_en_bank[i]),
        .config_wr(top_config_wr),
        .config_rd(top_config_rd),
        .config_addr(top_config_addr_bank[i]),
        .config_wr_data(top_config_wr_data),
        .config_rd_data(top_config_rd_data_bank[i])
    );
end: generate_bank
endgenerate

endmodule
