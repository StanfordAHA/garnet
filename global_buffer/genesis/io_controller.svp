/*=============================================================================
** Module: io_controller.sv
** Description:
**              I/O controller between GLB and CGRA
** Author: Taeyoung Kong
** Change history: 04/20/2019 - Implement first version
**===========================================================================*/
//; use POSIX;
//; my $num_banks = parameter(Name=>'num_banks', val=> 32, step=>4, min=>4, max=>32, doc=>'number of banks');
//; my $num_io_channels = parameter(Name=>'num_io_channels', val=> 8, step=>1, min=>1, max=>16, doc=>'number of io channels');
//; my $banks_per_io = ceil($num_banks / $num_io_channels); 

module `mname` #(
    parameter integer GLB_ADDR_WIDTH = 32,
    parameter integer BANK_DATA_WIDTH = 64,
    parameter integer BANK_ADDR_WIDTH = 17,
    parameter integer CGRA_DATA_WIDTH = 16,
    parameter integer CONFIG_REG_WIDTH = 4,
    parameter integer CONFIG_FEATURE_WIDTH = 4,
    parameter integer CONFIG_DATA_WIDTH = 32,
    parameter integer CONFIG_FEATURE_REG_WIDTH = CONFIG_FEATURE_WIDTH+CONFIG_REG_WIDTH
)
(

    input                                       clk,
    input                                       reset,

    input                                       cgra_start_pulse,
    output logic                                cgra_done_pulse,

    input                                       glc_to_io_stall,
    //input                                       cgra_to_io_stall [`$num_io_channels-1`:0],
    input                                       cgra_to_io_wr_en [`$num_io_channels-1`:0],
    input                                       cgra_to_io_rd_en [`$num_io_channels-1`:0],
    output logic                                io_to_cgra_rd_data_valid [`$num_io_channels-1`:0],
    input        [CGRA_DATA_WIDTH-1:0]          cgra_to_io_wr_data [`$num_io_channels-1`:0],
    output logic [CGRA_DATA_WIDTH-1:0]          io_to_cgra_rd_data [`$num_io_channels-1`:0],
    input        [CGRA_DATA_WIDTH-1:0]          cgra_to_io_addr_high [`$num_io_channels-1`:0],
    input        [CGRA_DATA_WIDTH-1:0]          cgra_to_io_addr_low [`$num_io_channels-1`:0],
    
    output logic                                io_to_bank_wr_en [`$num_banks-1`:0],
    output logic [BANK_DATA_WIDTH-1:0]          io_to_bank_wr_data [`$num_banks-1`:0],
    output logic [BANK_DATA_WIDTH-1:0]          io_to_bank_wr_data_bit_sel [`$num_banks-1`:0],
    output logic [BANK_ADDR_WIDTH-1:0]          io_to_bank_wr_addr [`$num_banks-1`:0],
    output logic                                io_to_bank_rd_en [`$num_banks-1`:0],
    input        [BANK_DATA_WIDTH-1:0]          bank_to_io_rd_data [`$num_banks-1`:0],
    output logic [BANK_ADDR_WIDTH-1:0]          io_to_bank_rd_addr [`$num_banks-1`:0],

    input                                       config_en,
    input                                       config_wr,
    input                                       config_rd,
    input        [CONFIG_FEATURE_REG_WIDTH-1:0] config_addr,
    input        [CONFIG_DATA_WIDTH-1:0]        config_wr_data,
    output logic [CONFIG_DATA_WIDTH-1:0]        config_rd_data
);

//============================================================================//
// local parameter declaration
//============================================================================//
localparam integer IDLE_MODE = 0;

//============================================================================//
// internal signals
//============================================================================//
logic                           io_wr_en [`$num_io_channels-1`:0];
logic                           io_rd_en [`$num_io_channels-1`:0];
logic [BANK_DATA_WIDTH-1:0]     io_wr_data [`$num_io_channels-1`:0];
logic [BANK_DATA_WIDTH-1:0]     io_wr_data_bit_sel [`$num_io_channels-1`:0];
logic [BANK_DATA_WIDTH-1:0]     io_rd_data [`$num_io_channels-1`:0];
logic                           io_rd_data_valid [`$num_io_channels-1`:0];

logic [GLB_ADDR_WIDTH-1:0]      io_addr [`$num_io_channels-1`:0];
logic                           io_cgra_start_pulse [`$num_io_channels-1`:0];
logic                           io_cgra_done_pulse [`$num_io_channels-1`:0];
logic [GLB_ADDR_WIDTH-1:0]      io_ctrl_start_addr [`$num_io_channels-1`:0];
logic [GLB_ADDR_WIDTH-1:0]      io_ctrl_num_words [`$num_io_channels-1`:0];
logic [GLB_ADDR_WIDTH-1:0]      io_ctrl_num_active [`$num_io_channels-1`:0];
logic [GLB_ADDR_WIDTH-1:0]      io_ctrl_num_inactive [`$num_io_channels-1`:0];
logic                           io_ctrl_auto_restart [`$num_io_channels-1`:0];
logic [1:0]                     io_ctrl_mode [`$num_io_channels-1`:0];
logic [`$banks_per_io-1`:0]     io_ctrl_switch_sel [`$num_io_channels-1`:0];
logic [CONFIG_DATA_WIDTH-1:0]   io_ctrl_done_delay [`$num_io_channels-1`:0];
logic                           io_ctrl_done_gate [`$num_io_channels-1`:0];

//============================================================================//
// clk enable signal
//============================================================================//
logic clk_en;
assign clk_en = !glc_to_io_stall;

//============================================================================//
// io controller instantiation
//============================================================================//
//; my $io_address_generator = generate_base('io_address_generator', 'io_address_generator');
//; for(my $i=0; $i<$num_io_channels; $i++) {
//; $io_address_generator = clone($io_address_generator, "io_address_generator_${i}");
`$io_address_generator->mname()` #(
    .BANK_DATA_WIDTH(BANK_DATA_WIDTH),
    .CGRA_DATA_WIDTH(CGRA_DATA_WIDTH),
    .GLB_ADDR_WIDTH(GLB_ADDR_WIDTH),
    .CONFIG_DATA_WIDTH(CONFIG_DATA_WIDTH),
    .IDLE_MODE(IDLE_MODE)
) `$io_address_generator->iname()` (
    .clk(clk),
    .clk_en(clk_en),
    .reset(reset),

    .cgra_start_pulse(io_cgra_start_pulse[`$i`]),
    .cgra_done_pulse(io_cgra_done_pulse[`$i`]),

    .start_addr(io_ctrl_start_addr[`$i`]),
    .num_words(io_ctrl_num_words[`$i`]),
    .num_active(io_ctrl_num_active[`$i`]),
    .num_inactive(io_ctrl_num_inactive[`$i`]),
    .auto_restart(io_ctrl_auto_restart[`$i`]),
    .mode(io_ctrl_mode[`$i`]),
    .done_delay(io_ctrl_done_delay[`$i`]),

    .cgra_to_io_wr_en(cgra_to_io_wr_en[`$i`]),
    .cgra_to_io_rd_en(cgra_to_io_rd_en[`$i`]),
    .io_to_cgra_rd_data_valid(io_to_cgra_rd_data_valid[`$i`]),
    .cgra_to_io_addr_high(cgra_to_io_addr_high[`$i`]),
    .cgra_to_io_addr_low(cgra_to_io_addr_low[`$i`]),
    .cgra_to_io_wr_data(cgra_to_io_wr_data[`$i`]),
    .io_to_cgra_rd_data(io_to_cgra_rd_data[`$i`]),

    .io_to_bank_wr_en(io_wr_en[`$i`]),
    .io_to_bank_wr_data(io_wr_data[`$i`]),
    .io_to_bank_wr_data_bit_sel(io_wr_data_bit_sel[`$i`]),
    .io_to_bank_rd_en(io_rd_en[`$i`]),
    .bank_to_io_rd_data(io_rd_data[`$i`]),
    .bank_to_io_rd_data_valid(io_rd_data_valid[`$i`]),
    .io_to_bank_addr(io_addr[`$i`])
);
//; }

//============================================================================//
// configuration
//============================================================================//
wire [CONFIG_FEATURE_WIDTH-1:0] config_feature_addr;
wire [CONFIG_REG_WIDTH-1:0]     config_reg_addr;
reg                             config_en_io_ctrl [`$num_io_channels-1`:0];

assign config_reg_addr = config_addr[0 +: CONFIG_REG_WIDTH];
assign config_feature_addr = config_addr[CONFIG_REG_WIDTH +: CONFIG_FEATURE_WIDTH];

always_comb begin
    for(integer i=0; i<`$num_io_channels`; i=i+1) begin
        config_en_io_ctrl[i] = config_en && (config_feature_addr == i);
    end
end

always_ff @(posedge clk or posedge reset) begin
    if (reset) begin
        for(integer j=0; j<`$num_io_channels`; j=j+1) begin
            io_ctrl_mode[j] <= 0;
            io_ctrl_start_addr[j] <= 0;
            io_ctrl_num_words[j] <= 0;
            io_ctrl_num_active[j] <= 0;
            io_ctrl_num_inactive[j] <= 0;
            io_ctrl_auto_restart[j] <= 0;
            io_ctrl_switch_sel[j] <= 0;
            io_ctrl_done_delay[j] <= 0;
            io_ctrl_done_gate[j] <= 0;
        end
    end
    else begin
        for(integer j=0; j<`$num_io_channels`; j=j+1) begin
            // TODO: For now, only stays high for 1 cycle.
            // It would be better to clear it with a signal
            // coming back from the internal module.
            io_ctrl_auto_restart[j] <= 0;

            if (config_en_io_ctrl[j] && config_wr) begin
                case (config_reg_addr)
                    0: io_ctrl_mode[j] <= config_wr_data[1:0];
                    1: io_ctrl_start_addr[j] <= config_wr_data[GLB_ADDR_WIDTH-1:0];
                    2: io_ctrl_num_words[j] <= config_wr_data[GLB_ADDR_WIDTH-1:0];
                    3: io_ctrl_switch_sel[j] <= config_wr_data[`$banks_per_io-1`:0];
                    4: io_ctrl_done_delay[j] <= config_wr_data;
                    5: io_ctrl_done_gate[j] <= config_wr_data;
                    6: io_ctrl_num_active[j] <= config_wr_data[GLB_ADDR_WIDTH-1:0];
                    7: io_ctrl_num_inactive[j] <= config_wr_data[GLB_ADDR_WIDTH-1:0];
                    8: io_ctrl_auto_restart[j] <= config_wr_data[0];
                endcase
            end
        end
    end
end

always_comb begin
    config_rd_data = 0;
    for(integer j=0; j<`$num_io_channels`; j=j+1) begin
        if (config_en_io_ctrl[j] && config_rd) begin
            case (config_reg_addr)
                0: config_rd_data = io_ctrl_mode[j];
                1: config_rd_data = io_ctrl_start_addr[j];
                2: config_rd_data = io_ctrl_num_words[j];
                3: config_rd_data = io_ctrl_switch_sel[j];
                4: config_rd_data = io_ctrl_done_delay[j];
                5: config_rd_data = io_ctrl_done_gate[j];
                6: config_rd_data = io_ctrl_num_active[j];
                7: config_rd_data = io_ctrl_num_inactive[j];
                8: config_rd_data = io_ctrl_auto_restart[j];
                default: config_rd_data = 0;
            endcase
        end
    end
end

//============================================================================//
// cgra_start_pulse & cgra_done_pulse
//============================================================================//
logic [`$num_io_channels-1`:0]  io_cgra_done_reg;
logic [`$num_io_channels-1`:0]  io_cgra_done_gated;
logic [`$num_io_channels-1`:0]  io_ctrl_off;
logic                           io_ctrl_off_all;
logic                           cgra_done_all;
logic                           cgra_done_all_d1;

// cgra_start_pulse
always_comb begin
    for (integer j=0; j<`$num_io_channels`; j=j+1) begin
        io_cgra_start_pulse[j] = cgra_start_pulse;
    end
end

always_ff @(posedge clk or posedge reset) begin
    if (reset) begin
        io_cgra_done_reg <= 0;
    end
    else begin
        if (cgra_start_pulse) begin
            io_cgra_done_reg <= 0;
        end
        else begin
            for (integer j=0; j<`$num_io_channels`; j=j+1) begin
                if (io_cgra_done_pulse[j] == 1) begin
                    io_cgra_done_reg[j] <= 1;
                end
            end
        end
    end
end

always_comb begin
    for (integer i=0; i<`$num_io_channels`; i=i+1) begin
        io_ctrl_off[i] = (io_ctrl_mode[i] == IDLE_MODE) | (io_ctrl_done_gate[i] == 1);
    end
end
assign io_ctrl_off_all = &io_ctrl_off;

// only if io_ctrl is not off, we use cgra_done from controller
always_comb begin
    for (integer i=0; i<`$num_io_channels`; i=i+1) begin
        io_cgra_done_gated[i] = (!io_ctrl_off[i]) ? io_cgra_done_reg[i] : 1;
    end
end

always_comb begin
    // if all controllers are IDLE, then done_pulse is never generated
    if (io_ctrl_off_all == 1) begin
        cgra_done_all = 0;
    end
    else begin
        cgra_done_all = &io_cgra_done_gated;
    end
end

// generate pulse for one cycle
always_ff @(posedge clk) begin
    cgra_done_all_d1 <= cgra_done_all;
end
assign cgra_done_pulse = cgra_done_all & (!cgra_done_all_d1);

//============================================================================//
// address channel interconnection network with pipeline
//============================================================================//
reg [GLB_ADDR_WIDTH-1:0]    bank_addr_int [`$num_banks-1`:0];
always_comb begin
    for (integer j=0; j<`$num_io_channels`; j=j+1) begin
        for (integer k=0; k<`$banks_per_io`; k=k+1) begin
            if (j==0 && k==0) begin
                bank_addr_int[0] = io_ctrl_switch_sel[0][0] ? io_addr[0] : 0;
            end
            else begin
                bank_addr_int[j*`$banks_per_io`+k] = io_ctrl_switch_sel[j][k] ? io_addr[j] : bank_addr_int[j*`$banks_per_io`+k-1];
            end
        end
    end
end

//============================================================================//
// write channel interconnection network with pipeline
//============================================================================//
reg                         bank_wr_en_int [`$num_banks-1`:0];
reg [BANK_DATA_WIDTH-1:0]   bank_wr_data_int [`$num_banks-1`:0];
reg [BANK_DATA_WIDTH-1:0]   bank_wr_data_bit_sel_int [`$num_banks-1`:0];

always_comb begin
    for (integer j=0; j<`$num_io_channels`; j=j+1) begin
        for (integer k=0; k<`$banks_per_io`; k=k+1) begin
            if (j==0 && k==0) begin
                bank_wr_en_int[0] = io_ctrl_switch_sel[0][0] ? io_wr_en[0] : 0;
            end
            else begin
                bank_wr_en_int[j*`$banks_per_io`+k] = io_ctrl_switch_sel[j][k] ? io_wr_en[j] : bank_wr_en_int[j*`$banks_per_io`+k-1];
            end
        end
    end
end

always_comb begin
    for (integer j=0; j<`$num_io_channels`; j=j+1) begin
        for (integer k=0; k<`$banks_per_io`; k=k+1) begin
            if (j==0 && k==0) begin
                bank_wr_data_int[0] = io_ctrl_switch_sel[0][0] ? io_wr_data[0] : 0;
            end
            else begin
                bank_wr_data_int[j*`$banks_per_io`+k] = io_ctrl_switch_sel[j][k] ? io_wr_data[j] : bank_wr_data_int[j*`$banks_per_io`+k-1];
            end
        end
    end
end

always_comb begin
    for (integer j=0; j<`$num_io_channels`; j=j+1) begin
        for (integer k=0; k<`$banks_per_io`; k=k+1) begin
            if (j==0 && k==0) begin
                bank_wr_data_bit_sel_int[0] = io_ctrl_switch_sel[0][0] ? io_wr_data_bit_sel[0] : 0; 
            end
            else begin
                bank_wr_data_bit_sel_int[j*`$banks_per_io`+k] = io_ctrl_switch_sel[j][k] ? io_wr_data_bit_sel[j] : bank_wr_data_bit_sel_int[j*`$banks_per_io`+k-1]; 
            end
        end
    end
end

//============================================================================//
// read channel interconnection network with pipeline
//============================================================================//
reg                         bank_rd_en_int [`$num_banks-1`:0];
reg                         io_to_bank_rd_en_int_d1 [`$num_banks-1`:0];
reg                         io_to_bank_rd_en_int_d2 [`$num_banks-1`:0];
reg [BANK_DATA_WIDTH-1:0]   io_rd_data_int [`$num_io_channels-1`:0];
reg [BANK_DATA_WIDTH-1:0]   bank_rd_data_int [`$num_banks-1`:0];
reg [BANK_DATA_WIDTH-1:0]   bank_to_io_rd_data_d1 [`$num_banks-1`:0];

always_comb begin
    for (integer j=0; j<`$num_io_channels`; j=j+1) begin
        for (integer k=0; k<`$banks_per_io`; k=k+1) begin
            if (j==0 && k==0) begin
                bank_rd_en_int[0] = io_ctrl_switch_sel[0][0] ? io_rd_en[0] : 0; 
            end
            else begin
                bank_rd_en_int[j*`$banks_per_io`+k] = io_ctrl_switch_sel[j][k] ? io_rd_en[j] : bank_rd_en_int[j*`$banks_per_io`+k-1];
            end
        end
    end
end

always_ff @(posedge clk) begin
    if (clk_en) begin
        for (integer i=0; i<`$num_banks`; i=i+1) begin
            io_to_bank_rd_en_int_d1[i] <= io_to_bank_rd_en[i];
            io_to_bank_rd_en_int_d2[i] <= io_to_bank_rd_en_int_d1[i];
        end
    end
end

always_ff @(posedge clk) begin
    if (clk_en) begin
        for (integer i=0; i<`$num_banks`; i=i+1) begin
            bank_to_io_rd_data_d1[i] <= bank_to_io_rd_data[i]; 
        end
    end
end

always_comb begin
    for (integer k=`$num_banks-1`; k>=0; k=k-1) begin
        if (k == `$num_banks-1`) begin
            bank_rd_data_int[`$num_banks-1`] = io_to_bank_rd_en_int_d2[`$num_banks-1`] ? bank_to_io_rd_data_d1[`$num_banks-1`] : 0;
        end
        else begin
            bank_rd_data_int[k] = io_to_bank_rd_en_int_d2[k] ? bank_to_io_rd_data_d1[k] : bank_rd_data_int[k+1];
        end
    end
end

always_comb begin
    for (integer j=0; j<`$num_io_channels`; j=j+1) begin
    //; for (my $i=0; $i<$banks_per_io; $i++) {
    //; if ($i == 0) {
        if (io_ctrl_switch_sel[j][0] == 1'b1)
            io_rd_data_int[j] = bank_rd_data_int[j*`$banks_per_io`];
    //; }
    //; else {
        else if (io_ctrl_switch_sel[j][`$i`] == 1'b1)
            io_rd_data_int[j] = bank_rd_data_int[j*`$banks_per_io`+`$i`];
    //; }
    //; }
        else
            io_rd_data_int[j] = 0;
    end
end

assign io_rd_data = io_rd_data_int;

//============================================================================//
// rd_data_valid channel interconnection network with pipeline
//============================================================================//
logic bank_to_io_rd_data_valid [`$num_banks-1`:0];
logic bank_rd_data_valid_int [`$num_banks-1`:0];
logic io_rd_data_valid_int [`$num_io_channels-1`:0];

// if bank_rd_en is high, rd_data_valid goes high after 2 cycle latency
assign bank_to_io_rd_data_valid = io_to_bank_rd_en_int_d2;

always_comb begin
    for (integer k=`$num_banks-1`; k>=0; k=k-1) begin
        if (k == `$num_banks-1`) begin
            bank_rd_data_valid_int[`$num_banks-1`] = io_to_bank_rd_en_int_d2[`$num_banks-1`] ? bank_to_io_rd_data_valid[`$num_banks-1`] : 0;
        end
        else begin
            bank_rd_data_valid_int[k] = io_to_bank_rd_en_int_d2[k] ? bank_to_io_rd_data_valid[k] : bank_rd_data_valid_int[k+1];
        end
    end
end

always_comb begin
    for (integer j=0; j<`$num_io_channels`; j=j+1) begin
    //; for (my $i=0; $i<$banks_per_io; $i++) {
    //; if ($i == 0) {
        if (io_ctrl_switch_sel[j][0] == 1'b1) begin
            io_rd_data_valid_int[j] = bank_rd_data_valid_int[j*`$banks_per_io`];
        end
    //; }
    //; else {
        else if (io_ctrl_switch_sel[j][`$i`] == 1'b1) begin
            io_rd_data_valid_int[j] = bank_rd_data_valid_int[j*`$banks_per_io`+`$i`];
        end
    //; }
    //; }
        else begin
            io_rd_data_valid_int[j] = 0;
        end
    end
end

assign io_rd_data_valid = io_rd_data_valid_int;

//============================================================================//
// output assignment
//============================================================================//
always_comb begin
    for (integer k=0; k<`$num_banks`; k=k+1) begin
        io_to_bank_wr_en[k] = bank_wr_en_int[k] && (bank_addr_int[k][GLB_ADDR_WIDTH-1:BANK_ADDR_WIDTH] == k);
    end
end

always_comb begin
    for (integer k=0; k<`$num_banks`; k=k+1) begin
        io_to_bank_rd_en[k] = bank_rd_en_int[k] && (bank_addr_int[k][GLB_ADDR_WIDTH-1:BANK_ADDR_WIDTH] == k);
    end
end

assign io_to_bank_wr_data = bank_wr_data_int;
assign io_to_bank_wr_data_bit_sel = bank_wr_data_bit_sel_int;

always_comb begin
    for (integer k=0; k<`$num_banks`; k=k+1) begin
        io_to_bank_wr_addr[k] = bank_addr_int[k][BANK_ADDR_WIDTH-1:0];
        io_to_bank_rd_addr[k] = bank_addr_int[k][BANK_ADDR_WIDTH-1:0];
    end
end

endmodule
