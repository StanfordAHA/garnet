# Agents are specified in "pipeline settings", see e.g. buildkite.com/tapeout-aha/steps

##############################################################################
# TO TEST A SPECIFIC BRANCH/COMMIT
# -------------------------------------------------
# Add to env:
#   NOV11: ee214ef77b827f969e4b5f056f5d866cf391be7a
# Add to commands:
#   - pwd; git branch; git checkout $$NOV11
# -------------------------------------------------

env:
  # This pipeline tests the AMBER version of our SoC
  WHICH_SOC: amber

  # For docker-based gold checks
  IMAGE     : stanfordaha/garnet:latest
  CONTAINER : gold-check-${BUILDKITE_BUILD_NUMBER}

  # ($FAIL|$UPLOAD): Inserts a "fail" bubble in the buildkite pipeline log
  FAIL_ONYX   : 'echo steps : [ { label : ":x: ONYX_FAILED :x:" ,  command : exit } ]'
  FAIL_AMBER  : 'echo steps : [ { label : ":x: AMBER_FAILED :x:" , command : exit } ]'
  UPLOAD : 'buildkite-agent pipeline upload'

  # Env var used by test_module.sh :(
  TEST_MODULE_SBFLAGS: '--skip_mflowgen'

# For normal operation leave off build_dir flag to save disk space
  TEST: echo exit 13 | mflowgen/test/test_module.sh
  BDIR: .

# For debugging, use build_dir flag to save build in indicated local dir
#   TEST: echo exit 13 | mflowgen/test/test_module.sh --build_dir /build/pmg${BUILDKITE_BUILD_NUMBER}
#   BDIR: /build/pmg${BUILDKITE_BUILD_NUMBER}

steps:

# ##############################################################################
# # Two quick RTL checks
# 
# - label: "Gold RTL: Amber 1m"
#   commands:
#   - '
#      docker pull $$IMAGE; container=$$CONTAINER-amber;
#      docker run -id --name $$container --rm -v /cad:/cad $$IMAGE bash;
#      function dexec { docker exec $$container /bin/bash -c "$$*"; };
#      dexec "rm -rf /aha/garnet"; docker cp . $$container:/aha/garnet;
#      dexec "/aha/garnet/bin/rtl-goldcheck.sh amber" || $$FAIL_AMBER | $$UPLOAD;
#      docker image prune -f -a;
#      docker kill $$container || echo cannot kill container;
#     '
# 
# - label: "Gold RTL: Onyx 1m"
#   commands:
#   - '
#      docker pull $$IMAGE; container=$$CONTAINER-onyx;
#      docker run -id --name $$container --rm -v /cad:/cad $$IMAGE bash;
#      function dexec { docker exec $$container /bin/bash -c "$$*"; };
#      dexec "rm -rf /aha/garnet"; docker cp . $$container:/aha/garnet;
#      dexec "/aha/garnet/bin/rtl-goldcheck.sh onyx" || $$FAIL_ONYX | $$UPLOAD;
#      docker image prune -f -a;
#      docker kill $$container || echo cannot kill container;
#     '
# - wait

##############################################################################
# INDIVIDUAL TILE RUNS
# Builds in dir e.g. mflowgen/full_chip/19-tile_array/17-Tile_PE

# Default is to run three tile tests (PE, Mem, GLB) up through
# floorplanning (init), which should take about 20-30 minutes.

# ------------------------------------------------------------------------

# PTILE through init
# Set pe max width to 112: fp limits to 110 but then lvs says 112 OK
- label: 'ptile init 20m'
  commands:
  # - $TEST --need_space 30G full_chip tile_array Tile_PE --steps init --debug
  - 'source mflowgen/bin/setup-buildkite.sh --dir .;
     mflowgen run --design $$GARNET_HOME/mflowgen/full_chip;
     make tile_array-Tile_MemCore-init'
  - .buildkite/pipelines/check_tile_width.sh Tile_PE --max 112 $BDIR
  - mflowgen/bin/buildcheck.sh $BDIR/full_chip/*tile_array/*Tile_PE --show-all-errors

# # PTILE through LVS
# # - label: 'ptile lvs 2h'
# #   commands:
# #   - $TEST --need_space 30G full_chip tile_array Tile_PE --steps mentor-calibre-lvs --debug
# #   - .buildkite/pipelines/check_tile_width.sh Tile_PE --max 112 $BDIR
# #   - mflowgen/bin/buildcheck.sh $BDIR/full_chip/*tile_array/*Tile_PE --show-all-errors
# #   if: build.branch !~ /to-spv/ && build.branch !~ /spV/
# 
# # ------------------------------------------------------------------------
# 
# # MTILE through init
# - label: 'mtile init 25m'
#   commands:
#   - $TEST --need_space 30G full_chip tile_array Tile_MemCore --steps init --debug
#   - .buildkite/pipelines/check_tile_width.sh Tile_MemCore --max 250 $BDIR
#   - mflowgen/bin/buildcheck.sh $BDIR/full_chip/*tile_array/*Tile_MemCore --show-all-errors
# 
# # MTILE through LVS
# # - label: 'mtile lvs 2h'
# #   commands:
# #   - $TEST --need_space 30G full_chip tile_array Tile_MemCore --steps mentor-calibre-lvs --debug
# #   - .buildkite/pipelines/check_tile_width.sh Tile_MemCore --max 250 $BDIR
# #   - mflowgen/bin/buildcheck.sh $BDIR/full_chip/*tile_array/*Tile_MemCore --show-all-errors
# 
# # ------------------------------------------------------------------------
# 
# # GTILE through init
# - label: 'gtile init 20m'
#   commands:
#   - $TEST --need_space 30G full_chip glb_top glb_tile --steps init --debug
#   - mflowgen/bin/buildcheck.sh $BDIR/full_chip/*glb_top/*glb_tile --show-all-errors
# 
# # GTILE through LVS
# # - label: 'gtile lvs 3h'
# #   commands:
# #   - $TEST --need_space 30G full_chip glb_top glb_tile --steps mentor-calibre-lvs --debug
# #   - mflowgen/bin/buildcheck.sh $BDIR/full_chip/*glb_top/*glb_tile --show-all-errors
# 
# # ------------------------------------------------------------------------
# 
# # GTOP through LVS
# # - label: 'gtop lvs 3h?'
# #   commands:
# #   - $TEST --need_space 30G full_chip glb_top --steps mentor-calibre-lvs --debug
# #   - mflowgen/bin/buildcheck.sh $BDIR/full_chip/*glb_top --show-all-errors
# 
# # ------------------------------------------------------------------------
# 
# # ONYX BRANCHES ONLY
# # GF branches cannot run synthesis on my machine, so do RTL only I guess
# # - label: 'RTL only 25m'
# #   commands:
# #   - 'export WHICH_SOC=onyx;
# #     $TEST --need_space 30G full_chip --steps rtl --debug'
# #   if: build.branch =~ /to-spv/ || build.branch =~ /spV/ || build.branch =~ /sms/
