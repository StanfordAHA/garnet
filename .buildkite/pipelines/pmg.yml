# Agents are specified in "pipeline settings", see e.g. buildkite.com/tapeout-aha/steps

##############################################################################
# TO TEST A SPECIFIC BRANCH/COMMIT
# -------------------------------------------------
# Add to env:
#   NOV11: ee214ef77b827f969e4b5f056f5d866cf391be7a
# Add to commands:
#   - pwd; git branch; git checkout $$NOV11
# -------------------------------------------------

env:
  # This pipeline tests the AMBER version of our SoC
  WHICH_SOC: amber

  # For docker-based gold checks
  IMAGE     : stanfordaha/garnet:latest
  CONTAINER : gold-check-${BUILDKITE_BUILD_NUMBER}

  # (see buildkite/emojis)
  # ($FAIL|$UPLOAD): Inserts a "fail" bubble in the buildkite pipeline log
  FAIL_ONYX   : 'echo steps : [ { label : ":warning: ONYX_FAILED" ,   command : exit } ]'
  FAIL_AMBER  : 'echo steps : [ { label : ":warning: AMBER_FAILED" , command : exit } ]'
  UPLOAD : 'buildkite-agent pipeline upload'

  # For normal operation leave off build_dir flag to save disk space
  BDIR: .

  # For debugging
  # BDIR: /build/pmg${BUILDKITE_BUILD_NUMBER}

  # Note: this skips new "mflowgen clone"
  # but still does "git pull" update of existing clone.
  SETUP_FLAGS: '--dir $BDIR --skip_mflowgen --need_space 30G'


steps:

#####################################################################################
# Two quick RTL checks. Set soft fail so RTL failure does not fail integration tests.

- label: "Gold RTL: Amber 1m"
  soft_fail: true
  commands:
  - '
     exit_status=0;
     docker pull $$IMAGE; container=$$CONTAINER-amber;
     docker run -id --name $$container --rm -v /cad:/cad $$IMAGE bash;
     function dexec { docker exec $$container /bin/bash -c "$$*"; };
     dexec "rm -rf /aha/garnet"; docker cp . $$container:/aha/garnet;
     dexec "/aha/garnet/bin/rtl-goldcheck.sh amber" || exit_status=13;
     docker cp $$container:/aha/garnet/design.v /tmp/amber-4x2.v;
     docker image prune -f -a;
     docker kill $$container || echo cannot kill container;
     ./bin/rtl-goldfetch.sh `hostname` amber;
     exit $$exit_status;
    '

- label: "Gold RTL: Onyx 1m"

  # Let's NOT be soft for awhile. Remember to restore this before final merge!
  # soft_fail: true

  commands:
  - '
     exit_status=0;
     docker pull $$IMAGE; container=$$CONTAINER-onyx;
     docker run -id --name $$container --rm -v /cad:/cad $$IMAGE bash;
     function dexec { docker exec $$container /bin/bash -c "$$*"; };
     dexec "rm -rf /aha/garnet"; docker cp . $$container:/aha/garnet;
     dexec "/aha/garnet/bin/rtl-goldcheck.sh onyx" || exit_status=13;
     docker cp $$container:/aha/garnet/design.v /tmp/onyx-4x2.v;
     docker image prune -f -a;
     docker kill $$container || echo cannot kill container;
     ./bin/rtl-goldfetch.sh `hostname` onyx;
     exit $$exit_status;
    '
- wait: { continue_on_failure: true }

# ##############################################################################
# # INDIVIDUAL TILE RUNS
# # Builds in dir e.g. mflowgen/full_chip/19-tile_array/17-Tile_PE
# 
# # Default is to run three tile tests (PE, Mem, GLB) up through
# # floorplanning (init), which should take about 20-30 minutes.
# 
# # ------------------------------------------------------------------------
# 
# # PTILE through init
# # Set pe max width to 112: fp limits to 110 but then lvs says 112 OK
# - label: 'ptile init 20m'
#   commands:
#   - 'source mflowgen/bin/setup-buildkite.sh $$SETUP_FLAGS;
#      echo "--- BEGIN mflowgen run";
#      mflowgen run --design $$GARNET_HOME/mflowgen/full_chip;
#      echo "--- BEGIN make init";
#      echo make tile_array-Tile_PE-cadence-innovus-init;
#      echo exit 13 | make tile_array-Tile_PE-cadence-innovus-init;'
#   - .buildkite/pipelines/check_tile_width.sh Tile_PE --max 112 $BDIR
#   - mflowgen/bin/buildcheck.sh $BDIR/full_chip/*tile_array/*Tile_PE --show-all-errors
# 
# # PTILE through LVS
# # - label: 'ptile lvs 2h'
# #   commands:
# #   - $TEST --need_space 30G full_chip tile_array Tile_PE --steps mentor-calibre-lvs --debug
# #   - .buildkite/pipelines/check_tile_width.sh Tile_PE --max 112 $BDIR
# #   - mflowgen/bin/buildcheck.sh $BDIR/full_chip/*tile_array/*Tile_PE --show-all-errors
# #   if: build.branch !~ /to-spv/ && build.branch !~ /spV/
# 
# # ------------------------------------------------------------------------
# 
# # MTILE through init
# - label: 'mtile init 25m'
#   commands:
#   - 'source mflowgen/bin/setup-buildkite.sh $$SETUP_FLAGS;
#      echo "--- BEGIN mflowgen run";
#      mflowgen run --design $$GARNET_HOME/mflowgen/full_chip;
#      echo "--- BEGIN make init";
#      echo make tile_array-Tile_MemCore-cadence-innovus-init;
#      echo exit 13 | make tile_array-Tile_MemCore-cadence-innovus-init;'
#   - .buildkite/pipelines/check_tile_width.sh Tile_MemCore --max 250 $BDIR
#   - mflowgen/bin/buildcheck.sh $BDIR/full_chip/*tile_array/*Tile_MemCore --show-all-errors
# 
# # MTILE through LVS
# # - label: 'mtile lvs 2h'
# #   commands:
# #   - $TEST --need_space 30G full_chip tile_array Tile_MemCore --steps mentor-calibre-lvs --debug
# #   - .buildkite/pipelines/check_tile_width.sh Tile_MemCore --max 250 $BDIR
# #   - mflowgen/bin/buildcheck.sh $BDIR/full_chip/*tile_array/*Tile_MemCore --show-all-errors
# 
# # ------------------------------------------------------------------------
# 
# # GTILE through init
# - label: 'gtile init 20m'
#   commands:
#   - 'source mflowgen/bin/setup-buildkite.sh $$SETUP_FLAGS;
#      echo "--- BEGIN mflowgen run";
#      mflowgen run --design $$GARNET_HOME/mflowgen/full_chip;
#      echo "--- BEGIN make init";
#      echo make glb_top-glb_tile-cadence-innovus-init;
#      echo exit 13 | make glb_top-glb_tile-cadence-innovus-init;'
#   - mflowgen/bin/buildcheck.sh $BDIR/full_chip/*glb_top/*glb_tile --show-all-errors
# 
# # GTILE through LVS
# # - label: 'gtile lvs 3h'
# #   commands:
# #   - $TEST --need_space 30G full_chip glb_top glb_tile --steps mentor-calibre-lvs --debug
# #   - mflowgen/bin/buildcheck.sh $BDIR/full_chip/*glb_top/*glb_tile --show-all-errors
# 
# # ------------------------------------------------------------------------
# 
# # GTOP through LVS
# # - label: 'gtop lvs 3h?'
# #   commands:
# #   - $TEST --need_space 30G full_chip glb_top --steps mentor-calibre-lvs --debug
# #   - mflowgen/bin/buildcheck.sh $BDIR/full_chip/*glb_top --show-all-errors
# 
# # ------------------------------------------------------------------------
# 
# # ONYX BRANCHES ONLY
# # GF branches cannot run synthesis on my machine, so do RTL only I guess
# # - label: 'RTL only 25m'
# #   commands:
# #   - 'export WHICH_SOC=onyx;
# #     $TEST --need_space 30G full_chip --steps rtl --debug'
# #   if: build.branch =~ /to-spv/ || build.branch =~ /spV/ || build.branch =~ /sms/
