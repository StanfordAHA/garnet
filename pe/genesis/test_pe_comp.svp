//; my $use_add   = parameter(Name=>'use_add', val=> 1, List=>[2, 1, 0], doc=>'0 - no adders, 1 - simple ADDs, 2 - SAD');
//; my $use_cntr  = parameter(Name=>'use_cntr', val=> 1, List=>[1, 0],  doc=>'0 - no counter mode, 1 - enable counter mode');
//; my $use_bool  = parameter(Name=>'use_bool', Val=> 1, List=>[1, 0], Doc=>"0 - no booleans, 1 - simple gates");
//; my $use_shift = parameter(Name=>'use_shift', val=> 1, List=>[1, 0], doc=>'Use shift operations');
//; my $mult_mode = parameter(Name=>'mult_mode', val=> 2, List=>[2, 1, 0], doc=>'Use MAD(2) or MULT(1) or None(0)');
//; my $use_div   = parameter(Name=>'use_div', val=> 0, List=>[1, 0],  doc=>'0 - no divide, 1 - enable iterrative divide');
//;
//; my $use_abs     = parameter(Name=>'use_abs', val=> 1, List=>[1, 0],  doc=>'0 - no ABS, 1 - enable ABS');
//; my $use_max_min = parameter(Name=>'use_max_min', val=> 1, List=>[1, 0],  doc=>'0 - no max/min, 1 - enable max/min');
//; my $use_relu    = parameter(Name=>'use_relu', val=> 1, List=>[1, 0],  doc=>'0 - no relu, 1 - enable relu');
//;
//; my $en_opt   = parameter(Name=>'en_opt', val=> 1, List=>[1, 0], doc=>'Use shifter area optimization?');
//; my $en_trick = parameter(Name=>'en_trick', val=> 0, List=>[1, 0], doc=>'Shiter sharing trick in double presition');
//;
//; my $en_ovfl = parameter(Name=>'en_ovfl', val=> 1, List=>[1, 0], doc=>'Enable overflow signals?');
//;
//;
//; my $is_msb    = parameter(Name=>'is_msb', val=> 0, List=>[1, 0], doc=>'1 - MSB in 32b mode, 0 - LSB result');
//; my $en_double = parameter(Name=>'en_double', val=> 0, List=>[1, 0], doc=>'1 - 32b supported, 0 - No 32b support');
//;
//; my $get_carry = parameter(Name=>'get_carry', val=> 1, List=>[1, 0], doc=>'1 - output carry, 0 - No carry');
//;
//; my $debug     = $self->parameter(name=>'debug', val=> 0, List=>[1, 0], doc=>'Generate extra code for debug');
//;
//; my $use_sad   = $use_add > 1;
//;
//; my $use_c_input = ($use_sad > 0) or ($mult_mode > 1);

/*
$use_add  = `$use_add `
*/

//; my $filename = "PECOMP".$self->mname();
//; open(COMPINFO, ">$filename") or die "Couldn't open file $filename, $!";
//; my $pecomp_info_hash;

module   `mname`  #(
  parameter DataWidth = 16
) (
  input [7:0]                    op_code,

  input  [DataWidth-1:0]         op_a,
//; if($en_double & $use_shift) {
  input  [DataWidth-1:0]         op_a_shift,
//;}
  input  [DataWidth-1:0]         op_b,
//; if($use_c_input) {
  input  [DataWidth-1:0]         op_c,
//;}
  input                          op_d_p,

//; if($use_add > 0) {
//;   if($en_double & $is_msb) {
  input [`$use_add -1`:0]              carry_in,
  input                         cmpr_eq_in,
//;   } elsif($en_double) {
  input                          res_p_msb,
  output logic                   cmpr_eq_out,
//;   }
//; }
//; if(($use_add > 0) & ($get_carry | ($en_double & !$is_msb))) {
  output logic [`$use_add -1`:0]             carry_out,
//;}

//; if($use_cntr) {
  //output logic [DataWidth-1:0]   cntr_next,
  output logic                   cntr_en,
//;}
//; if($use_div) {
  input        [DataWidth-1:0]   div_oper,
//;   if(!$is_msb & !$en_double) {
  input                          res_p_msb,
//;   }
//;   if(!$is_msb) {
  output logic [DataWidth-1:0]   div_co,
//;   }
//;}

  output logic [DataWidth-1:0]   res,
//; if($en_double & $mult_mode > 0) {
  output logic [2*DataWidth-1:0] mult_res,
//;}
//; if($en_ovfl) {
  output logic                   ovfl,
//;}
  output logic                   res_p
);

localparam DATA_MSB      = DataWidth - 1;

localparam PE_ADD_OP     = 6'h0;
//; $pecomp_info_hash->{ 'add' } = {
//;   opcode => '00',
//;   result => 'op_a+op_b+op_d',
//;   predicate => '(op_a+op_b+op_d) gte 2^16'
//; };

localparam PE_SUB_OP     = 6'h1;
//; $pecomp_info_hash->{ 'sub' } = {
//;   opcode => '01',
//;   result => 'op_a+~op_b+1',
//;   predicate => '(op_a+~op_b+1) gte 2^16'
//; };

//; if($use_abs) {
localparam PE_ABS_OP     = 6'h3;
//; $pecomp_info_hash->{ 'abs' } = {
//;   opcode => '03',
//;   result => '(op_a lt 0)?(0-op_a):op_a',
//;   predicate => 'op_a[15]'
//; };
//; }

localparam PE_GTE_MAX_OP = 6'h4;
//; $pecomp_info_hash->{ 'gte_max' } = {
//;   opcode => '04',
//;   result => '(op_a gte op_b)?op_a:op_b',
//;   predicate => 'op_a gte op_b'
//; };
localparam PE_LTE_MIN_OP = 6'h5;
//; $pecomp_info_hash->{ 'lte_min' } = {
//;   opcode => '05',
//;   result => '(op_a lte op_b)?op_a:op_b',
//;   predicate => 'op_a lte op_b'
//; };


localparam PE_SEL_OP     = 6'h8;
//; $pecomp_info_hash->{ 'sel' } = {
//;   opcode => '08',
//;   result => 'op_d?op_a:op_b',
//;   predicate => '(op_a+op_b) gte 2^16'
//; };

//; if($use_shift > 0) {
localparam PE_RSHFT_OP   = 6'hF;
//; $pecomp_info_hash->{ 'rshft' } = {
//;   opcode => '0f',
//;   result => 'op_a rshft op_b[3:0]',
//;   predicate => '(op_a+op_b) gte 2^16'
//; };
localparam PE_LSHFT_OP   = 6'h11;
//; $pecomp_info_hash->{ 'lshft' } = {
//;   opcode => '11',
//;   result => 'op_a lshft op_b[3:0]',
//;   predicate => '(op_a+op_b) gte 2^16'
//; };
//; }

//; if($mult_mode > 0) {
localparam PE_MULT_0_OP  = 6'hB;
//; $pecomp_info_hash->{ 'mult_0' } = {
//;   opcode => '0b',
//;   result => '(op_a*op_b)[15:0]',
//;   predicate => '(op_a*op_b+op_c) gte 2^16'
//; };
localparam PE_MULT_1_OP  = 6'hC;
//; $pecomp_info_hash->{ 'mult_1' } = {
//;   opcode => '0c',
//;   result => '(op_a*op_b)[23:8]',
//;   predicate => '(op_a*op_b+op_c) gte 2^24'
//; };
localparam PE_MULT_2_OP  = 6'hD;
//; $pecomp_info_hash->{ 'mult_2' } = {
//;   opcode => '0d',
//;   result => '(op_a*op_b)[31:16]',
//;   predicate => '0'
//; };
//;   if($use_relu){
localparam PE_RELU       = 6'hE;
//; $pecomp_info_hash->{ 'relu' } = {
//;   opcode => '0e',
//;   result => '(op_a lt 0)?(op_a*W)[31:16]:op_a',
//;   predicate => 'op_a[15]'
//; };
//;   }
//; }

//; if($use_bool) {
localparam PE_OR_OP      = 6'h12;
//; $pecomp_info_hash->{ 'or' } = {
//;   opcode => '12',
//;   result => 'op_a|op_b',
//;   predicate => '(op_a+op_b) gte 2^16'
//; };
localparam PE_AND_OP     = 6'h13;
//; $pecomp_info_hash->{ 'and' } = {
//;   opcode => '13',
//;   result => 'op_a and op_b',
//;   predicate => '(op_a+op_b) gte 2^16'
//; };
localparam PE_XOR_OP     = 6'h14;
//; $pecomp_info_hash->{ 'xor' } = {
//;   opcode => '14',
//;   result => 'op_a^op_b',
//;   predicate => '(op_a+op_b) gte 2^16'
//; };
//; }

//; if($use_cntr) {
localparam PE_CNTR_OP    = 6'h18;
//; $pecomp_info_hash->{ 'cntr' } = {
//;   opcode => '18',
//;   result => 'cnt[t]',
//;   predicate => 'tc=(op_b==tc_val)'
//; };
//; }
//; if($use_div) {
localparam PE_DIV_OP     = 6'h19;
//; $pecomp_info_hash->{ 'div' } = {
//;   opcode => '19',
//;   result => 'op_a/op_b',
//;   predicate => '(op_a+op_b) gte 2^16'
//; };
//; }
//; if(($en_double==0) &$mult_mode > 0) {
logic [2*DataWidth-1:0] mult_res;
//;}

logic [7:0]        nc_op_code;
assign             nc_op_code = op_code;


logic [DATA_MSB:0] res_w;
logic              res_p_w;

logic                 is_signed;
//logic                 dual_mode;
//; if($en_double) {
logic                 double_mode;
//; }

//;
//;
//; if($use_add > 0) {
logic                 cmpr_lte;
logic                 cmpr_gte;
logic                 cmpr_eq;

localparam NUM_ADDERS = `$use_add`;
localparam ADD_MSB = NUM_ADDERS - 1;

logic [DATA_MSB:0]  add_a     [ADD_MSB:0];
logic [DATA_MSB:0]  add_b     [ADD_MSB:0];
logic               add_c_in  [ADD_MSB:0];

wire  [DATA_MSB:0]  add_res   [ADD_MSB:0];
wire                add_c_out [ADD_MSB:0];


genvar ggg;

generate
  for(ggg=0;ggg<NUM_ADDERS;ggg=ggg+1) begin : GEN_ADD
//; my $full_add = generate_base('test_full_add', 'full_add');
  `$full_add->mname()` #(.DataWidth(DataWidth)) `$full_add->iname()`
    (
      .a     (add_a[ggg]),
      .b     (add_b[ggg]),
      .c_in  (add_c_in[ggg]),

//      .dual_mode (dual_mode),

      .res   (add_res[ggg]),
      .c_out (add_c_out[ggg])
    );

//; if($get_carry | ($en_double & !$is_msb)) {
  assign carry_out[ggg] = add_c_out[ggg];
//;}
  end

endgenerate

//; if($en_double & $is_msb) {
assign cmpr_eq   =  ~|(op_a ^ op_b) & (~double_mode | cmpr_eq_in);
//;} else {
assign cmpr_eq   =  ~|(op_a ^ op_b);
//;}



//; my $compare = generate_base('test_cmpr', 'cmpr');
`$compare->instantiate()`
(
  .a_msb     (op_a[DATA_MSB]),
  .b_msb     (op_b[DATA_MSB]),
  .diff_msb  (add_res[0][DATA_MSB]),
  .is_signed (is_signed),
  .eq        (cmpr_eq),

  .lte       (cmpr_lte),
  .gte       (cmpr_gte)
);

//; }


//; if($mult_mode > 0) {
logic                 mult_c_out;

//; my $mult = generate_base('test_mult_add', 'test_mult_add', "use_mad"=>($mult_mode-1));
`$mult->mname()` #(.DataWidth(DataWidth)) `$mult->iname()`
(
  .is_signed (is_signed),

  .a  (op_a),
  .b  (op_b),

//  .dual_mode(dual_mode),
//;if($mult_mode > 1) {
  .c  (op_c),
//;}

  .res   (mult_res),
  .c_out (mult_c_out)
);
//;}


//; if ($debug) {
//Enumeration to help with waveforms during simulation
enum {
Add_Op, Sub_Op, Abs_Op, GteMax_Op, LteMin_Op, 
Sel_Op, Rshft_Op, Lshft_Op, Mult0_Op, Mult1_Op, Mult2_Op, Relu_Op, Or_Op,
And_Op, Xor_Op, Cntr_Op, Div_Op, InvalidOp
} pe_oper;

always_comb begin
  case (op_code[5:0])
    PE_ADD_OP     : pe_oper = Add_Op;
    PE_SUB_OP     : pe_oper = Sub_Op;
    PE_ABS_OP     : pe_oper = Abs_Op;
    PE_GTE_MAX_OP : pe_oper = GteMax_Op;
    PE_LTE_MIN_OP : pe_oper = LteMin_Op;
    PE_SEL_OP     : pe_oper = Sel_Op;
    PE_RSHFT_OP   : pe_oper = Rshft_Op;
    PE_LSHFT_OP   : pe_oper = Lshft_Op;
    PE_MULT_0_OP  : pe_oper = Mult0_Op;
    PE_MULT_1_OP  : pe_oper = Mult1_Op;
    PE_MULT_2_OP  : pe_oper = Mult2_Op;
//; if($use_relu) {
    PE_RELU       : pe_oper = Relu_Op;
//; }
    PE_OR_OP      : pe_oper = Or_Op;
    PE_AND_OP     : pe_oper = And_Op;
    PE_XOR_OP     : pe_oper = Xor_Op;
//; if($use_cntr) {
    PE_CNTR_OP    : pe_oper = Cntr_Op;
//; }
//; if($use_div) {
    PE_DIV_OP     : pe_oper = Div_Op;
//; }
    default       : pe_oper = InvalidOp;
  endcase
end
//; }

//; if($use_cntr) {
  assign cntr_en = (op_code[5:0] == PE_CNTR_OP);
//;}


//; if($use_shift > 0) {
logic [DATA_MSB:0] shift_res;

//;   my $shft = generate('test_shifter', 'test_shifter', "en_double"=>$en_double, is_msb=>$is_msb, "en_opt"=>$en_opt, "en_trick"=>$en_trick);
`$shft->mname()` #(.DataWidth(DataWidth)) `$shft->iname()`
(
  .is_signed (is_signed),
//; if($en_double) {
  .double_mode (double_mode),
//;}
  .dir_left(op_code[5:0]==PE_LSHFT_OP),

  .a  (op_a),
//; if($en_double & $use_shift) {
  .a_shift (op_a_shift),
//;}
  .b   (op_b[$clog2(DataWidth)-1+`$en_double`:0]),

  .res (shift_res)
);
//;}


assign is_signed   = op_code[6];
//; if($en_double) {
assign double_mode = op_code[7];
//; }
//assign dual_mode   = op_code[8]; //Save the OP code bit for half precision support

//; if($en_double & !$is_msb) {
assign cmpr_eq_out = cmpr_eq;
//;}

//; if((($mult_mode > 0) & $use_relu) or (($use_add > 0) & $use_abs) ) {
logic diff_sign;
//;   if($en_double & $is_msb) {
assign diff_sign = add_res[0][DATA_MSB];
//;   } elsif($en_double) {
assign diff_sign = double_mode ? res_p_msb : add_res[0][DATA_MSB];
//;   } else {
assign diff_sign = add_res[0][DATA_MSB];
//;   }
//;}


//; if($en_ovfl & $use_add > 0) {
localparam DataMSB = DataWidth-1;
logic [ADD_MSB:0] ovfl_add_signed;

assign ovfl_add_signed[0] = (op_a[DataMSB] == op_b[DataMSB]) &
                            (op_a[DataMSB] != add_res[0][DataMSB]);
//;   if($use_add > 1) {
assign ovfl_add_signed[1] = (add_res[0][DataMSB] == op_c[DataMSB]) &
                            (op_c[DataMSB] != add_res[1][DataMSB]);
//;   }

logic  ovfl_sub_signed;
always_comb begin
  ovfl_sub_signed = ((op_a[DataMSB] != op_b[DataMSB]) & (op_a[DataMSB] != add_res[0][DataMSB]));
//; if($use_add > 1) {
  ovfl_sub_signed = ovfl_sub_signed | ovfl_add_signed[1];
//; }
end

//; }

always_comb begin : proc_alu
//; if($use_add > 0) {
  add_a[0] = op_a;
  add_b[0] = op_b;
  add_c_in[0] = 1'b0;

//; if($use_sad) {
  add_a[1] = add_res[0];
  add_b[1] = op_c;
  add_c_in[1] = 1'b0;
//;}

  res_w   = add_res[ADD_MSB];
  res_p_w = add_c_out[ADD_MSB];
//; } else {
  res_w   = 'hX;
  res_p_w = 'hX;
//;}

//; if($use_cntr) {
//  cntr_next   = add_res[0];
//;}
//; if($use_div & !$is_msb) {
  div_co      = {DataWidth{1'b0}};
//; }
//; if($en_ovfl) {
  ovfl = 1'b0;
//;}


  unique case (op_code[5:0])
//; if($use_add > 0) {
    PE_ADD_OP: begin
//; if($en_double & $is_msb) {
        add_c_in[0] = double_mode ? carry_in[0] : op_d_p;
//;   if($use_sad) {
        add_c_in[1] = double_mode ? carry_in[1] : 1'b0;
//;   }
//;} else {
        add_c_in[0] = op_d_p;
//;}
        res_p_w     = add_c_out[0];
//; if($use_sad) {
        res_p_w     = add_c_out[0] | add_c_out[1];
//;}
//; if($en_ovfl) {
        ovfl        = (is_signed) ? (|ovfl_add_signed) : res_p_w;
//;}
      end
    PE_SUB_OP: begin
        add_b[0]    = ~op_b;
//; if($en_double & $is_msb) {
        add_c_in[0] = double_mode ? carry_in[0] : 1'b1;
//;   if($use_sad) {
        add_c_in[1] = double_mode ? carry_in[1] : 1'b0;
//;   }
//;} else {
        add_c_in[0] = 1'b1;
//;}
//; if($en_ovfl) {
        ovfl        = (is_signed) ? ovfl_sub_signed : 1'b0;
//;}
      end
//; if($use_abs) {
    PE_ABS_OP: begin
//;   if($use_sad) {
        add_b[0]    = ~op_b;

        add_a[1]    = diff_sign ? ~add_res[0]:add_res[0];
//;     if($en_double & $is_msb) {
        add_c_in[0] = double_mode ? carry_in[0] : 1'b1;
        add_c_in[1] = double_mode ? carry_in[1] : diff_sign;
//;     } else {
        add_c_in[0] = 1'b1;
        add_c_in[1] = diff_sign;
//;     }

//; if($en_ovfl) {
        ovfl        = (add_res[0][DATA_MSB] & (~|add_res[0][DATA_MSB-1:0])) |
                      res_w[DATA_MSB];
//;}

        res_p_w     = diff_sign;
//;   } else {
        add_a[0]    = ~op_a;
        add_b[0]    = 0;
//;     if($en_double & $is_msb) {
        add_c_in[0] = double_mode ? carry_in[0] : 1'b1;
        res_p_w     = op_a[DATA_MSB];
//;     } elsif($en_double) {
        add_c_in[0] = 1'b1;
        res_p_w     = double_mode ? res_p_msb : op_a[DATA_MSB];
//;     } else {
        add_c_in[0] = 1'b1;
        res_p_w     = op_a[DATA_MSB];
//;     }

        res_w       = (diff_sign | !is_signed) ? op_a : add_res[0];
//; if($en_ovfl) {
        ovfl        = res_w[DATA_MSB];
//;}

//;   }
    end
//; }

    PE_GTE_MAX_OP: begin
        add_b[0]    = ~op_b;
//; if($en_double & $is_msb) {
        add_c_in[0] = double_mode ? carry_in[0] : 1'b1;
        res_p_w     = cmpr_gte;
//;} elsif($en_double) {
        add_c_in[0] = 1'b1;
        res_p_w     = double_mode ? res_p_msb : cmpr_gte;
//;} else {
        add_c_in[0] = 1'b1;
        res_p_w     = cmpr_gte;
//;}
//; if($use_max_min) {
        res_w       = res_p_w ? op_a : op_b;
//; }
      end
    PE_LTE_MIN_OP: begin
        add_b[0]    = ~op_b;
//; if($en_double & $is_msb) {
        add_c_in[0] = double_mode ? carry_in[0] : 1'b1;
        res_p_w     = cmpr_lte;
//;} elsif($en_double) {
        add_c_in[0] = 1'b1;
        res_p_w     = double_mode ? res_p_msb : cmpr_lte;
//;} else {
        add_c_in[0] = 1'b1;
        res_p_w     = cmpr_lte;
//;}
//; if($use_max_min) {
        res_w       = res_p_w ? op_a : op_b;
//; }
      end
      PE_SEL_OP: begin
        res_w = op_d_p ? op_a : op_b;
      end
//; }
//; if($use_shift > 0) {
    PE_RSHFT_OP: begin
        res_w = shift_res;
      end
    PE_LSHFT_OP: begin
        res_w = shift_res;
      end
//; }
//; if($mult_mode > 0) {
    PE_MULT_0_OP: begin
        res_w   = mult_res[DATA_MSB:0];
        res_p_w = mult_c_out;
//; if($en_ovfl) {
        if (is_signed) begin
          ovfl = (op_a[DATA_MSB] == op_b[DATA_MSB]) ?
                                    mult_res[DATA_MSB] :
                                    ~mult_res[DATA_MSB] & |{op_a, op_b};
        end else begin
          ovfl = |mult_res[2*DataWidth-1:DataWidth];
        end
//;}
      end
    PE_MULT_1_OP: begin
        res_w   = mult_res[3*DataWidth/2-1:DataWidth/2];
        res_p_w = mult_c_out;
//; if($en_ovfl) {
        if (is_signed) begin
          ovfl = (op_a[DATA_MSB] == op_b[DATA_MSB]) ?
                                    mult_res[DATA_MSB] :
                                    ~mult_res[DATA_MSB] & |{op_a, op_b};
        end else begin
          ovfl = |mult_res[2*DataWidth-1:3*DataWidth/2];
        end
//;}
      end
    PE_MULT_2_OP: begin
        res_w   = mult_res[2*DataWidth-1:DataWidth];
        res_p_w = mult_c_out;
//; if($en_ovfl) {
        ovfl = 1'b0;
//;}
      end

//;   if($use_relu) {
    PE_RELU: begin
        res_w   = diff_sign ? mult_res[2*DataWidth-1:DataWidth] : op_a;
        res_p_w = op_a[DATA_MSB];
      end
//;   }

//; }
//; if($use_bool) {
    PE_OR_OP: begin
        res_w = op_a | op_b;
      end
    PE_AND_OP: begin
        res_w = op_a & op_b;
      end
    PE_XOR_OP: begin
        res_w = op_a ^ op_b;
      end
//; }
//; if($use_cntr) {
    PE_CNTR_OP: begin
//; if($use_sad) {
        add_a[0]    = op_a;
//; } else {
        add_a[0]    = 'h1;
//;}
        add_b[0]    = op_b;
        add_c_in[0] = 1'b0;

        //res_w       = op_b; // Current counter value
	res_w       = add_res[0];
        //cntr_next   = add_res[0];
//; if($use_sad) {
        res_p_w     = ~|(op_b ^ op_c); // Done counting
//; } else {
        res_p_w     = ~|(op_b ^ op_a); // Done counting
//;}
      end
//; }

//; if($use_div) {
    PE_DIV_OP: begin
      add_a[0]    = div_oper;
      add_b[0]    = ~op_b;
      add_c_in[0] = 1'b1;

//; if($is_msb) {
      res_w       = ~add_res[0][DATA_MSB] ?  add_res[0] : div_oper;
      res_p_w     = add_res[0][DATA_MSB];
//;} else {
      div_co      = ~add_res[0][DATA_MSB] ? add_res[0] : div_oper;
      res_w       = {op_a[DataWidth-3:0], ~add_res[0][DATA_MSB] , ~res_p_msb} ;
//;}
      end
//; }

    default: begin
        res_w   = op_a;
        res_p_w = op_d_p;
      end
  endcase
end


assign res   = res_w;
assign res_p = res_p_w;

//;#######################################################################
//;## Generate PECOMP info
//;##
//;#######################################################################
//;foreach my $operation (sort { $pecomp_info_hash->{$a}{'opcode'} cmp $pecomp_info_hash->{$b}{'opcode'} } keys(%$pecomp_info_hash))  {
//;  my $value = $pecomp_info_hash->{$operation};
//;  print COMPINFO "            <op sel='0x$value->{'opcode'}' name='$operation'>\n";
//;  print COMPINFO "                pe_out_res=$value->{'result'}\n";
//;  print COMPINFO "                comp_res_p=$value->{'predicate'}\n";
//;  print COMPINFO "            </op> \n";
//;}
//;close COMPINFO;
endmodule
