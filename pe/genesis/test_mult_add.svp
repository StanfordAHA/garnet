//; my $use_mad = parameter(Name=>'use_mad', Val=>1, List=>[1, 0],
//;                               Doc=>"Use MAD or simple MULT");

module  `mname`  #(
  parameter DataWidth = 16
) (
  input                  is_signed,

  input  [DataWidth-1:0] a,
  input  [DataWidth-1:0] b,

//; if ($use_mad) {
  input  [DataWidth-1:0] c,
//;}

  output logic [2*DataWidth-1:0] res,
  output logic                   c_out
);

//; if ($use_mad) {
  logic signed [2*(DataWidth+1)  :0] mult_res_signed;
  logic signed [2*(DataWidth+1)-1:0] res_signed;
  logic [1:0] nc_res_signed_msb;
  assign nc_res_signed_msb = res_signed[2*(DataWidth+1)-1:2*(DataWidth+1)-2];


  logic signed [DataWidth:0] a_ext;
  logic signed [DataWidth:0] b_ext;
  logic signed [2*(DataWidth+1)-1:0] c_ext;

  assign a_ext = $signed({is_signed & a[DataWidth-1], a});
  assign b_ext = $signed({is_signed & b[DataWidth-1], b});
  assign c_ext = $signed({ {(DataWidth+1){is_signed & c[DataWidth-1]}}, c});

  assign mult_res_signed = (a_ext*b_ext)+c_ext;
  assign {c_out, res_signed} = $unsigned(mult_res_signed);

  assign res = res_signed[2*DataWidth-1:0];
//;} else {
  logic signed [2*(DataWidth+1)-1:0] res_signed;
  logic [1:0] nc_res_signed_msb;
  assign nc_res_signed_msb = res_signed[2*(DataWidth+1)-1:2*(DataWidth+1)-2];

  logic signed [DataWidth:0] a_ext;
  logic signed [DataWidth:0] b_ext;

  assign a_ext = $signed({is_signed & a[DataWidth-1], a});
  assign b_ext = $signed({is_signed & b[DataWidth-1], b});

  assign res_signed = a_ext*b_ext;

  assign res = $unsigned(res_signed[2*DataWidth-1:0]);
  assign c_out = 1'b0;
//;}

endmodule
