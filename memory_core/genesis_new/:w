//;use POSIX;
//;my $backtick = "`";
///////////////////////////////////////////////////////////////////
// CGRA memory generator
//////////////////////////////////////////////////////////////////
`$backtick`define xassert(condition, message) if(condition) begin $display(message); $finish(1); end

//; my $dwidth 	 = parameter(Name=>'dwidth', val=> 64, doc=>'bank interface width');
//; my $wwidth   = parameter(Name=>'wwidth', val=> 16, doc=>'word width');
//; my $ddepth   = parameter(Name=>'ddepth', val=> 128, doc=>'number of words in the memory');
//; my $bbanks   = parameter(Name=>'bbanks', val=> 2, doc=>'number of banks in memory');
//; 
//; my $iterator_support = parameter(Name=>'iterator_support', val=> 8, doc=>'number of supported nested iterations');
//;
//; my $numwords = int($dwidth/$wwidth);
//; my $bank_addr_width = int(ceil(log($bbanks)/log(2)));
//; my $awidth = int(ceil(log($ddepth)/log(2))) + int(ceil(log($numwords)/log(2)));
//; my $full_addr = $awidth + $bank_addr_width;

module `mname()`(

   clk,
   clk_en,
   reset,
   flush,
   wen,
   data_in,
   data_out,
   addr_in,

   doublebuffer_data_in,
   doublebuffer_cen_mem,
   doublebuffer_wen_mem,
   doublebuffer_addr_mem,
   doublebuffer_data_out,

   // configuration to control the internal state
   config_en,
   config_wr,
   config_addr,
   config_wr_data,
   config_rd_data,

   depth,
   valid

);


// =============================================
// Depth or Ping Pong In Configuration
// =============================================


// ==============================================
// I/O
// ==============================================
input wire                   clk;
input wire                   clk_en;
input wire                   reset;
input wire                   flush;
input wire                   wen;
input wire  [`$wwidth-1`:0]  data_in;
output wire [`$wwidth-1`:0]  data_out;

input wire  [`$awidth-1`:0]  addr_in; 

output wire [`$wwidth-1`:0]  doublebuffer_data_in  [`$bbanks-1`:0];
output wire [`$bbanks-1`:0]  doublebuffer_cen_mem;
output wire [`$bbanks-1`:0]  doublebuffer_wen_mem;
output wire [`$awidth-1`:0]  doublebuffer_addr_mem [`$bbanks-1`:0];
input wire  [`$wwidth-1`:0]  doublebuffer_data_out [`$bbanks-1`:0];

// Configuration
input wire                   config_en;
input wire                   config_wr;
input wire [31:0]            config_addr;
input wire [31:0]            config_wr_data;
output reg [31:0]            config_rd_data;

input wire [12:0]            depth;
output reg                   valid;

// ==============================================
// Internal
// ==============================================
wire [12:0]                  num_words_mem;
reg  [12:0]                  depth_int;

wire                    ren;
assign ren = (depth_int > 0) ? (num_words_mem >= depth_int) : 0;




//; my $fifo = generate('fifo_control', 'fifo_control', dwidth => $dwidth, ddepth => $ddepth, bbanks => $bbanks, wwidth => $wwidth );
` $fifo->instantiate()`
(
   .clk(clk),
   .clk_en(clk_en),
   .reset(reset),
   .flush(flush),
   .ren(ren),
   .wen(wen),
   .data_in(data_in),
   .data_out(fifo_data_out),
   .almost_empty(almost_empty),
   .almost_full(almost_full),
   .empty(empty),
   .full(full),

   .fifo_to_mem_data(fifo_data_in),
   .fifo_to_mem_cen(fifo_cen_mem),
   .fifo_to_mem_wen(fifo_wen_mem),
   .fifo_to_mem_addr(fifo_addr_mem),
   .mem_to_fifo_data(fifo_data_out_sel),
   .num_words_mem(num_words_mem),

   .config_en(fifo_config_en),
   .config_wr(fifo_config_wr),
   .config_addr(fifo_config_addr),
   .config_wr_data(fifo_config_wr_data),
   .config_rd_data(fifo_config_rd_data)
);

// assign wires. most of them are just pass through
// wires
assign linebuffer_data_in = fifo_data_in;
assign linebuffer_cen_mem = fifo_cen_mem;
assign linebuffer_wen_mem = fifo_wen_mem;
assign linebuffer_addr_mem = fifo_addr_mem;
assign fifo_data_out_sel = linebuffer_data_out;
assign data_out = fifo_data_out;

always @(*) begin
    if (config_en) begin
        if (config_wr) begin
            if (config_addr < 8) begin
                fifo_config_en = config_en;
                fifo_config_wr = config_wr;
                fifo_config_addr = {29'b0,config_addr[2:0]};
                fifo_config_wr_data = config_wr_data;
            end
            else begin
                // disable the fifo config
                fifo_config_en = 0;
            end
        end
        else begin
            if (config_addr < 8) begin
                config_rd_data = fifo_config_rd_data;
            end
            else begin
                // line buffer only has one state register
                config_rd_data = {19'b0 ,depth};
            end
        end
    end
end

always @(posedge clk, posedge reset) begin
    if (reset) begin
        depth_int <= 0;
//        depth <= 0;
        valid <= 0;
    end
    else begin
        depth_int <= depth;
        // write the configuration
        if (config_en) begin
            if (config_wr) begin
                if (config_addr >= 8) begin
                   // depth <= config_wr_data[`$full_addr-1`:0];
                      depth_int <= depth_int;
                end
            end
        end
        if ((num_words_mem >= depth_int) & (depth_int > 0)) begin
            valid <= 1;
        end
        else begin
            valid <= 0;
        end
    end
end

endmodule
