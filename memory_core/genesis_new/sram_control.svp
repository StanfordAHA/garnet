//;use POSIX;
//;my $backtick = "`";
///////////////////////////////////////////////////////////////////
// CGRA SRAM Controller Generator
// Author: Maxwell Strange (Keyi Zhang + Taeyoung Kong)
//////////////////////////////////////////////////////////////////
`$backtick`define xassert(condition, message) if(condition) begin $display(message); $finish(1); end

//; my $dwidth 	 = parameter(Name=>'dwidth', val=> 16, doc=>'bank interface width');
//; my $wwidth   = parameter(Name=>'wwidth', val=> 16, doc=>'word width');
//; my $ddepth   = parameter(Name=>'ddepth', val=> 512, doc=>'number of words in the memory');
//; my $numwords = int($dwidth/$wwidth);
//; my $bbanks   = parameter(Name=>'bbanks', val=> 2, doc=>'number of banks in memory');
//; my $bank_addr_width = int(ceil(log($bbanks)/log(2)));
//; my $awidth = int(ceil(log($ddepth)/log(2))) + int(ceil(log($numwords)/log(2))) + $bank_addr_width;

module `mname()`(
clk,
clk_en,
reset,
flush,

data_in,
wen,
data_out,
ren,
addr_in,

sram_to_mem_data,
sram_to_mem_cen,
sram_to_mem_wen,
sram_to_mem_addr,
mem_to_sram_data
);

input logic clk;
input logic clk_en;
input logic reset;
input logic flush;
input logic [`$wwidth - 1`:0] data_in;
input logic wen;
input logic ren;
input logic [`$wwidth-1`:0] addr_in;
input logic [`$wwidth-1`:0] mem_to_sram_data [`$bbanks-1`:0];

output logic [`$wwidth-1`:0] data_out;
output logic [`$wwidth-1`:0] sram_to_mem_data [`$bbanks-1`:0];
output logic [`$bbanks-1`:0] sram_to_mem_cen;
output logic [`$bbanks-1`:0] sram_to_mem_wen;
output logic [`($awidth-$bank_addr_width)-1`:0] sram_to_mem_addr [`$bbanks-1`:0];

logic [`$awidth-1`:0] addr;
logic [`$bbanks-1`:0] bank_seld;
logic [`$bbanks-1`:0] sram_to_mem_ren_reg;
logic [`$wwidth-1`:0] data_out_reg;


assign addr = addr_in[`$awidth-1`:0];

// ===========================
// Pass signals to actual memory module
// ===========================
//; for(my $i = 0; $i < $bbanks; $i++) {
	assign bank_seld[`$i`] = (addr[`$awidth-1`:`$awidth-$bank_addr_width`] == `$i`);
//; }
//; for(my $i = 0; $i < $bbanks; $i++) {
	assign sram_to_mem_data[`$i`] = data_in; 
//; }
//; for(my $i = 0; $i < $bbanks; $i++) {
	assign sram_to_mem_cen[`$i`] = bank_seld[`$i`] & (wen | ren);
//; }
//; for(my $i = 0; $i < $bbanks; $i++) {
	assign sram_to_mem_wen[`$i`] = bank_seld[`$i`] & wen;
//; }
//; for(my $i = 0; $i < $bbanks; $i++) {
	assign sram_to_mem_addr[`$i`] = addr[`$awidth-$bank_addr_width-1`:0];
//; }

// ===========================
// Pass the selected value to the data out
// ===========================
assign data_out = 
//; for(my $j = $bbanks-1; $j > 0; $j--) {
	sram_to_mem_ren_reg[`$j`] ? mem_to_sram_data[`$j`] :
//; }
	sram_to_mem_ren_reg[0] ? mem_to_sram_data[0] : data_out_reg;

// ===================
// Flop the ren for proper output
// ===================
always_ff @(posedge clk or posedge reset) begin
	if(reset) begin
//; for(my $i = 0; $i < $bbanks; $i++) {
		sram_to_mem_ren_reg[`$i`] <= 1'b0; //'
//; }
    data_out_reg <= 0;
	end
    // Clk gate properly
	else if(clk_en) begin
		if(flush) begin
//; for(my $i = 0; $i < $bbanks; $i++) {
			sram_to_mem_ren_reg[`$i`] <= 1'b0; //'
//; }				
      data_out_reg <= 0;
		end
		else begin
//; for(my $i = 0; $i < $bbanks; $i++) {
			sram_to_mem_ren_reg[`$i`] <=  bank_seld[`$i`] & ren;
//; }
      data_out_reg <= data_out;
		end
	end
end

endmodule
