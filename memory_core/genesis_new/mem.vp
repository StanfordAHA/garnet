///////////////////////////////////////////////////////////////////
// CGRA Memory Wrapper
// Author: Maxwell Strange
/////////////////////////////////////////////////////////////////
//;    use POSIX;
//;    my $backtick = "`";
`$backtick`define xassert(condition, message) if(condition) begin $display(message); $finish(1); end

//; my $dwidth   = parameter(Name=>'dwidth', val=> 16, doc=>'data width of instantitated memory');
//; my $ddepth   = parameter(Name=>'ddepth', val=> 512, doc=>'num words in memory');
//; my $wwidth   = parameter(Name=>'wwidth', val=> 16, doc=>'width of word');
//; my $numwords = int($dwidth/$wwidth);
//; my $awidth = int(ceil(log($ddepth)/log(2))) + int(ceil(log($numwords)/log(2)));
//; my $use_sram_stub = parameter(Name=>'use_sram_stub', val=>0, doc=>'0 for test mode (instantiate stub) 1 for normal (instantiate real sram)');

module `mname` (
  data_out, 
  data_in,
  clk,
  cen,
  wen,
  addr
);

output [`$wwidth-1`:0] data_out;
input [`$wwidth-1`:0] data_in;
input clk;
input cen;
input wen;
input [`$awidth-1`:0] addr;

//; if($use_sram_stub) {
//; my $stub = generate('sram_stub', 'sram_stub');
`$stub->instantiate()`
(
  .Q(data_out),
  .CLK(clk),
  .CEN(~cen),
  .WEN(~wen),
  .A(addr),
  .D(data_in),
  .EMA(3'd0), //'
  .EMAW(2'd0), //'
  .EMAS(1'b0), //'
  .TEN(1'b1), //'
  .BEN(1'b1), //'
  .RET1N(1'b1), //'
  .STOV(1'b0) //'
);
//; } else {

// Instance of mem module
TS1N16FFCLLSBLVTC512X16M8S m (
  // Main interface
  .CLK(clk), // Clock - 1
  .CEB(~cen), // Chip Enable (low) - 1
  .WEB(~wen), // Write Enable (low) - 1
  .A(addr), 
  .D(data_in),
  .Q(data_out),
  // Testing interface (unused)
  .RTSEL(2'b00), //'
  .WTSEL(2'b00) //'
  );

//; }


endmodule

