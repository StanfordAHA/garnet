///////////////////////////////////////////////////////////////////
// CGRA Memory Wrapper
// Author: Maxwell Strange
/////////////////////////////////////////////////////////////////
//;    use POSIX;
//;    my $backtick = "`";
`$backtick`define xassert(condition, message) if(condition) begin $display(message); $finish(1); end

//; my $dwidth   = parameter(Name=>'dwidth', val=> 64, doc=>'data width of instantitated memory');
//; my $ddepth   = parameter(Name=>'ddepth', val=> 128, doc=>'num words in memory');
//; my $wwidth   = parameter(Name=>'wwidth', val=> 16, doc=>'width of word');
//; my $numwords = int($dwidth/$wwidth);
//; my $awidth = int(ceil(log($ddepth)/log(2))) + int(ceil(log($numwords)/log(2)));

module `mname` (
  data_out, 
  data_in,
  clk,
  cen,
  wen,
  addr,
  pw_sel
);

output [`$wwidth-1`:0] data_out;
input [`$wwidth-1`:0] data_in;
input clk;
input cen;
input wen;
input [`$awidth-1`:0] addr;
input [`$numwords-1`:0] pw_sel;

wire [`$wwidth-1`: 0] const_word;
wire [`$wwidth-1`: 0] const_zero;
assign const_word = ~0;
assign const_zero = 0;

wire [`$dwidth-1`:0] sel_mask;
//wire [`$dwidth-1`:0] full_mem_out;


//assign data_out = 
// for(my $j = $numwords-1; $j > 0; $j--) {
//	pw_sel[$j] ? full_mem_out[($j+1)*$wwidth-1:$j*$wwidth] :
// }
//	full_mem_out[$wwidth-1:0];

assign sel_mask = {
//; for(my $j = $numwords-1; $j > 0; $j--) {
	(pw_sel[`$j`] ? const_word : const_zero),
//; }
	(pw_sel[0] ? const_word : const_zero)
	};


//; my $stub = generate('sram_stub', 'sram_stub');
`$stub->instantiate()`
(
  .Q(data_out),
  .CLK(clk),
  .CEN(~cen),
  .WEN(~wen),
  .A(addr),
  .D(data_in),
  .EMA(3'd0),
  .EMAW(2'd0),
  .EMAS(1'b0),
  .TEN(1'b1),
  .BEN(1'b1),
  .RET1N(1'b1),
  .STOV(1'b0)
);

/*

// Instance of mem module
TS1N16FFCLLSBLVTC128X64M4SW m (
  .CLK(clk), // Clock - 1
  .CEB(~cen), // Chip Enable (low) - 1
  .WEB(~wen), // Write Enable (low) - 1
  .A(addr), 
  .D(data_in),
  .BWEB(sel_mask),
  .Q(full_mem_out),
  .RTSEL(2'b00),
  .WTSEL(2'b00)
  );
*/


endmodule

