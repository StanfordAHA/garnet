//;use POSIX;
//;my $backtick = "`";
///////////////////////////////////////////////////////////////////
// CGRA memory generator
//////////////////////////////////////////////////////////////////
`$backtick`define xassert(condition, message) if(condition) begin $display(message); $finish(1); end

//; my $dwidth 	 = parameter(Name=>'dwidth', val=> 64, doc=>'bank interface width');
//; my $wwidth   = parameter(Name=>'wwidth', val=> 16, doc=>'word width');
//; my $ddepth   = parameter(Name=>'ddepth', val=> 128, doc=>'number of words in the memory');
//; my $bbanks   = parameter(Name=>'bbanks', val=> 2, doc=>'number of banks in memory');
//; my $numwords = int($dwidth/$wwidth); 
//; my $bank_addr_width = int(ceil(log($bbanks)/log(2)));
//; my $awidth = int(ceil(log($ddepth)/log(2))) + int(ceil(log($numwords)/log(2)));
//; my $full_addr = $awidth + $bank_addr_width;

module `mname()`(
   clk,
   clk_en,
   reset,
   flush,
   ren,
   wen,
   data_in,
   data_out,

   almost_empty,
   almost_full,
   empty,
   full,
   valid,

   fifo_to_mem_data,
   fifo_to_mem_cen,
   fifo_to_mem_wen,
   fifo_to_mem_addr,
   mem_to_fifo_data,

   num_words_mem,

   almost_count,
   circular_en,
   depth
);

input logic 	clk;
input 		clk_en;
input logic 	reset;
input logic	flush;
input logic	ren;
input logic	wen;
input logic [`$wwidth-1`:0] data_in;	
output logic [`$wwidth-1`:0] data_out;	
output logic	almost_empty;
output logic	almost_full;
output logic	empty;
output logic	full;
output logic    valid;

output logic [`$wwidth-1`:0] fifo_to_mem_data [`$bbanks-1`:0];
output logic [`$bbanks-1`:0] fifo_to_mem_cen;
output logic [`$bbanks-1`:0] fifo_to_mem_wen;
output logic [`$awidth-1`:0] fifo_to_mem_addr [`$bbanks-1`:0];
input logic  [`$wwidth-1`:0] mem_to_fifo_data [`$bbanks-1`:0];

output logic [15:0] num_words_mem;
input logic [15:0] depth;
input logic [3:0] almost_count;
input logic circular_en;

logic [15:0] almost_count_extended;

// ==========================
// Address generation
// ==========================
logic [`$full_addr-1`:0] read_addr;
logic [`$full_addr-1`:0] write_addr;

logic [`$awidth-1`:0] read_addr_mem;
logic [`$awidth-1`:0] write_addr_mem;

logic [`$bbanks-1`: 0] ren_mem;
logic [`$bbanks-1`: 0] wen_mem;
logic [`$bbanks-1`: 0] cen_mem;

logic [`$bbanks-1`:0] write_buffed;
logic [`$wwidth-1`:0] write_buff [`$bbanks-1`:0];
logic [`$awidth-1`:0] write_buff_addr [`$bbanks-1`:0];

logic [`$wwidth-1`:0] data_out_sel [`$bbanks-1`:0];

logic [`$awidth-1`:0] data_addr [`$bbanks-1`:0];

logic [15:0] next_num_words_mem;
logic init_stage;
logic read_to_write;
logic passthru;
logic [`$wwidth-1`:0] passthru_reg;
logic [`$bbanks-1`:0] wen_mem_en;
logic [`$wwidth-1`:0] data_out_reg;
logic [`$bbanks-1`:0] ren_mem_reg;
logic [`$bbanks-1`:0] same_bank;

logic empty_d1;
logic write_d1;

always_ff @(posedge clk or posedge reset) begin
    if(reset) begin
        empty_d1 <= 0;
        write_d1 <= 0;
    end
    else if(clk_en) begin
        if(flush) begin
            empty_d1 <= 0;
            write_d1 <= 0;
        end
        else begin
            empty_d1 <= empty;
            write_d1 <= wen;
        end
    end
end

assign read_addr_mem = read_addr[`$full_addr-1`:`$bank_addr_width`];
assign write_addr_mem = write_addr[`$full_addr-1`:`$bank_addr_width`];
assign almost_count_extended = {12'b0, almost_count};
assign almost_empty = (num_words_mem <= almost_count_extended);
assign almost_full = (num_words_mem >= (depth - almost_count_extended));

assign empty = (num_words_mem == 0);
assign full = (num_words_mem == depth);

//; for(my $i = 0; $i < $bbanks; $i++) {
assign same_bank[`$i`] = ren_mem[`$i`] & wen_mem[`$i`];
//; }
//; for(my $i = 0; $i < $bbanks; $i++) {
assign cen_mem[`$i`] = ren_mem[`$i`] | wen_mem_en[`$i`];
//; }

// ================
// Status signals
// ================
//; for(my $idx = $bbanks-1; $idx > 0; $idx--) {
   assign ren_mem[`$idx`] = ren & ((read_addr[`$bank_addr_width-1`:0]) == `$idx`);
//; }   
   assign ren_mem[0] = ren & ((read_addr[`$bank_addr_width-1`:0] == 0) | init_stage);

//; for(my $i = $bbanks-1; $i > 0; $i--) {
   assign wen_mem[`$i`] = wen & ((write_addr[`$bank_addr_width-1`]) == `$i`);
//; }
  assign wen_mem[0] = wen & ((write_addr[`$bank_addr_width-1`:0] == 0) | init_stage);

//; for(my $i = 0; $i < $bbanks; $i++) {
   assign wen_mem_en[`$i`] = (wen_mem[`$i`] & ~(same_bank[`$i`])) | write_buffed[`$i`];
//; }

//; for(my $i = 0; $i < $bbanks; $i++) {
   assign fifo_to_mem_data[`$i`] = write_buffed[`$i`] ? write_buff[`$i`] : data_in;
//; }
//; for(my $i = 0; $i < $bbanks; $i++) {
   assign fifo_to_mem_cen[`$i`] = cen_mem[`$i`];
//; }
//; for(my $i = 0; $i < $bbanks; $i++) {
   assign fifo_to_mem_wen[`$i`] = wen_mem_en[`$i`];
//; }
//; for(my $i = 0; $i < $bbanks; $i++) {
   assign fifo_to_mem_addr[`$i`] = data_addr[`$i`];
//; }
//; for(my $i = 0; $i < $bbanks; $i++) {
   assign data_out_sel[`$i`] = mem_to_fifo_data[`$i`];
//; }

always_ff @(posedge clk or posedge reset) begin
  if(reset) begin
    valid <= 0;
  end
  else if(clk_en) begin
    if(flush) begin
      valid <= 0;
    end
    else begin
      valid <= ren & (~empty | wen);
    end
  end
end

// =========================
// Combinational updates
// =========================
always_ff @(posedge clk or posedge reset) begin
   if(reset) begin
      num_words_mem <= 0;
   end
   else if(clk_en) begin
      if (flush) begin
         num_words_mem <= 0;
      end
      else begin
         num_words_mem <= num_words_mem + next_num_words_mem;
      end
   end
end

always_comb begin

   next_num_words_mem = 0;

   if(ren & wen) begin
      next_num_words_mem = 0;
   end
   else if(ren & ~empty) begin
      next_num_words_mem = -1;
   end
   else if(wen & ~full) begin
      next_num_words_mem = 1;
   end
end

always_comb begin

//; for(my $i = 0; $i < $bbanks; $i++) {
   data_addr[`$i`] = write_buffed[`$i`] ?
			  write_buff_addr[`$i`] :
			  (ren_mem[`$i`] ? read_addr_mem : write_addr_mem);	
//; }
   if (ren_mem_reg[0] & (~empty_d1 | write_d1)) begin
      data_out = (passthru) ? passthru_reg : data_out_sel[0];
   end
//; for(my $i = 1; $i < $bbanks; $i++) {
   else if (ren_mem_reg[`$i`] & (~empty_d1 | write_d1)) begin
      data_out = (passthru) ? passthru_reg : data_out_sel[`$i`];
   end
//; }
   else begin
      data_out = data_out_reg;
   end
end

// =======================
// State updates
// =======================
always_ff @(posedge clk or posedge reset) begin
   if(reset) begin
      read_addr <= 0;
      write_addr <= 0;
	  init_stage <= 1;
	  read_to_write <= 1;
	  data_out_reg <= 0;
      passthru <= 0;
      passthru_reg <= 0;
	//; for (my $i = 0; $i < $bbanks; $i++) {
	  write_buffed[`$i`] <= 0;
	  write_buff[`$i`] <= 0;
	  write_buff_addr[`$i`] <= 0;
	  ren_mem_reg[`$i`] <= 0;
	//; }	
   end
   else if(clk_en) begin
      if (flush) begin
         read_addr <= 0;
		 write_addr <= 0;
		 init_stage <= 1;
		 read_to_write <= 1;
		 data_out_reg <= 0;
         passthru <= 0;
         passthru_reg <= 0;
		//; for (my $i = 0; $i < $bbanks; $i++) {
		 write_buffed[`$i`] <= 0;
		 write_buff[`$i`] <= 0;
		 write_buff_addr[`$i`] <= 0;
		 ren_mem_reg[`$i`] <= 0;
		//; }	
      end	
	  else begin
	  ///
         if (same_bank[0] == 1'b1) begin
		    write_buffed[0] <= 1'b1;
			write_buff[0] <= data_in;
			write_buff_addr[0] <= write_addr_mem;
		 end
		//; for (my $i = 1; $i < $bbanks; $i++) {
		 else if (same_bank[`$i`]) begin
			write_buffed[`$i`] <= 1;
			write_buff[`$i`] <= data_in;
			write_buff_addr[`$i`] <= write_addr_mem;			
		 end
		//; }

		//; for(my $i = 0; $i < $bbanks; $i++) {
		 if (write_buffed[`$i`]) begin
			write_buffed[`$i`] <= 0;
		 end
		//; }	
			// If READ AND NO WRITE
         if (ren & ~wen) begin
            if(~empty) begin 
                passthru <= 0;
            end
			if(circular_en & ~empty) begin
			   if ((read_addr + 1) == write_addr) begin
			      // circular buffer
			      read_addr <= 0;
				  // caught up to write
				  read_to_write <= 1;
			   end
			   else begin
				  read_addr <= (read_addr + 1);
				  read_to_write <= 0;
			   end
			end
			else begin
			   if (~empty) begin				
			      read_addr <= (read_addr + 1);
				  if ((read_addr + 1) == write_addr) begin
				     read_to_write <= 1;
				  end
				  else begin
				     read_to_write <= 0;
				  end			
			   end
			end
         end
		 // If WRITE AND NO READ
		 else if (wen & ~ren) begin
            if(~full) begin
                passthru <= 0;
				write_addr <= (write_addr + 1);
				read_to_write <= 0;
            end
         end	
		 // If READ AND WRITE
		 else if (ren & wen) begin
            if(empty & (|same_bank)) begin
               passthru <= 1;
               passthru_reg <= data_in;
            end
            else begin
               passthru <= 0;
            end
			
            read_addr <= (read_addr + 1);
			write_addr <= (write_addr + 1);

	  end
         // Transition out of the init stage after a read or write
		 if (ren | wen) begin
	        init_stage <= 0;
		 end
		//; for (my $i = 0; $i < $bbanks; $i++) {
		 ren_mem_reg[`$i`] <= ren_mem[`$i`];
		//; }
		 data_out_reg <= data_out;
      end
   end
end

endmodule
