//;use POSIX;
//;my $backtick = "`";
///////////////////////////////////////////////////////////////////
// CGRA memory generator
//////////////////////////////////////////////////////////////////
`$backtick`define xassert(condition, message) if(condition) begin $display(message); $finish(1); end

//; my $dwidth 	 = parameter(Name=>'dwidth', val=> 64, doc=>'bank interface width');
//; my $wwidth   = parameter(Name=>'wwidth', val=> 16, doc=>'word width');
//; my $ddepth   = parameter(Name=>'ddepth', val=> 128, doc=>'number of words in the memory');
//; my $numwords = int($dwidth/$wwidth);
//; 
//; my $bbanks   = parameter(Name=>'bbanks', val=> 2, doc=>'number of banks in memory');
//; my $bank_addr_width = int(ceil(log($bbanks)/log(2)));
//; my $awidth = int(ceil(log($ddepth)/log(2))) + int(ceil(log($numwords)/log(2)));
//; my $full_addr = $awidth + $bank_addr_width;

module `mname()`(

   clk,
   clk_en,
   reset,
   flush,
   wen,

   stencil_width,
   depth,
   valid,
   num_words_mem,
   ren_to_fifo

);

input logic                 clk;
input logic                 clk_en;
input logic                 reset;
input logic                 flush;
input logic                 wen;

input logic [31:0]          stencil_width;
input logic [12:0]          depth;
output logic                valid;
input logic [12:0]          num_words_mem;
output logic                ren_to_fifo;

// Is this the last line in the thing? Valid_out should be gated based on the stencil
logic [31:0] vg_ctr;
logic valid_gate;
logic valid_int;
logic threshold;

assign valid_gate = (stencil_width == 0) ? 1 : vg_ctr >= (stencil_width - 1); 
assign valid_int = (num_words_mem >= (depth - 1)) & wen & (depth > 0) & threshold; 
assign valid = valid_gate & valid_int;
assign ren_to_fifo = (num_words_mem >= (depth - 1)) & wen & (depth > 0);

always @(posedge clk, posedge reset) begin
   if(reset) begin
      threshold <= 0;
   end
   else begin
      if(flush) begin
         threshold <= 0;
      end
      else if ((num_words_mem == (depth - 1)) & wen) begin
         threshold <= 1;
      end
   end
end

always @(posedge clk, posedge reset) begin
    if(reset) begin
       vg_ctr <= 0; 
    end
    else begin
        if (flush) begin
            vg_ctr <= 0;
        end
        else begin
          if(valid_int) begin
              vg_ctr <= (vg_ctr + 1) % depth;
          end
        end
    end
end 

endmodule
