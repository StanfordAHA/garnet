//;use POSIX;
//;my $backtick = "`";
///////////////////////////////////////////////////////////////////
// CGRA memory generator
//////////////////////////////////////////////////////////////////
`$backtick`define xassert(condition, message) if(condition) begin $display(message); $finish(1); end

//; my $dwidth 	 = parameter(Name=>'dwidth', val=> 64, doc=>'bank interface width');
//; my $wwidth   = parameter(Name=>'wwidth', val=> 16, doc=>'word width');
//; my $ddepth   = parameter(Name=>'ddepth', val=> 128, doc=>'number of words in the memory');
//; my $bbanks   = parameter(Name=>'bbanks', val=> 2, doc=>'number of banks in memory');
//; 
//; my $iterator_support = parameter(Name=>'iterator_support', val=> 8, doc=>'number of supported nested iterations');
//; my $dim_width = int(ceil(log($iterator_support)/log(2)));
//; my $numwords = int($dwidth/$wwidth);
//; my $bank_addr_width = int(ceil(log($bbanks)/log(2)));
//; my $awidth = int(ceil(log($ddepth)/log(2))) + int(ceil(log($numwords)/log(2)));
//; my $full_addr = $awidth + $bank_addr_width;

module `mname()`(

   clk,
   clk_en,
   reset,
   flush,
   ren,
   wen,
   data_in,
   data_out,

   doublebuffer_data_in,
   doublebuffer_cen_mem,
   doublebuffer_wen_mem,
   doublebuffer_addr_mem,
   doublebuffer_data_out,

   addr_in,

   depth,
   valid,
   switch,

   chain_en,
   chain_idx,

   read_mode,
   arbitrary_addr,
   starting_addr,
   iter_cnt,
   dimensionality,
   stride,
   range
);


// =============================================
// Depth or Ping Pong In Configuration
// =============================================
input logic       chain_en;
input logic [3:0] chain_idx;

// ==============================================
// I/O
// ==============================================
input logic                   clk;
input logic                   clk_en;
input logic                   reset;

input logic                   switch;

input logic read_mode;
input logic  arbitrary_addr;
input logic [31:0] starting_addr; 
input logic [31:0] iter_cnt;
input logic [31:0] dimensionality;
input logic [31:0] stride [`$iterator_support-1`:0];
input logic [31:0] range [`$iterator_support-1`:0];

input logic                   flush;
input logic                   wen;
input logic                   ren;
input logic  [`$wwidth-1`:0]  data_in;
output logic [`$wwidth-1`:0]  data_out;
input logic [`$wwidth-1`:0] addr_in;

output logic [`$wwidth-1`:0]  doublebuffer_data_in  [`$bbanks-1`:0];
output logic [`$bbanks-1`:0]  doublebuffer_cen_mem;
output logic [`$bbanks-1`:0]  doublebuffer_wen_mem;
output logic [`$awidth-1`:0]  doublebuffer_addr_mem [`$bbanks-1`:0];
input logic  [`$wwidth-1`:0]  doublebuffer_data_out [`$bbanks-1`:0];


input logic [12:0]            depth;
output logic                   valid;

// ==============================================
// Internal
// ==============================================
logic init_state;
logic  [12:0]                  depth_int;
logic [31:0] current_loc [`$iterator_support-1`:0];

logic [`$awidth-1`:0] addr;
assign addr = addr_in[`$awidth-1`:0];

logic ping_npong;

logic [`$wwidth-1`:0] read_addr;
logic [`$wwidth-1`:0] write_addr;

logic [31:0] dim_counter [`$iterator_support-1`:0]; 

// ==============================================
// Configuration
// ==============================================

logic                  update [`$iterator_support-1`:0];
logic  [`$wwidth-1`:0] data_out_logic;
logic [`$wwidth-1`:0] strt_addr;

assign strt_addr = starting_addr[`$wwidth`:0];

logic ren_cnt;

logic [31:0] read_cnt;

logic [`$wwidth-1`:0] firstn [1:0];
logic take_the_flop;

logic autoswitch;
logic read_done;
logic write_done;
logic write_done_d1;

assign autoswitch = (~read_mode & ~arbitrary_addr) ? write_done & (read_done | init_state) : 1'b0;

always @ (posedge clk, posedge reset) begin
    if(reset) begin
        data_out_logic <= 0;
    end
    else if(switch | autoswitch)begin
        data_out_logic <= data_out;
    end
end

always @ (posedge clk, posedge reset) begin
    if(reset) begin
        read_done <= 1'b1;
        write_done <= 1'b0;
        write_done_d1 <= 1'b0;
    end
    else if(switch | autoswitch) begin
        read_done <= 1'b0;
        write_done <= 1'b0;
        write_done_d1 <= 1'b0;
    end
    else begin
        if(write_addr == (depth - 2)) begin
            write_done <= 1'b1;
        end
        if(read_cnt == (iter_cnt - 2)) begin
            read_done <= 1'b1;
        end
        write_done_d1 <= write_done;
    end
end

logic write_gate;
assign write_gate = write_addr[`$awidth+4-1`:`$awidth`] == chain_idx;
logic next_valid;

// valid only used in chaining for db? timing is sorta irrelevant
assign next_valid = read_addr[`$awidth+4-1`:`$awidth`] == chain_idx;

always @ (posedge clk, posedge reset) begin
    if(reset) begin
        valid <= 1'b0;
    end
    else begin
        valid <= next_valid & ((~init_state) | switch | autoswitch);
    end
end


always @(*) begin

  // Data to memory is just da, n
//; for (my $idx = 0; $idx < $bbanks; $idx++) {
  doublebuffer_data_in[`$idx`] = data_in;
//; }

//; for (my $idx = 0; $idx < $bbanks; $idx++) {
  doublebuffer_cen_mem[`$idx`] = ((wen & read_mode) | ~init_state | switch | autoswitch | (ren & read_mode) | ~read_mode);
//; }
//; for (my $idx = 0; $idx < $bbanks; $idx++) {
  doublebuffer_wen_mem[`$idx`] = (ping_npong == `$idx`) & ((wen & read_mode) | (~read_mode & ~write_done_d1)) & (write_gate);
//; }
//; for (my $idx = 0; $idx < $bbanks; $idx++) {
  doublebuffer_addr_mem[`$idx`] = (ping_npong == `$idx`) ? write_addr : read_addr;
//; }
  // select proper data - 
  data_out = take_the_flop ? firstn[~ping_npong] : doublebuffer_data_out[~ping_npong];
  
  read_addr = (arbitrary_addr) ? addr :  
  //; for (my $idx = $iterator_support - 1; $idx > 0; $idx--) {
   ((`$idx` < dimensionality) ? (current_loc[`$idx`]) : 0) +
  //; }
    (current_loc[0]) + strt_addr;

  update[0] = ~init_state;
  // Update iterator when the previous one will update and flow over
//; for (my $idx = 1 ; $idx < $iterator_support; $idx++) {
  update[`$idx`] = (((dim_counter[`$idx-1`]+1) % range[`$idx-1`]) == 0) & update[`$idx-1`];
//; }
  // Innermost loop always updated

end

always @(posedge clk, posedge reset) begin
  if (reset) begin
    firstn[0] <= 0;
    firstn[1] <= 0;
  end
  else begin
    if (flush) begin
      firstn[0] <= 0;
      firstn[1] <= 0;
    end
    else begin
      if ((write_addr == strt_addr) & wen) begin
        firstn[0] <= (~ping_npong) ? data_in : firstn[0];
        firstn[1] <= (ping_npong) ? data_in : firstn[1];
      end
    end
  end
end

always @(posedge clk, posedge reset) begin
    if (reset) begin
        ren_cnt <= 0;
    end
    else begin
        if (flush) begin
            ren_cnt <= 0;
        end
        else begin
          if(take_the_flop & ren) begin
             ren_cnt <= ren_cnt + 1;
          end
       end
    end
end


always @(posedge clk, posedge reset) begin
  if (reset) begin 
  //; for (my $idx = 0; $idx < $iterator_support; $idx++) {
    dim_counter[`$idx`] <= 0;
  //; }
  //; for (my $idx = 0; $idx < $iterator_support; $idx++) {
    current_loc[`$idx`] <= 0;
  //; }
    depth_int <= 0;
    init_state <= 1'b1;
    ping_npong <= 0;
    write_addr <= 0;
    take_the_flop <= 0;
    read_cnt <= 0;
  end
  else begin
    if (flush) begin 
    //; for (my $idx = 0; $idx < $iterator_support; $idx++) {
      dim_counter[`$idx`] <= 0;
    //; }
    //; for (my $idx = 0; $idx < $iterator_support; $idx++) {
      current_loc[`$idx`] <= 0;
    //; }
    depth_int <= 0;
    init_state <= 1'b1;
    ping_npong <= 0;
    write_addr <= 0;
    take_the_flop <= 0;
    read_cnt <= 0;
    end
    else begin
      depth_int <= depth;
      // When we switch for the first time (and all times), the valid becomes 1 because good data is at the output
      // Start over write and read addr, switch buffer (ping or pong)
      // and kill counters
      if(switch | autoswitch) begin // Or if configged to trigger on depth
        ping_npong <= ~ping_npong;
        read_cnt <= 0;
        write_addr <= 0;
        init_state <= 0;
        take_the_flop <= ~arbitrary_addr;
      //; for (my $idx = 1; $idx < $iterator_support; $idx++) {
        dim_counter[`$idx`] <= 0;
      //; }
        dim_counter[0] <= 1 % range[0]; 
      //; for (my $idx = 1; $idx < $iterator_support; $idx++) {
        current_loc[`$idx`] <= 0;
      //; }
        current_loc[0] <= stride[0];
      end
      else begin
        // ===================
        // ADDRS
        // ===================
        if(take_the_flop) begin
          // If in auto mode - just turn it off
          if(~read_mode) begin
            take_the_flop <= 0;
          end
          else begin
            if(ren_cnt & ren) begin
              take_the_flop <= 0;
            end 
          end
          // If in read mode - want to kill it once we get the second ren
        end

        // Increment write_addr on wen
        if ((wen)) begin
        //if ((wen & read_mode) | (~write_done & ~read_mode)) begin
          write_addr <= (write_addr + 1); 
        end
        // Once we expect data to start spilling out, we start moving the read_addr - move is based on counters
        if (~init_state & ((~read_mode & ~read_done) | (read_mode & ((ren & ~take_the_flop) | (ren & take_the_flop & ren_cnt))))) begin
          read_cnt <= read_cnt + 1;
        //; for (my $idx = $iterator_support-1; $idx > 0; $idx--) {
          dim_counter[`$idx`] <= (update[`$idx`]) ? ((dim_counter[`$idx`] + 1) % range[`$idx`]) : dim_counter[`$idx`]; 
        //; }
          dim_counter[0] <= (dim_counter[0] + 1) % range[0]; 
        //; for (my $idx = $iterator_support-1; $idx > 0; $idx--) {
          current_loc[`$idx`] <= (update[`$idx`]) ? 
            ((((dim_counter[`$idx`] + 1) % range[`$idx`]) == 0) ? 0 : current_loc[`$idx`] + stride[`$idx`])
            : current_loc[`$idx`]; 
        //; }
          current_loc[0] <= (((dim_counter[0] + 1) % range[0]) == 0) ? 0 : current_loc[0] + stride[0]; 
        end
      end
    end
  // else
  end
// always  
end

endmodule
