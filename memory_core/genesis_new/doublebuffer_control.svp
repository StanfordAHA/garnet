//;use POSIX;
//;my $backtick = "`";
///////////////////////////////////////////////////////////////////
// CGRA memory generator
//////////////////////////////////////////////////////////////////
`$backtick`define xassert(condition, message) if(condition) begin $display(message); $finish(1); end

//; my $dwidth 	 = parameter(Name=>'dwidth', val=> 16, doc=>'bank interface width');
//; my $wwidth   = parameter(Name=>'wwidth', val=> 16, doc=>'word width');
//; my $ddepth   = parameter(Name=>'ddepth', val=> 512, doc=>'number of words in the memory');
//; my $bbanks   = parameter(Name=>'bbanks', val=> 2, doc=>'number of banks in memory');
//; 
//; my $iterator_support = parameter(Name=>'iterator_support', val=> 8, doc=>'number of supported nested iterations');
//; my $dim_width = int(ceil(log($iterator_support)/log(2)));
//; my $numwords = int($dwidth/$wwidth);
//; my $bank_addr_width = int(ceil(log($bbanks)/log(2)));
//; my $awidth = int(ceil(log($ddepth)/log(2))) + int(ceil(log($numwords)/log(2)));
//; my $full_addr = $awidth + $bank_addr_width;

module `mname()`(

  clk,
  clk_en,
  reset,
  flush,
  ren,
  wen,
  data_in,
  data_out,
  addr_in,

  doublebuffer_data_in,
  doublebuffer_cen_mem,
  doublebuffer_wen_mem,
  doublebuffer_addr_mem,
  doublebuffer_data_out,

  depth,
  valid,
  switch,

  chain_idx,

  arbitrary_addr,
  starting_addr,
  iter_cnt,
  dimensionality,
  stride,
  range,

  rate_matched,
  stencil_width
);

// =============================================
// Depth or Ping Pong In Configuration
// =============================================
input logic [3:0]  chain_idx;
input logic [15:0] stencil_width;
input logic        rate_matched;
// ==============================================
// I/O
// ==============================================
input logic        clk;
input logic        clk_en;
input logic        reset;
input logic        switch;

input logic        arbitrary_addr;
input logic [15:0] starting_addr; 
input logic [31:0] iter_cnt;
input logic [3:0]  dimensionality;

input logic [15:0] stride [`$iterator_support-1`:0];
input logic [31:0] range [`$iterator_support-1`:0];
logic       [15:0] current_loc [`$iterator_support-1`:0];

input logic                   flush;
input logic                   wen;
input logic                   ren;
input logic  [`$wwidth-1`:0]  data_in;
output logic [`$wwidth-1`:0]  data_out;
input logic  [`$wwidth-1`:0]  addr_in;

output logic [`$wwidth-1`:0]  doublebuffer_data_in  [`$bbanks-1`:0];
output logic [`$bbanks-1`:0]  doublebuffer_cen_mem;
output logic [`$bbanks-1`:0]  doublebuffer_wen_mem;
output logic [`$awidth-1`:0]  doublebuffer_addr_mem [`$bbanks-1`:0];
input logic  [`$wwidth-1`:0]  doublebuffer_data_out [`$bbanks-1`:0];

input logic  [15:0]           depth;
output logic                  valid;
logic valid_arb;
// ==============================================
// Internal
// ==============================================
logic                  init_state;
logic [`$awidth-1`:0]  addr;
logic                  ping_npong;
logic [`$wwidth-1`:0]  read_addr;
logic [`$wwidth-1`:0]  write_addr;
logic [31:0]           dim_counter [`$iterator_support-1`:0]; 
// ==============================================
// Configuration
// ==============================================
logic                  update [`$iterator_support-1`:0];
logic  [`$wwidth-1`:0] strt_addr;
logic  [31:0]          read_cnt;
logic  [`$wwidth-1`:0] firstn [1:0];
logic                  take_the_flop;
logic                  autoswitch;
logic                  read_done;
logic                  read_done_thresh;
logic                  write_done;
logic                  write_done_thresh;

logic last_line_gate;
logic read_first;
logic next_take_the_flop;
logic write_in_range;
logic read_in_range;
logic read_in_range_d1;
logic read_mux;
// =============================================

assign read_mux = (rate_matched) ? wen : ren;
assign autoswitch = ~arbitrary_addr & (write_done | write_done_thresh) & 
                                      (read_done | read_done_thresh | ~init_state) & ~(depth == 0); 
assign strt_addr = starting_addr[`$wwidth-1`:0];
assign addr = addr_in[`$awidth-1`:0];

assign last_line_gate = (stencil_width == 0) ? 1 : read_cnt >= (stencil_width - 1);

assign read_done = (read_cnt == (iter_cnt - 1)) & read_mux;
always_ff @(posedge clk or posedge reset) begin
    if(reset) begin
        read_done_thresh <= 0;
    end
    else if(clk_en) begin
        if(flush) begin
            read_done_thresh <= 0;
        end
        else begin
            if(autoswitch | switch) begin
                read_done_thresh <= 0;
            end
            else if(read_done) begin
                read_done_thresh <= 1;
            end
        end
    end
end

assign write_done = (write_addr == (depth - 1)) & wen;
always_ff @(posedge clk or posedge reset) begin
  if(reset) begin
    write_done_thresh <= 0;
  end
  else if(clk_en) begin
    if(flush) begin
      write_done_thresh <= 0;
    end
    else if(autoswitch | switch) begin
      write_done_thresh <= 0;
    end
    else begin
      if(write_done) begin
        write_done_thresh <= 1;
      end
    end
  end
end

assign write_in_range = write_addr[`$awidth+4-1`:`$awidth`] == chain_idx;
assign read_in_range = read_addr[`$awidth+4-1`:`$awidth`] == chain_idx;

assign valid = (arbitrary_addr) ? valid_arb : 
   last_line_gate & read_mux & (init_state | (depth == 0)) & read_in_range_d1 & ~read_done_thresh;

always_ff @(posedge clk or posedge reset) begin
    if(reset) begin
        valid_arb <= 0;
    end
    else if(clk_en) begin
        if(flush | switch) begin
            valid_arb <= 0;
        end
        else begin
            valid_arb <= read_in_range & read_mux & init_state; 
        end
    end
end

always_ff @(posedge clk or posedge reset) begin
    if(reset) begin
       read_in_range_d1 <= 0; 
    end
    else if(clk_en) begin
        // We can prime the thing in zero-delay mode
        // if we let the delayed range follow at all times
        if(flush) begin
            read_in_range_d1 <= strt_addr[`$awidth+4-1`:`$awidth`] == chain_idx;
        end
        else begin
            read_in_range_d1 <= read_in_range;
        end
    end
end

//; for (my $idx = 0; $idx < $bbanks; $idx++) {
assign doublebuffer_data_in[`$idx`] = data_in;
//; }
//; for (my $idx = 0; $idx < $bbanks; $idx++) {
assign doublebuffer_cen_mem[`$idx`] = (wen & (ping_npong == `$idx`)) | flush 
					| switch | autoswitch | (read_mux & (ping_npong != `$idx`));
//; }
//; for (my $idx = 0; $idx < $bbanks; $idx++) {
assign doublebuffer_wen_mem[`$idx`] = (ping_npong == `$idx`) & (wen & ~write_done_thresh) & write_in_range & ~(depth == 0);
//; }
//; for (my $idx = 0; $idx < $bbanks; $idx++) {
assign doublebuffer_addr_mem[`$idx`] = (ping_npong == `$idx`) ? write_addr[`$awidth-1`:0] : read_addr[`$awidth-1`:0];
//; }
assign data_out = (take_the_flop ? firstn[~ping_npong] : doublebuffer_data_out[~ping_npong]);

always_comb begin
  // select proper data - 
  read_addr = arbitrary_addr ? addr :  
  //; for (my $idx = $iterator_support - 1; $idx > 0; $idx--) {
   ((`$idx` < dimensionality) ? (current_loc[`$idx`]) : 0) +
  //; }
    (current_loc[0]) + strt_addr;
  update[0] = init_state | (depth == 0);
  // Update iterator when the previous one will update and flow over
//; for (my $idx = 1 ; $idx < $iterator_support; $idx++) {
  update[`$idx`] = ((dim_counter[`$idx-1`]) == (range[`$idx-1`] - 1)) & update[`$idx-1`];
//; }
end

always_ff @(posedge clk or posedge reset) begin
  if(reset) begin
    firstn[0] <= 0;
    firstn[1] <= 0;
  end
  else if(clk_en) begin
    if(flush) begin
      firstn[0] <= 0;
      firstn[1] <= 0;
    end
    else begin
      if ((write_addr == strt_addr) & wen) begin
        firstn[0] <= (~ping_npong) ? data_in : firstn[0];
        firstn[1] <= (ping_npong) ? data_in : firstn[1];
      end
    end
  end
end

assign next_take_the_flop = autoswitch ? 1 : 
                            (take_the_flop & ~(read_mux)) ? 1 :
                                                    0 ;

always_ff @(posedge clk or posedge reset) begin
    if(reset) begin
        read_first <= 1;
    end
    else if(clk_en) begin
        if(flush) begin
            read_first <= 1;
        end
        else if(take_the_flop & read_mux) begin
            read_first <= 0;
        end
    end
end


always_ff @(posedge clk or posedge reset) begin
  if(reset) begin
    take_the_flop <= 0;
  end
  else if(clk_en) begin
      if(flush) begin
         take_the_flop <= 0;
      end
      else begin
         take_the_flop <= next_take_the_flop; 
      end
  end
end

always_ff @(posedge clk or posedge reset) begin
	if(reset) begin
		init_state <= 0;
	end
	else if(clk_en) begin
		if(flush) begin
			init_state <= 0;
		end
		else if(autoswitch | switch) begin
			init_state <= 1;
		end
	end
end


always_ff @(posedge clk or posedge reset) begin
  if(reset) begin 
  //; for (my $idx = 0; $idx < $iterator_support; $idx++) {
    dim_counter[`$idx`] <= 0;
  //; }
  //; for (my $idx = 0; $idx < $iterator_support; $idx++) {
    current_loc[`$idx`] <= 0;
  //; }
    ping_npong <= 0;
    write_addr <= 0;
    read_cnt <= 0;
  end
  else if(clk_en) begin
    if(flush) begin 
    //; for (my $idx = 1; $idx < $iterator_support; $idx++) {
      dim_counter[`$idx`] <= 0;
    //; }
    //; for (my $idx = 1; $idx < $iterator_support; $idx++) {
      current_loc[`$idx`] <= 0;
    //; }
      dim_counter[0] <= (depth == 0) ? (range[0] > 1) : 0;
      current_loc[0] <= (depth == 0) ? stride[0] : 0;
      ping_npong <= 0;
      write_addr <= 0;
      read_cnt <= 0;
    end
    else begin
      // When we switch for the first time (and all times), the valid becomes 1 because good data is at the output
      // Start over write and read addr, switch buffer (ping or pong)
      if(switch | autoswitch) begin // Or if configged to trigger on depth
        ping_npong <= ~ping_npong;
        read_cnt <= 0;
        write_addr <= 0;
      //; for (my $idx = 1; $idx < $iterator_support; $idx++) {
        dim_counter[`$idx`] <= 0;
        current_loc[`$idx`] <= 0;
      //; }
        dim_counter[0] <= range[0] > 1; 
        current_loc[0] <= stride[0];
      end
      else begin
        // ===================
        // ADDRS
        // ===================
        // Increment write_addr on wen
        if(wen & ~write_done & ~write_done_thresh) begin
          write_addr <= (write_addr + 1); 
        end
        // Once we expect data to start spilling out, we start moving the read_addr - move is based on counters
        // If serving weights (depth == 0), then take the flop will never be high, so we just "skip" ahead out of init state
        if( ((init_state | (depth == 0)) & read_mux & ~read_done & ~take_the_flop & ~read_done_thresh) | (init_state & read_mux & take_the_flop) ) begin 
          read_cnt <= read_cnt + 1;
        //; for (my $idx = 0; $idx < $iterator_support; $idx++) {
          if(update[`$idx`]) begin
            if(dim_counter[`$idx`] == (range[`$idx`] - 1)) begin
              dim_counter[`$idx`] <= 0;
              current_loc[`$idx`] <= 0;
            end
            else begin
              dim_counter[`$idx`] <= dim_counter[`$idx`] + 1;
              current_loc[`$idx`] <= current_loc[`$idx`] + stride[`$idx`];
            end
          end
        //; }
        end
      end
    end
  end
end

endmodule
